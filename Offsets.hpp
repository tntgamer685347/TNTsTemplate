#pragma once
#include <cstdint>

// Auto-generated offsets for all SDK modules
// Generated from SDK_HEADERS directory

namespace Offsets {

	namespace Globals {
		namespace Epic {
			constexpr uintptr_t GNames = 0x23C0350;
			constexpr uintptr_t GObjects = 0x23C0398;
		}
		namespace Steam {
			constexpr uintptr_t GNames = 0x243C8D0;
			constexpr uintptr_t GObjects = 0x243C918;
		}

	}

	// ===== AKAUDIO MODULE =====
	namespace AkAudio {

		namespace ActorFactoryAkAmbientSound {
			constexpr uintptr_t AmbientEvent = 0x00A0;
		}

		namespace AkAmbientSound {
			constexpr uintptr_t Bitfields_0x0270 = 0x0270;  // Multiple: bAutoPlay, StopWhenOwnerIsDestroyed, bIsPlaying
			constexpr uintptr_t PlayEvent = 0x0278;
		}

		namespace AkAmbientSoundActor {
			constexpr uintptr_t PlaySoundComponent = 0x0270;
		}

		namespace AkAudioDevice {
			constexpr uintptr_t UnknownData00 = 0x0068;
			constexpr uintptr_t MaxNumMemoryPools = 0x0078;
			constexpr uintptr_t DefaultMemoryPoolKB = 0x007C;
			constexpr uintptr_t DefaultEngineMemoryPoolKB = 0x0080;
			constexpr uintptr_t WwiseBusSendBufferSamples = 0x0084;
			constexpr uintptr_t DebugRecordWwiseBusSends = 0x0088;
			constexpr uintptr_t LowMemoryThreshold = 0x008C;
			constexpr uintptr_t UnknownData01 = 0x0090;
		}

		namespace AkBusActor {
			constexpr uintptr_t SoundSource = 0x0268;
			constexpr uintptr_t TargetBusName = 0x0270;
			constexpr uintptr_t PinnedAxis = 0x0278;
		}

		namespace AkComponent {
			constexpr uintptr_t BoneName = 0x00A0;
			constexpr uintptr_t AutoPlayEvent = 0x00A8;
			constexpr uintptr_t bStopWhenOwnerDestroyed = 0x00B0;
		}

		namespace AkDevice {
			constexpr uintptr_t DynamicRangeSetting_Low_Master = 0x0060;
			constexpr uintptr_t DynamicRangeSetting_Medium_Master = 0x0068;
			constexpr uintptr_t DynamicRangeSetting_High_Master = 0x0070;
			constexpr uintptr_t DynamicRangeSetting_Low_Gameplay = 0x0078;
			constexpr uintptr_t DynamicRangeSetting_Medium_Gameplay = 0x0080;
			constexpr uintptr_t DynamicRangeSetting_High_Gameplay = 0x0088;
			constexpr uintptr_t MasterAudioBusName = 0x0090;
			constexpr uintptr_t GameplayAudioBusName = 0x0098;
		}

		namespace AkDialogueEvent {
			constexpr uintptr_t Arguments = 0x0060;
		}

		namespace AkEnvironmentVolume {
			constexpr uintptr_t Environment = 0x02A8;
		}

		namespace AkEnvironments {
			constexpr uintptr_t VfTable_FObjectDestructionSubscriber = 0x0060;
			constexpr uintptr_t LevelEnvironments = 0x0068;
			constexpr uintptr_t ActorEnvironments = 0x0078;
			constexpr uintptr_t Bitfields_0x0088 = 0x0088;  // Multiple: bLevelDirty, bActorEnvironmentDirty
		}

		namespace AkMusicAnalysis {
			constexpr uintptr_t VfTable_FTickableObject = 0x0060;
			constexpr uintptr_t BPM = 0x0068;
			constexpr uintptr_t MusicInfo = 0x0070;
			constexpr uintptr_t MusicInfoSmoothed = 0x0090;
			constexpr uintptr_t AttackSpeed = 0x00B0;
			constexpr uintptr_t ReleaseSpeed = 0x00B4;
			constexpr uintptr_t bDebugPrintMusicAnalysisValues = 0x00B8;
			constexpr uintptr_t MusicAnalysisSilentLoop = 0x00C0;
		}

		namespace AkParamGroup {
			constexpr uintptr_t VfTable_IISetParameter = 0x00A0;
			constexpr uintptr_t StoredParameters = 0x00A8;
			constexpr uintptr_t SoundSources = 0x0148;
			constexpr uintptr_t ControllerId = 0x0158;
			constexpr uintptr_t SendType = 0x015C;
			constexpr uintptr_t AttenuationType = 0x015D;
		}

		namespace AkPlaySoundComponent {
			constexpr uintptr_t VfTable_IISetParameter = 0x00A0;
			constexpr uintptr_t SoundCue = 0x00A8;
			constexpr uintptr_t Bitfields_0x00B0 = 0x00B0;  // Multiple: bAutoPlay, bKillSoundOnDetach, bWasAttached
			constexpr uintptr_t Translation = 0x00B4;
			constexpr uintptr_t Rotation = 0x00C0;
			constexpr uintptr_t ReFireDelay = 0x00CC;
			constexpr uintptr_t Receiver = 0x00D0;
			constexpr uintptr_t RestartSwitches = 0x00D8;
			constexpr uintptr_t SoundSource = 0x00E8;
			constexpr uintptr_t LastPlayTime = 0x00F0;
			constexpr uintptr_t StoredParameters = 0x00F8;
		}

		namespace AkRTPCDecayComponent {
			constexpr uintptr_t RTPC = 0x00A0;
			constexpr uintptr_t GrowValue = 0x00A8;
			constexpr uintptr_t MaxValue = 0x00AC;
			constexpr uintptr_t DecayPerSecond = 0x00B0;
			constexpr uintptr_t SoundSource = 0x00C8;
			constexpr uintptr_t CurrentValue = 0x00D0;
			constexpr uintptr_t LastAttachTime = 0x00D4;
			constexpr uintptr_t bWasAttached = 0x00D8;
		}

		namespace AkRevPhysicsSimulation {
			constexpr uintptr_t EngineGearRatio = 0x0060;
			constexpr uintptr_t EngineFriction = 0x0064;
			constexpr uintptr_t GroundFriction = 0x0068;
			constexpr uintptr_t WindResistancePerVelocity = 0x006C;
			constexpr uintptr_t UpShiftingRPM = 0x0070;
			constexpr uintptr_t DownShiftRPM = 0x0074;
			constexpr uintptr_t InfiniteGearRatioDecreaseAmount = 0x0078;
			constexpr uintptr_t ThrottleInterpolationTime = 0x007C;
			constexpr uintptr_t EngineTorque = 0x0080;
			constexpr uintptr_t BrakingForce = 0x0084;
			constexpr uintptr_t WindResistance = 0x0088;
			constexpr uintptr_t FrictionResistance = 0x008C;
			constexpr uintptr_t EngineResistance = 0x0090;
			constexpr uintptr_t NetForce = 0x0094;
		}

		namespace AkSoundBanksInfo {
			constexpr uintptr_t StreamedFileNames = 0x0060;
			constexpr uintptr_t SoundBanks = 0x0070;
			constexpr uintptr_t EventToBankMap = 0x0080;
		}

		namespace AkSoundCue {
			constexpr uintptr_t RequiredBank = 0x0060;
			constexpr uintptr_t StartEvent = 0x0068;
			constexpr uintptr_t StopEvent = 0x0078;
		}

		namespace AkSoundSource {
			constexpr uintptr_t Translation = 0x00A0;
			constexpr uintptr_t Rotation = 0x00AC;
			constexpr uintptr_t Bitfields_0x00B8 = 0x00B8;  // Multiple: bDetachOnComplete, bRegistered, bUpdateOrientation
			constexpr uintptr_t CachedParentToWorld = 0x00C0;
			constexpr uintptr_t WorldLocation = 0x0100;
			constexpr uintptr_t WorldRotation = 0x010C;
			constexpr uintptr_t Params = 0x0118;
			constexpr uintptr_t ActiveSounds = 0x0120;
			constexpr uintptr_t EnvironmentType = 0x0130;
			constexpr uintptr_t CallbackTypes = 0x0138;
			constexpr uintptr_t SoundSourceId = 0x0148;
		}

		namespace InterpTrackAkEvent {
			constexpr uintptr_t AkEvents = 0x00C8;
			constexpr uintptr_t SeekTimeSeconds = 0x00D8;
		}

		namespace InterpTrackAkRTPC {
			constexpr uintptr_t Param = 0x00E8;
		}

		namespace InterpTrackInstAkEvent {
			constexpr uintptr_t LastUpdatePosition = 0x0060;
		}

		namespace SeqAct_AkEnvironment {
			constexpr uintptr_t Environment = 0x0160;
			constexpr uintptr_t Target = 0x0180;
		}

		namespace SeqAct_AkLoadBank {
			constexpr uintptr_t Bitfields_0x0178 = 0x0178;  // Multiple: Async, bWaitingCallback
			constexpr uintptr_t Bank = 0x0180;
			constexpr uintptr_t Signal = 0x0188;
		}

		namespace SeqAct_AkPlayMusicWithCues {
			constexpr uintptr_t SoundCue = 0x0178;
			constexpr uintptr_t MusicSyncEvents = 0x0180;
		}

		namespace SeqAct_AkPlaySound {
			constexpr uintptr_t SoundCue = 0x0160;
			constexpr uintptr_t bBGMusic = 0x0168;
		}

		namespace SeqAct_AkPlaySoundAndSeek {
			constexpr uintptr_t SoundCue = 0x0160;
			constexpr uintptr_t StartLocationSeconds = 0x0168;
			constexpr uintptr_t SoundSource = 0x0170;
		}

		namespace SeqAct_AkPostEvent {
			constexpr uintptr_t PlayingIDs = 0x0178;
			constexpr uintptr_t SoundCue = 0x0188;
			constexpr uintptr_t bHasSubtitles = 0x0190;
		}

		namespace SeqAct_AkPostTrigger {
			constexpr uintptr_t Trigger = 0x0160;
		}

		namespace SeqAct_AkSetRTPCValue {
			constexpr uintptr_t Param = 0x0178;
			constexpr uintptr_t Value = 0x0188;
			constexpr uintptr_t Running = 0x018C;
		}

		namespace SeqAct_AkSetState {
			constexpr uintptr_t StateGroup = 0x0160;
			constexpr uintptr_t State = 0x0170;
		}

		namespace SeqAct_AkSetSwitch {
			constexpr uintptr_t SwitchGroup = 0x0160;
			constexpr uintptr_t Switch = 0x0170;
		}

		namespace SeqEvent_AkMusicCue {
			constexpr uintptr_t CueName = 0x0180;
		}

	}

	// ===== CORE MODULE =====
	namespace Core {

		namespace ArrayErrors {
			constexpr uintptr_t Remove_NegativeNumberOfElements = 0x0080;
			constexpr uintptr_t Remove_OutOfBounds = 0x0088;
		}

		namespace ArrayProperty {
			constexpr uintptr_t Inner = 0x00C8;
		}

		namespace AsyncTask {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: bComplete, bDisposed
			constexpr uintptr_t Error = 0x0068;
		}

		namespace AutomationTest {
			constexpr uintptr_t MaterialsCompiled = 0x0060;
			constexpr uintptr_t MaterialsFailedCompile = 0x0070;
			constexpr uintptr_t AsyncPreloadPackagesMissing = 0x0080;
			constexpr uintptr_t ScriptWarnings = 0x0090;
		}

		namespace BoolProperty {
			constexpr uintptr_t BitMask = 0x00C8;
		}

		namespace Breadcrumbs {
			constexpr uintptr_t BreadcrumbInstance = 0x0060;
		}

		namespace ByteProperty {
			constexpr uintptr_t Enum = 0x00C8;
		}

		namespace Class {
			constexpr uintptr_t UnknownData00 = 0x0190;
		}

		namespace ClassProperty {
			constexpr uintptr_t UnknownData00 = 0x00D8;
		}

		namespace ClassTupleCollection_ORS {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace ClassTuple_ORS {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace Commandlet {
			constexpr uintptr_t HelpDescription = 0x0060;
			constexpr uintptr_t HelpUsage = 0x0070;
			constexpr uintptr_t HelpWebLink = 0x0080;
			constexpr uintptr_t HelpParamNames = 0x0090;
			constexpr uintptr_t HelpParamDescriptions = 0x00A0;
			constexpr uintptr_t Bitfields_0x00B0 = 0x00B0;  // Multiple: IsServer, IsClient, IsEditor, LogToConsole, ShowErrorCount
		}

		namespace Component {
			constexpr uintptr_t TemplateOwnerClass = 0x0060;
			constexpr uintptr_t TemplateName = 0x0068;
		}

		namespace Config_ORS {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace Const {
			constexpr uintptr_t Value = 0x0070;
		}

		namespace DebugDrawer {
			constexpr uintptr_t DefaultTextColor = 0x0060;
			constexpr uintptr_t Bitfields_0x0064 = 0x0064;  // Multiple: bSilent, bPrintActorsInline
			constexpr uintptr_t Indentation = 0x0068;
			constexpr uintptr_t IndentationString = 0x0070;
			constexpr uintptr_t PrintedObjects = 0x0080;
			constexpr uintptr_t QueuedObjects = 0x0090;
			constexpr uintptr_t PrintObjectCount = 0x00A0;
		}

		namespace DelegateProperty {
			constexpr uintptr_t DelegateFunction = 0x00C8;
			constexpr uintptr_t DelegateName = 0x00D0;
		}

		namespace DelegateTracker {
			constexpr uintptr_t AsyncDelegates = 0x0060;
		}

		namespace DistributionFloat {
			constexpr uintptr_t VfTable_FCurveEdInterface = 0x0070;
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bCanBeBaked, bIsDirty
		}

		namespace DistributionVector {
			constexpr uintptr_t VfTable_FCurveEdInterface = 0x0070;
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bCanBeBaked, bIsDirty
		}

		namespace Enum {
			constexpr uintptr_t Names = 0x0070;
		}

		namespace Error {
			constexpr uintptr_t Type = 0x0060;
			constexpr uintptr_t Message = 0x0068;
			constexpr uintptr_t Code = 0x0078;
			constexpr uintptr_t RetryKey = 0x007C;
		}

		namespace ErrorList {
			constexpr uintptr_t LocalizationPackage = 0x0060;
			constexpr uintptr_t LocalizationSection = 0x0070;
		}

		namespace ErrorType {
			constexpr uintptr_t LocalizationKey = 0x0060;
		}

		namespace Exporter {
			constexpr uintptr_t UnknownData00 = 0x0060;
			constexpr uintptr_t FormatExtension = 0x0068;
			constexpr uintptr_t FormatDescription = 0x0078;
			constexpr uintptr_t UnknownData01 = 0x0088;
		}

		namespace Factory {
			constexpr uintptr_t Category = 0x0060;
			constexpr uintptr_t SupportedClass = 0x0070;
			constexpr uintptr_t ContextClass = 0x0078;
			constexpr uintptr_t Description = 0x0080;
			constexpr uintptr_t Formats = 0x0090;
			constexpr uintptr_t Bitfields_0x00A0 = 0x00A0;  // Multiple: bCreateNew, bEditAfterNew, bEditorImport, bText, bAssetNameMatchesPackageName
			constexpr uintptr_t AutoPriority = 0x00A4;
			constexpr uintptr_t ValidGameNames = 0x00A8;
		}

		namespace FeatureSystem {
			constexpr uintptr_t UnknownData00 = 0x0060;
			constexpr uintptr_t Bitfields_0x0068 = 0x0068;  // Multiple: Prime, Matchmaking, PrivateMatch, SplitscreenMatch, SplitscreenJoin, SeasonMode, Tutorial, Garage, Options, ReplaySaves, MainMenu, MidgameMenu, Party, PsyNetParty, Achievements, Stats, Leaderboards, XP, Chat, TrainingDifficulties, Spectator, CrossPlatformPrivateMatch, Lan, PlayerReporting, OnlineServices, RemoveCrossPlatformProducts
			constexpr uintptr_t Bitfields_0x006C = 0x006C;  // Multiple: ProductValidation, MapPrefs, PreMatchLobby, Challenges, AntiAddiction, TrainingEditor, VoiceChat, SplitScreen, Clubs, FilterContent, EncryptContent, EsportsCamera, OnlineXP, ClanforgeReservation, UserSettingObserver, Metrics, EOSMetrics, MusicPlaylistSelection, SpecialEvents, PlayerBannerCustomization, SecureUDP, PsyNet, OnlinePlayerStorage, LocalSaveData, CrowdV2, ChatBan, BacktraceCrashDumps, SpotifyButton
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: SeasonRewards, FaceIt, KnockOut, OnlinePlayerTitles, RestrictByRegion, FirstTimeExperience, RLBot, UserBugReport, SteamInput, ReplayFXControls, ESportsShop, MatchHistory, DynamicRangeAudioSettings, QuickPlay, NewsPanelV2, Blueprints, RocketBucks, Tritip, DiscordRichPresence, SupportACreator, CinematicIntro
			constexpr uintptr_t Bitfields_0x0074 = 0x0074;  // Multiple: TinyCrowd, CrumbTrail, XPGatedPlaylists, TradeInV2, Football, RumbleSelection, UndersizedParty, StreamerSafeAudio, FreeplayCommands, Rumble_BM, PlayerReportingV2, BlogScheduling, EOSVoice, QuickPostMatchRequeue, TrainingNavigation, TrainingManipulation, FilterByColor, Scoreboard, DynamicMapEvents, NameplateBoost, EOSGameClips, DynamicLogos, XETagging, PlayMenuV4, DemoUpgrades, QuickChatTimeStamp
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: SoccarPong, OnlineFreeplay, MatchmakingSubRegion, CrossbarSFX, RugbyIteration, ChallengesV2, PossessionExpanded, RocketPassUpgrades, PentathlonTournaments, ViralItem, ThankYouMessage
			constexpr uintptr_t UnknownData01 = 0x007C;
		}

		namespace Field {
			constexpr uintptr_t Next = 0x0060;
			constexpr uintptr_t UnknownData00 = 0x0068;
		}

		namespace Function {
			constexpr uintptr_t FunctionFlags = 0x0130;
			constexpr uintptr_t iNative = 0x0138;
			constexpr uintptr_t UnknownData00 = 0x013A;
		}

		namespace Global_ORS {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace Group_ORS {
			constexpr uintptr_t UnknownData00 = 0x0068;
		}

		namespace HelpCommandlet {
			constexpr uintptr_t UnknownData00 = 0x00B4;
		}

		namespace Instance_ORS {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace InterfaceProperty {
			constexpr uintptr_t InterfaceClass = 0x00C8;
			constexpr uintptr_t UnknownData00 = 0x00D0;
		}

		namespace Linker {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace LinkerLoad {
			constexpr uintptr_t UnknownData00 = 0x01E8;
		}

		namespace LinkerSave {
			constexpr uintptr_t UnknownData00 = 0x01E8;
		}

		namespace MapProperty {
			constexpr uintptr_t Key = 0x00C8;
			constexpr uintptr_t Value = 0x00D0;
		}

		namespace MetaData {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace Object {
			constexpr uintptr_t VfTableObject = 0x0000;
			constexpr uintptr_t HashNext = 0x0008;
			constexpr uintptr_t ObjectFlags = 0x0010;
			constexpr uintptr_t HashOuterNext = 0x0018;
			constexpr uintptr_t StateFrame = 0x0020;
			constexpr uintptr_t Linker = 0x0028;
			constexpr uintptr_t LinkerIndex = 0x0030;
			constexpr uintptr_t ObjectInternalInteger = 0x0038;
			constexpr uintptr_t NetIndex = 0x003C;
			constexpr uintptr_t Outer = 0x0040;
			constexpr uintptr_t Name = 0x0048;
			constexpr uintptr_t Class = 0x0050;
			constexpr uintptr_t ObjectArchetype = 0x0058;
		}

		namespace ObjectProperty {
			constexpr uintptr_t PropertyClass = 0x00C8;
			constexpr uintptr_t UnknownData00 = 0x00D0;
		}

		namespace ObjectProvider {
			constexpr uintptr_t VfTable_FObjectDestructionSubscriber = 0x0070;
			constexpr uintptr_t MyObjects = 0x0078;
			constexpr uintptr_t ObjectRefs = 0x0088;
			constexpr uintptr_t TreeObjects = 0x00D8;
			constexpr uintptr_t SubscribedToAdds = 0x00E8;
			constexpr uintptr_t SubscribedToRemoves = 0x00F8;
			constexpr uintptr_t SubscribedToLists = 0x0108;
			constexpr uintptr_t Injections = 0x0118;
			constexpr uintptr_t InterfaceInjections = 0x0128;
			constexpr uintptr_t PendingInjectionClasses = 0x0138;
			constexpr uintptr_t PendingCallbacks = 0x0148;
			constexpr uintptr_t bTriggeringCallbacks = 0x0158;
			constexpr uintptr_t Parent = 0x0160;
			constexpr uintptr_t Children = 0x0168;
			constexpr uintptr_t Proxies = 0x0178;
			constexpr uintptr_t PendingInjectionCallbacks = 0x0188;
		}

		namespace ObjectRedirector {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace ObjectSerializer {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace Package {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace PackageMap {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace Property {
			constexpr uintptr_t ArrayDim = 0x0070;
			constexpr uintptr_t ElementSize = 0x0074;
			constexpr uintptr_t PropertyFlags = 0x0078;
			constexpr uintptr_t UnknownData00 = 0x0080;
			constexpr uintptr_t Offset = 0x0098;
			constexpr uintptr_t UnknownData01 = 0x009C;
		}

		namespace PropertyChangeDispatcher {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace ScriptStruct {
			constexpr uintptr_t UnknownData00 = 0x0130;
		}

		namespace State {
			constexpr uintptr_t UnknownData00 = 0x0130;
		}

		namespace StringMap {
			constexpr uintptr_t Map = 0x0070;
		}

		namespace StringObjectMap {
			constexpr uintptr_t Map = 0x0070;
		}

		namespace Struct {
			constexpr uintptr_t UnknownData00 = 0x0070;
			constexpr uintptr_t SuperField = 0x0080;
			constexpr uintptr_t Children = 0x0088;
			constexpr uintptr_t PropertySize = 0x0090;
			constexpr uintptr_t UnknownData01 = 0x0094;
		}

		namespace StructProperty {
			constexpr uintptr_t Struct = 0x00C8;
		}

		namespace SubscriptionCollection_ORS {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace Subsystem {
			constexpr uintptr_t VfTable_FExec = 0x0060;
		}

		namespace System {
			constexpr uintptr_t StaleCacheDays = 0x0068;
			constexpr uintptr_t MaxStaleCacheSize = 0x006C;
			constexpr uintptr_t MaxOverallCacheSize = 0x0070;
			constexpr uintptr_t PackageSizeSoftLimit = 0x0074;
			constexpr uintptr_t AsyncIOBandwidthLimit = 0x0078;
			constexpr uintptr_t SavePath = 0x0080;
			constexpr uintptr_t CachePath = 0x0090;
			constexpr uintptr_t CacheExt = 0x00A0;
			constexpr uintptr_t Paths = 0x00B0;
			constexpr uintptr_t SeekFreePCPaths = 0x00C0;
			constexpr uintptr_t ScriptPaths = 0x00D0;
			constexpr uintptr_t FRScriptPaths = 0x00E0;
			constexpr uintptr_t CutdownPaths = 0x00F0;
			constexpr uintptr_t Suppress = 0x0100;
			constexpr uintptr_t SuppressPublic = 0x0110;
			constexpr uintptr_t Extensions = 0x0120;
			constexpr uintptr_t SeekFreePCExtensions = 0x0130;
			constexpr uintptr_t LocalizationPaths = 0x0140;
			constexpr uintptr_t TextureFileCacheExtension = 0x0150;
		}

		namespace TextBuffer {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace __AsyncTask__All_0x1 {
			constexpr uintptr_t DependentsCount = 0x0060;
			constexpr uintptr_t Parent = 0x0068;
		}

	}

	// ===== ENGINE MODULE =====
	namespace Engine {

		namespace AIController {
			constexpr uintptr_t Bitfields_0x0478 = 0x0478;  // Multiple: bAdjustFromWalls, bReverseScriptedRoute
			constexpr uintptr_t Skill = 0x047C;
			constexpr uintptr_t ScriptedMoveTarget = 0x0480;
			constexpr uintptr_t ScriptedRoute = 0x0488;
			constexpr uintptr_t ScriptedRouteIndex = 0x0490;
			constexpr uintptr_t ScriptedFocus = 0x0498;
		}

		namespace AISwitchablePylon {
			constexpr uintptr_t bOpen = 0x04A8;
		}

		namespace Actor {
			constexpr uintptr_t ActorDependantPSCs = 0x0060;
			constexpr uintptr_t Components = 0x0070;
			constexpr uintptr_t AllComponents = 0x0080;
			constexpr uintptr_t Location = 0x0090;
			constexpr uintptr_t Rotation = 0x009C;
			constexpr uintptr_t DrawScale = 0x00A8;
			constexpr uintptr_t DrawScale3D = 0x00AC;
			constexpr uintptr_t PrePivot = 0x00B8;
			constexpr uintptr_t EditorIconColor = 0x00C4;
			constexpr uintptr_t DetachFence = 0x00C8;
			constexpr uintptr_t CustomTimeDilation = 0x00CC;
			constexpr uintptr_t Physics = 0x00D0;
			constexpr uintptr_t RemoteRole = 0x00D1;
			constexpr uintptr_t Role = 0x00D2;
			constexpr uintptr_t CollisionType = 0x00D3;
			constexpr uintptr_t ReplicatedCollisionType = 0x00D4;
			constexpr uintptr_t TickGroup = 0x00D5;
			constexpr uintptr_t Owner = 0x00D8;
			constexpr uintptr_t Base = 0x00E0;
			constexpr uintptr_t Timers = 0x00E8;
			constexpr uintptr_t Bitfields_0x00F8 = 0x00F8;  // Multiple: bStatic, bHidden, bHiddenSelf, bNoDelete, bDeleteMe, bTicked, bOnlyOwnerSee, bTickIsDisabled, bWorldGeometry, bIgnoreRigidBodyPawns, bOrientOnSlope, bIgnoreEncroachers, bPushedByEncroachers, bDestroyedByInterpActor, bRouteBeginPlayEvenIfStatic, bIsMoving, bAlwaysEncroachCheck, bHasAlternateTargetLocation, bCanStepUpOn, bNetTemporary, bOnlyRelevantToOwner, bNetDirty, bAlwaysRelevant, bReplicateInstigator, bReplicateMovement, bSkipActorPropertyReplication, bUpdateSimulatedPosition, bTearOff, bOnlyDirtyReplication, bAllowFluidSurfaceInteraction, bDemoRecording, bDemoOwner
			constexpr uintptr_t Bitfields_0x00FC = 0x00FC;  // Multiple: bForceDemoRelevant, bNetInitialRotation, bReplicateRigidBodyLocation, bKillDuringLevelTransition, bExchangedRoles, bConsiderAllStaticMeshComponentsForStreaming, bDebug, bPostRenderIfNotVisible, bForceNetUpdate, bForcePacketUpdate, bPendingNetUpdate, bHardAttach, bIgnoreBaseRotation, bShadowParented, bSkipAttachedMoves, bCanBeAdheredTo, bCanBeFrictionedTo, bGameRelevant, bMovable, bShouldBaseAtStartup, bPendingDelete, bCanTeleport, bAlwaysTick, bBlocksNavigation, BlockRigidBody, bCollideWhenPlacing, bCollideActors, bCollideWorld, bCollideComplex, bBlockActors, bBlocksTeleport, bMoveIgnoresDestruction
			constexpr uintptr_t Bitfields_0x0100 = 0x0100;  // Multiple: bProjectileMoveSingleBlocking, bNoEncroachCheck, bCollideAsEncroacher, bPhysRigidBodyOutOfWorldCheck, bComponentOutsideWorld, bForceOctreeSNFilter, bForceOctreeMNFilter, bRigidBodyWasAwake, bCallRigidBodyWakeEvents, bBounce, bJustTeleported, bEnableMobileTouch, bNetInitial, bNetOwner, bHiddenEd, bEditable, bHiddenEdGroup, bHiddenEdLayer, bHiddenEdCustom, bHiddenEdTemporary, bHiddenEdLevel, bHiddenEdScene, bHiddenEdNoPhysics, bEdShouldSnap, bTempEditor, bPathColliding, bPathTemp, bScriptInitialized, bLockLocation, bForceAllowKismetModification, bDedicatedServerRelevant, bLockedFromEditorDeletion
			constexpr uintptr_t Bitfields_0x0104 = 0x0104;  // Multiple: bComponentsDirty, bUpdateComponentsIfEmpty, bDebugEffectIsRelevant
			constexpr uintptr_t SkelMeshCompTickTag = 0x0108;
			constexpr uintptr_t NetTag = 0x010C;
			constexpr uintptr_t NetUpdateTime = 0x0110;
			constexpr uintptr_t NetUpdateFrequency = 0x0114;
			constexpr uintptr_t NetPriority = 0x0118;
			constexpr uintptr_t LastNetUpdateTime = 0x011C;
			constexpr uintptr_t LastForcePacketUpdateTime = 0x0120;
			constexpr uintptr_t TimeSinceLastTick = 0x0124;
			constexpr uintptr_t Instigator = 0x0128;
			constexpr uintptr_t WorldInfo = 0x0130;
			constexpr uintptr_t LifeSpan = 0x0138;
			constexpr uintptr_t CreationTime = 0x013C;
			constexpr uintptr_t LastRenderTime = 0x0140;
			constexpr uintptr_t Tag = 0x0144;
			constexpr uintptr_t InitialState = 0x014C;
			constexpr uintptr_t Layer = 0x0154;
			constexpr uintptr_t Group = 0x015C;
			constexpr uintptr_t HiddenEditorViews = 0x0168;
			constexpr uintptr_t Touching = 0x0170;
			constexpr uintptr_t Children = 0x0180;
			constexpr uintptr_t LatentFloat = 0x0190;
			constexpr uintptr_t LatentSeqNode = 0x0198;
			constexpr uintptr_t PhysicsVolume = 0x01A0;
			constexpr uintptr_t Velocity = 0x01A8;
			constexpr uintptr_t Acceleration = 0x01B4;
			constexpr uintptr_t AngularVelocity = 0x01C0;
			constexpr uintptr_t BaseSkelComponent = 0x01D0;
			constexpr uintptr_t BaseBoneName = 0x01D8;
			constexpr uintptr_t Attached = 0x01E0;
			constexpr uintptr_t RelativeLocation = 0x01F0;
			constexpr uintptr_t RelativeRotation = 0x01FC;
			constexpr uintptr_t CollisionComponent = 0x0208;
			constexpr uintptr_t OverlapTag = 0x0210;
			constexpr uintptr_t RotationRate = 0x0214;
			constexpr uintptr_t PendingTouch = 0x0220;
			constexpr uintptr_t SupportedEvents = 0x0228;
			constexpr uintptr_t GeneratedEvents = 0x0238;
			constexpr uintptr_t LatentActions = 0x0248;
			constexpr uintptr_t IgnoredTouchClasses = 0x0258;
		}

		namespace ActorChannel {
			constexpr uintptr_t UnknownData00 = 0x00A0;
		}

		namespace ActorComponent {
			constexpr uintptr_t LocalViewers = 0x0070;
			constexpr uintptr_t BulletSceneGroup = 0x0080;
			constexpr uintptr_t Scene = 0x0088;
			constexpr uintptr_t Owner = 0x0090;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bAttached, bTickInEditor, bNeedsReattach, bNeedsUpdateTransform
			constexpr uintptr_t TickGroup = 0x009C;
		}

		namespace ActorFactory {
			constexpr uintptr_t GameplayActorClass = 0x0060;
			constexpr uintptr_t MenuName = 0x0068;
			constexpr uintptr_t MenuPriority = 0x0078;
			constexpr uintptr_t AlternateMenuPriority = 0x007C;
			constexpr uintptr_t NewActorClassName = 0x0080;
			constexpr uintptr_t NewActorClass = 0x0090;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bPlaceable, bShowInEditorQuickMenu
		}

		namespace ActorFactoryAI {
			constexpr uintptr_t ControllerClass = 0x00A0;
			constexpr uintptr_t PawnClass = 0x00A8;
			constexpr uintptr_t PawnName = 0x00B0;
			constexpr uintptr_t TeamIndex = 0x00C0;
		}

		namespace ActorFactoryActor {
			constexpr uintptr_t ActorClass = 0x00A0;
		}

		namespace ActorFactoryAmbientSound {
			constexpr uintptr_t AmbientSoundCue = 0x00A0;
		}

		namespace ActorFactoryAmbientSoundSimple {
			constexpr uintptr_t SoundNodeWave = 0x00A0;
		}

		namespace ActorFactoryApexClothing {
			constexpr uintptr_t ClothingAssets = 0x00B8;
			constexpr uintptr_t ClothingRBChannel = 0x00C8;
			constexpr uintptr_t ClothingRBCollideWithChannels = 0x00CC;
		}

		namespace ActorFactoryApexDestructible {
			constexpr uintptr_t bStartAwake = 0x00A0;
			constexpr uintptr_t RBChannel = 0x00A4;
			constexpr uintptr_t CollideWithChannels = 0x00A8;
			constexpr uintptr_t DestructibleAsset = 0x00B0;
		}

		namespace ActorFactoryArchetype {
			constexpr uintptr_t ArchetypeActor = 0x00A0;
		}

		namespace ActorFactoryCoverLink {
			constexpr uintptr_t UnknownData00 = 0x009C;
		}

		namespace ActorFactoryDecal {
			constexpr uintptr_t DecalMaterial = 0x00A0;
		}

		namespace ActorFactoryDominantDirectionalLight {
			constexpr uintptr_t UnknownData00 = 0x009C;
		}

		namespace ActorFactoryDominantDirectionalLightMovable {
			constexpr uintptr_t UnknownData00 = 0x009C;
		}

		namespace ActorFactoryDynamicSM {
			constexpr uintptr_t StaticMesh = 0x00A0;
			constexpr uintptr_t DrawScale3D = 0x00A8;
			constexpr uintptr_t Bitfields_0x00B4 = 0x00B4;  // Multiple: bNoEncroachCheck, bNotifyRigidBodyCollision, bBlockRigidBody, bUseCompartment, bCastDynamicShadow
			constexpr uintptr_t CollisionType = 0x00B8;
		}

		namespace ActorFactoryEmitter {
			constexpr uintptr_t ParticleSystem = 0x00A0;
		}

		namespace ActorFactoryFogVolumeConstantDensityInfo {
			constexpr uintptr_t SelectedMaterial = 0x00A0;
			constexpr uintptr_t bNothingSelected = 0x00A8;
		}

		namespace ActorFactoryFogVolumeLinearHalfspaceDensityInfo {
			constexpr uintptr_t UnknownData00 = 0x00AC;
		}

		namespace ActorFactoryFogVolumeSphericalDensityInfo {
			constexpr uintptr_t UnknownData00 = 0x00AC;
		}

		namespace ActorFactoryFracturedStaticMesh {
			constexpr uintptr_t FracturedStaticMesh = 0x00A0;
			constexpr uintptr_t DrawScale3D = 0x00A8;
		}

		namespace ActorFactoryInteractiveFoliage {
			constexpr uintptr_t UnknownData00 = 0x00B4;
		}

		namespace ActorFactoryLensFlare {
			constexpr uintptr_t LensFlareObject = 0x00A0;
		}

		namespace ActorFactoryLight {
			constexpr uintptr_t UnknownData00 = 0x009C;
		}

		namespace ActorFactoryMover {
			constexpr uintptr_t UnknownData00 = 0x00B9;
		}

		namespace ActorFactoryPathNode {
			constexpr uintptr_t UnknownData00 = 0x009C;
		}

		namespace ActorFactoryPhysicsAsset {
			constexpr uintptr_t PhysicsAsset = 0x00A0;
			constexpr uintptr_t SkeletalMesh = 0x00A8;
			constexpr uintptr_t Bitfields_0x00B0 = 0x00B0;  // Multiple: bStartAwake, bDamageAppliesImpulse, bNotifyRigidBodyCollision, bUseCompartment, bCastDynamicShadow
			constexpr uintptr_t InitialVelocity = 0x00B4;
			constexpr uintptr_t DrawScale3D = 0x00C0;
		}

		namespace ActorFactoryPlayerStart {
			constexpr uintptr_t UnknownData00 = 0x009C;
		}

		namespace ActorFactoryPylon {
			constexpr uintptr_t UnknownData00 = 0x009C;
		}

		namespace ActorFactoryRigidBody {
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: bStartAwake, bDamageAppliesImpulse, bLocalSpaceInitialVelocity, bEnableStayUprightSpring
			constexpr uintptr_t InitialVelocity = 0x00C4;
			constexpr uintptr_t AdditionalVelocity = 0x00D0;
			constexpr uintptr_t InitialAngularVelocity = 0x00D8;
			constexpr uintptr_t RBChannel = 0x00E0;
			constexpr uintptr_t StayUprightTorqueFactor = 0x00E4;
			constexpr uintptr_t StayUprightMaxTorque = 0x00E8;
		}

		namespace ActorFactorySkeletalMesh {
			constexpr uintptr_t SkeletalMesh = 0x00A0;
			constexpr uintptr_t AnimSet = 0x00A8;
			constexpr uintptr_t AnimSequenceName = 0x00B0;
		}

		namespace ActorFactoryStaticMesh {
			constexpr uintptr_t StaticMesh = 0x00A0;
			constexpr uintptr_t DrawScale3D = 0x00A8;
		}

		namespace ActorFactoryTrigger {
			constexpr uintptr_t UnknownData00 = 0x009C;
		}

		namespace AkBank {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: AutoLoad, GenerateDefinition
			constexpr uintptr_t LoadState = 0x0064;
		}

		namespace AkEvent {
			constexpr uintptr_t RequiredBank = 0x0060;
		}

		namespace AmbientOcclusionEffect {
			constexpr uintptr_t OcclusionColor = 0x0088;
			constexpr uintptr_t OcclusionPower = 0x0098;
			constexpr uintptr_t OcclusionScale = 0x009C;
			constexpr uintptr_t OcclusionBias = 0x00A0;
			constexpr uintptr_t MinOcclusion = 0x00A4;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: SSAO2, bAngleBasedSSAO
			constexpr uintptr_t OcclusionRadius = 0x00AC;
			constexpr uintptr_t OcclusionAttenuation = 0x00B0;
			constexpr uintptr_t OcclusionQuality = 0x00B4;
			constexpr uintptr_t OcclusionFadeoutMinDistance = 0x00B8;
			constexpr uintptr_t OcclusionFadeoutMaxDistance = 0x00BC;
			constexpr uintptr_t HaloDistanceThreshold = 0x00C0;
			constexpr uintptr_t HaloDistanceScale = 0x00C4;
			constexpr uintptr_t HaloOcclusion = 0x00C8;
			constexpr uintptr_t EdgeDistanceThreshold = 0x00CC;
			constexpr uintptr_t EdgeDistanceScale = 0x00D0;
			constexpr uintptr_t FilterDistanceScale = 0x00D4;
			constexpr uintptr_t FilterSize = 0x00D8;
			constexpr uintptr_t HistoryConvergenceTime = 0x00DC;
			constexpr uintptr_t HistoryWeightConvergenceTime = 0x00E0;
		}

		namespace AmbientSound {
			constexpr uintptr_t Bitfields_0x0270 = 0x0270;  // Multiple: bAutoPlay, bIsPlaying
			constexpr uintptr_t AudioComponent = 0x0278;
		}

		namespace AmbientSoundNonLoopingToggleable {
			constexpr uintptr_t UnknownData00 = 0x02AC;
		}

		namespace AmbientSoundSimple {
			constexpr uintptr_t AmbientProperties = 0x0280;
			constexpr uintptr_t SoundCueInstance = 0x0288;
			constexpr uintptr_t SoundNodeInstance = 0x0290;
		}

		namespace AmbientSoundSimpleSpline {
			constexpr uintptr_t EditedSlot = 0x02A0;
		}

		namespace AmbientSoundSimpleSplineNonLoop {
			constexpr uintptr_t UnknownData00 = 0x02A4;
		}

		namespace AmbientSoundSimpleToggleable {
			constexpr uintptr_t Bitfields_0x0298 = 0x0298;  // Multiple: bCurrentlyPlaying, bFadeOnToggle, bIgnoreAutoPlay
			constexpr uintptr_t FadeInDuration = 0x029C;
			constexpr uintptr_t FadeInVolumeLevel = 0x02A0;
			constexpr uintptr_t FadeOutDuration = 0x02A4;
			constexpr uintptr_t FadeOutVolumeLevel = 0x02A8;
		}

		namespace AmbientSoundSpline {
			constexpr uintptr_t DistanceBetweenPoints = 0x0280;
			constexpr uintptr_t SplineComponent = 0x0288;
			constexpr uintptr_t TestPoint = 0x0290;
		}

		namespace AmbientSoundSplineMultiCue {
			constexpr uintptr_t EditedSlot = 0x02A0;
		}

		namespace AnalyticEventsBase {
			constexpr uintptr_t Bitfields_0x0088 = 0x0088;  // Multiple: bSessionInProgress, bAutoStartSession
			constexpr uintptr_t SessionPauseThresholdSec = 0x008C;
			constexpr uintptr_t UserId = 0x0090;
		}

		namespace AnimMetaData_SkelControl {
			constexpr uintptr_t SkelControlNameList = 0x0060;
			constexpr uintptr_t bFullControlOverController = 0x0070;
			constexpr uintptr_t SkelControlName = 0x0074;
		}

		namespace AnimMetaData_SkelControlKeyFrame {
			constexpr uintptr_t KeyFrames = 0x0080;
		}

		namespace AnimNode {
			constexpr uintptr_t Bitfields_0x0090 = 0x0090;  // Multiple: bRelevant, bJustBecameRelevant, bTickDuringPausedAnims, bEditorOnly, bDisableCaching, bCallScriptEventOnInit, bCallScriptEventOnBecomeRelevant, bCallScriptEventOnCeaseRelevant
			constexpr uintptr_t NodeTickTag = 0x0094;
			constexpr uintptr_t NodeInitTag = 0x0098;
			constexpr uintptr_t NodeEndEventTick = 0x009C;
			constexpr uintptr_t TickArrayIndex = 0x00A0;
			constexpr uintptr_t NodeCachedAtomsTag = 0x00A4;
			constexpr uintptr_t NodeTotalWeight = 0x00A8;
			constexpr uintptr_t ParentNodes = 0x00B0;
			constexpr uintptr_t NodeName = 0x00C0;
			constexpr uintptr_t CachedBoneAtoms = 0x00C8;
			constexpr uintptr_t CachedNumDesiredBones = 0x00D8;
			constexpr uintptr_t CachedRootMotionDelta = 0x00E0;
			constexpr uintptr_t bCachedHasRootMotion = 0x0100;
			constexpr uintptr_t CachedCurveKeys = 0x0108;
			constexpr uintptr_t SearchTag = 0x0118;
			constexpr uintptr_t LastUpdatedAnimMorphKeys = 0x0120;
		}

		namespace AnimNodeAdditiveBlending {
			constexpr uintptr_t bPassThroughWhenNotRendered = 0x0158;
		}

		namespace AnimNodeAimOffset {
			constexpr uintptr_t Aim = 0x0148;
			constexpr uintptr_t AngleOffset = 0x0150;
			constexpr uintptr_t Bitfields_0x0158 = 0x0158;  // Multiple: bForceAimDir, bBakeFromAnimations, bPassThroughWhenNotRendered, bSynchronizeNodesInEditor
			constexpr uintptr_t PassThroughAtOrAboveLOD = 0x015C;
			constexpr uintptr_t ForcedAimDir = 0x0160;
			constexpr uintptr_t RequiredBones = 0x0168;
			constexpr uintptr_t AimCpntIndexLUT = 0x0178;
			constexpr uintptr_t TemplateNode = 0x0188;
			constexpr uintptr_t Profiles = 0x0190;
			constexpr uintptr_t CurrentProfileIndex = 0x01A0;
		}

		namespace AnimNodeBlend {
			constexpr uintptr_t Child2Weight = 0x0148;
			constexpr uintptr_t Child2WeightTarget = 0x014C;
			constexpr uintptr_t BlendTimeToGo = 0x0150;
			constexpr uintptr_t bSkipBlendWhenNotRendered = 0x0154;
		}

		namespace AnimNodeBlendBase {
			constexpr uintptr_t Children = 0x0130;
			constexpr uintptr_t bFixNumChildren = 0x0140;
			constexpr uintptr_t BlendType = 0x0144;
		}

		namespace AnimNodeBlendByBase {
			constexpr uintptr_t Type = 0x0170;
			constexpr uintptr_t ActorTag = 0x0174;
			constexpr uintptr_t ActorClass = 0x0180;
			constexpr uintptr_t BlendTime = 0x0188;
			constexpr uintptr_t CachedBase = 0x0190;
		}

		namespace AnimNodeBlendByPhysics {
			constexpr uintptr_t UnknownData00 = 0x016C;
		}

		namespace AnimNodeBlendByPosture {
			constexpr uintptr_t UnknownData00 = 0x016C;
		}

		namespace AnimNodeBlendByProperty {
			constexpr uintptr_t PropertyName = 0x0170;
			constexpr uintptr_t Bitfields_0x0178 = 0x0178;  // Multiple: bUseOwnersBase, bForceUpdate, bUseSpecificBlendTimes, bSynchronizeNodesInEditor
			constexpr uintptr_t CachedPropertyName = 0x017C;
			constexpr uintptr_t CachedFloatProperty = 0x0188;
			constexpr uintptr_t CachedBoolProperty = 0x0190;
			constexpr uintptr_t CachedByteProperty = 0x0198;
			constexpr uintptr_t CachedOwner = 0x01A0;
			constexpr uintptr_t BlendTime = 0x01A8;
			constexpr uintptr_t FloatPropMin = 0x01AC;
			constexpr uintptr_t FloatPropMax = 0x01B0;
			constexpr uintptr_t BlendToChild1Time = 0x01B4;
			constexpr uintptr_t BlendToChild2Time = 0x01B8;
		}

		namespace AnimNodeBlendBySpeed {
			constexpr uintptr_t Speed = 0x0170;
			constexpr uintptr_t LastChannel = 0x0174;
			constexpr uintptr_t BlendUpTime = 0x0178;
			constexpr uintptr_t BlendDownTime = 0x017C;
			constexpr uintptr_t BlendDownPerc = 0x0180;
			constexpr uintptr_t Constraints = 0x0188;
			constexpr uintptr_t bUseAcceleration = 0x0198;
			constexpr uintptr_t BlendUpDelay = 0x019C;
			constexpr uintptr_t BlendDownDelay = 0x01A0;
			constexpr uintptr_t BlendDelayRemaining = 0x01A4;
		}

		namespace AnimNodeBlendDirectional {
			constexpr uintptr_t DirDegreesPerSecond = 0x0148;
			constexpr uintptr_t DirAngle = 0x014C;
			constexpr uintptr_t SingleAnimAtOrAboveLOD = 0x0150;
			constexpr uintptr_t RotationOffset = 0x0154;
			constexpr uintptr_t bUseAcceleration = 0x0160;
		}

		namespace AnimNodeBlendList {
			constexpr uintptr_t TargetWeight = 0x0148;
			constexpr uintptr_t BlendTimeToGo = 0x0158;
			constexpr uintptr_t ActiveChildIndex = 0x015C;
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bPlayActiveChild, bForceChildFullWeightWhenBecomingRelevant, bSkipBlendWhenNotRendered
			constexpr uintptr_t SliderPosition = 0x0164;
			constexpr uintptr_t EditorActiveChildIndex = 0x0168;
		}

		namespace AnimNodeBlendMultiBone {
			constexpr uintptr_t BlendTargetList = 0x0148;
			constexpr uintptr_t SourceRequiredBones = 0x0158;
		}

		namespace AnimNodeBlendPerBone {
			constexpr uintptr_t bForceLocalSpaceBlend = 0x0158;
			constexpr uintptr_t BranchStartBoneName = 0x0160;
			constexpr uintptr_t Child2PerBoneWeight = 0x0170;
			constexpr uintptr_t LocalToCompReqBones = 0x0180;
		}

		namespace AnimNodeCrossfader {
			constexpr uintptr_t DefaultAnimSeqName = 0x0158;
			constexpr uintptr_t bDontBlendOutOneShot = 0x0160;
			constexpr uintptr_t PendingBlendOutTimeOneShot = 0x0164;
		}

		namespace AnimNodeFrame {
			constexpr uintptr_t SizeX = 0x0090;
			constexpr uintptr_t SizeY = 0x0094;
			constexpr uintptr_t BorderWidth = 0x0098;
			constexpr uintptr_t Bitfields_0x009C = 0x009C;  // Multiple: bDrawBox, bFilled, bTileFill
			constexpr uintptr_t BorderColor = 0x00A0;
			constexpr uintptr_t FillColor = 0x00A4;
			constexpr uintptr_t FillTexture = 0x00A8;
			constexpr uintptr_t FillMaterial = 0x00B0;
			constexpr uintptr_t ObjComment = 0x00B8;
		}

		namespace AnimNodeMirror {
			constexpr uintptr_t bEnableMirroring = 0x0148;
		}

		namespace AnimNodePlayCustomAnim {
			constexpr uintptr_t bIsPlayingCustomAnim = 0x0158;
			constexpr uintptr_t CustomPendingBlendOutTime = 0x015C;
		}

		namespace AnimNodeRandom {
			constexpr uintptr_t RandomInfo = 0x0170;
			constexpr uintptr_t PlayingSeqNode = 0x0180;
			constexpr uintptr_t PendingChildIndex = 0x0188;
			constexpr uintptr_t bPickedPendingChildIndex = 0x018C;
		}

		namespace AnimNodeScalePlayRate {
			constexpr uintptr_t ScaleByValue = 0x0148;
		}

		namespace AnimNodeScaleRateBySpeed {
			constexpr uintptr_t BaseSpeed = 0x0150;
		}

		namespace AnimNodeSequence {
			constexpr uintptr_t AnimSeqName = 0x0130;
			constexpr uintptr_t Rate = 0x0138;
			constexpr uintptr_t Bitfields_0x013C = 0x013C;  // Multiple: bPlaying, bLooping, bCauseActorAnimEnd, bCauseActorAnimPlay, bZeroRootRotation, bZeroRootTranslation, bDisableWarningWhenAnimNotFound, bNoNotifies, bForceRefposeWhenNotPlaying, bIsIssuingNotifies, bForceAlwaysSlave, bSynchronize, bReverseSync, bShowTimeLineSlider, bLoopCameraAnim, bRandomizeCameraAnimLoopStartTime, bEditorOnlyAddRefPoseToAdditiveAnimation, bCheckForFinishAnimEarly, bBlendingOut
			constexpr uintptr_t CurrentTime = 0x0140;
			constexpr uintptr_t PreviousTime = 0x0144;
			constexpr uintptr_t EndTime = 0x0148;
			constexpr uintptr_t AnimSeq = 0x0150;
			constexpr uintptr_t AnimLinkupIndex = 0x0158;
			constexpr uintptr_t NotifyWeightThreshold = 0x015C;
			constexpr uintptr_t SynchGroupName = 0x0160;
			constexpr uintptr_t SynchPosOffset = 0x0168;
			constexpr uintptr_t CameraAnim = 0x0170;
			constexpr uintptr_t ActiveCameraAnimInstance = 0x0178;
			constexpr uintptr_t CameraAnimScale = 0x0180;
			constexpr uintptr_t CameraAnimPlayRate = 0x0184;
			constexpr uintptr_t CameraAnimBlendInTime = 0x0188;
			constexpr uintptr_t CameraAnimBlendOutTime = 0x018C;
			constexpr uintptr_t RootBoneOption = 0x0190;
			constexpr uintptr_t RootRotationOption = 0x0193;
			constexpr uintptr_t MetaDataSkelControlList = 0x0198;
		}

		namespace AnimNodeSequenceBlendBase {
			constexpr uintptr_t Anims = 0x01A8;
		}

		namespace AnimNodeSequenceBlendByAim {
			constexpr uintptr_t Aim = 0x01B8;
			constexpr uintptr_t PreviousAim = 0x01C0;
			constexpr uintptr_t HorizontalRange = 0x01C8;
			constexpr uintptr_t VerticalRange = 0x01D0;
			constexpr uintptr_t AngleOffset = 0x01D8;
			constexpr uintptr_t AnimName_LU = 0x01E0;
			constexpr uintptr_t AnimName_LC = 0x01E8;
			constexpr uintptr_t AnimName_LD = 0x01F0;
			constexpr uintptr_t AnimName_CU = 0x01F8;
			constexpr uintptr_t AnimName_CC = 0x0200;
			constexpr uintptr_t AnimName_CD = 0x0208;
			constexpr uintptr_t AnimName_RU = 0x0210;
			constexpr uintptr_t AnimName_RC = 0x0218;
			constexpr uintptr_t AnimName_RD = 0x0220;
		}

		namespace AnimNodeSlot {
			constexpr uintptr_t Bitfields_0x0148 = 0x0148;  // Multiple: bIsPlayingCustomAnim, bEarlyAnimEndNotify, bSkipBlendWhenNotRendered, bAdditiveAnimationsOverrideSource, bIsBeingUsedByInterpGroup, bDontAddToAlwaysTickArray
			constexpr uintptr_t PendingBlendOutTime = 0x014C;
			constexpr uintptr_t CustomChildIndex = 0x0150;
			constexpr uintptr_t TargetChildIndex = 0x0154;
			constexpr uintptr_t TargetWeight = 0x0158;
			constexpr uintptr_t BlendTimeToGo = 0x0168;
		}

		namespace AnimNodeSynch {
			constexpr uintptr_t Groups = 0x0148;
		}

		namespace AnimNode_MultiBlendPerBone {
			constexpr uintptr_t PawnOwner = 0x0148;
			constexpr uintptr_t MaskList = 0x0150;
			constexpr uintptr_t RotationBlendType = 0x0160;
		}

		namespace AnimNotify {
			constexpr uintptr_t NotifyColor = 0x0060;
		}

		namespace AnimNotify_AkEvent {
			constexpr uintptr_t AkEvent = 0x0068;
			constexpr uintptr_t bFollowActor = 0x0070;
			constexpr uintptr_t BoneName = 0x0074;
		}

		namespace AnimNotify_CameraEffect {
			constexpr uintptr_t CameraLensEffect = 0x0068;
		}

		namespace AnimNotify_ClothingMaxDistanceScale {
			constexpr uintptr_t StartScale = 0x0068;
			constexpr uintptr_t EndScale = 0x006C;
			constexpr uintptr_t ScaleMode = 0x0070;
			constexpr uintptr_t Duration = 0x0074;
		}

		namespace AnimNotify_Footstep {
			constexpr uintptr_t FootDown = 0x0068;
		}

		namespace AnimNotify_ForceField {
			constexpr uintptr_t ForceFieldComponent = 0x0068;
			constexpr uintptr_t bAttach = 0x0070;
			constexpr uintptr_t SocketName = 0x0074;
			constexpr uintptr_t BoneName = 0x007C;
		}

		namespace AnimNotify_Kismet {
			constexpr uintptr_t NotifyName = 0x0068;
		}

		namespace AnimNotify_PawnMaterialParam {
			constexpr uintptr_t ScalarParameterInterpArray = 0x0068;
		}

		namespace AnimNotify_PlayFaceFXAnim {
			constexpr uintptr_t FaceFXAnimSetRef = 0x0068;
			constexpr uintptr_t GroupName = 0x0070;
			constexpr uintptr_t AnimName = 0x0080;
			constexpr uintptr_t SoundCueToPlay = 0x0090;
			constexpr uintptr_t AkEventToPlay = 0x0098;
			constexpr uintptr_t bOverridePlayingAnim = 0x00A0;
			constexpr uintptr_t PlayFrequency = 0x00A4;
		}

		namespace AnimNotify_PlayParticleEffect {
			constexpr uintptr_t PSTemplate = 0x0068;
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bIsExtremeContent, bAttach, bPreview, bSkipIfOwnerIsHidden
			constexpr uintptr_t PSNonExtremeContentTemplate = 0x0078;
			constexpr uintptr_t SocketName = 0x0080;
			constexpr uintptr_t BoneName = 0x0088;
			constexpr uintptr_t BoneSocketModuleActorName = 0x0090;
		}

		namespace AnimNotify_Rumble {
			constexpr uintptr_t PredefinedWaveForm = 0x0068;
			constexpr uintptr_t WaveForm = 0x0070;
			constexpr uintptr_t bCheckForBasedPlayer = 0x0078;
			constexpr uintptr_t EffectRadius = 0x007C;
		}

		namespace AnimNotify_Script {
			constexpr uintptr_t NotifyName = 0x0068;
			constexpr uintptr_t NotifyTickName = 0x0070;
			constexpr uintptr_t NotifyEndName = 0x0078;
		}

		namespace AnimNotify_Scripted {
			constexpr uintptr_t UnknownData00 = 0x0064;
		}

		namespace AnimNotify_Sound {
			constexpr uintptr_t SoundCue = 0x0068;
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bFollowActor, bIgnoreIfActorHidden
			constexpr uintptr_t BoneName = 0x0074;
			constexpr uintptr_t PercentToPlay = 0x007C;
			constexpr uintptr_t VolumeMultiplier = 0x0080;
			constexpr uintptr_t PitchMultiplier = 0x0084;
		}

		namespace AnimNotify_Trails {
			constexpr uintptr_t PSTemplate = 0x0068;
			constexpr uintptr_t SampledSkeletalMesh = 0x0070;
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bIsExtremeContent, bPreview, bPreviewForceExplicit, bSkipIfOwnerIsHidden, bResampleRequired
			constexpr uintptr_t FirstEdgeSocketName = 0x007C;
			constexpr uintptr_t ControlPointSocketName = 0x0084;
			constexpr uintptr_t SecondEdgeSocketName = 0x008C;
			constexpr uintptr_t LastStartTime = 0x0094;
			constexpr uintptr_t EndTime = 0x0098;
			constexpr uintptr_t SampleTimeStep = 0x009C;
			constexpr uintptr_t TrailSampleData = 0x00A0;
			constexpr uintptr_t SamplesPerSecond = 0x00B0;
			constexpr uintptr_t TrailSampledData = 0x00B8;
			constexpr uintptr_t CurrentTime = 0x00C8;
			constexpr uintptr_t TimeStep = 0x00CC;
			constexpr uintptr_t AnimNodeSeq = 0x00D0;
		}

		namespace AnimNotify_ViewShake {
			constexpr uintptr_t Duration = 0x0068;
			constexpr uintptr_t RotAmplitude = 0x006C;
			constexpr uintptr_t RotFrequency = 0x0078;
			constexpr uintptr_t LocAmplitude = 0x0084;
			constexpr uintptr_t LocFrequency = 0x0090;
			constexpr uintptr_t FOVAmplitude = 0x009C;
			constexpr uintptr_t FOVFrequency = 0x00A0;
			constexpr uintptr_t Bitfields_0x00A4 = 0x00A4;  // Multiple: bDoControllerVibration, bUseBoneLocation
			constexpr uintptr_t ShakeRadius = 0x00A8;
			constexpr uintptr_t BoneName = 0x00AC;
			constexpr uintptr_t ShakeParams = 0x00B8;
		}

		namespace AnimObject {
			constexpr uintptr_t DrawWidth = 0x0060;
			constexpr uintptr_t DrawHeight = 0x0064;
			constexpr uintptr_t NodePosX = 0x0068;
			constexpr uintptr_t NodePosY = 0x006C;
			constexpr uintptr_t OutDrawY = 0x0070;
			constexpr uintptr_t CategoryDesc = 0x0078;
			constexpr uintptr_t SkelComponent = 0x0088;
		}

		namespace AnimSequence {
			constexpr uintptr_t SequenceName = 0x0060;
			constexpr uintptr_t Notifies = 0x0068;
			constexpr uintptr_t MetaData = 0x0078;
			constexpr uintptr_t BoneControlModifiers = 0x0088;
			constexpr uintptr_t SequenceLength = 0x0098;
			constexpr uintptr_t NumFrames = 0x009C;
			constexpr uintptr_t RateScale = 0x00A0;
			constexpr uintptr_t Bitfields_0x00A4 = 0x00A4;  // Multiple: bNoLoopingInterpolation, bIsAdditive, bAdditiveBuiltLooping, bDoNotOverrideCompression, bHasBeenUsed, bWasCompressedWithoutTranslations
			constexpr uintptr_t RawAnimData = 0x00A8;
			constexpr uintptr_t RawAnimationData = 0x00B8;
			constexpr uintptr_t TranslationData = 0x00C8;
			constexpr uintptr_t RotationData = 0x00D8;
			constexpr uintptr_t CurveData = 0x00E8;
			constexpr uintptr_t CompressionScheme = 0x00F8;
			constexpr uintptr_t TranslationCompressionFormat = 0x0100;
			constexpr uintptr_t RotationCompressionFormat = 0x0101;
			constexpr uintptr_t KeyEncodingFormat = 0x0102;
			constexpr uintptr_t CompressedTrackOffsets = 0x0108;
			constexpr uintptr_t CompressedByteStream = 0x0118;
			constexpr uintptr_t TranslationCodec = 0x0128;
			constexpr uintptr_t RotationCodec = 0x0130;
			constexpr uintptr_t AdditiveRefPose = 0x0138;
			constexpr uintptr_t AdditiveBasePose = 0x0148;
			constexpr uintptr_t AdditiveRefName = 0x0158;
			constexpr uintptr_t AdditiveBasePoseAnimSeq = 0x0160;
			constexpr uintptr_t AdditiveTargetPoseAnimSeq = 0x0170;
			constexpr uintptr_t RelatedAdditiveAnimSeqs = 0x0180;
			constexpr uintptr_t EncodingPkgVersion = 0x0190;
			constexpr uintptr_t CompressCommandletVersion = 0x0194;
			constexpr uintptr_t UseScore = 0x0198;
		}

		namespace AnimSet {
			constexpr uintptr_t bAnimRotationOnly = 0x0060;
			constexpr uintptr_t TrackBoneNames = 0x0068;
			constexpr uintptr_t Sequences = 0x0078;
			constexpr uintptr_t UnknownData00 = 0x0088;
			constexpr uintptr_t LinkupCache = 0x00D8;
			constexpr uintptr_t UnknownData01 = 0x00E8;
			constexpr uintptr_t BoneUseAnimTranslation = 0x0138;
			constexpr uintptr_t ForceUseMeshTranslation = 0x0148;
			constexpr uintptr_t UseTranslationBoneNames = 0x0158;
			constexpr uintptr_t ForceMeshTranslationBoneNames = 0x0168;
			constexpr uintptr_t PreviewSkelMeshName = 0x0178;
			constexpr uintptr_t BestRatioSkelMeshName = 0x0180;
		}

		namespace AnimTree {
			constexpr uintptr_t AnimTreeTemplate = 0x0148;
			constexpr uintptr_t Bitfields_0x0150 = 0x0150;  // Multiple: bEnablePooling, bUseSavedPose, bBeingEdited, bParentNodeArrayBuilt, bRebuildAnimTickArray
			constexpr uintptr_t AnimGroups = 0x0158;
			constexpr uintptr_t PrioritizedSkelBranches = 0x0168;
			constexpr uintptr_t ComposePrePassBoneNames = 0x0178;
			constexpr uintptr_t ComposePostPassBoneNames = 0x0188;
			constexpr uintptr_t RootMorphNodes = 0x0198;
			constexpr uintptr_t SkelControlLists = 0x01A8;
			constexpr uintptr_t SavedPose = 0x01B8;
			constexpr uintptr_t MorphConnDrawY = 0x01C8;
			constexpr uintptr_t PreviewPlayRate = 0x01CC;
			constexpr uintptr_t PreviewSkelMesh = 0x01D0;
			constexpr uintptr_t SocketSkelMesh = 0x01D8;
			constexpr uintptr_t SocketStaticMesh = 0x01E0;
			constexpr uintptr_t SocketName = 0x01E8;
			constexpr uintptr_t PreviewAnimSets = 0x01F0;
			constexpr uintptr_t PreviewMorphSets = 0x0200;
			constexpr uintptr_t PreviewMeshList = 0x0210;
			constexpr uintptr_t PreviewMeshIndex = 0x0220;
			constexpr uintptr_t PreviewSocketList = 0x0228;
			constexpr uintptr_t PreviewSocketIndex = 0x0238;
			constexpr uintptr_t PreviewAnimSetList = 0x0240;
			constexpr uintptr_t PreviewAnimSetListIndex = 0x0250;
			constexpr uintptr_t PreviewAnimSetIndex = 0x0254;
			constexpr uintptr_t PreviewCamPos = 0x0258;
			constexpr uintptr_t PreviewCamRot = 0x0264;
			constexpr uintptr_t PreviewFloorPos = 0x0270;
			constexpr uintptr_t PreviewFloorYaw = 0x027C;
			constexpr uintptr_t AnimNodeFrames = 0x0280;
			constexpr uintptr_t AnimTickArray = 0x0290;
		}

		namespace AnimationCompressionAlgorithm {
			constexpr uintptr_t Description = 0x0060;
			constexpr uintptr_t bNeedsSkeleton = 0x0070;
			constexpr uintptr_t TranslationCompressionFormat = 0x0074;
			constexpr uintptr_t RotationCompressionFormat = 0x0075;
		}

		namespace AnimationCompressionAlgorithm_Automatic {
			constexpr uintptr_t MaxEndEffectorError = 0x0078;
			constexpr uintptr_t Bitfields_0x007C = 0x007C;  // Multiple: bTryFixedBitwiseCompression, bTryPerTrackBitwiseCompression, bTryLinearKeyRemovalCompression, bTryIntervalKeyRemoval, bRunCurrentDefaultCompressor, bAutoReplaceIfExistingErrorTooGreat, bRaiseMaxErrorToExisting
		}

		namespace AnimationCompressionAlgorithm_BitwiseCompressOnly {
			constexpr uintptr_t UnknownData00 = 0x0076;
		}

		namespace AnimationCompressionAlgorithm_LeastDestructive {
			constexpr uintptr_t UnknownData00 = 0x0076;
		}

		namespace AnimationCompressionAlgorithm_PerTrackCompression {
			constexpr uintptr_t MaxZeroingThreshold = 0x0098;
			constexpr uintptr_t MaxPosDiffBitwise = 0x009C;
			constexpr uintptr_t MaxAngleDiffBitwise = 0x00A0;
			constexpr uintptr_t AllowedRotationFormats = 0x00A8;
			constexpr uintptr_t AllowedTranslationFormats = 0x00B8;
			constexpr uintptr_t Bitfields_0x00C8 = 0x00C8;  // Multiple: bResampleAnimation, bUseAdaptiveError, bUseOverrideForEndEffectors, bUseAdaptiveError2
			constexpr uintptr_t ResampledFramerate = 0x00CC;
			constexpr uintptr_t MinKeysForResampling = 0x00D0;
			constexpr uintptr_t TrackHeightBias = 0x00D4;
			constexpr uintptr_t ParentingDivisor = 0x00D8;
			constexpr uintptr_t ParentingDivisorExponent = 0x00DC;
			constexpr uintptr_t RotationErrorSourceRatio = 0x00E0;
			constexpr uintptr_t TranslationErrorSourceRatio = 0x00E4;
			constexpr uintptr_t MaxErrorPerTrackRatio = 0x00E8;
			constexpr uintptr_t PerturbationProbeSize = 0x00EC;
			constexpr uintptr_t PerReductionCachedData = 0x00F0;
		}

		namespace AnimationCompressionAlgorithm_RemoveEverySecondKey {
			constexpr uintptr_t MinKeys = 0x0078;
			constexpr uintptr_t bStartAtSecondKey = 0x007C;
		}

		namespace AnimationCompressionAlgorithm_RemoveLinearKeys {
			constexpr uintptr_t MaxPosDiff = 0x0078;
			constexpr uintptr_t MaxAngleDiff = 0x007C;
			constexpr uintptr_t MaxEffectorDiff = 0x0080;
			constexpr uintptr_t MinEffectorDiff = 0x0084;
			constexpr uintptr_t EffectorDiffSocket = 0x0088;
			constexpr uintptr_t ParentKeyScale = 0x008C;
			constexpr uintptr_t Bitfields_0x0090 = 0x0090;  // Multiple: bRetarget, bActuallyFilterLinearKeys
		}

		namespace AnimationCompressionAlgorithm_RemoveTrivialKeys {
			constexpr uintptr_t MaxPosDiff = 0x0078;
			constexpr uintptr_t MaxAngleDiff = 0x007C;
		}

		namespace AnimationCompressionAlgorithm_RevertToRaw {
			constexpr uintptr_t UnknownData00 = 0x0076;
		}

		namespace ApexAsset {
			constexpr uintptr_t OriginalApexName = 0x0060;
			constexpr uintptr_t ApexComponents = 0x0070;
			constexpr uintptr_t NamedReferences = 0x0080;
			constexpr uintptr_t SourceFilePath = 0x0090;
			constexpr uintptr_t SourceFileTimestamp = 0x00A0;
		}

		namespace ApexClothingAsset {
			constexpr uintptr_t LodMaterialInfo = 0x00B0;
			constexpr uintptr_t MApexAsset = 0x00C0;
			constexpr uintptr_t Materials = 0x00C8;
			constexpr uintptr_t ApexClothingLibrary = 0x00D8;
			constexpr uintptr_t Bitfields_0x00E0 = 0x00E0;  // Multiple: bUseHardwareCloth, bFallbackSkinning, bSlowStart, bRecomputeNormals, bAllowAdaptiveTargetFrequency, bResetAfterTeleport, bUseLocalSpaceSimulation, bHasUniqueAssetMaterialNames, IgnoreInitialTrigger
			constexpr uintptr_t UVChannelForTangentUpdate = 0x00E4;
			constexpr uintptr_t MaxDistanceBlendTime = 0x00E8;
			constexpr uintptr_t ContinuousRotationThreshold = 0x00EC;
			constexpr uintptr_t ContinuousDistanceThreshold = 0x00F0;
			constexpr uintptr_t LodWeightsMaxDistance = 0x00F4;
			constexpr uintptr_t LodWeightsDistanceWeight = 0x00F8;
			constexpr uintptr_t LodWeightsBias = 0x00FC;
			constexpr uintptr_t LodWeightsBenefitsBias = 0x0100;
			constexpr uintptr_t LODDecayTime = 0x0104;
			constexpr uintptr_t SoundOnMove = 0x0108;
			constexpr uintptr_t SoundOnRest = 0x0110;
			constexpr uintptr_t SoundWhileMoving = 0x0118;
			constexpr uintptr_t SpeedThresholdOnMove = 0x0120;
			constexpr uintptr_t SpeedThresholdOnRest = 0x0124;
		}

		namespace ApexComponentBase {
			constexpr uintptr_t ComponentBaseResources = 0x0280;
			constexpr uintptr_t ReleaseResourcesFence = 0x0288;
			constexpr uintptr_t Asset = 0x0290;
			constexpr uintptr_t WireframeColor = 0x0298;
			constexpr uintptr_t bAssetChanged = 0x029C;
		}

		namespace ApexDestructibleActor {
			constexpr uintptr_t LightEnvironment = 0x0268;
			constexpr uintptr_t Bitfields_0x0270 = 0x0270;  // Multiple: bFractureMaterialOverride, bPlaySingleFractureMaterialEffect
			constexpr uintptr_t FractureMaterials = 0x0278;
			constexpr uintptr_t StaticDestructibleComponent = 0x0288;
			constexpr uintptr_t LOD = 0x0290;
			constexpr uintptr_t VisibilityFactors = 0x0298;
			constexpr uintptr_t FractureSounds = 0x02A8;
			constexpr uintptr_t FractureParticleEffects = 0x02B8;
		}

		namespace ApexDestructibleAsset {
			constexpr uintptr_t MApexAsset = 0x00B0;
			constexpr uintptr_t Materials = 0x00B8;
			constexpr uintptr_t FractureMaterials = 0x00C8;
			constexpr uintptr_t Bitfields_0x00D8 = 0x00D8;  // Multiple: bPlaySingleFractureMaterialEffect, bHasUniqueAssetMaterialNames, bDynamic
			constexpr uintptr_t DefaultPhysMaterial = 0x00E0;
			constexpr uintptr_t MDestructibleThumbnailComponent = 0x00E8;
			constexpr uintptr_t CrumbleEmitterName = 0x00F0;
			constexpr uintptr_t DustEmitterName = 0x0100;
			constexpr uintptr_t DestructibleParameters = 0x0110;
		}

		namespace ApexDestructibleDamageParameters {
			constexpr uintptr_t DamageMap = 0x0060;
		}

		namespace ApexDynamicComponent {
			constexpr uintptr_t ComponentDynamicResources = 0x02A0;
		}

		namespace ApexGenericAsset {
			constexpr uintptr_t MApexAsset = 0x00B0;
			constexpr uintptr_t Materials = 0x00B8;
		}

		namespace ApexStaticDestructibleComponent {
			constexpr uintptr_t SleepEnergyThreshold = 0x02A0;
			constexpr uintptr_t SleepDamping = 0x02A4;
			constexpr uintptr_t ApexDestructibleActor = 0x02A8;
			constexpr uintptr_t ApexDestructiblePreview = 0x02B0;
			constexpr uintptr_t bIsThumbnailComponent = 0x02B8;
		}

		namespace AppNotificationsBase {
			constexpr uintptr_t AppLaunchNotification = 0x0088;
		}

		namespace ArchetypePool {
			constexpr uintptr_t ObjectArchetypeMap = 0x0070;
		}

		namespace ArrowComponent {
			constexpr uintptr_t ArrowColor = 0x0258;
			constexpr uintptr_t ArrowSize = 0x025C;
			constexpr uintptr_t bTreatAsASprite = 0x0260;
			constexpr uintptr_t SpriteCategoryName = 0x0264;
		}

		namespace AudioComponent {
			constexpr uintptr_t SoundCue = 0x00A0;
			constexpr uintptr_t CueFirstNode = 0x00A8;
			constexpr uintptr_t InstanceParameters = 0x00B0;
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: bUseOwnerLocation, bAutoPlay, bAutoDestroy, bStopWhenOwnerDestroyed, bShouldRemainActiveIfDropped, bWasOccluded, bSuppressSubtitles, bWasPlaying, bAllowSpatialization, bFinished, bApplyRadioFilter, bRadioFilterSelected, bPreviewComponent, bIgnoreForFlushing
			constexpr uintptr_t StereoBleed = 0x00C4;
			constexpr uintptr_t LFEBleed = 0x00C8;
			constexpr uintptr_t Bitfields_0x00CC = 0x00CC;  // Multiple: bEQFilterApplied, bAlwaysPlay, bIsUISound, bIsMusic, bReverb, bCenterChannelOnly, bIsCachedInPool
			constexpr uintptr_t WaveInstances = 0x00D0;
			constexpr uintptr_t SoundNodeData = 0x00E0;
			constexpr uintptr_t UnknownData00 = 0x00F0;
			constexpr uintptr_t SoundNodeResetWaveMap = 0x0140;
			constexpr uintptr_t Listener = 0x0190;
			constexpr uintptr_t PlaybackTime = 0x0198;
			constexpr uintptr_t PortalVolume = 0x01A0;
			constexpr uintptr_t Location = 0x01A8;
			constexpr uintptr_t ComponentLocation = 0x01B4;
			constexpr uintptr_t Rotation = 0x01C0;
			constexpr uintptr_t ComponentRotation = 0x01CC;
			constexpr uintptr_t LastOwner = 0x01D8;
			constexpr uintptr_t SubtitlePriority = 0x01E0;
			constexpr uintptr_t FadeInStartTime = 0x01E4;
			constexpr uintptr_t FadeInStopTime = 0x01E8;
			constexpr uintptr_t FadeInTargetVolume = 0x01EC;
			constexpr uintptr_t FadeOutStartTime = 0x01F0;
			constexpr uintptr_t FadeOutStopTime = 0x01F4;
			constexpr uintptr_t FadeOutTargetVolume = 0x01F8;
			constexpr uintptr_t AdjustVolumeStartTime = 0x01FC;
			constexpr uintptr_t AdjustVolumeStopTime = 0x0200;
			constexpr uintptr_t AdjustVolumeTargetVolume = 0x0204;
			constexpr uintptr_t CurrAdjustVolumeTargetVolume = 0x0208;
			constexpr uintptr_t CurrentNotifyBufferFinishedHook = 0x0210;
			constexpr uintptr_t CurrentLocation = 0x0218;
			constexpr uintptr_t CurrentRotation = 0x0224;
			constexpr uintptr_t CurrentVelocity = 0x0230;
			constexpr uintptr_t CurrentVolume = 0x023C;
			constexpr uintptr_t CurrentPitch = 0x0240;
			constexpr uintptr_t CurrentHighFrequencyGain = 0x0244;
			constexpr uintptr_t CurrentUseSpatialization = 0x0248;
			constexpr uintptr_t CurrentNotifyOnLoop = 0x024C;
			constexpr uintptr_t OmniRadius = 0x0250;
			constexpr uintptr_t CurrentVolumeMultiplier = 0x0254;
			constexpr uintptr_t CurrentPitchMultiplier = 0x0258;
			constexpr uintptr_t CurrentHighFrequencyGainMultiplier = 0x025C;
			constexpr uintptr_t CurrentVoiceCenterChannelVolume = 0x0260;
			constexpr uintptr_t CurrentRadioFilterVolume = 0x0264;
			constexpr uintptr_t CurrentRadioFilterVolumeThreshold = 0x0268;
			constexpr uintptr_t LastUpdateTime = 0x0270;
			constexpr uintptr_t SourceInteriorVolume = 0x0278;
			constexpr uintptr_t SourceInteriorLPF = 0x027C;
			constexpr uintptr_t CurrentInteriorVolume = 0x0280;
			constexpr uintptr_t CurrentInteriorLPF = 0x0284;
			constexpr uintptr_t LastLocation = 0x0288;
			constexpr uintptr_t LastInteriorSettings = 0x0294;
			constexpr uintptr_t LastReverbVolumeIndex = 0x02B8;
			constexpr uintptr_t VolumeMultiplier = 0x02BC;
			constexpr uintptr_t PitchMultiplier = 0x02C0;
			constexpr uintptr_t HighFrequencyGainMultiplier = 0x02C4;
			constexpr uintptr_t OcclusionCheckInterval = 0x02C8;
			constexpr uintptr_t LastOcclusionCheckTime = 0x02CC;
			constexpr uintptr_t PreviewSoundRadius = 0x02D0;
		}

		namespace AudioDevice {
			constexpr uintptr_t MaxChannels = 0x0068;
			constexpr uintptr_t CommonAudioPoolSize = 0x006C;
			constexpr uintptr_t LowPassFilterResonance = 0x0070;
			constexpr uintptr_t MinCompressedDurationEditor = 0x0074;
			constexpr uintptr_t MinCompressedDurationGame = 0x0078;
			constexpr uintptr_t ChirpInSoundNodeWaveName = 0x0080;
			constexpr uintptr_t ChirpInSoundNodeWave = 0x0090;
			constexpr uintptr_t ChirpOutSoundNodeWaveName = 0x0098;
			constexpr uintptr_t ChirpOutSoundNodeWave = 0x00A8;
			constexpr uintptr_t CommonAudioPool = 0x00B0;
			constexpr uintptr_t CommonAudioPoolFreeBytes = 0x00B8;
			constexpr uintptr_t AudioComponents = 0x00C0;
			constexpr uintptr_t Sources = 0x00D0;
			constexpr uintptr_t FreeSources = 0x00E0;
			constexpr uintptr_t UnknownData00 = 0x00F0;
			constexpr uintptr_t Bitfields_0x0140 = 0x0140;  // Multiple: bGameWasTicking, bSoundSpawningEnabled
			constexpr uintptr_t Listeners = 0x0148;
			constexpr uintptr_t CurrentTick = 0x0158;
			constexpr uintptr_t UnknownData01 = 0x0160;
			constexpr uintptr_t UnknownData02 = 0x01B0;
			constexpr uintptr_t UnknownData03 = 0x0200;
			constexpr uintptr_t UnknownData04 = 0x0250;
			constexpr uintptr_t UnknownData05 = 0x02A0;
			constexpr uintptr_t Effects = 0x02F0;
			constexpr uintptr_t BaseSoundModeName = 0x02F8;
			constexpr uintptr_t CurrentMode = 0x0300;
			constexpr uintptr_t SoundModeStartTime = 0x0308;
			constexpr uintptr_t SoundModeFadeInStartTime = 0x0310;
			constexpr uintptr_t SoundModeFadeInEndTime = 0x0318;
			constexpr uintptr_t SoundModeEndTime = 0x0320;
			constexpr uintptr_t ListenerVolumeIndex = 0x0328;
			constexpr uintptr_t ListenerInteriorSettings = 0x032C;
			constexpr uintptr_t InteriorStartTime = 0x0350;
			constexpr uintptr_t InteriorEndTime = 0x0358;
			constexpr uintptr_t ExteriorEndTime = 0x0360;
			constexpr uintptr_t InteriorLPFEndTime = 0x0368;
			constexpr uintptr_t ExteriorLPFEndTime = 0x0370;
			constexpr uintptr_t InteriorVolumeInterp = 0x0378;
			constexpr uintptr_t InteriorLPFInterp = 0x037C;
			constexpr uintptr_t ExteriorVolumeInterp = 0x0380;
			constexpr uintptr_t ExteriorLPFInterp = 0x0384;
			constexpr uintptr_t TestAudioComponent = 0x0388;
			constexpr uintptr_t TextToSpeech = 0x0390;
			constexpr uintptr_t DebugState = 0x0398;
			constexpr uintptr_t TransientMasterVolume = 0x039C;
			constexpr uintptr_t LastUpdateTime = 0x03A0;
		}

		namespace AutoNavMeshPathObstacleUnregister {
			constexpr uintptr_t PathObstacleRef_Object = 0x0060;
			constexpr uintptr_t PathObstacleRef_Interface = 0x0068;
		}

		namespace AutoTestManager {
			constexpr uintptr_t Bitfields_0x0268 = 0x0268;  // Multiple: bAutomatedPerfTesting, bAutoContinueToNextRound, bUsingAutomatedTestingMapList, bAutomatedTestingWithOpen, bExitOnCyclesComplete, bCheckingForFragmentation, bCheckingForMemLeaks, bDoingASentinelRun, bSentinelStreamingLevelStillLoading
			constexpr uintptr_t AutomatedPerfRemainingTime = 0x026C;
			constexpr uintptr_t AutomatedTestingMapIndex = 0x0270;
			constexpr uintptr_t AutomatedMapTestingList = 0x0278;
			constexpr uintptr_t NumAutomatedMapTestingCycles = 0x0288;
			constexpr uintptr_t NumberOfMatchesPlayed = 0x028C;
			constexpr uintptr_t NumMapListCyclesDone = 0x0290;
			constexpr uintptr_t AutomatedTestingExecCommandToRunAtStartMatch = 0x0298;
			constexpr uintptr_t AutomatedMapTestingTransitionMap = 0x02A8;
			constexpr uintptr_t SentinelTaskDescription = 0x02B8;
			constexpr uintptr_t SentinelTaskParameter = 0x02C8;
			constexpr uintptr_t SentinelTagDesc = 0x02D8;
			constexpr uintptr_t SentinelPC = 0x02E8;
			constexpr uintptr_t SentinelTravelArray = 0x02F0;
			constexpr uintptr_t SentinelNavigationIdx = 0x0300;
			constexpr uintptr_t SentinelIdx = 0x0304;
			constexpr uintptr_t NumRotationsIncrement = 0x0308;
			constexpr uintptr_t TravelPointsIncrement = 0x030C;
			constexpr uintptr_t NumMinutesPerMap = 0x0310;
			constexpr uintptr_t CommandsToRunAtEachTravelTheWorldNode = 0x0318;
			constexpr uintptr_t CommandStringToExec = 0x0328;
		}

		namespace BlockingVolume {
			constexpr uintptr_t bBlockCamera = 0x02A8;
		}

		namespace BlurEffect {
			constexpr uintptr_t BlurKernelSize = 0x0088;
		}

		namespace BookMark {
			constexpr uintptr_t Location = 0x0060;
			constexpr uintptr_t Rotation = 0x006C;
			constexpr uintptr_t HiddenLevels = 0x0078;
		}

		namespace BookMark2D {
			constexpr uintptr_t Zoom2D = 0x0060;
			constexpr uintptr_t Location = 0x0064;
		}

		namespace Brush {
			constexpr uintptr_t CsgOper = 0x0268;
			constexpr uintptr_t BrushColor = 0x026C;
			constexpr uintptr_t PolyFlags = 0x0270;
			constexpr uintptr_t Bitfields_0x0274 = 0x0274;  // Multiple: bColored, bSolidWhenSelected, bPlaceableFromClassBrowser
			constexpr uintptr_t Brush = 0x0278;
			constexpr uintptr_t BrushComponent = 0x0280;
			constexpr uintptr_t SavedSelections = 0x0288;
		}

		namespace BrushComponent {
			constexpr uintptr_t Brush = 0x0258;
			constexpr uintptr_t BrushAggGeom = 0x0260;
			constexpr uintptr_t BrushPhysDesc = 0x02B0;
			constexpr uintptr_t CachedPhysBrushData = 0x02B8;
			constexpr uintptr_t CachedPhysBrushDataVersion = 0x02C8;
			constexpr uintptr_t bBlockComplexCollisionTrace = 0x02CC;
		}

		namespace Camera {
			constexpr uintptr_t PCOwner = 0x0268;
			constexpr uintptr_t CameraStyle = 0x0270;
			constexpr uintptr_t DefaultFOV = 0x0278;
			constexpr uintptr_t Bitfields_0x027C = 0x027C;  // Multiple: bLockedFOV, bConstrainAspectRatio, bEnableFading, bFadeAudio, bForceDisableTemporalAA, bEnableColorScaling, bEnableColorScaleInterp, bUseClientSideCameraUpdates, bDebugClientSideCamera, bShouldSendClientSideCameraUpdate
			constexpr uintptr_t LockedFOV = 0x0280;
			constexpr uintptr_t ConstrainedAspectRatio = 0x0284;
			constexpr uintptr_t DefaultAspectRatio = 0x0288;
			constexpr uintptr_t OffAxisYawAngle = 0x028C;
			constexpr uintptr_t OffAxisPitchAngle = 0x0290;
			constexpr uintptr_t FadeColor = 0x0294;
			constexpr uintptr_t FadeAmount = 0x0298;
			constexpr uintptr_t CamOverridePostProcessAlpha = 0x029C;
			constexpr uintptr_t CamPostProcessSettings = 0x02A0;
			constexpr uintptr_t RenderingOverrides = 0x0408;
			constexpr uintptr_t ColorScale = 0x040C;
			constexpr uintptr_t DesiredColorScale = 0x0418;
			constexpr uintptr_t OriginalColorScale = 0x0424;
			constexpr uintptr_t ColorScaleInterpDuration = 0x0430;
			constexpr uintptr_t ColorScaleInterpStartTime = 0x0434;
			constexpr uintptr_t CameraCache = 0x0438;
			constexpr uintptr_t LastFrameCameraCache = 0x0458;
			constexpr uintptr_t ViewTarget = 0x0478;
			constexpr uintptr_t PendingViewTarget = 0x04B0;
			constexpr uintptr_t BlendTimeToGo = 0x04E8;
			constexpr uintptr_t BlendParams = 0x04EC;
			constexpr uintptr_t ModifierList = 0x0500;
			constexpr uintptr_t FreeCamDistance = 0x0510;
			constexpr uintptr_t FreeCamOffset = 0x0514;
			constexpr uintptr_t FadeAlpha = 0x0520;
			constexpr uintptr_t FadeTime = 0x0528;
			constexpr uintptr_t FadeTimeRemaining = 0x052C;
			constexpr uintptr_t CameraLensEffects = 0x0530;
			constexpr uintptr_t CameraShakeCamMod = 0x0540;
			constexpr uintptr_t CameraShakeCamModClass = 0x0548;
			constexpr uintptr_t AnimInstPool = 0x0550;
			constexpr uintptr_t ActiveAnims = 0x0590;
			constexpr uintptr_t FreeAnims = 0x05A0;
			constexpr uintptr_t AnimCameraActor = 0x05B0;
		}

		namespace CameraActor {
			constexpr uintptr_t Bitfields_0x0268 = 0x0268;  // Multiple: bConstrainAspectRatio, bCamOverridePostProcess
			constexpr uintptr_t AspectRatio = 0x026C;
			constexpr uintptr_t FOVAngle = 0x0270;
			constexpr uintptr_t CamOverridePostProcessAlpha = 0x0274;
			constexpr uintptr_t CamOverridePostProcess = 0x0278;
			constexpr uintptr_t CameraShakeCamMod = 0x03E0;
			constexpr uintptr_t DrawFrustum = 0x03E8;
			constexpr uintptr_t MeshComp = 0x03F0;
		}

		namespace CameraAnim {
			constexpr uintptr_t CameraInterpGroup = 0x0060;
			constexpr uintptr_t PreviewInterpGroup = 0x0068;
			constexpr uintptr_t AnimLength = 0x0070;
			constexpr uintptr_t BoundingBox = 0x0074;
			constexpr uintptr_t BasePPSettings = 0x0090;
			constexpr uintptr_t BasePPSettingsAlpha = 0x01F8;
			constexpr uintptr_t BaseFOV = 0x01FC;
		}

		namespace CameraAnimInst {
			constexpr uintptr_t CamAnim = 0x0060;
			constexpr uintptr_t InterpGroupInst = 0x0068;
			constexpr uintptr_t CurTime = 0x0070;
			constexpr uintptr_t Bitfields_0x0074 = 0x0074;  // Multiple: bLooping, bFinished, bAutoReleaseWhenFinished, bBlendingIn, bBlendingOut
			constexpr uintptr_t BlendInTime = 0x0078;
			constexpr uintptr_t BlendOutTime = 0x007C;
			constexpr uintptr_t CurBlendInTime = 0x0080;
			constexpr uintptr_t CurBlendOutTime = 0x0084;
			constexpr uintptr_t PlayRate = 0x0088;
			constexpr uintptr_t BasePlayScale = 0x008C;
			constexpr uintptr_t TransientScaleModifier = 0x0090;
			constexpr uintptr_t CurrentBlendWeight = 0x0094;
			constexpr uintptr_t RemainingTime = 0x0098;
			constexpr uintptr_t MoveTrack = 0x00A0;
			constexpr uintptr_t MoveInst = 0x00A8;
			constexpr uintptr_t SourceAnimNode = 0x00B0;
			constexpr uintptr_t PlaySpace = 0x00B8;
			constexpr uintptr_t UserPlaySpaceMatrix = 0x00C0;
			constexpr uintptr_t LastPPSettings = 0x0100;
			constexpr uintptr_t LastPPSettingsAlpha = 0x0268;
			constexpr uintptr_t LastCameraLoc = 0x026C;
		}

		namespace CameraModifier {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: bDisabled, bPendingDisable, bExclusive, bDebug
			constexpr uintptr_t CameraOwner = 0x0068;
			constexpr uintptr_t Priority = 0x0070;
			constexpr uintptr_t AlphaInTime = 0x0074;
			constexpr uintptr_t AlphaOutTime = 0x0078;
			constexpr uintptr_t Alpha = 0x007C;
			constexpr uintptr_t TargetAlpha = 0x0080;
		}

		namespace CameraModifier_CameraShake {
			constexpr uintptr_t ActiveShakes = 0x0088;
			constexpr uintptr_t SplitScreenShakeScale = 0x0098;
		}

		namespace CameraShake {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: bSingleInstance, bRandomAnimSegment
			constexpr uintptr_t OscillationDuration = 0x0064;
			constexpr uintptr_t OscillationBlendInTime = 0x0068;
			constexpr uintptr_t OscillationBlendOutTime = 0x006C;
			constexpr uintptr_t RotOscillation = 0x0070;
			constexpr uintptr_t LocOscillation = 0x0094;
			constexpr uintptr_t FOVOscillation = 0x00B8;
			constexpr uintptr_t Anim = 0x00C8;
			constexpr uintptr_t AnimPlayRate = 0x00D0;
			constexpr uintptr_t AnimScale = 0x00D4;
			constexpr uintptr_t AnimBlendInTime = 0x00D8;
			constexpr uintptr_t AnimBlendOutTime = 0x00DC;
			constexpr uintptr_t RandomAnimSegmentDuration = 0x00E0;
		}

		namespace Canvas {
			constexpr uintptr_t Font = 0x0060;
			constexpr uintptr_t OrgX = 0x0068;
			constexpr uintptr_t OrgY = 0x006C;
			constexpr uintptr_t ClipX = 0x0070;
			constexpr uintptr_t ClipY = 0x0074;
			constexpr uintptr_t CurX = 0x0078;
			constexpr uintptr_t CurY = 0x007C;
			constexpr uintptr_t CurZ = 0x0080;
			constexpr uintptr_t CurYL = 0x0084;
			constexpr uintptr_t DrawColor = 0x0088;
			constexpr uintptr_t Bitfields_0x008C = 0x008C;  // Multiple: bCenter, bNoSmooth
			constexpr uintptr_t SizeX = 0x0090;
			constexpr uintptr_t SizeY = 0x0094;
			constexpr uintptr_t Canvas = 0x0098;
			constexpr uintptr_t SceneView = 0x00A0;
			constexpr uintptr_t UnknownData00 = 0x00A8;
			constexpr uintptr_t ColorModulate = 0x00B0;
			constexpr uintptr_t DefaultTexture = 0x00C0;
		}

		namespace Channel {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace ChannelDownload {
			constexpr uintptr_t UnknownData00 = 0x0AB0;
		}

		namespace CheatManager {
			constexpr uintptr_t ViewingFrom = 0x0060;
			constexpr uintptr_t OwnCamera = 0x0070;
		}

		namespace ChildConnection {
			constexpr uintptr_t Parent = 0xB1F0;
		}

		namespace Client {
			constexpr uintptr_t UnknownData00 = 0x0060;
			constexpr uintptr_t MinDesiredFrameRate = 0x0068;
			constexpr uintptr_t DisplayGamma = 0x006C;
			constexpr uintptr_t InitialButtonRepeatDelay = 0x0070;
			constexpr uintptr_t ButtonRepeatDelay = 0x0074;
		}

		namespace ClipPadEntry {
			constexpr uintptr_t Title = 0x0060;
			constexpr uintptr_t Text = 0x0070;
		}

		namespace CloudSaveSystem {
			constexpr uintptr_t KeyValueStore_Object = 0x0060;
			constexpr uintptr_t KeyValueStore_Interface = 0x0068;
			constexpr uintptr_t DataBlobStore_Object = 0x0070;
			constexpr uintptr_t DataBlobStore_Interface = 0x0078;
			constexpr uintptr_t OnGetSaveDataCallbacks = 0x0080;
			constexpr uintptr_t OnSetSaveDataCallbacks = 0x0090;
			constexpr uintptr_t ActiveSlotForDelete = 0x00B8;
			constexpr uintptr_t ActiveSaveSlotOperations = 0x00C0;
		}

		namespace CloudStorageBase {
			constexpr uintptr_t LocalCloudFiles = 0x0088;
			constexpr uintptr_t bSuppressDelegateCalls = 0x0098;
		}

		namespace CloudStorageBaseCloudSaveSystemKVS {
			constexpr uintptr_t CloudStorage = 0x0060;
		}

		namespace CodecMovie {
			constexpr uintptr_t PlaybackDuration = 0x0060;
		}

		namespace CodecMovieBink {
			constexpr uintptr_t UnknownData00 = 0x0064;
		}

		namespace CodecMovieFallback {
			constexpr uintptr_t CurrentTime = 0x0068;
		}

		namespace ColorScaleVolume {
			constexpr uintptr_t ColorScale = 0x02A8;
			constexpr uintptr_t InterpTime = 0x02B4;
		}

		namespace Console {
			constexpr uintptr_t ConsoleTargetPlayer = 0x00D0;
			constexpr uintptr_t DefaultTexture_Black = 0x00D8;
			constexpr uintptr_t DefaultTexture_White = 0x00E0;
			constexpr uintptr_t ConsoleKey = 0x00E8;
			constexpr uintptr_t TypeKey = 0x00F0;
			constexpr uintptr_t MaxScrollbackSize = 0x00F8;
			constexpr uintptr_t Scrollback = 0x0100;
			constexpr uintptr_t SBHead = 0x0110;
			constexpr uintptr_t SBPos = 0x0114;
			constexpr uintptr_t HistoryTop = 0x0118;
			constexpr uintptr_t HistoryBot = 0x011C;
			constexpr uintptr_t HistoryCur = 0x0120;
			constexpr uintptr_t History = 0x0128;
			constexpr uintptr_t Bitfields_0x0228 = 0x0228;  // Multiple: bNavigatingHistory, bCaptureKeyInput, bCtrl, bEnableUI, bAutoCompleteLocked, bRequireCtrlToNavigateAutoComplete, bIsRuntimeAutoCompleteUpToDate
			constexpr uintptr_t TypedStr = 0x0230;
			constexpr uintptr_t TypedStrPos = 0x0240;
			constexpr uintptr_t ManualAutoCompleteList = 0x0248;
			constexpr uintptr_t AutoCompleteList = 0x0258;
			constexpr uintptr_t NativeAutoCompleteList = 0x0268;
			constexpr uintptr_t AutoCompleteIndex = 0x0278;
			constexpr uintptr_t AutoCompleteTree = 0x0280;
			constexpr uintptr_t AutoCompleteIndices = 0x02A8;
		}

		namespace ControlChannel {
			constexpr uintptr_t UnknownData00 = 0x00A0;
		}

		namespace Controller {
			constexpr uintptr_t VfTable_IInterface_NavigationHandle = 0x0268;
			constexpr uintptr_t ObjectProvider = 0x0270;
			constexpr uintptr_t RegistryGroup = 0x0278;
			constexpr uintptr_t Pawn = 0x0280;
			constexpr uintptr_t PlayerReplicationInfo = 0x0288;
			constexpr uintptr_t PlayerNum = 0x0290;
			constexpr uintptr_t NextController = 0x0298;
			constexpr uintptr_t Bitfields_0x02A0 = 0x02A0;  // Multiple: bIsPlayer, bGodMode, bSoaking, bSlowerZAcquire, bNotifyPostLanded, bNotifyApex, bOverrideSearchStart, bAdvancedTactics, bCanDoSpecial, bAdjusting, bPreparingMove, bForceStrafe, bLOSflag, bSkipExtraLOSChecks, bNotifyFallingHitWall, bEarlyOutOfSighTestsForSameType, bPreciseDestination, bSeeFriendly, bUsingPathLanes
			constexpr uintptr_t bFire = 0x02A4;
			constexpr uintptr_t bAltFire = 0x02A5;
			constexpr uintptr_t MinHitWall = 0x02A8;
			constexpr uintptr_t NavigationHandleClass = 0x02B0;
			constexpr uintptr_t NavigationHandle = 0x02B8;
			constexpr uintptr_t OverrideSearchStart = 0x02C0;
			constexpr uintptr_t MoveTimer = 0x02CC;
			constexpr uintptr_t MoveTarget = 0x02D0;
			constexpr uintptr_t DestinationPosition = 0x02D8;
			constexpr uintptr_t FocalPosition = 0x0310;
			constexpr uintptr_t Focus = 0x0348;
			constexpr uintptr_t GoalList = 0x0350;
			constexpr uintptr_t AdjustPosition = 0x0370;
			constexpr uintptr_t StartSpot = 0x03A8;
			constexpr uintptr_t RouteCache = 0x03B0;
			constexpr uintptr_t CurrentPath = 0x03C0;
			constexpr uintptr_t NextRoutePath = 0x03C8;
			constexpr uintptr_t CurrentPathDir = 0x03D0;
			constexpr uintptr_t RouteGoal = 0x03E0;
			constexpr uintptr_t RouteDist = 0x03E8;
			constexpr uintptr_t LastRouteFind = 0x03EC;
			constexpr uintptr_t PendingMover = 0x03F0;
			constexpr uintptr_t FailedMoveTarget = 0x03F8;
			constexpr uintptr_t MoveFailureCount = 0x0400;
			constexpr uintptr_t GroundPitchTime = 0x0404;
			constexpr uintptr_t ShotTarget = 0x0408;
			constexpr uintptr_t LastFailedReach = 0x0410;
			constexpr uintptr_t FailedReachTime = 0x0418;
			constexpr uintptr_t FailedReachLocation = 0x041C;
			constexpr uintptr_t SightCounter = 0x0428;
			constexpr uintptr_t SightCounterInterval = 0x042C;
			constexpr uintptr_t InUseNodeCostMultiplier = 0x0430;
			constexpr uintptr_t HighJumpNodeCostModifier = 0x0434;
			constexpr uintptr_t MaxMoveTowardPawnTargetTime = 0x0438;
			constexpr uintptr_t Enemy = 0x0440;
			constexpr uintptr_t VisiblePortals = 0x0448;
			constexpr uintptr_t LaneOffset = 0x0458;
			constexpr uintptr_t OldBasedRotation = 0x045C;
			constexpr uintptr_t NavMeshPath_SearchExtent_Modifier = 0x0468;
		}

		namespace ControllerLayoutStack {
			constexpr uintptr_t CurrentLayout = 0x0060;
			constexpr uintptr_t LayoutStack = 0x0068;
			constexpr uintptr_t ControllerLayout_Gameplay = 0x0078;
			constexpr uintptr_t ControllerLayout_Menu = 0x0080;
			constexpr uintptr_t ControllerLayout_ReplayViewer = 0x0088;
			constexpr uintptr_t ControllerLayout_Spectator = 0x0090;
			constexpr uintptr_t ControllerLayout_TrainingEditor = 0x0098;
			constexpr uintptr_t ControllerLayoutPriority_Default = 0x00A0;
			constexpr uintptr_t ControllerLayoutPriority_Menu = 0x00A4;
		}

		namespace CoverGroup {
			constexpr uintptr_t CoverLinkRefs = 0x0268;
			constexpr uintptr_t AutoSelectRadius = 0x0278;
			constexpr uintptr_t AutoSelectHeight = 0x027C;
		}

		namespace CoverLink {
			constexpr uintptr_t Bitfields_0x0388 = 0x0388;  // Multiple: GLOBAL_bUseSlotMarkers, bDisabled, bClaimAllSlots, bAutoSort, bAutoAdjust, bCircular, bLooped, bPlayerOnly, bDynamicCover, bFractureOnTouch, bDebug_FireLinks, bDebug_ExposedLinks, bDebug_CoverGen, bDoAutoSlotDensityFixup
			constexpr uintptr_t LeanTraceDist = 0x038C;
			constexpr uintptr_t Slots = 0x0390;
			constexpr uintptr_t DynamicLinkInfos = 0x03A0;
			constexpr uintptr_t Claims = 0x03B0;
			constexpr uintptr_t InvalidateDistance = 0x03C0;
			constexpr uintptr_t MaxFireLinkDist = 0x03C4;
			constexpr uintptr_t CircularOrigin = 0x03C8;
			constexpr uintptr_t CircularRadius = 0x03D4;
			constexpr uintptr_t AlignDist = 0x03D8;
			constexpr uintptr_t AutoCoverSlotInterval = 0x03DC;
			constexpr uintptr_t StandHeight = 0x03E0;
			constexpr uintptr_t MidHeight = 0x03E4;
			constexpr uintptr_t StandingLeanOffset = 0x03E8;
			constexpr uintptr_t CrouchLeanOffset = 0x03F4;
			constexpr uintptr_t PopupOffset = 0x0400;
			constexpr uintptr_t SlipDist = 0x040C;
			constexpr uintptr_t TurnDist = 0x0410;
			constexpr uintptr_t DangerScale = 0x0414;
			constexpr uintptr_t NextCoverLink = 0x0418;
			constexpr uintptr_t LocationDescription = 0x0420;
		}

		namespace CoverMeshComponent {
			constexpr uintptr_t Meshes = 0x0300;
			constexpr uintptr_t LocationOffset = 0x0310;
			constexpr uintptr_t AutoAdjustOn = 0x0320;
			constexpr uintptr_t AutoAdjustOff = 0x0328;
			constexpr uintptr_t Disabled = 0x0330;
			constexpr uintptr_t bShowWhenNotSelected = 0x0338;
		}

		namespace CoverReplicator {
			constexpr uintptr_t CoverReplicationData = 0x0268;
		}

		namespace CoverSlipReachSpec {
			constexpr uintptr_t SpecDirection = 0x00C8;
		}

		namespace CrowdAgentBase {
			constexpr uintptr_t VfTable_IInterface_NavigationHandle = 0x0268;
		}

		namespace CullDistanceVolume {
			constexpr uintptr_t CullDistances = 0x02A8;
			constexpr uintptr_t bEnabled = 0x02B8;
		}

		namespace CurveEdPresetCurve {
			constexpr uintptr_t CurveName = 0x0060;
			constexpr uintptr_t Points = 0x0070;
		}

		namespace CylinderComponent {
			constexpr uintptr_t CollisionHeight = 0x0258;
			constexpr uintptr_t CollisionRadius = 0x025C;
			constexpr uintptr_t CylinderColor = 0x0260;
			constexpr uintptr_t Bitfields_0x0264 = 0x0264;  // Multiple: bDrawBoundingBox, bDrawNonColliding, bAlwaysRenderIfSelected
		}

		namespace DOFAndBloomEffect {
			constexpr uintptr_t BloomScale = 0x00B8;
			constexpr uintptr_t BloomThreshold = 0x00BC;
			constexpr uintptr_t BloomTint = 0x00C0;
			constexpr uintptr_t BloomScreenBlendThreshold = 0x00C4;
			constexpr uintptr_t SceneMultiplier = 0x00C8;
			constexpr uintptr_t BlurBloomKernelSize = 0x00CC;
			constexpr uintptr_t bEnableReferenceDOF = 0x00D0;
			constexpr uintptr_t DepthOfFieldType = 0x00D4;
			constexpr uintptr_t DepthOfFieldQuality = 0x00D5;
			constexpr uintptr_t BokehTexture = 0x00D8;
		}

		namespace DOFBloomMotionBlurEffect {
			constexpr uintptr_t MaxVelocity = 0x00E0;
			constexpr uintptr_t MotionBlurAmount = 0x00E4;
			constexpr uintptr_t FullMotionBlur = 0x00E8;
			constexpr uintptr_t CameraRotationThreshold = 0x00EC;
			constexpr uintptr_t CameraTranslationThreshold = 0x00F0;
		}

		namespace DOFEffect {
			constexpr uintptr_t FalloffExponent = 0x0088;
			constexpr uintptr_t BlurKernelSize = 0x008C;
			constexpr uintptr_t MaxNearBlurAmount = 0x0090;
			constexpr uintptr_t MinBlurAmount = 0x0094;
			constexpr uintptr_t MaxFarBlurAmount = 0x0098;
			constexpr uintptr_t FocusType = 0x009C;
			constexpr uintptr_t FocusInnerRadius = 0x00A0;
			constexpr uintptr_t FocusDistance = 0x00A4;
			constexpr uintptr_t FocusPosition = 0x00A8;
		}

		namespace DataStoreClient {
			constexpr uintptr_t GlobalDataStoreClasses = 0x0070;
			constexpr uintptr_t GlobalDataStores = 0x0080;
			constexpr uintptr_t PlayerDataStoreClassNames = 0x0090;
			constexpr uintptr_t PlayerDataStoreClasses = 0x00A0;
			constexpr uintptr_t PlayerDataStores = 0x00B0;
		}

		namespace DateTime {
			constexpr uintptr_t EpochTime = 0x0060;
			constexpr uintptr_t Year = 0x0068;
			constexpr uintptr_t Month = 0x006C;
			constexpr uintptr_t Day = 0x0070;
			constexpr uintptr_t WeekDay = 0x0074;
			constexpr uintptr_t Hour = 0x0078;
			constexpr uintptr_t Minute = 0x007C;
			constexpr uintptr_t Second = 0x0080;
			constexpr uintptr_t TimeZone = 0x0084;
		}

		namespace DecalActorBase {
			constexpr uintptr_t VfTable_IEditorLinkSelectionInterface = 0x0268;
			constexpr uintptr_t Decal = 0x0270;
		}

		namespace DecalComponent {
			constexpr uintptr_t VfTable_IISetParameter = 0x0258;
			constexpr uintptr_t DecalMaterial = 0x0260;
			constexpr uintptr_t Width = 0x0268;
			constexpr uintptr_t Height = 0x026C;
			constexpr uintptr_t TileX = 0x0270;
			constexpr uintptr_t TileY = 0x0274;
			constexpr uintptr_t OffsetX = 0x0278;
			constexpr uintptr_t OffsetY = 0x027C;
			constexpr uintptr_t DecalRotation = 0x0280;
			constexpr uintptr_t FieldOfView = 0x0284;
			constexpr uintptr_t NearPlane = 0x0288;
			constexpr uintptr_t FarPlane = 0x028C;
			constexpr uintptr_t Location = 0x0290;
			constexpr uintptr_t Orientation = 0x029C;
			constexpr uintptr_t HitLocation = 0x02A8;
			constexpr uintptr_t HitNormal = 0x02B4;
			constexpr uintptr_t HitTangent = 0x02C0;
			constexpr uintptr_t HitBinormal = 0x02CC;
			constexpr uintptr_t Bitfields_0x02D8 = 0x02D8;  // Multiple: bNoClip, bStaticDecal, bProjectOnBackfaces, bProjectOnHidden, bProjectOnBSP, bProjectOnStaticMeshes, bProjectOnSkeletalMeshes, bProjectOnTerrain, bProjectOnOwner, bFlipBackfaceDirection, bMovableDecal, bHasBeenAttached, bDecalMaterialSetAtRunTime
			constexpr uintptr_t HitComponent = 0x02E0;
			constexpr uintptr_t HitBone = 0x02E8;
			constexpr uintptr_t HitNodeIndex = 0x02F0;
			constexpr uintptr_t HitLevelIndex = 0x02F4;
			constexpr uintptr_t FracturedStaticMeshComponentIndex = 0x02F8;
			constexpr uintptr_t HitNodeIndices = 0x0300;
			constexpr uintptr_t DecalReceivers = 0x0310;
			constexpr uintptr_t StaticReceivers = 0x0320;
			constexpr uintptr_t ReleaseResourcesFence = 0x0330;
			constexpr uintptr_t Planes = 0x0338;
			constexpr uintptr_t DepthBias = 0x0348;
			constexpr uintptr_t SlopeScaleDepthBias = 0x034C;
			constexpr uintptr_t SortOrder = 0x0350;
			constexpr uintptr_t BackfaceAngle = 0x0354;
			constexpr uintptr_t BlendRange = 0x0358;
			constexpr uintptr_t StreamingDistanceMultiplier = 0x0360;
			constexpr uintptr_t DecalTransform = 0x0364;
			constexpr uintptr_t FilterMode = 0x0365;
			constexpr uintptr_t Filter = 0x0368;
			constexpr uintptr_t ReceiverImages = 0x0378;
			constexpr uintptr_t ParentRelativeLocation = 0x0388;
			constexpr uintptr_t ParentRelativeOrientation = 0x0394;
			constexpr uintptr_t ParentRelLocRotMatrix = 0x03A0;
		}

		namespace DecalManager {
			constexpr uintptr_t DecalTemplate = 0x0268;
			constexpr uintptr_t PoolDecals = 0x0270;
			constexpr uintptr_t MaxActiveDecals = 0x0280;
			constexpr uintptr_t DecalLifeSpan = 0x0284;
			constexpr uintptr_t DecalDepthBias = 0x0288;
			constexpr uintptr_t DecalBlendRange = 0x028C;
			constexpr uintptr_t ActiveDecals = 0x0298;
		}

		namespace DemoRecDriver {
			constexpr uintptr_t UnknownData00 = 0x0258;
			constexpr uintptr_t DemoSpectatorClass = 0x0288;
			constexpr uintptr_t UnknownData01 = 0x0298;
			constexpr uintptr_t MaxRewindPoints = 0x0338;
			constexpr uintptr_t RewindPointInterval = 0x0340;
			constexpr uintptr_t NumRecentRewindPoints = 0x0344;
			constexpr uintptr_t UnknownData02 = 0x0348;
		}

		namespace DirectionalLight {
			constexpr uintptr_t UnknownData00 = 0x0274;
		}

		namespace DirectionalLightComponent {
			constexpr uintptr_t TraceDistance = 0x01C8;
			constexpr uintptr_t WholeSceneDynamicShadowRadius = 0x01CC;
			constexpr uintptr_t NumWholeSceneDynamicShadowCascades = 0x01D0;
			constexpr uintptr_t CascadeDistributionExponent = 0x01D4;
			constexpr uintptr_t LightmassSettings = 0x01D8;
		}

		namespace DistributionFloatConstant {
			constexpr uintptr_t Constant = 0x0080;
		}

		namespace DistributionFloatConstantCurve {
			constexpr uintptr_t ConstantCurve = 0x0080;
		}

		namespace DistributionFloatParameterBase {
			constexpr uintptr_t ParameterName = 0x0088;
			constexpr uintptr_t MinInput = 0x0090;
			constexpr uintptr_t MaxInput = 0x0094;
			constexpr uintptr_t MinOutput = 0x0098;
			constexpr uintptr_t MaxOutput = 0x009C;
			constexpr uintptr_t ParamMode = 0x00A0;
		}

		namespace DistributionFloatParticleParameter {
			constexpr uintptr_t UnknownData00 = 0x00A1;
		}

		namespace DistributionFloatSoundParameter {
			constexpr uintptr_t UnknownData00 = 0x00A1;
		}

		namespace DistributionFloatUniform {
			constexpr uintptr_t Min = 0x0080;
			constexpr uintptr_t Max = 0x0084;
		}

		namespace DistributionFloatUniformCurve {
			constexpr uintptr_t ConstantCurve = 0x0080;
		}

		namespace DistributionFloatUniformRange {
			constexpr uintptr_t MaxHigh = 0x0080;
			constexpr uintptr_t MaxLow = 0x0084;
			constexpr uintptr_t MinHigh = 0x0088;
			constexpr uintptr_t MinLow = 0x008C;
			constexpr uintptr_t bMirrorMaxMin = 0x0090;
		}

		namespace DistributionVectorConstant {
			constexpr uintptr_t Constant = 0x0080;
			constexpr uintptr_t bLockAxes = 0x008C;
			constexpr uintptr_t LockedAxes = 0x0090;
		}

		namespace DistributionVectorConstantCurve {
			constexpr uintptr_t Curve = 0x00A0;
		}

		namespace DistributionVectorConstantCurveBase {
			constexpr uintptr_t ConstantCurve = 0x0080;
			constexpr uintptr_t bLockAxes = 0x0098;
			constexpr uintptr_t LockedAxes = 0x009C;
		}

		namespace DistributionVectorConstantCurveParticleParameter {
			constexpr uintptr_t Points = 0x00A0;
			constexpr uintptr_t InterpMethod = 0x00B0;
			constexpr uintptr_t bIsEditingCurve = 0x00B4;
		}

		namespace DistributionVectorParameterBase {
			constexpr uintptr_t ParameterName = 0x0098;
			constexpr uintptr_t MinInput = 0x00A0;
			constexpr uintptr_t MaxInput = 0x00AC;
			constexpr uintptr_t MinOutput = 0x00B8;
			constexpr uintptr_t MaxOutput = 0x00C4;
			constexpr uintptr_t ParamModes = 0x00D0;
		}

		namespace DistributionVectorParticleParameter {
			constexpr uintptr_t UnknownData00 = 0x00D3;
		}

		namespace DistributionVectorUniform {
			constexpr uintptr_t Max = 0x0080;
			constexpr uintptr_t Min = 0x008C;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bLockAxes, bUseExtremes
			constexpr uintptr_t LockedAxes = 0x009C;
			constexpr uintptr_t MirrorFlags = 0x009D;
		}

		namespace DistributionVectorUniformCurve {
			constexpr uintptr_t ConstantCurve = 0x0080;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bLockAxes1, bLockAxes2, bUseExtremes
			constexpr uintptr_t LockedAxes = 0x009C;
			constexpr uintptr_t MirrorFlags = 0x009E;
		}

		namespace DistributionVectorUniformRange {
			constexpr uintptr_t MaxHigh = 0x0080;
			constexpr uintptr_t MaxLow = 0x008C;
			constexpr uintptr_t MinHigh = 0x0098;
			constexpr uintptr_t MinLow = 0x00A4;
		}

		namespace DominantDirectionalLightComponent {
			constexpr uintptr_t UnknownData00 = 0x01E8;
			constexpr uintptr_t DominantLightShadowInfo = 0x01F0;
			constexpr uintptr_t DominantLightShadowMap = 0x02A0;
		}

		namespace DominantPointLightComponent {
			constexpr uintptr_t UnknownData00 = 0x0264;
		}

		namespace DominantSpotLightComponent {
			constexpr uintptr_t UnknownData00 = 0x0294;
			constexpr uintptr_t DominantLightShadowInfo = 0x02A0;
			constexpr uintptr_t DominantLightShadowMap = 0x0350;
		}

		namespace Download {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace DownloadableContentEnumerator {
			constexpr uintptr_t DLCBundles = 0x0060;
			constexpr uintptr_t DLCRootDir = 0x0070;
		}

		namespace DownloadableContentManager {
			constexpr uintptr_t DLCConfigCacheChanges = 0x0060;
			constexpr uintptr_t InstalledDLC = 0x0070;
			constexpr uintptr_t NonPackageFilePathMap = 0x0080;
			constexpr uintptr_t ClassesToReload = 0x00D0;
			constexpr uintptr_t ObjectsToReload = 0x00E0;
			constexpr uintptr_t QueuedFullyLoadPackageInis = 0x00F0;
			constexpr uintptr_t GameEngine = 0x0100;
		}

		namespace DrawBoxComponent {
			constexpr uintptr_t BoxColor = 0x0258;
			constexpr uintptr_t BoxMaterial = 0x0260;
			constexpr uintptr_t BoxExtent = 0x0268;
			constexpr uintptr_t Bitfields_0x0274 = 0x0274;  // Multiple: bDrawWireBox, bDrawLitBox, bDrawOnlyIfSelected
		}

		namespace DrawCapsuleComponent {
			constexpr uintptr_t CapsuleColor = 0x0258;
			constexpr uintptr_t CapsuleMaterial = 0x0260;
			constexpr uintptr_t CapsuleHeight = 0x0268;
			constexpr uintptr_t CapsuleRadius = 0x026C;
			constexpr uintptr_t Bitfields_0x0270 = 0x0270;  // Multiple: bDrawWireCapsule, bDrawLitCapsule, bDrawOnlyIfSelected
		}

		namespace DrawConeComponent {
			constexpr uintptr_t ConeColor = 0x0258;
			constexpr uintptr_t ConeRadius = 0x025C;
			constexpr uintptr_t ConeAngle = 0x0260;
			constexpr uintptr_t ConeSides = 0x0264;
		}

		namespace DrawCylinderComponent {
			constexpr uintptr_t CylinderColor = 0x0258;
			constexpr uintptr_t CylinderMaterial = 0x0260;
			constexpr uintptr_t CylinderRadius = 0x0268;
			constexpr uintptr_t CylinderTopRadius = 0x026C;
			constexpr uintptr_t CylinderHeight = 0x0270;
			constexpr uintptr_t CylinderHeightOffset = 0x0274;
			constexpr uintptr_t CylinderSides = 0x0278;
			constexpr uintptr_t Bitfields_0x027C = 0x027C;  // Multiple: bDrawWireCylinder, bDrawLitCylinder, bDrawOnlyIfSelected
		}

		namespace DrawFrustumComponent {
			constexpr uintptr_t FrustumColor = 0x0258;
			constexpr uintptr_t FrustumAngle = 0x025C;
			constexpr uintptr_t FrustumAspectRatio = 0x0260;
			constexpr uintptr_t FrustumStartDist = 0x0264;
			constexpr uintptr_t FrustumEndDist = 0x0268;
			constexpr uintptr_t Texture = 0x0270;
		}

		namespace DrawLightRadiusComponent {
			constexpr uintptr_t UnknownData00 = 0x0274;
		}

		namespace DrawPylonRadiusComponent {
			constexpr uintptr_t UnknownData00 = 0x0274;
		}

		namespace DrawQuadComponent {
			constexpr uintptr_t Texture = 0x0258;
			constexpr uintptr_t Width = 0x0260;
			constexpr uintptr_t Height = 0x0264;
		}

		namespace DrawSoundRadiusComponent {
			constexpr uintptr_t UnknownData00 = 0x0274;
		}

		namespace DrawSphereComponent {
			constexpr uintptr_t SphereColor = 0x0258;
			constexpr uintptr_t SphereMaterial = 0x0260;
			constexpr uintptr_t SphereRadius = 0x0268;
			constexpr uintptr_t SphereSides = 0x026C;
			constexpr uintptr_t Bitfields_0x0270 = 0x0270;  // Multiple: bDrawWireSphere, bDrawLitSphere, bDrawOnlyIfSelected
		}

		namespace DwTriovizImplEffect {
			constexpr uintptr_t UnknownData00 = 0x0085;
		}

		namespace DynamicAnchor {
			constexpr uintptr_t CurrentUser = 0x0388;
		}

		namespace DynamicBlockingVolume {
			constexpr uintptr_t bEnabled = 0x02B0;
		}

		namespace DynamicLightEnvironmentComponent {
			constexpr uintptr_t State = 0x00C0;
			constexpr uintptr_t InvisibleUpdateTime = 0x00C8;
			constexpr uintptr_t MinTimeBetweenFullUpdates = 0x00CC;
			constexpr uintptr_t VelocityUpdateTimeScale = 0x00D0;
			constexpr uintptr_t ShadowInterpolationSpeed = 0x00D4;
			constexpr uintptr_t NumVolumeVisibilitySamples = 0x00D8;
			constexpr uintptr_t LightingBoundsScale = 0x00DC;
			constexpr uintptr_t AmbientShadowColor = 0x00E0;
			constexpr uintptr_t AmbientShadowSourceDirection = 0x00F0;
			constexpr uintptr_t AmbientGlow = 0x00FC;
			constexpr uintptr_t LightDistance = 0x010C;
			constexpr uintptr_t ShadowDistance = 0x0110;
			constexpr uintptr_t Bitfields_0x0114 = 0x0114;  // Multiple: bCastShadows, bCompositeShadowsFromDynamicLights, bForceCompositeAllLights, bAffectedBySmallDynamicLights, bUseBooleanEnvironmentShadowing, bShadowFromEnvironment, bDynamic, bSynthesizeDirectionalLight, bSynthesizeSHLight, bRequiresNonLatentUpdates, bTraceFromClosestBoundsPoint, bIsCharacterLightEnvironment, bOverrideOwnerLightingChannels, bAlwaysInfluencedByDominantDirectionalLight
			constexpr uintptr_t ModShadowFadeoutTime = 0x0118;
			constexpr uintptr_t ModShadowFadeoutExponent = 0x011C;
			constexpr uintptr_t MaxModulatedShadowColor = 0x0120;
			constexpr uintptr_t DominantShadowTransitionStartDistance = 0x0130;
			constexpr uintptr_t DominantShadowTransitionEndDistance = 0x0134;
			constexpr uintptr_t MinShadowAngle = 0x0138;
			constexpr uintptr_t BoundsMethod = 0x013C;
			constexpr uintptr_t OverriddenBounds = 0x0140;
			constexpr uintptr_t OverriddenLightingChannels = 0x015C;
			constexpr uintptr_t OverriddenLightComponents = 0x0160;
		}

		namespace DynamicPhysicsVolume {
			constexpr uintptr_t bEnabled = 0x02D8;
		}

		namespace DynamicPylon {
			constexpr uintptr_t bMoving = 0x04A8;
		}

		namespace DynamicSMActor {
			constexpr uintptr_t StaticMeshComponent = 0x0268;
			constexpr uintptr_t LightEnvironment = 0x0270;
			constexpr uintptr_t ReplicatedMesh = 0x0278;
			constexpr uintptr_t ReplicatedMaterial0 = 0x0280;
			constexpr uintptr_t ReplicatedMaterial1 = 0x0288;
			constexpr uintptr_t ReplicatedMaterial2 = 0x0290;
			constexpr uintptr_t ReplicatedMaterial3 = 0x0298;
			constexpr uintptr_t Bitfields_0x02A0 = 0x02A0;  // Multiple: bForceStaticDecals, bPawnCanBaseOn, bSafeBaseIfAsleep
			constexpr uintptr_t ReplicatedMeshTranslation = 0x02A4;
			constexpr uintptr_t ReplicatedMeshRotation = 0x02B0;
			constexpr uintptr_t ReplicatedMeshScale3D = 0x02BC;
		}

		namespace DynamicTriggerVolume {
			constexpr uintptr_t bEnabled = 0x02A8;
		}

		namespace EdCoordSystem {
			constexpr uintptr_t M = 0x0060;
			constexpr uintptr_t Desc = 0x00A0;
		}

		namespace Emitter {
			constexpr uintptr_t ParticleSystemComponent = 0x0268;
			constexpr uintptr_t LightEnvironment = 0x0270;
			constexpr uintptr_t Bitfields_0x0278 = 0x0278;  // Multiple: bDestroyOnSystemFinish, bPostUpdateTickGroup, bCurrentlyActive
		}

		namespace EmitterCameraLensEffectBase {
			constexpr uintptr_t PS_CameraEffect = 0x0280;
			constexpr uintptr_t PS_CameraEffectNonExtremeContent = 0x0288;
			constexpr uintptr_t BaseFOV = 0x0290;
			constexpr uintptr_t DistFromCamera = 0x0294;
			constexpr uintptr_t bAllowMultipleInstances = 0x0298;
			constexpr uintptr_t EmittersToTreatAsSame = 0x02A0;
			constexpr uintptr_t BaseCamera = 0x02B0;
		}

		namespace EmitterPool {
			constexpr uintptr_t PSCTemplate = 0x0268;
			constexpr uintptr_t PoolComponents = 0x0270;
			constexpr uintptr_t ActiveComponents = 0x0280;
			constexpr uintptr_t MaxActiveEffects = 0x0290;
			constexpr uintptr_t Bitfields_0x0294 = 0x0294;  // Multiple: bLogPoolOverflow, bLogPoolOverflowList
			constexpr uintptr_t RelativePSCs = 0x0298;
			constexpr uintptr_t SMC_MIC_ReductionTime = 0x02A8;
			constexpr uintptr_t SMC_MIC_CurrentReductionTime = 0x02AC;
			constexpr uintptr_t IdealStaticMeshComponents = 0x02B0;
			constexpr uintptr_t IdealMaterialInstanceConstants = 0x02B4;
			constexpr uintptr_t FreeSMComponents = 0x02B8;
			constexpr uintptr_t FreeMatInstConsts = 0x02C8;
		}

		namespace EmitterSpawnable {
			constexpr uintptr_t ParticleTemplate = 0x0280;
		}

		namespace Engine {
			constexpr uintptr_t GameShareClassName = 0x0068;
			constexpr uintptr_t GameShareClass = 0x0078;
			constexpr uintptr_t EngineShareClassName = 0x0080;
			constexpr uintptr_t EngineShare = 0x0090;
			constexpr uintptr_t BuildID = 0x0098;
			constexpr uintptr_t NetDriverSecurity = 0x00A0;
			constexpr uintptr_t TinyFont = 0x00A8;
			constexpr uintptr_t TinyFontName = 0x00B0;
			constexpr uintptr_t SmallFont = 0x00C0;
			constexpr uintptr_t SmallFontName = 0x00C8;
			constexpr uintptr_t MediumFont = 0x00D8;
			constexpr uintptr_t MediumFontName = 0x00E0;
			constexpr uintptr_t LargeFont = 0x00F0;
			constexpr uintptr_t LargeFontName = 0x00F8;
			constexpr uintptr_t SubtitleFont = 0x0108;
			constexpr uintptr_t SubtitleFontName = 0x0110;
			constexpr uintptr_t ScalableFont = 0x0120;
			constexpr uintptr_t ScalableFontName = 0x0128;
			constexpr uintptr_t AdditionalFonts = 0x0138;
			constexpr uintptr_t AdditionalFontNames = 0x0148;
			constexpr uintptr_t ConsoleClass = 0x0158;
			constexpr uintptr_t ConsoleClassName = 0x0160;
			constexpr uintptr_t GameViewportClientClass = 0x0170;
			constexpr uintptr_t GameViewportClientClassName = 0x0178;
			constexpr uintptr_t DataStoreClientClass = 0x0188;
			constexpr uintptr_t DataStoreClientClassName = 0x0190;
			constexpr uintptr_t LocalPlayerClass = 0x01A0;
			constexpr uintptr_t LocalPlayerClassName = 0x01A8;
			constexpr uintptr_t DefaultMaterial = 0x01B8;
			constexpr uintptr_t DefaultMaterialName = 0x01C0;
			constexpr uintptr_t DefaultDecalMaterial = 0x01D0;
			constexpr uintptr_t DefaultDecalMaterialName = 0x01D8;
			constexpr uintptr_t DefaultTexture = 0x01E8;
			constexpr uintptr_t DefaultTextureName = 0x01F0;
			constexpr uintptr_t WireframeMaterial = 0x0200;
			constexpr uintptr_t WireframeMaterialName = 0x0208;
			constexpr uintptr_t EmissiveTexturedMaterial = 0x0218;
			constexpr uintptr_t EmissiveTexturedMaterialName = 0x0220;
			constexpr uintptr_t GeomMaterial = 0x0230;
			constexpr uintptr_t GeomMaterialName = 0x0238;
			constexpr uintptr_t DefaultFogVolumeMaterial = 0x0248;
			constexpr uintptr_t DefaultFogVolumeMaterialName = 0x0250;
			constexpr uintptr_t TickMaterial = 0x0260;
			constexpr uintptr_t TickMaterialName = 0x0268;
			constexpr uintptr_t CrossMaterial = 0x0278;
			constexpr uintptr_t CrossMaterialName = 0x0280;
			constexpr uintptr_t LevelColorationLitMaterial = 0x0290;
			constexpr uintptr_t LevelColorationLitMaterialName = 0x0298;
			constexpr uintptr_t LevelColorationUnlitMaterial = 0x02A8;
			constexpr uintptr_t LevelColorationUnlitMaterialName = 0x02B0;
			constexpr uintptr_t LightingTexelDensityMaterial = 0x02C0;
			constexpr uintptr_t LightingTexelDensityName = 0x02C8;
			constexpr uintptr_t ShadedLevelColorationLitMaterial = 0x02D8;
			constexpr uintptr_t ShadedLevelColorationLitMaterialName = 0x02E0;
			constexpr uintptr_t ShadedLevelColorationUnlitMaterial = 0x02F0;
			constexpr uintptr_t ShadedLevelColorationUnlitMaterialName = 0x02F8;
			constexpr uintptr_t RemoveSurfaceMaterial = 0x0308;
			constexpr uintptr_t RemoveSurfaceMaterialName = 0x0310;
			constexpr uintptr_t VertexColorMaterial = 0x0320;
			constexpr uintptr_t VertexColorMaterialName = 0x0328;
			constexpr uintptr_t VertexColorViewModeMaterial_ColorOnly = 0x0338;
			constexpr uintptr_t VertexColorViewModeMaterialName_ColorOnly = 0x0340;
			constexpr uintptr_t VertexColorViewModeMaterial_AlphaAsColor = 0x0350;
			constexpr uintptr_t VertexColorViewModeMaterialName_AlphaAsColor = 0x0358;
			constexpr uintptr_t VertexColorViewModeMaterial_RedOnly = 0x0368;
			constexpr uintptr_t VertexColorViewModeMaterialName_RedOnly = 0x0370;
			constexpr uintptr_t VertexColorViewModeMaterial_GreenOnly = 0x0380;
			constexpr uintptr_t VertexColorViewModeMaterialName_GreenOnly = 0x0388;
			constexpr uintptr_t VertexColorViewModeMaterial_BlueOnly = 0x0398;
			constexpr uintptr_t VertexColorViewModeMaterialName_BlueOnly = 0x03A0;
			constexpr uintptr_t HeatmapMaterial = 0x03B0;
			constexpr uintptr_t HeatmapMaterialName = 0x03B8;
			constexpr uintptr_t BoneWeightMaterial = 0x03C8;
			constexpr uintptr_t BoneWeightMaterialName = 0x03D0;
			constexpr uintptr_t TangentColorMaterial = 0x03E0;
			constexpr uintptr_t TangentColorMaterialName = 0x03E8;
			constexpr uintptr_t MobileEmulationMasterMaterial = 0x03F8;
			constexpr uintptr_t MobileEmulationMasterMaterialName = 0x0400;
			constexpr uintptr_t ProcBuildingSimpleMaterial = 0x0410;
			constexpr uintptr_t ProcBuildingSimpleMaterialName = 0x0418;
			constexpr uintptr_t BuildingQuadStaticMesh = 0x0428;
			constexpr uintptr_t BuildingQuadStaticMeshName = 0x0430;
			constexpr uintptr_t ProcBuildingLODColorTexelsPerWorldUnit = 0x0440;
			constexpr uintptr_t ProcBuildingLODLightingTexelsPerWorldUnit = 0x0444;
			constexpr uintptr_t MaxProcBuildingLODColorTextureSize = 0x0448;
			constexpr uintptr_t MaxProcBuildingLODLightingTextureSize = 0x044C;
			constexpr uintptr_t Bitfields_0x0450 = 0x0450;  // Multiple: UseProcBuildingLODTextureCropping, ForcePowerOfTwoProcBuildingLODTextures, bCombineSimilarMappings, bRenderLightMapDensityGrayscale, bScreenshotRequested, bUseSound, bUseBackgroundLevelStreaming, bSubtitlesEnabled, bSubtitlesForcedOff, bSmoothFrameRate, bCheckForMultiplePawnsSpawnedInAFrame, bShouldGenerateSimpleLightmaps, bForceStaticTerrain, bForceCPUSkinning, bUsePostProcessEffects, bOnScreenKismetWarnings, bEnableKismetLogging, bAllowMatureLanguage, bDisablePhysXHardwareSupport, bEnablePhysX, bPauseOnLossOfFocus, bCheckParticleRenderSize, bEnableColorClear, bEnableSwitchRenderMode, bShowAllHiddenObjects, bAreConstraintsDirty, bHasPendingGlobalReattach, bEnableOnScreenDebugMessages, bEnableOnScreenDebugMessagesDisplay, bSuppressMapWarnings, bCookSeparateSharedMPGameContent, bUseRecastNavMesh
			constexpr uintptr_t Bitfields_0x0454 = 0x0454;  // Multiple: bDisableAILogging, bUseNormalMapsForSimpleLightMaps, bStartWithMatineeCapture, bCompressMatineeCapture, bLockReadOnlyLevels
			constexpr uintptr_t MaxRMSDForCombiningMappings = 0x0458;
			constexpr uintptr_t ImageReflectionTextureSize = 0x045C;
			constexpr uintptr_t LightingOnlyBrightness = 0x0460;
			constexpr uintptr_t LightComplexityColors = 0x0470;
			constexpr uintptr_t ShaderComplexityColors = 0x0480;
			constexpr uintptr_t MaxPixelShaderAdditiveComplexityCount = 0x0490;
			constexpr uintptr_t MinTextureDensity = 0x0494;
			constexpr uintptr_t IdealTextureDensity = 0x0498;
			constexpr uintptr_t MaxTextureDensity = 0x049C;
			constexpr uintptr_t MinLightMapDensity = 0x04A0;
			constexpr uintptr_t IdealLightMapDensity = 0x04A4;
			constexpr uintptr_t MaxLightMapDensity = 0x04A8;
			constexpr uintptr_t RenderLightMapDensityGrayscaleScale = 0x04AC;
			constexpr uintptr_t RenderLightMapDensityColorScale = 0x04B0;
			constexpr uintptr_t LightMapDensityVertexMappedColor = 0x04B4;
			constexpr uintptr_t LightMapDensitySelectedColor = 0x04C4;
			constexpr uintptr_t StatColorMappings = 0x04D8;
			constexpr uintptr_t EditorBrushMaterial = 0x04E8;
			constexpr uintptr_t EditorBrushMaterialName = 0x04F0;
			constexpr uintptr_t DefaultPhysMaterial = 0x0500;
			constexpr uintptr_t DefaultPhysMaterialName = 0x0508;
			constexpr uintptr_t LandscapeHolePhysMaterial = 0x0518;
			constexpr uintptr_t LandscapeHolePhysMaterialName = 0x0520;
			constexpr uintptr_t ApexDamageParams = 0x0530;
			constexpr uintptr_t ApexDamageParamsName = 0x0538;
			constexpr uintptr_t TerrainErrorMaterial = 0x0548;
			constexpr uintptr_t TerrainErrorMaterialName = 0x0550;
			constexpr uintptr_t TerrainMaterialMaxTextureCount = 0x0560;
			constexpr uintptr_t TerrainTessellationCheckCount = 0x0564;
			constexpr uintptr_t TerrainTessellationCheckDistance = 0x0568;
			constexpr uintptr_t OnlineSubsystemClass = 0x0570;
			constexpr uintptr_t DefaultOnlineSubsystemName = 0x0578;
			constexpr uintptr_t DefaultPostProcess = 0x0588;
			constexpr uintptr_t DefaultPostProcessName = 0x0590;
			constexpr uintptr_t ThumbnailSkeletalMeshPostProcess = 0x05A0;
			constexpr uintptr_t ThumbnailSkeletalMeshPostProcessName = 0x05A8;
			constexpr uintptr_t ThumbnailParticleSystemPostProcess = 0x05B8;
			constexpr uintptr_t ThumbnailParticleSystemPostProcessName = 0x05C0;
			constexpr uintptr_t ThumbnailMaterialPostProcess = 0x05D0;
			constexpr uintptr_t ThumbnailMaterialPostProcessName = 0x05D8;
			constexpr uintptr_t DefaultUIScenePostProcess = 0x05E8;
			constexpr uintptr_t DefaultUIScenePostProcessName = 0x05F0;
			constexpr uintptr_t DefaultUICaretMaterial = 0x0600;
			constexpr uintptr_t DefaultUICaretMaterialName = 0x0608;
			constexpr uintptr_t SceneCaptureReflectActorMaterial = 0x0618;
			constexpr uintptr_t SceneCaptureReflectActorMaterialName = 0x0620;
			constexpr uintptr_t SceneCaptureCubeActorMaterial = 0x0630;
			constexpr uintptr_t SceneCaptureCubeActorMaterialName = 0x0638;
			constexpr uintptr_t ScreenDoorNoiseTexture = 0x0648;
			constexpr uintptr_t ScreenDoorNoiseTextureName = 0x0650;
			constexpr uintptr_t ImageGrainNoiseTexture = 0x0660;
			constexpr uintptr_t ImageGrainNoiseTextureName = 0x0668;
			constexpr uintptr_t RandomAngleTexture = 0x0678;
			constexpr uintptr_t RandomAngleTextureName = 0x0680;
			constexpr uintptr_t RandomNormalTexture = 0x0690;
			constexpr uintptr_t RandomNormalTextureName = 0x0698;
			constexpr uintptr_t RandomMirrorDiscTexture = 0x06A8;
			constexpr uintptr_t RandomMirrorDiscTextureName = 0x06B0;
			constexpr uintptr_t WeightMapPlaceholderTexture = 0x06C0;
			constexpr uintptr_t WeightMapPlaceholderTextureName = 0x06C8;
			constexpr uintptr_t LightMapDensityTexture = 0x06D8;
			constexpr uintptr_t LightMapDensityTextureName = 0x06E0;
			constexpr uintptr_t SMAAAreaTexture = 0x06F0;
			constexpr uintptr_t SMAAAreaTextureName = 0x06F8;
			constexpr uintptr_t SMAASearchTexture = 0x0708;
			constexpr uintptr_t SMAASearchTextureName = 0x0710;
			constexpr uintptr_t LightMapDensityNormal = 0x0720;
			constexpr uintptr_t LightMapDensityNormalName = 0x0728;
			constexpr uintptr_t DefaultSound = 0x0738;
			constexpr uintptr_t DefaultSoundName = 0x0740;
			constexpr uintptr_t TimeBetweenPurgingPendingKillObjects = 0x0750;
			constexpr uintptr_t Client = 0x0758;
			constexpr uintptr_t GamePlayers = 0x0760;
			constexpr uintptr_t GameViewport = 0x0770;
			constexpr uintptr_t DeferredCommands = 0x0778;
			constexpr uintptr_t TickCycles = 0x0788;
			constexpr uintptr_t GameCycles = 0x078C;
			constexpr uintptr_t ClientCycles = 0x0790;
			constexpr uintptr_t MaxSmoothedFrameRate = 0x0794;
			constexpr uintptr_t MinSmoothedFrameRate = 0x0798;
			constexpr uintptr_t NumPawnsAllowedToBeSpawnedInAFrame = 0x079C;
			constexpr uintptr_t RemoteControlExec = 0x07A0;
			constexpr uintptr_t MobileMaterialEmulator = 0x07A8;
			constexpr uintptr_t C_WorldBox = 0x07B0;
			constexpr uintptr_t C_BrushWire = 0x07B4;
			constexpr uintptr_t C_AddWire = 0x07B8;
			constexpr uintptr_t C_SubtractWire = 0x07BC;
			constexpr uintptr_t C_SemiSolidWire = 0x07C0;
			constexpr uintptr_t C_NonSolidWire = 0x07C4;
			constexpr uintptr_t C_WireBackground = 0x07C8;
			constexpr uintptr_t C_ScaleBoxHi = 0x07CC;
			constexpr uintptr_t C_VolumeCollision = 0x07D0;
			constexpr uintptr_t C_BSPCollision = 0x07D4;
			constexpr uintptr_t C_OrthoBackground = 0x07D8;
			constexpr uintptr_t C_Volume = 0x07DC;
			constexpr uintptr_t C_BrushShape = 0x07E0;
			constexpr uintptr_t StreamingDistanceFactor = 0x07E4;
			constexpr uintptr_t ScoutClassName = 0x07E8;
			constexpr uintptr_t TransitionType = 0x07F8;
			constexpr uintptr_t TransitionDescription = 0x0800;
			constexpr uintptr_t TransitionGameType = 0x0810;
			constexpr uintptr_t MeshLODRange = 0x0820;
			constexpr uintptr_t CameraRotationThreshold = 0x0824;
			constexpr uintptr_t CameraTranslationThreshold = 0x0828;
			constexpr uintptr_t PrimitiveProbablyVisibleTime = 0x082C;
			constexpr uintptr_t PercentUnoccludedRequeries = 0x0830;
			constexpr uintptr_t MaxOcclusionPixelsFraction = 0x0834;
			constexpr uintptr_t MaxFluidNumVerts = 0x0838;
			constexpr uintptr_t FluidSimulationTimeLimit = 0x083C;
			constexpr uintptr_t MaxParticleResize = 0x0840;
			constexpr uintptr_t MaxParticleResizeWarn = 0x0844;
			constexpr uintptr_t MaxParticleVertexMemory = 0x0848;
			constexpr uintptr_t MaxParticleSpriteCount = 0x084C;
			constexpr uintptr_t MaxParticleSubUVCount = 0x0850;
			constexpr uintptr_t BeginUPTryCount = 0x0854;
			constexpr uintptr_t PendingDroppedNotes = 0x0858;
			constexpr uintptr_t DynamicCoverMeshComponentName = 0x0868;
			constexpr uintptr_t NetClientTicksPerSecond = 0x0878;
			constexpr uintptr_t MaxTrackedOcclusionIncrement = 0x087C;
			constexpr uintptr_t TrackedOcclusionStepSize = 0x0880;
			constexpr uintptr_t DefaultSelectedMaterialColor = 0x0884;
			constexpr uintptr_t DefaultHoveredMaterialColor = 0x0894;
			constexpr uintptr_t SelectedMaterialColor = 0x08A4;
			constexpr uintptr_t UnselectedMaterialColor = 0x08B4;
			constexpr uintptr_t IgnoreSimulatedFuncWarnings = 0x08C8;
			constexpr uintptr_t ScreenSaverInhibitorSemaphore = 0x08D8;
			constexpr uintptr_t ScreenSaverInhibitor = 0x08E0;
			constexpr uintptr_t GlobalTranslationContext = 0x08E8;
			constexpr uintptr_t LoadingMovieStartTime = 0x08F0;
			constexpr uintptr_t MatineeCaptureName = 0x08F8;
			constexpr uintptr_t MatineePackageCaptureName = 0x0908;
			constexpr uintptr_t VisibleLevelsForMatineeCapture = 0x0918;
			constexpr uintptr_t MatineeCaptureFPS = 0x0928;
			constexpr uintptr_t MatineeCaptureType = 0x092C;
			constexpr uintptr_t MapLoadTimePC = 0x0930;
			constexpr uintptr_t MapLoadTimePS4 = 0x0934;
			constexpr uintptr_t MapLoadTimeXboxOne = 0x0938;
			constexpr uintptr_t MapLoadTimeSwitch = 0x093C;
		}

		namespace EngineContent {
			constexpr uintptr_t Content = 0x0060;
		}

		namespace EnvironmentVolume {
			constexpr uintptr_t VfTable_IInterface_NavMeshPathObstacle = 0x02A8;
			constexpr uintptr_t VfTable_IInterface_NavMeshPathObject = 0x02B0;
			constexpr uintptr_t bSplitNavMesh = 0x02B8;
		}

		namespace ExponentialHeightFog {
			constexpr uintptr_t Component = 0x0268;
			constexpr uintptr_t bEnabled = 0x0270;
		}

		namespace ExponentialHeightFogComponent {
			constexpr uintptr_t bEnabled = 0x00A0;
			constexpr uintptr_t FogHeight = 0x00A4;
			constexpr uintptr_t FogDensity = 0x00A8;
			constexpr uintptr_t FogHeightFalloff = 0x00AC;
			constexpr uintptr_t FogMaxOpacity = 0x00B0;
			constexpr uintptr_t StartDistance = 0x00B4;
			constexpr uintptr_t LightTerminatorAngle = 0x00B8;
			constexpr uintptr_t OppositeLightBrightness = 0x00BC;
			constexpr uintptr_t OppositeLightColor = 0x00C0;
			constexpr uintptr_t LightInscatteringBrightness = 0x00C4;
			constexpr uintptr_t LightInscatteringColor = 0x00C8;
		}

		namespace FaceFXAnimSet {
			constexpr uintptr_t DefaultFaceFXAsset = 0x0060;
			constexpr uintptr_t InternalFaceFXAnimSet = 0x0068;
			constexpr uintptr_t RawFaceFXAnimSetBytes = 0x0070;
			constexpr uintptr_t RawFaceFXMiniSessionBytes = 0x0080;
			constexpr uintptr_t ReferencedSoundCues = 0x0090;
			constexpr uintptr_t ReferencedAkEvents = 0x00A0;
			constexpr uintptr_t NumLoadErrors = 0x00B0;
		}

		namespace FaceFXAsset {
			constexpr uintptr_t DefaultSkelMesh = 0x0060;
			constexpr uintptr_t FaceFXActor = 0x0068;
			constexpr uintptr_t RawFaceFXActorBytes = 0x0070;
			constexpr uintptr_t RawFaceFXSessionBytes = 0x0080;
			constexpr uintptr_t PreviewMorphSets = 0x0090;
			constexpr uintptr_t MountedFaceFXAnimSets = 0x00A0;
			constexpr uintptr_t ReferencedSoundCues = 0x00B0;
			constexpr uintptr_t ReferencedAkEvents = 0x00C0;
			constexpr uintptr_t NumLoadErrors = 0x00D0;
		}

		namespace FacebookIntegration {
			constexpr uintptr_t AppID = 0x0088;
			constexpr uintptr_t Permissions = 0x0098;
			constexpr uintptr_t Username = 0x00A8;
			constexpr uintptr_t UserId = 0x00B8;
			constexpr uintptr_t AccessToken = 0x00C8;
			constexpr uintptr_t FriendsList = 0x00D8;
		}

		namespace FeaturePrivilegeErrors {
			constexpr uintptr_t FPE_AgeRestriction = 0x0080;
			constexpr uintptr_t FPE_ParentalLock = 0x0088;
			constexpr uintptr_t FPE_OnlineAccount = 0x0090;
			constexpr uintptr_t FPE_PremiumService = 0x0098;
			constexpr uintptr_t FPE_TooManyLocalUsers = 0x00A0;
			constexpr uintptr_t FPE_Unknown = 0x00A8;
		}

		namespace FileChannel {
			constexpr uintptr_t UnknownData00 = 0x00A0;
		}

		namespace FileWriter {
			constexpr uintptr_t ArchivePtr = 0x0268;
			constexpr uintptr_t Filename = 0x0270;
			constexpr uintptr_t FileType = 0x0280;
			constexpr uintptr_t Bitfields_0x0284 = 0x0284;  // Multiple: bFlushEachWrite, bWantsAsyncWrites
		}

		namespace FluidInfluenceActor {
			constexpr uintptr_t FlowDirection = 0x0268;
			constexpr uintptr_t Sprite = 0x0270;
			constexpr uintptr_t InfluenceComponent = 0x0278;
			constexpr uintptr_t Bitfields_0x0280 = 0x0280;  // Multiple: bActive, bToggled
		}

		namespace FluidInfluenceComponent {
			constexpr uintptr_t Bitfields_0x0258 = 0x0258;  // Multiple: bActive, RaindropFillEntireFluid, bIsToggleTriggered
			constexpr uintptr_t FluidActor = 0x0260;
			constexpr uintptr_t InfluenceType = 0x0268;
			constexpr uintptr_t MaxDistance = 0x026C;
			constexpr uintptr_t WaveStrength = 0x0270;
			constexpr uintptr_t WaveFrequency = 0x0274;
			constexpr uintptr_t WavePhase = 0x0278;
			constexpr uintptr_t WaveRadius = 0x027C;
			constexpr uintptr_t RaindropAreaRadius = 0x0280;
			constexpr uintptr_t RaindropRadius = 0x0284;
			constexpr uintptr_t RaindropStrength = 0x0288;
			constexpr uintptr_t RaindropRate = 0x028C;
			constexpr uintptr_t FlowSpeed = 0x0290;
			constexpr uintptr_t FlowNumRipples = 0x0294;
			constexpr uintptr_t FlowSideMotionRadius = 0x0298;
			constexpr uintptr_t FlowWaveRadius = 0x029C;
			constexpr uintptr_t FlowStrength = 0x02A0;
			constexpr uintptr_t FlowFrequency = 0x02A4;
			constexpr uintptr_t SphereOuterRadius = 0x02A8;
			constexpr uintptr_t SphereInnerRadius = 0x02AC;
			constexpr uintptr_t SphereStrength = 0x02B0;
			constexpr uintptr_t CurrentAngle = 0x02B4;
			constexpr uintptr_t CurrentTimer = 0x02B8;
			constexpr uintptr_t CurrentFluidActor = 0x02C0;
		}

		namespace FluidSurfaceActor {
			constexpr uintptr_t FluidComponent = 0x0268;
			constexpr uintptr_t ProjectileEntryEffect = 0x0270;
		}

		namespace FluidSurfaceComponent {
			constexpr uintptr_t FluidMaterial = 0x0258;
			constexpr uintptr_t LightMapResolution = 0x0260;
			constexpr uintptr_t LightmassSettings = 0x0264;
			constexpr uintptr_t Bitfields_0x0280 = 0x0280;  // Multiple: EnableSimulation, EnableDetail, bTiling, bPause, bShowSimulationNormals, bShowSimulationPosition, bShowDetailNormals, bShowDetailPosition, bShowFluidSimulation, bShowFluidDetail, bTestRipple, bTestRippleCenterOnDetail
			constexpr uintptr_t SimulationQuadsX = 0x0284;
			constexpr uintptr_t SimulationQuadsY = 0x0288;
			constexpr uintptr_t GridSpacing = 0x028C;
			constexpr uintptr_t GridSpacingLowRes = 0x0290;
			constexpr uintptr_t TargetSimulation = 0x0298;
			constexpr uintptr_t GPUTessellationFactor = 0x02A0;
			constexpr uintptr_t FluidDamping = 0x02A4;
			constexpr uintptr_t FluidTravelSpeed = 0x02A8;
			constexpr uintptr_t FluidHeightScale = 0x02AC;
			constexpr uintptr_t FluidUpdateRate = 0x02B0;
			constexpr uintptr_t ForceImpact = 0x02B4;
			constexpr uintptr_t ForceContinuous = 0x02B8;
			constexpr uintptr_t LightingContrast = 0x02BC;
			constexpr uintptr_t TargetDetail = 0x02C0;
			constexpr uintptr_t DeactivationDistance = 0x02C8;
			constexpr uintptr_t DetailResolution = 0x02CC;
			constexpr uintptr_t DetailSize = 0x02D0;
			constexpr uintptr_t DetailDamping = 0x02D4;
			constexpr uintptr_t DetailTravelSpeed = 0x02D8;
			constexpr uintptr_t DetailTransfer = 0x02DC;
			constexpr uintptr_t DetailHeightScale = 0x02E0;
			constexpr uintptr_t DetailUpdateRate = 0x02E4;
			constexpr uintptr_t NormalLength = 0x02E8;
			constexpr uintptr_t TestRippleSpeed = 0x02EC;
			constexpr uintptr_t TestRippleFrequency = 0x02F0;
			constexpr uintptr_t TestRippleRadius = 0x02F4;
			constexpr uintptr_t FluidWidth = 0x02F8;
			constexpr uintptr_t FluidHeight = 0x02FC;
			constexpr uintptr_t TestRippleTime = 0x0300;
			constexpr uintptr_t TestRippleAngle = 0x0304;
			constexpr uintptr_t DeactivationTimer = 0x0308;
			constexpr uintptr_t ViewDistance = 0x030C;
			constexpr uintptr_t SimulationPosition = 0x0310;
			constexpr uintptr_t DetailPosition = 0x031C;
			constexpr uintptr_t ClampMap = 0x0328;
			constexpr uintptr_t ShadowMaps = 0x0338;
			constexpr uintptr_t LightMap = 0x0348;
			constexpr uintptr_t FluidSimulation = 0x0350;
		}

		namespace FogVolumeConeDensityComponent {
			constexpr uintptr_t MaxDensity = 0x00F0;
			constexpr uintptr_t ConeVertex = 0x00F4;
			constexpr uintptr_t ConeRadius = 0x0100;
			constexpr uintptr_t ConeAxis = 0x0104;
			constexpr uintptr_t ConeMaxAngle = 0x0110;
			constexpr uintptr_t PreviewCone = 0x0118;
		}

		namespace FogVolumeConeDensityInfo {
			constexpr uintptr_t UnknownData00 = 0x027C;
		}

		namespace FogVolumeConstantDensityComponent {
			constexpr uintptr_t Density = 0x00F0;
		}

		namespace FogVolumeConstantDensityInfo {
			constexpr uintptr_t UnknownData00 = 0x027C;
		}

		namespace FogVolumeDensityComponent {
			constexpr uintptr_t FogMaterial = 0x00A0;
			constexpr uintptr_t DefaultFogVolumeMaterial = 0x00A8;
			constexpr uintptr_t Bitfields_0x00B0 = 0x00B0;  // Multiple: bEnabled, bAffectsTranslucency, bOnlyAffectsTranslucency
			constexpr uintptr_t SimpleLightColor = 0x00B4;
			constexpr uintptr_t ApproxFogLightColor = 0x00C4;
			constexpr uintptr_t StartDistance = 0x00D4;
			constexpr uintptr_t MaxDistance = 0x00D8;
			constexpr uintptr_t FogVolumeActors = 0x00E0;
		}

		namespace FogVolumeDensityInfo {
			constexpr uintptr_t DensityComponent = 0x0268;
			constexpr uintptr_t AutomaticMeshComponent = 0x0270;
			constexpr uintptr_t bEnabled = 0x0278;
		}

		namespace FogVolumeLinearHalfspaceDensityComponent {
			constexpr uintptr_t PlaneDistanceFactor = 0x00F0;
			constexpr uintptr_t UnknownData00 = 0x00F4;
			constexpr uintptr_t HalfspacePlane = 0x0100;
		}

		namespace FogVolumeLinearHalfspaceDensityInfo {
			constexpr uintptr_t UnknownData00 = 0x027C;
		}

		namespace FogVolumeSphericalDensityComponent {
			constexpr uintptr_t MaxDensity = 0x00F0;
			constexpr uintptr_t SphereCenter = 0x00F4;
			constexpr uintptr_t SphereRadius = 0x0100;
			constexpr uintptr_t PreviewSphereRadius = 0x0108;
		}

		namespace FogVolumeSphericalDensityInfo {
			constexpr uintptr_t UnknownData00 = 0x027C;
		}

		namespace Font {
			constexpr uintptr_t Characters = 0x0060;
			constexpr uintptr_t Textures = 0x0070;
			constexpr uintptr_t UnknownData00 = 0x0080;
			constexpr uintptr_t IsRemapped = 0x00D0;
			constexpr uintptr_t EmScale = 0x00D4;
			constexpr uintptr_t Ascent = 0x00D8;
			constexpr uintptr_t Descent = 0x00DC;
			constexpr uintptr_t Leading = 0x00E0;
			constexpr uintptr_t Kerning = 0x00E4;
			constexpr uintptr_t ImportOptions = 0x00E8;
			constexpr uintptr_t NumCharacters = 0x0198;
			constexpr uintptr_t MaxCharHeight = 0x01A0;
			constexpr uintptr_t ScalingFactor = 0x01B0;
			constexpr uintptr_t Bitfields_0x01B4 = 0x01B4;  // Multiple: bMapUppercaseToLowercase, bMapLowercaseToUppercase
			constexpr uintptr_t VerticalOffsetOverride = 0x01B8;
		}

		namespace FontImportOptions {
			constexpr uintptr_t Data = 0x0060;
		}

		namespace ForceFeedbackManager {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: bAllowsForceFeedback, bIsPaused
			constexpr uintptr_t FFWaveform = 0x0068;
			constexpr uintptr_t CurrentSample = 0x0070;
			constexpr uintptr_t ElapsedTime = 0x0074;
			constexpr uintptr_t ScaleAllWaveformsBy = 0x0078;
			constexpr uintptr_t WaveformInstigator = 0x0080;
			constexpr uintptr_t ShakeLeft = 0x0088;
			constexpr uintptr_t ShakeRight = 0x008C;
			constexpr uintptr_t EnableTime = 0x0090;
			constexpr uintptr_t EnabledTimeRemaining = 0x0094;
		}

		namespace ForceFeedbackWaveform {
			constexpr uintptr_t bIsLooping = 0x0060;
			constexpr uintptr_t Samples = 0x0068;
			constexpr uintptr_t WaveformFalloffStartDistance = 0x0078;
			constexpr uintptr_t MaxWaveformDistance = 0x007C;
		}

		namespace ForceFieldShapeBox {
			constexpr uintptr_t Shape = 0x0060;
		}

		namespace ForceFieldShapeCapsule {
			constexpr uintptr_t Shape = 0x0060;
		}

		namespace ForceFieldShapeSphere {
			constexpr uintptr_t Shape = 0x0060;
		}

		namespace FractureManager {
			constexpr uintptr_t FSMPartPoolSize = 0x0268;
			constexpr uintptr_t Bitfields_0x026C = 0x026C;  // Multiple: bEnableAntiVibration, bEnableSpawnChunkEffectForRadialDamage
			constexpr uintptr_t DestroyVibrationLevel = 0x0270;
			constexpr uintptr_t DestroyMinAngVel = 0x0274;
			constexpr uintptr_t ExplosionVelScale = 0x0278;
			constexpr uintptr_t PartPool = 0x0280;
			constexpr uintptr_t FreeParts = 0x0290;
			constexpr uintptr_t ActorsWithDeferredPartsToSpawn = 0x02A0;
		}

		namespace FractureMaterial {
			constexpr uintptr_t FractureEffect = 0x0060;
			constexpr uintptr_t FractureSound = 0x0068;
		}

		namespace FracturedBaseComponent {
			constexpr uintptr_t ComponentBaseResources = 0x0300;
			constexpr uintptr_t ReleaseResourcesFence = 0x0308;
			constexpr uintptr_t VisibleFragments = 0x0310;
			constexpr uintptr_t Bitfields_0x0320 = 0x0320;  // Multiple: bVisibilityHasChanged, bVisibilityReset, bInitialVisibilityValue, bUseDynamicIndexBuffer, bUseDynamicIBWithHiddenFragments
			constexpr uintptr_t NumResourceIndices = 0x0324;
			constexpr uintptr_t bResetStaticMesh = 0x0328;
		}

		namespace FracturedSkinnedMeshComponent {
			constexpr uintptr_t ComponentSkinResources = 0x0330;
			constexpr uintptr_t FragmentTransforms = 0x0338;
			constexpr uintptr_t DependentComponents = 0x0348;
			constexpr uintptr_t Bitfields_0x0358 = 0x0358;  // Multiple: bBecameVisible, bFragmentTransformsChanged
		}

		namespace FracturedStaticMesh {
			constexpr uintptr_t SourceCoreMesh = 0x0200;
			constexpr uintptr_t CoreMeshScale = 0x0208;
			constexpr uintptr_t UnknownData00 = 0x020C;
			constexpr uintptr_t bSliceUsingCoreCollision = 0x023C;
			constexpr uintptr_t FragmentDestroyEffect = 0x0240;
			constexpr uintptr_t FragmentDestroyEffects = 0x0248;
			constexpr uintptr_t FragmentDestroyEffectScale = 0x0258;
			constexpr uintptr_t FragmentHealthScale = 0x025C;
			constexpr uintptr_t FragmentMinHealth = 0x0260;
			constexpr uintptr_t FragmentMaxHealth = 0x0264;
			constexpr uintptr_t bUniformFragmentHealth = 0x0268;
			constexpr uintptr_t ChunkLinVel = 0x026C;
			constexpr uintptr_t ChunkAngVel = 0x0270;
			constexpr uintptr_t ChunkLinHorizontalScale = 0x0274;
			constexpr uintptr_t ExplosionVelScale = 0x0278;
			constexpr uintptr_t bCompositeChunksExplodeOnImpact = 0x027C;
			constexpr uintptr_t bFixIsolatedChunks = 0x0280;
			constexpr uintptr_t bAlwaysBreakOffIsolatedIslands = 0x0284;
			constexpr uintptr_t bSpawnPhysicsChunks = 0x0288;
			constexpr uintptr_t ChanceOfPhysicsChunk = 0x028C;
			constexpr uintptr_t ExplosionChanceOfPhysicsChunk = 0x0290;
			constexpr uintptr_t NormalPhysicsChunkScaleMin = 0x0294;
			constexpr uintptr_t NormalPhysicsChunkScaleMax = 0x0298;
			constexpr uintptr_t ExplosionPhysicsChunkScaleMin = 0x029C;
			constexpr uintptr_t ExplosionPhysicsChunkScaleMax = 0x02A0;
			constexpr uintptr_t MinConnectionSupportArea = 0x02A4;
			constexpr uintptr_t DynamicOutsideMaterial = 0x02A8;
			constexpr uintptr_t LoseChunkOutsideMaterial = 0x02B0;
			constexpr uintptr_t OutsideMaterialIndex = 0x02B8;
			constexpr uintptr_t UnknownData01 = 0x02BC;
		}

		namespace FracturedStaticMeshActor {
			constexpr uintptr_t MaxPartsToSpawnAtOnce = 0x0268;
			constexpr uintptr_t FracturedStaticMeshComponent = 0x0270;
			constexpr uintptr_t SkinnedComponent = 0x0278;
			constexpr uintptr_t ChunkHealth = 0x0280;
			constexpr uintptr_t Bitfields_0x0290 = 0x0290;  // Multiple: bHasShownMissingSoundWarning, bBreakChunksOnActorTouch, bShouldSaveForCheckpoint
			constexpr uintptr_t ChunkHealthScale = 0x0294;
			constexpr uintptr_t OverrideFragmentDestroyEffects = 0x0298;
			constexpr uintptr_t FractureCullMinDistance = 0x02A8;
			constexpr uintptr_t FractureCullMaxDistance = 0x02AC;
			constexpr uintptr_t DeferredPartsToSpawn = 0x02B0;
			constexpr uintptr_t PartImpactEffect = 0x02C0;
			constexpr uintptr_t ExplosionFractureSound = 0x02D8;
			constexpr uintptr_t SingleChunkFractureSound = 0x02E0;
			constexpr uintptr_t MI_LoseChunkPreviousMaterial = 0x02E8;
		}

		namespace FracturedStaticMeshComponent {
			constexpr uintptr_t FragmentNeighborsVisible = 0x0330;
			constexpr uintptr_t VisibleBox = 0x0340;
			constexpr uintptr_t Bitfields_0x035C = 0x035C;  // Multiple: bUseSkinnedRendering, bUseVisibleVertsForBounds, bTopFragmentsRootNonDestroyable, bBottomFragmentsRootNonDestroyable
			constexpr uintptr_t TopBottomFragmentDistThreshold = 0x0360;
			constexpr uintptr_t LoseChunkOutsideMaterialOverride = 0x0368;
			constexpr uintptr_t FragmentBoundsMaxZ = 0x0370;
			constexpr uintptr_t FragmentBoundsMinZ = 0x0374;
			constexpr uintptr_t SkinnedComponent = 0x0378;
		}

		namespace FracturedStaticMeshPart {
			constexpr uintptr_t DestroyPartRadiusFactor = 0x02F0;
			constexpr uintptr_t BaseFracturedMeshActor = 0x02F8;
			constexpr uintptr_t Bitfields_0x0300 = 0x0300;  // Multiple: bHasBeenRecycled, bChangeRBChannelWhenAsleep, bCompositeThatExplodesOnImpact
			constexpr uintptr_t LastSpawnTime = 0x0304;
			constexpr uintptr_t PartPoolIndex = 0x0308;
			constexpr uintptr_t FracPartGravScale = 0x030C;
			constexpr uintptr_t AsleepRBChannel = 0x0310;
			constexpr uintptr_t OldVelocity = 0x0314;
			constexpr uintptr_t CurrentVibrationLevel = 0x0320;
			constexpr uintptr_t LastImpactSoundTime = 0x0324;
		}

		namespace FrameTick {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace GameEngine {
			constexpr uintptr_t GPendingLevel = 0x0958;
			constexpr uintptr_t PendingLevelPlayerControllerClassName = 0x0960;
			constexpr uintptr_t LastURL = 0x0970;
			constexpr uintptr_t LastRemoteURL = 0x09D0;
			constexpr uintptr_t ServerActors = 0x0A30;
			constexpr uintptr_t TravelURL = 0x0A40;
			constexpr uintptr_t TravelType = 0x0A50;
			constexpr uintptr_t Bitfields_0x0A54 = 0x0A54;  // Multiple: bWorldWasLoadedThisTick, bCheckForMovieCapture, bTriggerPostLoadMap, bStartedLoadMapMovie, bUnloadingMap, bShouldCommitPendingMapChange, bClearAnimSetLinkupCachesOnLoadMap, bEnableSecondaryDisplay, bEnableSecondaryViewport
			constexpr uintptr_t OnlineSubsystem = 0x0A58;
			constexpr uintptr_t DLCEnumerator = 0x0A60;
			constexpr uintptr_t DownloadableContentEnumeratorClassName = 0x0A68;
			constexpr uintptr_t DLCManager = 0x0A78;
			constexpr uintptr_t DownloadableContentManagerClassName = 0x0A80;
			constexpr uintptr_t LevelsToLoadForPendingMapChange = 0x0A90;
			constexpr uintptr_t LoadedLevelsForPendingMapChange = 0x0AA0;
			constexpr uintptr_t PendingMapChangeFailureDescription = 0x0AB0;
			constexpr uintptr_t MaxDeltaTime = 0x0AC0;
			constexpr uintptr_t SecondaryViewportClientClassName = 0x0AC8;
			constexpr uintptr_t SecondaryViewportClients = 0x0AD8;
			constexpr uintptr_t SecondaryViewportFrames = 0x0AE8;
			constexpr uintptr_t PendingLevelStreamingStatusUpdates = 0x0AF8;
			constexpr uintptr_t ObjectReferencers = 0x0B08;
			constexpr uintptr_t PackagesToFullyLoad = 0x0B18;
			constexpr uintptr_t NamedNetDrivers = 0x0B28;
			constexpr uintptr_t AnimTags = 0x0B38;
		}

		namespace GameInfo {
			constexpr uintptr_t RegistryGroup = 0x0268;
			constexpr uintptr_t BulletScenesCount = 0x0270;
			constexpr uintptr_t Bitfields_0x0274 = 0x0274;  // Multiple: bRestartLevel, bPauseable, bTeamGame, bGameEnded, bOverTime, bDelayedStart, bWaitingToStartMatch, bChangeLevels, bAlreadyChanged, bGameRestarted, bLevelChange, bKickLiveIdlers, bFixedPlayerStart, bDoFearCostFallOff, bUseSeamlessTravel, bHasNetworkError, bRequiresPushToTalk, bIsStandbyCheckingEnabled, bIsStandbyCheckingOn, bHasStandbyCheatTriggered, bKeepingLoadingMovieOpen
			constexpr uintptr_t CauseEventCommand = 0x0278;
			constexpr uintptr_t BugLocString = 0x0288;
			constexpr uintptr_t BugRotString = 0x0298;
			constexpr uintptr_t GameDifficulty = 0x02A8;
			constexpr uintptr_t GameSpeed = 0x02AC;
			constexpr uintptr_t DefaultPawnClass = 0x02B0;
			constexpr uintptr_t HUDType = 0x02B8;
			constexpr uintptr_t SecondaryHUDType = 0x02C0;
			constexpr uintptr_t MaxSpectators = 0x02C8;
			constexpr uintptr_t MaxSpectatorsAllowed = 0x02CC;
			constexpr uintptr_t NumSpectators = 0x02D0;
			constexpr uintptr_t MaxPlayers = 0x02D4;
			constexpr uintptr_t MaxPlayersAllowed = 0x02D8;
			constexpr uintptr_t NumPlayers = 0x02DC;
			constexpr uintptr_t NumBots = 0x02E0;
			constexpr uintptr_t NumTravellingPlayers = 0x02E4;
			constexpr uintptr_t CurrentID = 0x02E8;
			constexpr uintptr_t DefaultPlayerName = 0x02F0;
			constexpr uintptr_t GameName = 0x0300;
			constexpr uintptr_t FearCostFallOff = 0x0310;
			constexpr uintptr_t GoalScore = 0x0314;
			constexpr uintptr_t MaxLives = 0x0318;
			constexpr uintptr_t TimeLimit = 0x031C;
			constexpr uintptr_t BaseMutator = 0x0320;
			constexpr uintptr_t AutoTestManagerClass = 0x0328;
			constexpr uintptr_t MyAutoTestManager = 0x0330;
			constexpr uintptr_t PlayerControllerClass = 0x0338;
			constexpr uintptr_t PlayerReplicationInfoClass = 0x0340;
			constexpr uintptr_t GameReplicationInfoClass = 0x0348;
			constexpr uintptr_t GameReplicationInfo = 0x0350;
			constexpr uintptr_t PopulationManager = 0x0358;
			constexpr uintptr_t PopulationManagerClass = 0x0360;
			constexpr uintptr_t MaxIdleTime = 0x0368;
			constexpr uintptr_t MaxTimeMargin = 0x036C;
			constexpr uintptr_t TimeMarginSlack = 0x0370;
			constexpr uintptr_t MinTimeMargin = 0x0374;
			constexpr uintptr_t InactivePRIArray = 0x0378;
			constexpr uintptr_t OnlineSub = 0x0398;
			constexpr uintptr_t GameInterface_Object = 0x03A0;
			constexpr uintptr_t GameInterface_Interface = 0x03A8;
			constexpr uintptr_t OnlineStatsWriteClass = 0x03B0;
			constexpr uintptr_t CoverReplicatorBase = 0x03B8;
			constexpr uintptr_t OnlineGameSettingsClass = 0x03C0;
			constexpr uintptr_t ServerOptions = 0x03C8;
			constexpr uintptr_t AdjustedNetSpeed = 0x03D8;
			constexpr uintptr_t LastNetSpeedUpdateTime = 0x03DC;
			constexpr uintptr_t TotalNetBandwidth = 0x03E0;
			constexpr uintptr_t MinDynamicBandwidth = 0x03E4;
			constexpr uintptr_t MaxDynamicBandwidth = 0x03E8;
			constexpr uintptr_t StandbyRxCheatTime = 0x03EC;
			constexpr uintptr_t StandbyTxCheatTime = 0x03F0;
			constexpr uintptr_t BadPingThreshold = 0x03F4;
			constexpr uintptr_t PercentMissingForRxStandby = 0x03F8;
			constexpr uintptr_t PercentMissingForTxStandby = 0x03FC;
			constexpr uintptr_t PercentForBadPing = 0x0400;
			constexpr uintptr_t JoinInProgressStandbyWaitTime = 0x0404;
			constexpr uintptr_t StreamingPauseIcon = 0x0408;
			constexpr uintptr_t GameInfoClassAliases = 0x0410;
			constexpr uintptr_t DefaultGameType = 0x0420;
			constexpr uintptr_t DefaultMapPrefixes = 0x0430;
			constexpr uintptr_t CustomMapPrefixes = 0x0440;
			constexpr uintptr_t AnimTreePoolSize = 0x0450;
		}

		namespace GameReplicationInfo {
			constexpr uintptr_t RegistryGroup = 0x0268;
			constexpr uintptr_t GameClass = 0x0270;
			constexpr uintptr_t Bitfields_0x0278 = 0x0278;  // Multiple: bStopCountDown, bMatchHasBegun, bMatchIsOver
			constexpr uintptr_t RemainingTime = 0x027C;
			constexpr uintptr_t ElapsedTime = 0x0280;
			constexpr uintptr_t RemainingMinute = 0x0284;
			constexpr uintptr_t GoalScore = 0x0288;
			constexpr uintptr_t TimeLimit = 0x028C;
			constexpr uintptr_t Teams = 0x0290;
			constexpr uintptr_t ServerName = 0x02A0;
			constexpr uintptr_t Winner = 0x02B0;
			constexpr uintptr_t PRIArray = 0x02B8;
			constexpr uintptr_t InactivePRIArray = 0x02C8;
		}

		namespace GameTick {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace GameUISceneClient {
			constexpr uintptr_t LatestDeltaTime = 0x0120;
			constexpr uintptr_t DoubleClickStartTime = 0x0128;
			constexpr uintptr_t DoubleClickStartPosition = 0x0130;
			constexpr uintptr_t InitialPressedKeys = 0x0138;
			constexpr uintptr_t Bitfields_0x0188 = 0x0188;  // Multiple: bUpdateInputProcessingStatus, bUpdateSceneViewportSizes, bEnableDebugInput, bRenderDebugInfo, bCaptureUnprocessedInput
			constexpr uintptr_t NavAliases = 0x0190;
			constexpr uintptr_t AxisInputKeys = 0x01A0;
		}

		namespace GameViewportClient {
			constexpr uintptr_t VfTable_FExec = 0x0068;
			constexpr uintptr_t Viewport = 0x0070;
			constexpr uintptr_t ViewportFrame = 0x0078;
			constexpr uintptr_t GlobalInteractions = 0x0080;
			constexpr uintptr_t UIControllerClass = 0x0090;
			constexpr uintptr_t UIController = 0x0098;
			constexpr uintptr_t ViewportConsole = 0x00A0;
			constexpr uintptr_t ShowFlags = 0x00A8;
			constexpr uintptr_t LoadingMessage = 0x00B8;
			constexpr uintptr_t SavingMessage = 0x00C8;
			constexpr uintptr_t ConnectingMessage = 0x00D8;
			constexpr uintptr_t PausedMessage = 0x00E8;
			constexpr uintptr_t PrecachingMessage = 0x00F8;
			constexpr uintptr_t Bitfields_0x0108 = 0x0108;  // Multiple: bShowTitleSafeZone, bDisplayHardwareMouseCursor, bOverrideDiffuseAndSpecular, bIsPlayInEditorViewport, bShowSystemMouseCursor, bDisableWorldRendering, bCapturedWorldRendering, bDebugNoGFxUI
			constexpr uintptr_t TitleSafeZone = 0x010C;
			constexpr uintptr_t GamepadInputAPI = 0x011C;
			constexpr uintptr_t DesiredSplitscreenType = 0x011D;
			constexpr uintptr_t ActiveSplitscreenType = 0x011E;
			constexpr uintptr_t Default2PSplitType = 0x011F;
			constexpr uintptr_t Default3PSplitType = 0x0120;
			constexpr uintptr_t Gamepads = 0x0128;
			constexpr uintptr_t SplitscreenInfo = 0x0138;
			constexpr uintptr_t ProgressMessage = 0x0148;
			constexpr uintptr_t ProgressTimeOut = 0x0168;
			constexpr uintptr_t ProgressFadeTime = 0x016C;
			constexpr uintptr_t DebugProperties = 0x0170;
			constexpr uintptr_t ScaleformInteraction = 0x0180;
		}

		namespace GameplayEvents {
			constexpr uintptr_t Archive = 0x0060;
			constexpr uintptr_t StatsFileName = 0x0068;
			constexpr uintptr_t Header = 0x0078;
			constexpr uintptr_t CurrentSessionInfo = 0x00B0;
			constexpr uintptr_t PlayerList = 0x0180;
			constexpr uintptr_t TeamList = 0x0190;
			constexpr uintptr_t SupportedEvents = 0x01A0;
			constexpr uintptr_t WeaponClassArray = 0x01B0;
			constexpr uintptr_t DamageClassArray = 0x01C0;
			constexpr uintptr_t ProjectileClassArray = 0x01D0;
			constexpr uintptr_t PawnClassArray = 0x01E0;
			constexpr uintptr_t ActorArray = 0x01F0;
			constexpr uintptr_t SoundCueArray = 0x0200;
		}

		namespace GameplayEventsHandler {
			constexpr uintptr_t EventIDFilter = 0x0060;
			constexpr uintptr_t GroupFilter = 0x0070;
			constexpr uintptr_t Reader = 0x0080;
		}

		namespace GameplayEventsReader {
			constexpr uintptr_t RegisteredHandlers = 0x0210;
		}

		namespace GameplayEventsWriterBase {
			constexpr uintptr_t Game = 0x0210;
		}

		namespace GenericParamListStatEntry {
			constexpr uintptr_t StatEvent = 0x0060;
			constexpr uintptr_t Writer = 0x0068;
		}

		namespace Goal_AtActor {
			constexpr uintptr_t GoalActor = 0x0078;
			constexpr uintptr_t GoalDist = 0x0080;
			constexpr uintptr_t bKeepPartial = 0x0084;
		}

		namespace GravityVolume {
			constexpr uintptr_t GravityZ = 0x02D8;
		}

		namespace GroupComponent_ORS {
			constexpr uintptr_t Components = 0x00A0;
			constexpr uintptr_t AllComponents = 0x00B0;
			constexpr uintptr_t AllObjects = 0x00C0;
			constexpr uintptr_t Bitfields_0x00D0 = 0x00D0;  // Multiple: bGlobalGroup, bInitializedComponents, bRegisteredWithORS
		}

		namespace GuidCache {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace HUD {
			constexpr uintptr_t WhiteColor = 0x0268;
			constexpr uintptr_t GreenColor = 0x026C;
			constexpr uintptr_t RedColor = 0x0270;
			constexpr uintptr_t PlayerOwner = 0x0278;
			constexpr uintptr_t Bitfields_0x0280 = 0x0280;  // Multiple: bLostFocusPaused, bShowHUD, bShowScores, bShowDebugInfo, bShowBadConnectionAlert, bShowDirectorInfoDebug, bShowDirectorInfoHUD, bRenderFullScreen, bScaleCanvasForCinematicMode, bShowOverlays
			constexpr uintptr_t HudCanvasScale = 0x0284;
			constexpr uintptr_t PostRenderedActors = 0x0288;
			constexpr uintptr_t ConsoleMessages = 0x0298;
			constexpr uintptr_t ConsoleColor = 0x02A8;
			constexpr uintptr_t ConsoleMessageCount = 0x02AC;
			constexpr uintptr_t ConsoleFontSize = 0x02B0;
			constexpr uintptr_t ConsoleMessagePosX = 0x02B4;
			constexpr uintptr_t ConsoleMessagePosY = 0x02B8;
			constexpr uintptr_t Canvas = 0x02C0;
			constexpr uintptr_t LastHUDRenderTime = 0x02C8;
			constexpr uintptr_t RenderDelta = 0x02CC;
			constexpr uintptr_t SizeX = 0x02D0;
			constexpr uintptr_t SizeY = 0x02D4;
			constexpr uintptr_t CenterX = 0x02D8;
			constexpr uintptr_t CenterY = 0x02DC;
			constexpr uintptr_t RatioX = 0x02E0;
			constexpr uintptr_t RatioY = 0x02E4;
			constexpr uintptr_t DebugDisplay = 0x02E8;
			constexpr uintptr_t KismetTextInfo = 0x02F8;
		}

		namespace HeadTrackingComponent {
			constexpr uintptr_t TrackControllerName = 0x00A0;
			constexpr uintptr_t LookAtActorRadius = 0x00B0;
			constexpr uintptr_t bDisableBeyondLimit = 0x00B4;
			constexpr uintptr_t MaxLookAtTime = 0x00B8;
			constexpr uintptr_t MinLookAtTime = 0x00BC;
			constexpr uintptr_t MaxInterestTime = 0x00C0;
			constexpr uintptr_t ActorClassesToLookAt = 0x00C8;
			constexpr uintptr_t TargetBoneNames = 0x00D8;
			constexpr uintptr_t UnknownData00 = 0x00E8;
			constexpr uintptr_t SkeletalMeshComp = 0x0138;
			constexpr uintptr_t TrackControls = 0x0140;
			constexpr uintptr_t RootMeshLocation = 0x0150;
			constexpr uintptr_t RootMeshRotation = 0x015C;
		}

		namespace HeightFog {
			constexpr uintptr_t Component = 0x0268;
			constexpr uintptr_t bEnabled = 0x0270;
		}

		namespace HeightFogComponent {
			constexpr uintptr_t bEnabled = 0x00A0;
			constexpr uintptr_t Height = 0x00A4;
			constexpr uintptr_t Density = 0x00A8;
			constexpr uintptr_t LightBrightness = 0x00AC;
			constexpr uintptr_t LightColor = 0x00B0;
			constexpr uintptr_t ExtinctionDistance = 0x00B4;
			constexpr uintptr_t StartDistance = 0x00B8;
		}

		namespace HttpFactory {
			constexpr uintptr_t HttpRequestClassName = 0x0060;
		}

		namespace ImageBasedReflectionComponent {
			constexpr uintptr_t Bitfields_0x0300 = 0x0300;  // Multiple: bEnabled, bTwoSided
			constexpr uintptr_t ReflectionTexture = 0x0308;
			constexpr uintptr_t ReflectionColor = 0x0310;
		}

		namespace ImageReflection {
			constexpr uintptr_t bEnabled = 0x0268;
			constexpr uintptr_t ReflectionComponent = 0x0270;
			constexpr uintptr_t ImageReflectionComponent = 0x0278;
		}

		namespace ImageReflectionComponent {
			constexpr uintptr_t ReflectionTexture = 0x00A0;
		}

		namespace ImageReflectionSceneCapture {
			constexpr uintptr_t DepthRange = 0x0280;
			constexpr uintptr_t ColorRange = 0x0284;
		}

		namespace ImageReflectionShadowPlane {
			constexpr uintptr_t bEnabled = 0x0268;
			constexpr uintptr_t ReflectionShadowComponent = 0x0270;
		}

		namespace ImageReflectionShadowPlaneComponent {
			constexpr uintptr_t bEnabled = 0x0258;
			constexpr uintptr_t ReflectionPlane = 0x0260;
		}

		namespace InGameAdManager {
			constexpr uintptr_t bShouldPauseWhileAdOpen = 0x0088;
		}

		namespace IniLocPatcher {
			constexpr uintptr_t Files = 0x0060;
			constexpr uintptr_t bRequestEmsFileList = 0x0070;
			constexpr uintptr_t MaxCachedFileAge = 0x0074;
			constexpr uintptr_t TitleFileInterface_Object = 0x0078;
			constexpr uintptr_t TitleFileInterface_Interface = 0x0080;
			constexpr uintptr_t TitleFileCacheInterface_Object = 0x0088;
			constexpr uintptr_t TitleFileCacheInterface_Interface = 0x0090;
		}

		namespace Input {
			constexpr uintptr_t Bindings = 0x00D0;
			constexpr uintptr_t PressedKeys = 0x00E0;
			constexpr uintptr_t ReleasedAxisKeys = 0x00F0;
			constexpr uintptr_t CurrentControllerId = 0x0100;
			constexpr uintptr_t CurrentEvent = 0x0104;
			constexpr uintptr_t CurrentDelta = 0x0108;
			constexpr uintptr_t CurrentDeltaTime = 0x010C;
			constexpr uintptr_t UnknownData00 = 0x0110;
			constexpr uintptr_t AxisArray = 0x0160;
			constexpr uintptr_t CachedInputEvents = 0x0170;
			constexpr uintptr_t CachedAnalogInputEvents = 0x0180;
			constexpr uintptr_t CachedTouchInputEvents = 0x0190;
			constexpr uintptr_t CurrentTouches = 0x01A0;
		}

		namespace InstancedFoliageActor {
			constexpr uintptr_t FoliageMeshes = 0x0268;
			constexpr uintptr_t SelectedMesh = 0x02B8;
			constexpr uintptr_t InstancedStaticMeshComponents = 0x02C0;
		}

		namespace InstancedFoliageSettings {
			constexpr uintptr_t Density = 0x0060;
			constexpr uintptr_t Radius = 0x0064;
			constexpr uintptr_t ScaleMinX = 0x0068;
			constexpr uintptr_t ScaleMinY = 0x006C;
			constexpr uintptr_t ScaleMinZ = 0x0070;
			constexpr uintptr_t ScaleMaxX = 0x0074;
			constexpr uintptr_t ScaleMaxY = 0x0078;
			constexpr uintptr_t ScaleMaxZ = 0x007C;
			constexpr uintptr_t Bitfields_0x0080 = 0x0080;  // Multiple: LockScaleX, LockScaleY, LockScaleZ, AlignToNormal, RandomYaw, UniformScale, ReapplyDensity, ReapplyRadius, ReapplyAlignToNormal, ReapplyRandomYaw, ReapplyScaleX, ReapplyScaleY, ReapplyScaleZ, ReapplyRandomPitchAngle, ReapplyGroundSlope, ReapplyHeight, ReapplyLandscapeLayer, ReapplyZOffset, CastShadow, bCastDynamicShadow, bCastStaticShadow, bSelfShadowOnly, bNoModSelfShadow, bAcceptsDynamicDominantLightShadows, bCastHiddenShadow, bCastShadowAsTwoSided, bAcceptsLights, bAcceptsDynamicLights, bUseOnePassLightingOnTranslucency, bUsePrecomputedShadows, bCollideActors, bBlockActors
			constexpr uintptr_t Bitfields_0x0084 = 0x0084;  // Multiple: bBlockNonZeroExtent, bBlockZeroExtent, IsSelected, ShowNothing, ShowPaintSettings, ShowInstanceSettings
			constexpr uintptr_t AlignMaxAngle = 0x0088;
			constexpr uintptr_t RandomPitchAngle = 0x008C;
			constexpr uintptr_t GroundSlope = 0x0090;
			constexpr uintptr_t HeightMin = 0x0094;
			constexpr uintptr_t HeightMax = 0x0098;
			constexpr uintptr_t LandscapeLayer = 0x009C;
			constexpr uintptr_t ZOffsetMin = 0x00A4;
			constexpr uintptr_t ZOffsetMax = 0x00A8;
			constexpr uintptr_t MaxInstancesPerCluster = 0x00AC;
			constexpr uintptr_t MaxClusterRadius = 0x00B0;
			constexpr uintptr_t ReapplyDensityAmount = 0x00B4;
			constexpr uintptr_t StartCullDistance = 0x00B8;
			constexpr uintptr_t EndCullDistance = 0x00BC;
			constexpr uintptr_t CullOption = 0x00C0;
			constexpr uintptr_t DetailMode = 0x00C1;
			constexpr uintptr_t DisplayOrder = 0x00C4;
		}

		namespace InstancedStaticMeshComponent {
			constexpr uintptr_t PerInstanceData = 0x0300;
			constexpr uintptr_t PerInstanceSMData = 0x0310;
			constexpr uintptr_t NumPendingLightmaps = 0x0320;
			constexpr uintptr_t ComponentJoinKey = 0x0324;
			constexpr uintptr_t CachedMappings = 0x0328;
			constexpr uintptr_t InstancingRandomSeed = 0x0338;
			constexpr uintptr_t InstanceStartCullDistance = 0x033C;
			constexpr uintptr_t InstanceEndCullDistance = 0x0340;
			constexpr uintptr_t SelectedInstances = 0x0348;
			constexpr uintptr_t bDontResolveInstancedLightmaps = 0x0368;
		}

		namespace InteractiveFoliageActor {
			constexpr uintptr_t CylinderComponent = 0x0288;
			constexpr uintptr_t TouchingActorEntryPosition = 0x0290;
			constexpr uintptr_t FoliageVelocity = 0x029C;
			constexpr uintptr_t FoliageForce = 0x02A8;
			constexpr uintptr_t FoliagePosition = 0x02B4;
			constexpr uintptr_t FoliageDamageImpulseScale = 0x02C0;
			constexpr uintptr_t FoliageTouchImpulseScale = 0x02C4;
			constexpr uintptr_t FoliageStiffness = 0x02C8;
			constexpr uintptr_t FoliageStiffnessQuadratic = 0x02CC;
			constexpr uintptr_t FoliageDamping = 0x02D0;
			constexpr uintptr_t MaxDamageImpulse = 0x02D4;
			constexpr uintptr_t MaxTouchImpulse = 0x02D8;
			constexpr uintptr_t MaxForce = 0x02DC;
			constexpr uintptr_t Mass = 0x02E0;
		}

		namespace InteractiveFoliageComponent {
			constexpr uintptr_t FoliageSceneProxy = 0x0300;
		}

		namespace InterpActor {
			constexpr uintptr_t Bitfields_0x02C8 = 0x02C8;  // Multiple: bShouldSaveForCheckpoint, bMonitorMover, bMonitorZVelocity, bContinueOnEncroachPhysicsObject, bStopOnEncroach, bShouldShadowParentAllAttachedActors, bIsLift
			constexpr uintptr_t MyMarker = 0x02D0;
			constexpr uintptr_t MaxZVelocity = 0x02D8;
			constexpr uintptr_t StayOpenTime = 0x02DC;
			constexpr uintptr_t OpenSound = 0x02E0;
			constexpr uintptr_t OpeningAmbientSound = 0x02E8;
			constexpr uintptr_t OpenedSound = 0x02F0;
			constexpr uintptr_t CloseSound = 0x02F8;
			constexpr uintptr_t ClosingAmbientSound = 0x0300;
			constexpr uintptr_t ClosedSound = 0x0308;
			constexpr uintptr_t AmbientSoundComponent = 0x0310;
		}

		namespace InterpCurveEdSetup {
			constexpr uintptr_t Tabs = 0x0060;
			constexpr uintptr_t ActiveTab = 0x0070;
		}

		namespace InterpData {
			constexpr uintptr_t InterpLength = 0x00E0;
			constexpr uintptr_t PathBuildTime = 0x00E4;
			constexpr uintptr_t InterpGroups = 0x00E8;
			constexpr uintptr_t CurveEdSetup = 0x00F8;
			constexpr uintptr_t InterpFilters = 0x0100;
			constexpr uintptr_t SelectedFilter = 0x0110;
			constexpr uintptr_t DefaultFilters = 0x0118;
			constexpr uintptr_t EdSectionStart = 0x0128;
			constexpr uintptr_t EdSectionEnd = 0x012C;
			constexpr uintptr_t Bitfields_0x0130 = 0x0130;  // Multiple: bShouldBakeAndPrune, bHasSetDefaultTangentWeights
			constexpr uintptr_t BakeAndPruneStatus = 0x0138;
			constexpr uintptr_t CachedDirectorGroup = 0x0148;
		}

		namespace InterpFilter {
			constexpr uintptr_t Caption = 0x0060;
		}

		namespace InterpFilter_Classes {
			constexpr uintptr_t ClassToFilterBy = 0x0070;
			constexpr uintptr_t TrackClasses = 0x0078;
		}

		namespace InterpFilter_Custom {
			constexpr uintptr_t GroupsToInclude = 0x0070;
		}

		namespace InterpGroup {
			constexpr uintptr_t VfTable_FInterpEdInputInterface = 0x0060;
			constexpr uintptr_t InterpTracks = 0x0068;
			constexpr uintptr_t GroupName = 0x0078;
			constexpr uintptr_t GroupColor = 0x0080;
			constexpr uintptr_t GroupAnimSets = 0x0088;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bCollapsed, bVisible, bIsFolder, bIsParented, bIsSelected
		}

		namespace InterpGroupAI {
			constexpr uintptr_t PreviewPawnClass = 0x00A0;
			constexpr uintptr_t StageMarkGroup = 0x00A8;
			constexpr uintptr_t Bitfields_0x00B0 = 0x00B0;  // Multiple: SnapToRootBoneLocationWhenFinished, bNoEncroachmentCheck, bDisableWorldCollision, bIgnoreLegacyHeightAdjust, bRecreatePreviewPawn, bRefreshStageMarkGroup
		}

		namespace InterpGroupCamera {
			constexpr uintptr_t CameraAnimInst = 0x00A0;
			constexpr uintptr_t Target = 0x00A8;
			constexpr uintptr_t CompressTolerance = 0x00E8;
		}

		namespace InterpGroupDirector {
			constexpr uintptr_t UnknownData00 = 0x009C;
		}

		namespace InterpGroupInst {
			constexpr uintptr_t Group = 0x0060;
			constexpr uintptr_t GroupActor = 0x0068;
			constexpr uintptr_t TrackInst = 0x0070;
			constexpr uintptr_t CachedCamOverridePostProcess = 0x0080;
		}

		namespace InterpGroupInstAI {
			constexpr uintptr_t AIGroup = 0x0088;
			constexpr uintptr_t SavedPhysics = 0x0090;
			constexpr uintptr_t Bitfields_0x0094 = 0x0094;  // Multiple: bSavedNoEncroachCheck, bSavedCollideActors, bSavedBlockActors
			constexpr uintptr_t PreviewPawn = 0x0098;
			constexpr uintptr_t StageMarkActor = 0x00A0;
		}

		namespace InterpTrack {
			constexpr uintptr_t VfTable_FInterpEdInputInterface = 0x0060;
			constexpr uintptr_t CurveEdVTable = 0x0068;
			constexpr uintptr_t SubTracks = 0x0070;
			constexpr uintptr_t SubTrackGroups = 0x0080;
			constexpr uintptr_t SupportedSubTracks = 0x0090;
			constexpr uintptr_t TrackInstClass = 0x00A0;
			constexpr uintptr_t ActiveCondition = 0x00A8;
			constexpr uintptr_t TrackTitle = 0x00B0;
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: bOnePerGroup, bDirGroupOnly, bDisableTrack, bIsAnimControlTrack, bSubTrackOnly, bVisible, bIsSelected, bIsRecording, bIsCollapsed
		}

		namespace InterpTrackAnimControl {
			constexpr uintptr_t AnimSets = 0x00E8;
			constexpr uintptr_t SlotName = 0x00F8;
			constexpr uintptr_t AnimSeqs = 0x0100;
			constexpr uintptr_t Bitfields_0x0110 = 0x0110;  // Multiple: bEnableRootMotion, bSkipAnimNotifiers
		}

		namespace InterpTrackAudioMaster {
			constexpr uintptr_t UnknownData00 = 0x00E4;
		}

		namespace InterpTrackBoolProp {
			constexpr uintptr_t BoolTrack = 0x00C8;
			constexpr uintptr_t PropertyName = 0x00D8;
		}

		namespace InterpTrackColorProp {
			constexpr uintptr_t PropertyName = 0x00E8;
		}

		namespace InterpTrackColorScale {
			constexpr uintptr_t UnknownData00 = 0x00E4;
		}

		namespace InterpTrackDirector {
			constexpr uintptr_t CutTrack = 0x00C8;
			constexpr uintptr_t bSimulateCameraCutsOnClients = 0x00D8;
		}

		namespace InterpTrackEvent {
			constexpr uintptr_t EventTrack = 0x00C8;
			constexpr uintptr_t Bitfields_0x00D8 = 0x00D8;  // Multiple: bFireEventsWhenForwards, bFireEventsWhenBackwards, bFireEventsWhenJumpingForwards
		}

		namespace InterpTrackFaceFX {
			constexpr uintptr_t FaceFXAnimSets = 0x00C8;
			constexpr uintptr_t FaceFXSeqs = 0x00D8;
			constexpr uintptr_t CachedActorFXAsset = 0x00E8;
			constexpr uintptr_t FaceFXSoundCueKeys = 0x00F0;
		}

		namespace InterpTrackFade {
			constexpr uintptr_t bPersistFade = 0x00E8;
		}

		namespace InterpTrackFloatBase {
			constexpr uintptr_t FloatTrack = 0x00C8;
			constexpr uintptr_t CurveTension = 0x00E0;
		}

		namespace InterpTrackFloatMaterialParam {
			constexpr uintptr_t Materials = 0x00E8;
			constexpr uintptr_t Material = 0x00F8;
			constexpr uintptr_t ParamName = 0x0100;
			constexpr uintptr_t bNeedsMaterialRefsUpdate = 0x0108;
		}

		namespace InterpTrackFloatParticleParam {
			constexpr uintptr_t ParamName = 0x00E8;
		}

		namespace InterpTrackFloatProp {
			constexpr uintptr_t PropertyName = 0x00E8;
		}

		namespace InterpTrackHeadTracking {
			constexpr uintptr_t HeadTrackingTrack = 0x00C8;
			constexpr uintptr_t TrackControllerName = 0x00D8;
			constexpr uintptr_t LookAtActorRadius = 0x00E8;
			constexpr uintptr_t Bitfields_0x00EC = 0x00EC;  // Multiple: bDisableBeyondLimit, bLookAtPawns
			constexpr uintptr_t MaxLookAtTime = 0x00F0;
			constexpr uintptr_t MinLookAtTime = 0x00F4;
			constexpr uintptr_t MaxInterestTime = 0x00F8;
			constexpr uintptr_t ActorClassesToLookAt = 0x0100;
			constexpr uintptr_t TargetBoneNames = 0x0110;
		}

		namespace InterpTrackInstAnimControl {
			constexpr uintptr_t LastUpdatePosition = 0x0060;
			constexpr uintptr_t InitPosition = 0x0064;
			constexpr uintptr_t InitRotation = 0x0070;
		}

		namespace InterpTrackInstBoolProp {
			constexpr uintptr_t BoolProp = 0x0070;
			constexpr uintptr_t BitMask = 0x0078;
			constexpr uintptr_t ResetBool = 0x007C;
		}

		namespace InterpTrackInstColorProp {
			constexpr uintptr_t ColorProp = 0x0070;
			constexpr uintptr_t ResetColor = 0x0078;
		}

		namespace InterpTrackInstDirector {
			constexpr uintptr_t OldViewTarget = 0x0060;
			constexpr uintptr_t OldRenderingOverrides = 0x0068;
		}

		namespace InterpTrackInstEvent {
			constexpr uintptr_t LastUpdatePosition = 0x0060;
		}

		namespace InterpTrackInstFaceFX {
			constexpr uintptr_t bFirstUpdate = 0x0060;
			constexpr uintptr_t LastUpdatePosition = 0x0064;
		}

		namespace InterpTrackInstFloatMaterialParam {
			constexpr uintptr_t MICInfos = 0x0060;
			constexpr uintptr_t InstancedTrack = 0x0070;
		}

		namespace InterpTrackInstFloatParticleParam {
			constexpr uintptr_t ResetFloat = 0x0060;
		}

		namespace InterpTrackInstFloatProp {
			constexpr uintptr_t FloatProp = 0x0070;
			constexpr uintptr_t ResetFloat = 0x0078;
			constexpr uintptr_t DistributionProp = 0x0080;
		}

		namespace InterpTrackInstHeadTracking {
			constexpr uintptr_t Action = 0x0060;
			constexpr uintptr_t UnknownData00 = 0x0068;
			constexpr uintptr_t Mesh = 0x00B8;
			constexpr uintptr_t TrackControls = 0x00C0;
			constexpr uintptr_t LastUpdatePosition = 0x00D0;
		}

		namespace InterpTrackInstLinearColorProp {
			constexpr uintptr_t ColorProp = 0x0070;
			constexpr uintptr_t ResetColor = 0x0078;
		}

		namespace InterpTrackInstMove {
			constexpr uintptr_t ResetLocation = 0x0060;
			constexpr uintptr_t ResetRotation = 0x006C;
			constexpr uintptr_t UnknownData00 = 0x0078;
			constexpr uintptr_t InitialTM = 0x0080;
			constexpr uintptr_t InitialQuat = 0x00C0;
		}

		namespace InterpTrackInstNotify {
			constexpr uintptr_t LastUpdatePosition = 0x0060;
		}

		namespace InterpTrackInstParticleReplay {
			constexpr uintptr_t LastUpdatePosition = 0x0060;
		}

		namespace InterpTrackInstProperty {
			constexpr uintptr_t PropertyUpdateCallback = 0x0060;
			constexpr uintptr_t PropertyOuterObjectInst = 0x0068;
		}

		namespace InterpTrackInstSkelControlStrength {
			constexpr uintptr_t bSavedControlledByAnimMetaData = 0x0060;
		}

		namespace InterpTrackInstSlomo {
			constexpr uintptr_t OldTimeDilation = 0x0060;
		}

		namespace InterpTrackInstSound {
			constexpr uintptr_t LastUpdatePosition = 0x0060;
			constexpr uintptr_t PlayAudioComp = 0x0068;
		}

		namespace InterpTrackInstToggle {
			constexpr uintptr_t Action = 0x0060;
			constexpr uintptr_t LastUpdatePosition = 0x0064;
			constexpr uintptr_t bSavedActiveState = 0x0068;
		}

		namespace InterpTrackInstVectorMaterialParam {
			constexpr uintptr_t MICInfos = 0x0060;
			constexpr uintptr_t InstancedTrack = 0x0070;
		}

		namespace InterpTrackInstVectorProp {
			constexpr uintptr_t VectorProp = 0x0070;
			constexpr uintptr_t ResetVector = 0x0078;
		}

		namespace InterpTrackInstVisibility {
			constexpr uintptr_t Action = 0x0060;
			constexpr uintptr_t LastUpdatePosition = 0x0064;
		}

		namespace InterpTrackLinearColorBase {
			constexpr uintptr_t LinearColorTrack = 0x00C8;
			constexpr uintptr_t CurveTension = 0x00E0;
		}

		namespace InterpTrackLinearColorProp {
			constexpr uintptr_t PropertyName = 0x00E8;
		}

		namespace InterpTrackMorphWeight {
			constexpr uintptr_t MorphNodeName = 0x00E8;
		}

		namespace InterpTrackMove {
			constexpr uintptr_t PosTrack = 0x00C8;
			constexpr uintptr_t EulerTrack = 0x00E0;
			constexpr uintptr_t LookupTrack = 0x00F8;
			constexpr uintptr_t LookAtGroupName = 0x0108;
			constexpr uintptr_t LinCurveTension = 0x0110;
			constexpr uintptr_t AngCurveTension = 0x0114;
			constexpr uintptr_t Bitfields_0x0118 = 0x0118;  // Multiple: bUseQuatInterpolation, bShowArrowAtKeys, bDisableMovement, bShowTranslationOnCurveEd, bShowRotationOnCurveEd, bHide3DTrack, bUseRawActorTMforRelativeToInitial
			constexpr uintptr_t MoveFrame = 0x011C;
			constexpr uintptr_t RotMode = 0x011D;
		}

		namespace InterpTrackMoveAxis {
			constexpr uintptr_t MoveAxis = 0x00E8;
			constexpr uintptr_t LookupTrack = 0x00F0;
		}

		namespace InterpTrackNotify {
			constexpr uintptr_t Node = 0x00C8;
			constexpr uintptr_t ParentNodeName = 0x00D0;
			constexpr uintptr_t OuterSequence = 0x00D8;
			constexpr uintptr_t OuterSet = 0x00E0;
			constexpr uintptr_t NotifyTrack = 0x00E8;
		}

		namespace InterpTrackParticleReplay {
			constexpr uintptr_t TrackKeys = 0x00C8;
			constexpr uintptr_t bIsCapturingReplay = 0x00D8;
			constexpr uintptr_t FixedTimeStep = 0x00DC;
		}

		namespace InterpTrackSkelControlScale {
			constexpr uintptr_t SkelControlName = 0x00E8;
		}

		namespace InterpTrackSkelControlStrength {
			constexpr uintptr_t SkelControlName = 0x00E8;
		}

		namespace InterpTrackSlomo {
			constexpr uintptr_t UnknownData00 = 0x00E4;
		}

		namespace InterpTrackSound {
			constexpr uintptr_t Sounds = 0x00E8;
			constexpr uintptr_t Bitfields_0x00F8 = 0x00F8;  // Multiple: bPlayOnReverse, bContinueSoundOnMatineeEnd, bSuppressSubtitles, bTreatAsDialogue
		}

		namespace InterpTrackToggle {
			constexpr uintptr_t ToggleTrack = 0x00C8;
			constexpr uintptr_t Bitfields_0x00D8 = 0x00D8;  // Multiple: bActivateSystemEachUpdate, bActivateWithJustAttachedFlag, bFireEventsWhenForwards, bFireEventsWhenBackwards, bFireEventsWhenJumpingForwards
		}

		namespace InterpTrackVectorBase {
			constexpr uintptr_t VectorTrack = 0x00C8;
			constexpr uintptr_t CurveTension = 0x00E0;
		}

		namespace InterpTrackVectorMaterialParam {
			constexpr uintptr_t Materials = 0x00E8;
			constexpr uintptr_t Material = 0x00F8;
			constexpr uintptr_t ParamName = 0x0100;
			constexpr uintptr_t bNeedsMaterialRefsUpdate = 0x0108;
		}

		namespace InterpTrackVectorProp {
			constexpr uintptr_t PropertyName = 0x00E8;
		}

		namespace InterpTrackVisibility {
			constexpr uintptr_t VisibilityTrack = 0x00C8;
			constexpr uintptr_t Bitfields_0x00D8 = 0x00D8;  // Multiple: bFireEventsWhenForwards, bFireEventsWhenBackwards, bFireEventsWhenJumpingForwards
		}

		namespace JsonObject {
			constexpr uintptr_t ValueMap = 0x0060;
			constexpr uintptr_t ObjectMap = 0x00B0;
			constexpr uintptr_t ValueArray = 0x0100;
			constexpr uintptr_t ObjectArray = 0x0110;
			constexpr uintptr_t bArray = 0x0120;
		}

		namespace KActor {
			constexpr uintptr_t Bitfields_0x02C8 = 0x02C8;  // Multiple: bDamageAppliesImpulse, bWakeOnLevelStart, bCurrentSlide, bSlideActive, bEnableStayUprightSpring, bLimitMaxPhysicsVelocity, bNeedsRBStateReplication, bDisableClientSidePawnInteractions
			constexpr uintptr_t ImpactEffectComponent = 0x02D0;
			constexpr uintptr_t ImpactSoundComponent = 0x02D8;
			constexpr uintptr_t ImpactSoundComponent2 = 0x02E0;
			constexpr uintptr_t LastImpactTime = 0x02E8;
			constexpr uintptr_t ImpactEffectInfo = 0x02F0;
			constexpr uintptr_t SlideEffectComponent = 0x0308;
			constexpr uintptr_t SlideSoundComponent = 0x0310;
			constexpr uintptr_t LastSlideTime = 0x0318;
			constexpr uintptr_t SlideEffectInfo = 0x0320;
			constexpr uintptr_t StayUprightTorqueFactor = 0x0338;
			constexpr uintptr_t StayUprightMaxTorque = 0x033C;
			constexpr uintptr_t MaxPhysicsVelocity = 0x0340;
			constexpr uintptr_t UnknownData00 = 0x0344;
			constexpr uintptr_t RBState = 0x0350;
			constexpr uintptr_t AngErrorAccumulator = 0x0390;
			constexpr uintptr_t ReplicatedDrawScale3D = 0x0394;
			constexpr uintptr_t InitialLocation = 0x03A0;
			constexpr uintptr_t InitialRotation = 0x03AC;
		}

		namespace KActorFromStatic {
			constexpr uintptr_t MyStaticMeshActor = 0x03B8;
			constexpr uintptr_t MaxImpulseSpeed = 0x03C0;
		}

		namespace KActorSpawnable {
			constexpr uintptr_t Bitfields_0x03B8 = 0x03B8;  // Multiple: bRecycleScaleToZero, bScalingToZero
		}

		namespace KAsset {
			constexpr uintptr_t SkeletalMeshComponent = 0x0268;
			constexpr uintptr_t Bitfields_0x0270 = 0x0270;  // Multiple: bDamageAppliesImpulse, bWakeOnLevelStart, bBlockPawns
			constexpr uintptr_t ReplicatedMesh = 0x0278;
			constexpr uintptr_t ReplicatedPhysAsset = 0x0280;
		}

		namespace KMeshProps {
			constexpr uintptr_t COMNudge = 0x0060;
			constexpr uintptr_t AggGeom = 0x0070;
		}

		namespace Keypoint {
			constexpr uintptr_t SpriteComp = 0x0268;
		}

		namespace KismetBookMark {
			constexpr uintptr_t BookMarkSequencePathName = 0x0070;
		}

		namespace Landscape {
			constexpr uintptr_t LayerNames = 0x03B8;
			constexpr uintptr_t LayerInfos = 0x03C8;
		}

		namespace LandscapeComponent {
			constexpr uintptr_t SectionBaseX = 0x0258;
			constexpr uintptr_t SectionBaseY = 0x025C;
			constexpr uintptr_t ComponentSizeQuads = 0x0260;
			constexpr uintptr_t SubsectionSizeQuads = 0x0264;
			constexpr uintptr_t NumSubsections = 0x0268;
			constexpr uintptr_t OverrideMaterial = 0x0270;
			constexpr uintptr_t MaterialInstance = 0x0278;
			constexpr uintptr_t WeightmapLayerAllocations = 0x0280;
			constexpr uintptr_t WeightmapTextures = 0x0290;
			constexpr uintptr_t WeightmapScaleBias = 0x02A0;
			constexpr uintptr_t WeightmapSubsectionOffset = 0x02B0;
			constexpr uintptr_t UnknownData00 = 0x02B4;
			constexpr uintptr_t HeightmapScaleBias = 0x02C0;
			constexpr uintptr_t HeightmapTexture = 0x02D0;
			constexpr uintptr_t CachedBoxSphereBounds = 0x02D8;
			constexpr uintptr_t CachedLocalBox = 0x02F4;
			constexpr uintptr_t LightingGuid = 0x0310;
			constexpr uintptr_t ShadowMaps = 0x0320;
			constexpr uintptr_t IrrelevantLights = 0x0330;
			constexpr uintptr_t LightMap = 0x0340;
			constexpr uintptr_t EditToolRenderData = 0x0348;
			constexpr uintptr_t CollisionMipLevel = 0x0350;
			constexpr uintptr_t PlatformData = 0x0358;
			constexpr uintptr_t PlatformDataSize = 0x0360;
			constexpr uintptr_t bNeedPostUndo = 0x0364;
			constexpr uintptr_t ForcedLOD = 0x0368;
			constexpr uintptr_t NeighborLOD = 0x036C;
			constexpr uintptr_t NeighborLODBias = 0x0374;
			constexpr uintptr_t LODBias = 0x037C;
		}

		namespace LandscapeGizmoActiveActor {
			constexpr uintptr_t DataType = 0x0288;
			constexpr uintptr_t UnknownData00 = 0x0290;
			constexpr uintptr_t GizmoTexture = 0x02E0;
			constexpr uintptr_t TextureScale = 0x02E8;
			constexpr uintptr_t SampledHeight = 0x02F0;
			constexpr uintptr_t SampledNormal = 0x0300;
			constexpr uintptr_t SampleSizeX = 0x0310;
			constexpr uintptr_t SampleSizeY = 0x0314;
			constexpr uintptr_t CachedWidth = 0x0318;
			constexpr uintptr_t CachedHeight = 0x031C;
			constexpr uintptr_t CachedScaleXY = 0x0320;
			constexpr uintptr_t FrustumVerts = 0x0324;
			constexpr uintptr_t GizmoMaterial = 0x0388;
			constexpr uintptr_t GizmoDataMaterial = 0x0390;
			constexpr uintptr_t GizmoMeshMaterial = 0x0398;
			constexpr uintptr_t GizmoMeshMaterial2 = 0x03A0;
			constexpr uintptr_t LayerNames = 0x03A8;
		}

		namespace LandscapeGizmoActor {
			constexpr uintptr_t Width = 0x0268;
			constexpr uintptr_t Height = 0x026C;
			constexpr uintptr_t LengthZ = 0x0270;
			constexpr uintptr_t MarginZ = 0x0274;
			constexpr uintptr_t MinRelativeZ = 0x0278;
			constexpr uintptr_t RelativeScaleZ = 0x027C;
			constexpr uintptr_t TargetLandscapeInfo = 0x0280;
		}

		namespace LandscapeHeightfieldCollisionComponent {
			constexpr uintptr_t CollisionHeightData = 0x0258;
			constexpr uintptr_t ComponentLayers = 0x02B0;
			constexpr uintptr_t DominantLayerData = 0x02C0;
			constexpr uintptr_t SectionBaseX = 0x0318;
			constexpr uintptr_t SectionBaseY = 0x031C;
			constexpr uintptr_t CollisionSizeQuads = 0x0320;
			constexpr uintptr_t CollisionScale = 0x0324;
			constexpr uintptr_t CollisionQuadFlags = 0x0328;
			constexpr uintptr_t PhysicalMaterials = 0x0338;
			constexpr uintptr_t RBHeightfield = 0x0348;
			constexpr uintptr_t CachedBoxSphereBounds = 0x0350;
			constexpr uintptr_t Bitfields_0x036C = 0x036C;  // Multiple: bIncludeHoles, bHeightFieldDataHasHole
		}

		namespace LandscapeInfo {
			constexpr uintptr_t LandscapeGuid = 0x0060;
			constexpr uintptr_t UnknownData00 = 0x0070;
			constexpr uintptr_t DataInterface = 0x00C0;
			constexpr uintptr_t UnknownData01 = 0x00C8;
			constexpr uintptr_t UnknownData02 = 0x0118;
			constexpr uintptr_t LandscapeProxy = 0x0168;
			constexpr uintptr_t UnknownData03 = 0x0170;
			constexpr uintptr_t Proxies = 0x01C0;
			constexpr uintptr_t SelectedComponents = 0x0210;
			constexpr uintptr_t SelectedCollisionComponents = 0x0260;
			constexpr uintptr_t SelectedRegionComponents = 0x02B0;
			constexpr uintptr_t UnknownData04 = 0x0300;
			constexpr uintptr_t HeightmapFilePath = 0x0350;
			constexpr uintptr_t bIsValid = 0x0360;
		}

		namespace LandscapeLayerInfoObject {
			constexpr uintptr_t LayerName = 0x0060;
			constexpr uintptr_t PhysMaterial = 0x0068;
			constexpr uintptr_t Hardness = 0x0070;
			constexpr uintptr_t bNoWeightBlend = 0x0074;
		}

		namespace LandscapeMaterialInstanceConstant {
			constexpr uintptr_t bIsLayerThumbnail = 0x0360;
			constexpr uintptr_t DataWeightmapIndex = 0x0364;
			constexpr uintptr_t DataWeightmapSize = 0x0368;
		}

		namespace LandscapeProxy {
			constexpr uintptr_t LandscapeGuid = 0x0268;
			constexpr uintptr_t MaxLODLevel = 0x0278;
			constexpr uintptr_t DefaultPhysMaterial = 0x0280;
			constexpr uintptr_t StreamingDistanceMultiplier = 0x0288;
			constexpr uintptr_t LandscapeMaterial = 0x0290;
			constexpr uintptr_t LODDistanceFactor = 0x0298;
			constexpr uintptr_t LandscapeComponents = 0x02A0;
			constexpr uintptr_t CollisionComponents = 0x02B0;
			constexpr uintptr_t UnknownData00 = 0x02C0;
			constexpr uintptr_t UnknownData01 = 0x0310;
			constexpr uintptr_t StaticLightingResolution = 0x0360;
			constexpr uintptr_t LandscapeActor = 0x0368;
			constexpr uintptr_t Bitfields_0x0370 = 0x0370;  // Multiple: bIsProxy, bIsSetup, bResetup, bIsMovingToLevel
			constexpr uintptr_t LightmassSettings = 0x0374;
			constexpr uintptr_t CollisionMipLevel = 0x0390;
			constexpr uintptr_t MobileLODBias = 0x0394;
			constexpr uintptr_t LayerInfoObjs = 0x0398;
			constexpr uintptr_t ComponentSizeQuads = 0x03A8;
			constexpr uintptr_t SubsectionSizeQuads = 0x03AC;
			constexpr uintptr_t NumSubsections = 0x03B0;
		}

		namespace LensFlare {
			constexpr uintptr_t SourceElement = 0x0060;
			constexpr uintptr_t SourceMesh = 0x0228;
			constexpr uintptr_t SourceDPG = 0x0230;
			constexpr uintptr_t ReflectionsDPG = 0x0231;
			constexpr uintptr_t Reflections = 0x0238;
			constexpr uintptr_t OuterCone = 0x0248;
			constexpr uintptr_t InnerCone = 0x024C;
			constexpr uintptr_t ConeFudgeFactor = 0x0250;
			constexpr uintptr_t Radius = 0x0254;
			constexpr uintptr_t Bitfields_0x0258 = 0x0258;  // Multiple: bUseTrueConeCalculation, bUseFixedRelativeBoundingBox, bRenderDebugLines, ThumbnailImageOutOfDate
			constexpr uintptr_t MinStrength = 0x025C;
			constexpr uintptr_t ScreenPercentageMap = 0x0260;
			constexpr uintptr_t FixedRelativeBoundingBox = 0x0288;
			constexpr uintptr_t CurveEdSetup = 0x02A8;
			constexpr uintptr_t ReflectionCount = 0x02B0;
			constexpr uintptr_t ThumbnailAngle = 0x02B4;
			constexpr uintptr_t ThumbnailDistance = 0x02C0;
			constexpr uintptr_t ThumbnailImage = 0x02C8;
		}

		namespace LensFlareComponent {
			constexpr uintptr_t Template = 0x0258;
			constexpr uintptr_t PreviewInnerCone = 0x0260;
			constexpr uintptr_t PreviewOuterCone = 0x0268;
			constexpr uintptr_t PreviewRadius = 0x0270;
			constexpr uintptr_t Bitfields_0x0278 = 0x0278;  // Multiple: bAutoActivate, bIsActive, bHasTranslucency, bHasUnlitTranslucency, bHasUnlitDistortion, bUsesSceneColor, bHasSeparateTranslucency, bUseTrueConeCalculation, bVisibleForMobile
			constexpr uintptr_t OuterCone = 0x027C;
			constexpr uintptr_t InnerCone = 0x0280;
			constexpr uintptr_t ConeFudgeFactor = 0x0284;
			constexpr uintptr_t Radius = 0x0288;
			constexpr uintptr_t MinStrength = 0x028C;
			constexpr uintptr_t SourceColor = 0x0290;
			constexpr uintptr_t Materials = 0x02A0;
			constexpr uintptr_t ReleaseResourcesFence = 0x02B0;
			constexpr uintptr_t NextTraceTime = 0x02B8;
		}

		namespace LensFlareSource {
			constexpr uintptr_t LensFlareComp = 0x0268;
			constexpr uintptr_t bCurrentlyActive = 0x0270;
		}

		namespace Level {
			constexpr uintptr_t UnknownData00 = 0x00D8;
			constexpr uintptr_t LightmapTotalSize = 0x01F8;
			constexpr uintptr_t ShadowmapTotalSize = 0x01FC;
			constexpr uintptr_t UnknownData01 = 0x0200;
		}

		namespace LevelBase {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace LevelGridVolume {
			constexpr uintptr_t LevelGridVolumeName = 0x02A8;
			constexpr uintptr_t CellShape = 0x02B8;
			constexpr uintptr_t Subdivisions = 0x02BC;
			constexpr uintptr_t LoadingDistance = 0x02C8;
			constexpr uintptr_t KeepLoadedRange = 0x02CC;
			constexpr uintptr_t CellConvexElem = 0x02D0;
		}

		namespace LevelStreaming {
			constexpr uintptr_t PackageName = 0x0060;
			constexpr uintptr_t LoadedLevel = 0x0068;
			constexpr uintptr_t Offset = 0x0070;
			constexpr uintptr_t LevelTransform = 0x0080;
			constexpr uintptr_t OldOffset = 0x00C0;
			constexpr uintptr_t Bitfields_0x00CC = 0x00CC;  // Multiple: bIsVisible, bHasLoadRequestPending, bHasUnloadRequestPending, bShouldBeVisibleInEditor, bBoundingBoxVisible, bLocked, bIsFullyStatic, bShouldBeLoaded, bShouldBeVisible, bShouldBlockOnLoad, bDrawOnLevelStatusMap, bIsRequestingUnloadAndRemoval
			constexpr uintptr_t DrawColor = 0x00D0;
			constexpr uintptr_t EditorStreamingVolumes = 0x00D8;
			constexpr uintptr_t MinTimeBetweenVolumeUnloadRequests = 0x00E8;
			constexpr uintptr_t LastVolumeUnloadRequestTime = 0x00EC;
			constexpr uintptr_t Keywords = 0x00F0;
			constexpr uintptr_t EditorGridVolume = 0x0100;
			constexpr uintptr_t GridPosition = 0x0108;
		}

		namespace LevelStreamingAlwaysLoaded {
			constexpr uintptr_t bIsProceduralBuildingLODLevel = 0x0118;
		}

		namespace LevelStreamingDistance {
			constexpr uintptr_t Origin = 0x0118;
			constexpr uintptr_t MaxDistance = 0x0124;
		}

		namespace LevelStreamingKismet {
			constexpr uintptr_t UnknownData00 = 0x0114;
		}

		namespace LevelStreamingPersistent {
			constexpr uintptr_t UnknownData00 = 0x0114;
		}

		namespace LevelStreamingVolume {
			constexpr uintptr_t StreamingLevels = 0x02A8;
			constexpr uintptr_t Bitfields_0x02B8 = 0x02B8;  // Multiple: bEditorPreVisOnly, bDisabled, bTestDistanceToVolume
			constexpr uintptr_t StreamingUsage = 0x02BC;
			constexpr uintptr_t Usage = 0x02BD;
			constexpr uintptr_t TestVolumeDistance = 0x02C0;
		}

		namespace LiftCenter {
			constexpr uintptr_t MyLift = 0x0388;
			constexpr uintptr_t MaxDist2D = 0x0390;
			constexpr uintptr_t LiftOffset = 0x0394;
			constexpr uintptr_t bJumpLift = 0x03A0;
			constexpr uintptr_t CollisionHeight = 0x03A4;
			constexpr uintptr_t LiftTrigger = 0x03A8;
		}

		namespace LiftExit {
			constexpr uintptr_t MyLiftCenter = 0x0388;
			constexpr uintptr_t bExitOnly = 0x0390;
		}

		namespace Light {
			constexpr uintptr_t LightComponent = 0x0268;
			constexpr uintptr_t bEnabled = 0x0270;
		}

		namespace LightComponent {
			constexpr uintptr_t SceneInfo = 0x00A0;
			constexpr uintptr_t UnknownData00 = 0x00A8;
			constexpr uintptr_t WorldToLight = 0x00B0;
			constexpr uintptr_t LightToWorld = 0x00F0;
			constexpr uintptr_t LightGuid = 0x0130;
			constexpr uintptr_t LightmapGuid = 0x0140;
			constexpr uintptr_t Brightness = 0x0150;
			constexpr uintptr_t LightColor = 0x0154;
			constexpr uintptr_t Function = 0x0158;
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bEnabled, CastShadows, CastStaticShadows, CastDynamicShadows, bCastCompositeShadow, bAffectCompositeShadowDirection, bNonModulatedSelfShadowing, bSelfShadowOnly, bAllowPreShadow, bForceDynamicLight, UseDirectLightMap, bHasLightEverBeenBuiltIntoLightMap, bCanAffectDynamicPrimitivesOutsideDynamicChannel, bRenderLightShafts, bUseImageReflectionSpecular, bPrecomputedLightingIsValid, bExplicitlyAssignedLight, bAllowCompositingIntoDLE
			constexpr uintptr_t LightEnvironment = 0x0168;
			constexpr uintptr_t LightingChannels = 0x0170;
			constexpr uintptr_t LightAffectsClassification = 0x0174;
			constexpr uintptr_t LightShadowMode = 0x0175;
			constexpr uintptr_t ModShadowColor = 0x0178;
			constexpr uintptr_t ModShadowFadeoutTime = 0x0188;
			constexpr uintptr_t ModShadowFadeoutExponent = 0x018C;
			constexpr uintptr_t LightListIndex = 0x0190;
			constexpr uintptr_t ShadowProjectionTechnique = 0x0194;
			constexpr uintptr_t ShadowFilterQuality = 0x0195;
			constexpr uintptr_t MinShadowResolution = 0x0198;
			constexpr uintptr_t MaxShadowResolution = 0x019C;
			constexpr uintptr_t ShadowFadeResolution = 0x01A0;
			constexpr uintptr_t OcclusionDepthRange = 0x01A4;
			constexpr uintptr_t BloomScale = 0x01A8;
			constexpr uintptr_t BloomThreshold = 0x01AC;
			constexpr uintptr_t BloomScreenBlendThreshold = 0x01B0;
			constexpr uintptr_t BloomTint = 0x01B4;
			constexpr uintptr_t RadialBlurPercent = 0x01B8;
			constexpr uintptr_t OcclusionMaskDarkness = 0x01BC;
			constexpr uintptr_t ReflectionSpecularBrightness = 0x01C0;
		}

		namespace LightEnvironmentComponent {
			constexpr uintptr_t Bitfields_0x00A0 = 0x00A0;  // Multiple: bEnabled, bForceNonCompositeDynamicLights, bAllowDynamicShadowsOnTranslucency, bAllowPreShadow, bTranslucencyShadowed
			constexpr uintptr_t DominantShadowFactor = 0x00A4;
			constexpr uintptr_t AffectingDominantLight = 0x00A8;
			constexpr uintptr_t AffectedComponents = 0x00B0;
		}

		namespace LightFunction {
			constexpr uintptr_t SourceMaterial = 0x0060;
			constexpr uintptr_t Scale = 0x0068;
			constexpr uintptr_t DisabledBrightness = 0x0074;
		}

		namespace LightMapTexture2D {
			constexpr uintptr_t UnknownData00 = 0x0280;
		}

		namespace LightmappedSurfaceCollection {
			constexpr uintptr_t SourceModel = 0x0060;
			constexpr uintptr_t Surfaces = 0x0068;
		}

		namespace LightmassCharacterIndirectDetailVolume {
			constexpr uintptr_t UnknownData00 = 0x02A4;
		}

		namespace LightmassImportanceVolume {
			constexpr uintptr_t UnknownData00 = 0x02A4;
		}

		namespace LightmassLevelSettings {
			constexpr uintptr_t NumIndirectLightingBounces = 0x0060;
			constexpr uintptr_t EnvironmentColor = 0x0064;
			constexpr uintptr_t EnvironmentIntensity = 0x0068;
			constexpr uintptr_t EmissiveBoost = 0x006C;
			constexpr uintptr_t DiffuseBoost = 0x0070;
			constexpr uintptr_t SpecularBoost = 0x0074;
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bUseAmbientOcclusion, bVisualizeAmbientOcclusion
			constexpr uintptr_t DirectIlluminationOcclusionFraction = 0x007C;
			constexpr uintptr_t IndirectIlluminationOcclusionFraction = 0x0080;
			constexpr uintptr_t OcclusionExponent = 0x0084;
			constexpr uintptr_t FullyOccludedSamplesFraction = 0x0088;
			constexpr uintptr_t MaxOcclusionDistance = 0x008C;
		}

		namespace LightmassPrimitiveSettingsObject {
			constexpr uintptr_t LightmassSettings = 0x0060;
		}

		namespace LineBatchComponent {
			constexpr uintptr_t FPrimitiveDrawInterfaceVfTable = 0x0258;
			constexpr uintptr_t FPrimitiveDrawInterfaceView = 0x0260;
			constexpr uintptr_t BatchedLines = 0x0268;
			constexpr uintptr_t BatchedPoints = 0x0278;
			constexpr uintptr_t DefaultLifeTime = 0x0288;
		}

		namespace LocalPlayer {
			constexpr uintptr_t VfTable_FObserverInterface = 0x00B8;
			constexpr uintptr_t ControllerId = 0x00C0;
			constexpr uintptr_t ViewportClient = 0x00C8;
			constexpr uintptr_t Origin = 0x00D0;
			constexpr uintptr_t Size = 0x00D8;
			constexpr uintptr_t PlayerPostProcess = 0x00E0;
			constexpr uintptr_t PlayerPostProcessChains = 0x00E8;
			constexpr uintptr_t Bitfields_0x00F8 = 0x00F8;  // Multiple: bForceDefaultPostProcessChain, bWantToResetToMapDefaultPP, bSentSplitJoin, bPendingServerAuth, bDrawWorldFullScreen, bReplayFXDirtied
			constexpr uintptr_t ViewState = 0x0100;
			constexpr uintptr_t ViewState2 = 0x0108;
			constexpr uintptr_t ActorVisibilityHistory = 0x0110;
			constexpr uintptr_t LastViewLocation = 0x0120;
			constexpr uintptr_t CurrentPPInfo = 0x0130;
			constexpr uintptr_t LevelPPInfo = 0x02A8;
			constexpr uintptr_t ActivePPOverrides = 0x0420;
			constexpr uintptr_t AspectRatioAxisConstraint = 0x0430;
			constexpr uintptr_t LastMap = 0x0438;
			constexpr uintptr_t TagContext = 0x0448;
			constexpr uintptr_t CachedAuthInt_Object = 0x0450;
			constexpr uintptr_t CachedAuthInt_Interface = 0x0458;
			constexpr uintptr_t ServerAuthTimestamp = 0x0460;
			constexpr uintptr_t ServerAuthTimeout = 0x0464;
			constexpr uintptr_t ServerAuthRetryCount = 0x0468;
			constexpr uintptr_t MaxServerAuthRetryCount = 0x046C;
			constexpr uintptr_t ServerAuthUID = 0x0470;
		}

		namespace MantleReachSpec {
			constexpr uintptr_t bClimbUp = 0x00C8;
		}

		namespace MassiveLODOverrideVolume {
			constexpr uintptr_t UnknownData00 = 0x02A4;
		}

		namespace Material {
			constexpr uintptr_t PhysMaterial = 0x0278;
			constexpr uintptr_t PhysicalMaterial = 0x0280;
			constexpr uintptr_t PhysMaterialMask = 0x0288;
			constexpr uintptr_t PhysMaterialMaskUVChannel = 0x0290;
			constexpr uintptr_t BlackPhysicalMaterial = 0x0298;
			constexpr uintptr_t WhitePhysicalMaterial = 0x02A0;
			constexpr uintptr_t DiffuseColor = 0x02A8;
			constexpr uintptr_t DiffusePower = 0x02E8;
			constexpr uintptr_t SpecularColor = 0x0328;
			constexpr uintptr_t SpecularPower = 0x0368;
			constexpr uintptr_t Normal = 0x03A8;
			constexpr uintptr_t EmissiveColor = 0x03F0;
			constexpr uintptr_t Opacity = 0x0430;
			constexpr uintptr_t OpacityMask = 0x0470;
			constexpr uintptr_t OpacityMaskClipValue = 0x04B0;
			constexpr uintptr_t ShadowDepthBias = 0x04B4;
			constexpr uintptr_t Distortion = 0x04B8;
			constexpr uintptr_t BlendMode = 0x0500;
			constexpr uintptr_t LightingModel = 0x0501;
			constexpr uintptr_t D3D11TessellationMode = 0x0502;
			constexpr uintptr_t CustomLighting = 0x0508;
			constexpr uintptr_t CustomSkylightDiffuse = 0x0548;
			constexpr uintptr_t AnisotropicDirection = 0x0588;
			constexpr uintptr_t TwoSidedLightingMask = 0x05D0;
			constexpr uintptr_t TwoSidedLightingColor = 0x0610;
			constexpr uintptr_t WorldPositionOffset = 0x0650;
			constexpr uintptr_t WorldDisplacement = 0x0698;
			constexpr uintptr_t TessellationMultiplier = 0x06E0;
			constexpr uintptr_t SubsurfaceInscatteringColor = 0x0720;
			constexpr uintptr_t SubsurfaceAbsorptionColor = 0x0760;
			constexpr uintptr_t SubsurfaceScatteringRadius = 0x07A0;
			constexpr uintptr_t Bitfields_0x07E0 = 0x07E0;  // Multiple: EnableSubsurfaceScattering, EnableSeparateTranslucency, EnableSeparateTranslucencyDuring4KCheckerboard, bEnableMaskedAntialiasing, TwoSided, TwoSidedSeparatePass, bDisableDepthTest, bSceneTextureRenderBehindTranslucency, bAllowFog, bTranslucencyReceiveDominantShadowsFromStatic, bTranslucencyInheritDominantShadowsFromOpaque, bAllowTranslucencyDoF, bUseOneLayerDistortion, bUseLitTranslucencyDepthPass, bUseLitTranslucencyPostRenderDepthPass, bCastLitTranslucencyShadowAsMasked, bDrawLitTranslucencyPrepassInOpaquePrepassWhen4KCB, bUsedAsLightFunction, bUsedWithFogVolumes, bUsedAsSpecialEngineMaterial, bUsedWithSkeletalMesh, bUsedWithTerrain, bUsedWithLandscape, bUsedWithMobileLandscape, bUsedWithFracturedMeshes, bUsedWithParticleSystem, bUsedWithParticleSprites, bUsedWithBeamTrails, bUsedWithParticleSubUV, bUsedWithSpeedTree, bUsedWithStaticLighting, bUsedWithLensFlare
			constexpr uintptr_t Bitfields_0x07E4 = 0x07E4;  // Multiple: bUsedWithGammaCorrection, bUsedWithInstancedMeshParticles, bUsedWithFluidSurfaces, bUsedWithDecals, bUsedWithMaterialEffect, bUsedWithMorphTargets, bUsedWithRadialBlur, bUsedWithInstancedMeshes, bUsedWithSplineMeshes, bUsedWithAPEXMeshes, bUsedWithScreenDoorFade, bEnableCrackFreeDisplacement, bUseImageBasedReflections, Wireframe, bPerPixelCameraVector, bAllowLightmapSpecular, bIsFallbackMaterial, bUsesDistortion, bIsMasked, bIsPreviewMaterial
			constexpr uintptr_t ImageReflectionNormalDampening = 0x07E8;
			constexpr uintptr_t MaterialResources = 0x07F0;
			constexpr uintptr_t DefaultMaterialInstances = 0x0800;
			constexpr uintptr_t EditorX = 0x0818;
			constexpr uintptr_t EditorY = 0x081C;
			constexpr uintptr_t EditorPitch = 0x0820;
			constexpr uintptr_t EditorYaw = 0x0824;
			constexpr uintptr_t MaterialEditorX = 0x0828;
			constexpr uintptr_t MaterialEditorY = 0x082C;
			constexpr uintptr_t MaterialWidth = 0x0830;
			constexpr uintptr_t MaterialHeight = 0x0834;
			constexpr uintptr_t Expressions = 0x0838;
			constexpr uintptr_t EditorComments = 0x0848;
			constexpr uintptr_t MaterialFunctionInfos = 0x0858;
			constexpr uintptr_t UnknownData00 = 0x0868;
			constexpr uintptr_t ReferencedTextures = 0x08B8;
			constexpr uintptr_t ReferencedTextureGuids = 0x08C8;
		}

		namespace MaterialEffect {
			constexpr uintptr_t Material = 0x0088;
		}

		namespace MaterialExpression {
			constexpr uintptr_t EditorX = 0x0060;
			constexpr uintptr_t EditorY = 0x0064;
			constexpr uintptr_t MaterialExpressionEditorX = 0x0068;
			constexpr uintptr_t MaterialExpressionEditorY = 0x006C;
			constexpr uintptr_t MaterialExpressionWidth = 0x0070;
			constexpr uintptr_t Bitfields_0x0074 = 0x0074;  // Multiple: bRealtimePreview, bNeedToUpdatePreview, bIsParameterExpression, bIsHighlighted, bShowOutputNameOnPin, bHidePreviewWindow, bShowInputs, bShowOutputs, bUsedByStaticParameterSet
			constexpr uintptr_t Material = 0x0078;
			constexpr uintptr_t Function = 0x0080;
			constexpr uintptr_t Desc = 0x0088;
			constexpr uintptr_t BorderColor = 0x0098;
			constexpr uintptr_t MenuCategories = 0x00A0;
			constexpr uintptr_t Outputs = 0x00B0;
		}

		namespace MaterialExpressionAbs {
			constexpr uintptr_t Input = 0x00C0;
		}

		namespace MaterialExpressionAdd {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
		}

		namespace MaterialExpressionAntialiasedTextureMask {
			constexpr uintptr_t Threshold = 0x0158;
			constexpr uintptr_t Channel = 0x015C;
		}

		namespace MaterialExpressionAppendVector {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
		}

		namespace MaterialExpressionAtan {
			constexpr uintptr_t A = 0x00C0;
		}

		namespace MaterialExpressionAtan2 {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
		}

		namespace MaterialExpressionBumpOffset {
			constexpr uintptr_t Coordinate = 0x00C0;
			constexpr uintptr_t Height = 0x00F8;
			constexpr uintptr_t HeightRatioInput = 0x0130;
			constexpr uintptr_t HeightRatio = 0x0168;
			constexpr uintptr_t ReferencePlane = 0x016C;
		}

		namespace MaterialExpressionCeil {
			constexpr uintptr_t Input = 0x00C0;
		}

		namespace MaterialExpressionClamp {
			constexpr uintptr_t Input = 0x00C0;
			constexpr uintptr_t Min = 0x00F8;
			constexpr uintptr_t Max = 0x0130;
		}

		namespace MaterialExpressionComment {
			constexpr uintptr_t PosX = 0x00C0;
			constexpr uintptr_t PosY = 0x00C4;
			constexpr uintptr_t SizeX = 0x00C8;
			constexpr uintptr_t SizeY = 0x00CC;
			constexpr uintptr_t Text = 0x00D0;
		}

		namespace MaterialExpressionComponentMask {
			constexpr uintptr_t Input = 0x00C0;
			constexpr uintptr_t Bitfields_0x00F8 = 0x00F8;  // Multiple: R, G, B, A
		}

		namespace MaterialExpressionConstant {
			constexpr uintptr_t R = 0x00C0;
		}

		namespace MaterialExpressionConstant2Vector {
			constexpr uintptr_t R = 0x00C0;
			constexpr uintptr_t G = 0x00C4;
		}

		namespace MaterialExpressionConstant3Vector {
			constexpr uintptr_t R = 0x00C0;
			constexpr uintptr_t G = 0x00C4;
			constexpr uintptr_t B = 0x00C8;
		}

		namespace MaterialExpressionConstant4Vector {
			constexpr uintptr_t R = 0x00C0;
			constexpr uintptr_t G = 0x00C4;
			constexpr uintptr_t B = 0x00C8;
			constexpr uintptr_t A = 0x00CC;
		}

		namespace MaterialExpressionConstantBiasScale {
			constexpr uintptr_t Input = 0x00C0;
			constexpr uintptr_t Bias = 0x00F8;
			constexpr uintptr_t Scale = 0x00FC;
		}

		namespace MaterialExpressionConstantClamp {
			constexpr uintptr_t Input = 0x00C0;
			constexpr uintptr_t Min = 0x00F8;
			constexpr uintptr_t Max = 0x00FC;
		}

		namespace MaterialExpressionCosine {
			constexpr uintptr_t Input = 0x00C0;
			constexpr uintptr_t Period = 0x00F8;
		}

		namespace MaterialExpressionCrossProduct {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
		}

		namespace MaterialExpressionCustom {
			constexpr uintptr_t Code = 0x00C0;
			constexpr uintptr_t OutputType = 0x00D0;
			constexpr uintptr_t Description = 0x00D8;
			constexpr uintptr_t Inputs = 0x00E8;
		}

		namespace MaterialExpressionCustomTexture {
			constexpr uintptr_t Texture = 0x00C0;
		}

		namespace MaterialExpressionDepthBiasBlend {
			constexpr uintptr_t bNormalize = 0x0138;
			constexpr uintptr_t BiasScale = 0x013C;
			constexpr uintptr_t Bias = 0x0140;
		}

		namespace MaterialExpressionDepthBiasedAlpha {
			constexpr uintptr_t bNormalize = 0x00C0;
			constexpr uintptr_t BiasScale = 0x00C4;
			constexpr uintptr_t Alpha = 0x00C8;
			constexpr uintptr_t Bias = 0x0100;
		}

		namespace MaterialExpressionDepthBiasedBlend {
			constexpr uintptr_t bNormalize = 0x00C0;
			constexpr uintptr_t BiasScale = 0x00C4;
			constexpr uintptr_t RGB = 0x00C8;
			constexpr uintptr_t Alpha = 0x0100;
			constexpr uintptr_t Bias = 0x0138;
		}

		namespace MaterialExpressionDepthOfFieldFunction {
			constexpr uintptr_t FunctionValue = 0x00C0;
			constexpr uintptr_t Depth = 0x00C8;
		}

		namespace MaterialExpressionDeriveNormalZ {
			constexpr uintptr_t InXY = 0x00C0;
		}

		namespace MaterialExpressionDesaturation {
			constexpr uintptr_t Input = 0x00C0;
			constexpr uintptr_t Percent = 0x00F8;
			constexpr uintptr_t LuminanceFactors = 0x0130;
		}

		namespace MaterialExpressionDestDepth {
			constexpr uintptr_t bNormalize = 0x00C0;
		}

		namespace MaterialExpressionDistance {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
		}

		namespace MaterialExpressionDivide {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
		}

		namespace MaterialExpressionDotProduct {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
		}

		namespace MaterialExpressionDynamicParameter {
			constexpr uintptr_t ParamNames = 0x00C0;
		}

		namespace MaterialExpressionFloor {
			constexpr uintptr_t Input = 0x00C0;
		}

		namespace MaterialExpressionFluidNormal {
			constexpr uintptr_t Coordinates = 0x00C0;
		}

		namespace MaterialExpressionFmod {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
		}

		namespace MaterialExpressionFontSample {
			constexpr uintptr_t Font = 0x00C0;
			constexpr uintptr_t FontTexturePage = 0x00C8;
		}

		namespace MaterialExpressionFontSampleParameter {
			constexpr uintptr_t ParameterName = 0x00D0;
			constexpr uintptr_t ExpressionGUID = 0x00D8;
			constexpr uintptr_t Group = 0x00E8;
		}

		namespace MaterialExpressionFrac {
			constexpr uintptr_t Input = 0x00C0;
		}

		namespace MaterialExpressionFresnel {
			constexpr uintptr_t Exponent = 0x00C0;
			constexpr uintptr_t Normal = 0x00C8;
		}

		namespace MaterialExpressionFunctionInput {
			constexpr uintptr_t Preview = 0x00C0;
			constexpr uintptr_t InputName = 0x00F8;
			constexpr uintptr_t Description = 0x0108;
			constexpr uintptr_t Id = 0x0118;
			constexpr uintptr_t InputType = 0x0128;
			constexpr uintptr_t PreviewValue = 0x0130;
			constexpr uintptr_t Bitfields_0x0140 = 0x0140;  // Multiple: bUsePreviewValueAsDefault, bCompilingFunctionPreview
			constexpr uintptr_t SortPriority = 0x0144;
		}

		namespace MaterialExpressionFunctionOutput {
			constexpr uintptr_t OutputName = 0x00C0;
			constexpr uintptr_t Description = 0x00D0;
			constexpr uintptr_t SortPriority = 0x00E0;
			constexpr uintptr_t A = 0x00E8;
			constexpr uintptr_t bLastPreviewed = 0x0120;
			constexpr uintptr_t Id = 0x0124;
		}

		namespace MaterialExpressionGameObjectParameter {
			constexpr uintptr_t GameObjectShaderParamType = 0x00C0;
		}

		namespace MaterialExpressionGameParameter {
			constexpr uintptr_t GameShaderParamType = 0x00C0;
		}

		namespace MaterialExpressionIf {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
			constexpr uintptr_t AGreaterThanB = 0x0130;
			constexpr uintptr_t AEqualsB = 0x0168;
			constexpr uintptr_t ALessThanB = 0x01A0;
		}

		namespace MaterialExpressionLandscapeLayerBlend {
			constexpr uintptr_t Layers = 0x00C0;
			constexpr uintptr_t ExpressionGUID = 0x00D0;
		}

		namespace MaterialExpressionLightmassReplace {
			constexpr uintptr_t Realtime = 0x00C0;
			constexpr uintptr_t Lightmass = 0x00F8;
		}

		namespace MaterialExpressionLinearInterpolate {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
			constexpr uintptr_t Alpha = 0x0130;
		}

		namespace MaterialExpressionMaterialFunctionCall {
			constexpr uintptr_t MaterialFunction = 0x00C0;
			constexpr uintptr_t FunctionInputs = 0x00C8;
			constexpr uintptr_t FunctionOutputs = 0x00D8;
		}

		namespace MaterialExpressionMax {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
		}

		namespace MaterialExpressionMin {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
		}

		namespace MaterialExpressionMultiply {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
		}

		namespace MaterialExpressionMusicAnalysisParameter {
			constexpr uintptr_t MusicAnalysisShaderParamType = 0x00C0;
		}

		namespace MaterialExpressionNormalize {
			constexpr uintptr_t VectorInput = 0x00C0;
		}

		namespace MaterialExpressionOneMinus {
			constexpr uintptr_t Input = 0x00C0;
		}

		namespace MaterialExpressionPanner {
			constexpr uintptr_t Coordinate = 0x00C0;
			constexpr uintptr_t Time = 0x00F8;
			constexpr uintptr_t SpeedX = 0x0130;
			constexpr uintptr_t SpeedY = 0x0134;
		}

		namespace MaterialExpressionParameter {
			constexpr uintptr_t ParameterName = 0x00C0;
			constexpr uintptr_t ExpressionGUID = 0x00C8;
			constexpr uintptr_t Group = 0x00D8;
		}

		namespace MaterialExpressionParticleMacroUV {
			constexpr uintptr_t bUseViewSpace = 0x00C0;
		}

		namespace MaterialExpressionPitchTekTextureSample {
			constexpr uintptr_t Coordinates = 0x00C0;
			constexpr uintptr_t PitchTekTextureType = 0x00F8;
		}

		namespace MaterialExpressionPixelDepth {
			constexpr uintptr_t bNormalize = 0x00C0;
		}

		namespace MaterialExpressionPower {
			constexpr uintptr_t Base = 0x00C0;
			constexpr uintptr_t Exponent = 0x00F8;
		}

		namespace MaterialExpressionQualitySwitch {
			constexpr uintptr_t High = 0x00C0;
			constexpr uintptr_t Low = 0x00F8;
			constexpr uintptr_t HandheldQuality = 0x0130;
		}

		namespace MaterialExpressionRotateAboutAxis {
			constexpr uintptr_t NormalizedRotationAxisAndAngle = 0x00C0;
			constexpr uintptr_t PositionOnAxis = 0x00F8;
			constexpr uintptr_t Position = 0x0130;
		}

		namespace MaterialExpressionRotator {
			constexpr uintptr_t Coordinate = 0x00C0;
			constexpr uintptr_t Time = 0x00F8;
			constexpr uintptr_t CenterX = 0x0130;
			constexpr uintptr_t CenterY = 0x0134;
			constexpr uintptr_t Speed = 0x0138;
		}

		namespace MaterialExpressionScalarParameter {
			constexpr uintptr_t DefaultValue = 0x00E0;
			constexpr uintptr_t bRanged = 0x00E4;
			constexpr uintptr_t MinParameterValue = 0x00E8;
			constexpr uintptr_t MaxParameterValue = 0x00EC;
		}

		namespace MaterialExpressionSceneDepth {
			constexpr uintptr_t Coordinates = 0x00C0;
			constexpr uintptr_t bNormalize = 0x00F8;
		}

		namespace MaterialExpressionSceneTexture {
			constexpr uintptr_t Coordinates = 0x00C0;
			constexpr uintptr_t SceneTextureType = 0x00F8;
			constexpr uintptr_t ScreenAlign = 0x00FC;
		}

		namespace MaterialExpressionScreenPosition {
			constexpr uintptr_t ScreenAlign = 0x00C0;
		}

		namespace MaterialExpressionSine {
			constexpr uintptr_t Input = 0x00C0;
			constexpr uintptr_t Period = 0x00F8;
		}

		namespace MaterialExpressionSphereMask {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
			constexpr uintptr_t Radius = 0x0130;
			constexpr uintptr_t Hardness = 0x0168;
			constexpr uintptr_t AttenuationRadius = 0x01A0;
			constexpr uintptr_t HardnessPercent = 0x01A4;
		}

		namespace MaterialExpressionSquareRoot {
			constexpr uintptr_t Input = 0x00C0;
		}

		namespace MaterialExpressionStaticBool {
			constexpr uintptr_t Value = 0x00C0;
		}

		namespace MaterialExpressionStaticBoolParameter {
			constexpr uintptr_t Bitfields_0x00E0 = 0x00E0;  // Multiple: DefaultValue, ExtendedCaptionDisplay
			constexpr uintptr_t InstanceOverride = 0x00E8;
		}

		namespace MaterialExpressionStaticComponentMaskParameter {
			constexpr uintptr_t Input = 0x00E0;
			constexpr uintptr_t Bitfields_0x0118 = 0x0118;  // Multiple: DefaultR, DefaultG, DefaultB, DefaultA
			constexpr uintptr_t InstanceOverride = 0x0120;
		}

		namespace MaterialExpressionStaticSwitch {
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: DefaultValue, ExtendedCaptionDisplay
			constexpr uintptr_t A = 0x00C8;
			constexpr uintptr_t B = 0x0100;
			constexpr uintptr_t Value = 0x0138;
		}

		namespace MaterialExpressionStaticSwitchParameter {
			constexpr uintptr_t A = 0x00F0;
			constexpr uintptr_t B = 0x0128;
		}

		namespace MaterialExpressionSubtract {
			constexpr uintptr_t A = 0x00C0;
			constexpr uintptr_t B = 0x00F8;
		}

		namespace MaterialExpressionTerrainLayerCoords {
			constexpr uintptr_t MappingType = 0x00C0;
			constexpr uintptr_t MappingScale = 0x00C4;
			constexpr uintptr_t MappingRotation = 0x00C8;
			constexpr uintptr_t MappingPanU = 0x00CC;
			constexpr uintptr_t MappingPanV = 0x00D0;
		}

		namespace MaterialExpressionTerrainLayerSwitch {
			constexpr uintptr_t InstanceOverride = 0x00C0;
			constexpr uintptr_t LayerUsed = 0x00C8;
			constexpr uintptr_t LayerNotUsed = 0x0100;
			constexpr uintptr_t ParameterName = 0x0138;
			constexpr uintptr_t PreviewUsed = 0x0140;
			constexpr uintptr_t ExpressionGUID = 0x0144;
		}

		namespace MaterialExpressionTerrainLayerWeight {
			constexpr uintptr_t InstanceOverride = 0x00C0;
			constexpr uintptr_t Base = 0x00C8;
			constexpr uintptr_t Layer = 0x0100;
			constexpr uintptr_t ParameterName = 0x0138;
			constexpr uintptr_t PreviewWeight = 0x0140;
			constexpr uintptr_t ExpressionGUID = 0x0144;
		}

		namespace MaterialExpressionTextureCoordinate {
			constexpr uintptr_t CoordinateIndex = 0x00C0;
			constexpr uintptr_t UTiling = 0x00C4;
			constexpr uintptr_t VTiling = 0x00C8;
			constexpr uintptr_t Bitfields_0x00CC = 0x00CC;  // Multiple: UnMirrorU, UnMirrorV
		}

		namespace MaterialExpressionTextureObject {
			constexpr uintptr_t Texture = 0x00C0;
		}

		namespace MaterialExpressionTextureSample {
			constexpr uintptr_t Texture = 0x00C0;
			constexpr uintptr_t Coordinates = 0x00C8;
			constexpr uintptr_t TextureObject = 0x0100;
		}

		namespace MaterialExpressionTextureSampleParameter {
			constexpr uintptr_t ParameterName = 0x0138;
			constexpr uintptr_t ExpressionGUID = 0x0140;
			constexpr uintptr_t Group = 0x0150;
		}

		namespace MaterialExpressionTextureSampleParameterNormal {
			constexpr uintptr_t InstanceOverride = 0x0158;
		}

		namespace MaterialExpressionTime {
			constexpr uintptr_t bIgnorePause = 0x00C0;
		}

		namespace MaterialExpressionTransform {
			constexpr uintptr_t Input = 0x00C0;
			constexpr uintptr_t TransformSourceType = 0x00F8;
			constexpr uintptr_t TransformType = 0x00F9;
		}

		namespace MaterialExpressionTransformPosition {
			constexpr uintptr_t Input = 0x00C0;
			constexpr uintptr_t TransformSourceType = 0x00F8;
			constexpr uintptr_t TransformType = 0x00F9;
		}

		namespace MaterialExpressionVectorParameter {
			constexpr uintptr_t DefaultValue = 0x00E0;
			constexpr uintptr_t bRanged = 0x00F0;
			constexpr uintptr_t MinParameterValue = 0x00F4;
			constexpr uintptr_t MaxParameterValue = 0x0104;
		}

		namespace MaterialExpressionVectorParameterReference {
			constexpr uintptr_t ReferencedParameter = 0x00E0;
		}

		namespace MaterialFunction {
			constexpr uintptr_t StateId = 0x0060;
			constexpr uintptr_t ParentFunction = 0x0070;
			constexpr uintptr_t Description = 0x0078;
			constexpr uintptr_t Bitfields_0x0088 = 0x0088;  // Multiple: bExposeToLibrary, bReentrantFlag
			constexpr uintptr_t LibraryCategories = 0x0090;
			constexpr uintptr_t FunctionExpressions = 0x00A0;
			constexpr uintptr_t FunctionEditorComments = 0x00B0;
		}

		namespace MaterialInstance {
			constexpr uintptr_t PhysMaterial = 0x0278;
			constexpr uintptr_t Parent = 0x0280;
			constexpr uintptr_t PhysMaterialMask = 0x0288;
			constexpr uintptr_t PhysMaterialMaskUVChannel = 0x0290;
			constexpr uintptr_t BlackPhysicalMaterial = 0x0298;
			constexpr uintptr_t WhitePhysicalMaterial = 0x02A0;
			constexpr uintptr_t Bitfields_0x02A8 = 0x02A8;  // Multiple: bHasStaticPermutationResource, bStaticPermutationDirty, ReentrantFlag, bNeedsMaterialFlattening
			constexpr uintptr_t StaticParameters = 0x02B0;
			constexpr uintptr_t StaticPermutationResources = 0x02C0;
			constexpr uintptr_t Resources = 0x02D0;
			constexpr uintptr_t ReferencedTextures = 0x02E8;
			constexpr uintptr_t ReferencedTextureGuids = 0x02F8;
			constexpr uintptr_t ParentLightingGuid = 0x0308;
		}

		namespace MaterialInstanceActor {
			constexpr uintptr_t MatInst = 0x0268;
		}

		namespace MaterialInstanceConstant {
			constexpr uintptr_t VfTable_IISetParameter = 0x0318;
			constexpr uintptr_t FontParameterValues = 0x0320;
			constexpr uintptr_t ScalarParameterValues = 0x0330;
			constexpr uintptr_t TextureParameterValues = 0x0340;
			constexpr uintptr_t VectorParameterValues = 0x0350;
		}

		namespace MaterialInstanceTimeVarying {
			constexpr uintptr_t bAutoActivateAll = 0x0318;
			constexpr uintptr_t Duration = 0x031C;
			constexpr uintptr_t FontParameterValues = 0x0320;
			constexpr uintptr_t ScalarParameterValues = 0x0330;
			constexpr uintptr_t TextureParameterValues = 0x0340;
			constexpr uintptr_t VectorParameterValues = 0x0350;
			constexpr uintptr_t LinearColorParameterValues = 0x0360;
		}

		namespace MaterialInstanceTimeVaryingActor {
			constexpr uintptr_t MatInst = 0x0268;
		}

		namespace MaterialInterface {
			constexpr uintptr_t ParentRefFence = 0x0060;
			constexpr uintptr_t LightmassSettings = 0x0064;
			constexpr uintptr_t PreviewMesh = 0x0080;
			constexpr uintptr_t LightingGuid = 0x0090;
			constexpr uintptr_t Bitfields_0x00A0 = 0x00A0;  // Multiple: bHasQualitySwitch, bHasHandheldQualityConnection, bStoredHandheldQuality, bAutoFlattenMobile, bAutoFlattenMobileNormalTexture, bMobileAllowFog, bGenerateSubUV, bUseMobileSpecular, bUseMobileVertexSpecular, bUseMobilePixelSpecular, bUseMobileBumpOffset, bLockColorBlending, bUseMobileUniformColorMultiply, bUseMobileVertexColorMultiply, bUseMobileDetailNormal, bBaseTextureTransformed, bEmissiveTextureTransformed, bNormalTextureTransformed, bMaskTextureTransformed, bDetailTextureTransformed, bUseMobileWaveVertexMovement, bMobileEnableBounceLight, bUseMobileLandscapeMonochromeLayerBlending, bHandheldDisableDiffuse, bHandheldDisableDiffusePower, bHandheldDisableEmissive, bHandheldDisableSpecular, bHandheldDisableSpecualrPower, bHandheldDisableOpacity, bHandheldDisableOpacityMasks, bHandheldDisableDistortion, bHandheldDisableTransmissionMask
			constexpr uintptr_t Bitfields_0x00A4 = 0x00A4;  // Multiple: bHandheldDisableTransmissionColor, bHandheldDisableNormal, bHandheldDisableCustomLighting, bHandheldDisableAnisotropicDirection, bHandheldDisableWorldPositionOffset, bHandheldDisableWorldDisplacement, bHandheldDisableTessellationMultiplier, bHandheldDisableSubsurfaceInscatteringColor, bHandheldDisableSubsurfaceAbsorptionColor, bHandheldDisableSubsurfaceScatteringRadius
			constexpr uintptr_t FlattenBackgroundColor = 0x00A8;
			constexpr uintptr_t MobileBaseTexture = 0x00B0;
			constexpr uintptr_t FlattenedTexture = 0x00B8;
			constexpr uintptr_t MobileBaseTextureTexCoordsSource = 0x00C0;
			constexpr uintptr_t MobileAmbientOcclusionSource = 0x00C1;
			constexpr uintptr_t MobileSpecularMask = 0x00C2;
			constexpr uintptr_t MobileEmissiveColorSource = 0x00C3;
			constexpr uintptr_t MobileEmissiveMaskSource = 0x00C4;
			constexpr uintptr_t MobileEnvironmentMaskSource = 0x00C5;
			constexpr uintptr_t MobileEnvironmentBlendMode = 0x00C6;
			constexpr uintptr_t MobileRimLightingMaskSource = 0x00C7;
			constexpr uintptr_t MobileMaskTextureTexCoordsSource = 0x00C8;
			constexpr uintptr_t MobileAlphaValueSource = 0x00C9;
			constexpr uintptr_t MobileDetailTextureTexCoordsSource = 0x00CA;
			constexpr uintptr_t MobileTextureBlendFactorSource = 0x00CB;
			constexpr uintptr_t MobileColorMultiplySource = 0x00CC;
			constexpr uintptr_t MobileNormalTexture = 0x00D0;
			constexpr uintptr_t SubUVFrameRate = 0x00D8;
			constexpr uintptr_t SubUVFrameCountAlongAxes = 0x00DC;
			constexpr uintptr_t SubUVFrameSize = 0x00E0;
			constexpr uintptr_t MobileSpecularColor = 0x00E4;
			constexpr uintptr_t MobileSpecularPower = 0x00F4;
			constexpr uintptr_t MobileEmissiveTexture = 0x00F8;
			constexpr uintptr_t MobileEmissiveColor = 0x0100;
			constexpr uintptr_t MobileEnvironmentTexture = 0x0110;
			constexpr uintptr_t MobileEnvironmentAmount = 0x0118;
			constexpr uintptr_t MobileEnvironmentColor = 0x011C;
			constexpr uintptr_t MobileEnvironmentFresnelAmount = 0x012C;
			constexpr uintptr_t MobileEnvironmentFresnelExponent = 0x0130;
			constexpr uintptr_t MobileRimLightingStrength = 0x0134;
			constexpr uintptr_t MobileRimLightingExponent = 0x0138;
			constexpr uintptr_t MobileRimLightingColor = 0x013C;
			constexpr uintptr_t MobileBumpOffsetReferencePlane = 0x014C;
			constexpr uintptr_t MobileBumpOffsetHeightRatio = 0x0150;
			constexpr uintptr_t MobileMaskTexture = 0x0158;
			constexpr uintptr_t MobileOpacityMultiplier = 0x0160;
			constexpr uintptr_t MobileDetailTexture = 0x0168;
			constexpr uintptr_t MobileDetailTexture2 = 0x0170;
			constexpr uintptr_t MobileDetailTexture3 = 0x0178;
			constexpr uintptr_t DefaultUniformColor = 0x0180;
			constexpr uintptr_t MobileDefaultUniformColor = 0x0190;
			constexpr uintptr_t TransformCenterX = 0x01A0;
			constexpr uintptr_t MobileTransformCenterX = 0x01A4;
			constexpr uintptr_t TransformCenterY = 0x01A8;
			constexpr uintptr_t MobileTransformCenterY = 0x01AC;
			constexpr uintptr_t PannerSpeedX = 0x01B0;
			constexpr uintptr_t MobilePannerSpeedX = 0x01B4;
			constexpr uintptr_t PannerSpeedY = 0x01B8;
			constexpr uintptr_t MobilePannerSpeedY = 0x01BC;
			constexpr uintptr_t RotateSpeed = 0x01C0;
			constexpr uintptr_t MobileRotateSpeed = 0x01C4;
			constexpr uintptr_t FixedScaleX = 0x01C8;
			constexpr uintptr_t MobileFixedScaleX = 0x01CC;
			constexpr uintptr_t FixedScaleY = 0x01D0;
			constexpr uintptr_t MobileFixedScaleY = 0x01D4;
			constexpr uintptr_t SineScaleX = 0x01D8;
			constexpr uintptr_t MobileSineScaleX = 0x01DC;
			constexpr uintptr_t SineScaleY = 0x01E0;
			constexpr uintptr_t MobileSineScaleY = 0x01E4;
			constexpr uintptr_t SineScaleFrequencyMultipler = 0x01E8;
			constexpr uintptr_t MobileSineScaleFrequencyMultipler = 0x01EC;
			constexpr uintptr_t FixedOffsetX = 0x01F0;
			constexpr uintptr_t MobileFixedOffsetX = 0x01F4;
			constexpr uintptr_t FixedOffsetY = 0x01F8;
			constexpr uintptr_t MobileFixedOffsetY = 0x01FC;
			constexpr uintptr_t MobileTangentVertexFrequencyMultiplier = 0x0200;
			constexpr uintptr_t MobileVerticalFrequencyMultiplier = 0x0204;
			constexpr uintptr_t MobileMaxVertexMovementAmplitude = 0x0208;
			constexpr uintptr_t MobileSwayFrequencyMultiplier = 0x020C;
			constexpr uintptr_t MobileSwayMaxAngle = 0x0210;
			constexpr uintptr_t MobileDirectionalLightDirection = 0x0214;
			constexpr uintptr_t MobileDirectionalLightBrightness = 0x0220;
			constexpr uintptr_t MobileDirectionalLightColor = 0x0224;
			constexpr uintptr_t MobileBounceLightDirection = 0x0228;
			constexpr uintptr_t MobileBounceLightBrightness = 0x0234;
			constexpr uintptr_t MobileBounceLightColor = 0x0238;
			constexpr uintptr_t MobileSkyLightBrightness = 0x023C;
			constexpr uintptr_t MobileSkyLightColor = 0x0240;
			constexpr uintptr_t MobileLandscapeLayerNames = 0x0244;
			constexpr uintptr_t MobileLandscapeMonochomeLayerColors = 0x0264;
		}

		namespace MatineeActor {
			constexpr uintptr_t InterpAction = 0x0268;
			constexpr uintptr_t Bitfields_0x0270 = 0x0270;  // Multiple: bIsPlaying, bReversePlayback, bPaused, AllAIGroupsInitialized
			constexpr uintptr_t PlayRate = 0x0274;
			constexpr uintptr_t Position = 0x0278;
			constexpr uintptr_t AIGroupNames = 0x027C;
			constexpr uintptr_t AIGroupPawns = 0x02D0;
			constexpr uintptr_t AIGroupInitStage = 0x0320;
			constexpr uintptr_t ClientSidePositionErrorTolerance = 0x0348;
		}

		namespace MatineePawn {
			constexpr uintptr_t PreviewMesh = 0x0518;
		}

		namespace MeshComponent {
			constexpr uintptr_t VfTable_IISetParameter = 0x0258;
			constexpr uintptr_t Materials = 0x0260;
			constexpr uintptr_t InvisiTekMaterials = 0x0270;
		}

		namespace MeshComponentFactory {
			constexpr uintptr_t Materials = 0x0068;
		}

		namespace MicroTransactionBase {
			constexpr uintptr_t AvailableProducts = 0x0088;
			constexpr uintptr_t LastError = 0x0098;
			constexpr uintptr_t LastErrorSolution = 0x00A8;
		}

		namespace Model {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace ModelComponent {
			constexpr uintptr_t Model = 0x0258;
			constexpr uintptr_t ZoneIndex = 0x0260;
			constexpr uintptr_t ComponentIndex = 0x0264;
			constexpr uintptr_t Nodes = 0x0268;
			constexpr uintptr_t Elements = 0x0278;
		}

		namespace MorphNodeBase {
			constexpr uintptr_t NodeName = 0x0090;
			constexpr uintptr_t bDrawSlider = 0x0098;
		}

		namespace MorphNodeMultiPose {
			constexpr uintptr_t Targets = 0x00A0;
			constexpr uintptr_t MorphNames = 0x00B0;
			constexpr uintptr_t Weights = 0x00C0;
		}

		namespace MorphNodePose {
			constexpr uintptr_t Target = 0x00A0;
			constexpr uintptr_t MorphName = 0x00A8;
			constexpr uintptr_t Weight = 0x00B0;
		}

		namespace MorphNodeWeight {
			constexpr uintptr_t NodeWeight = 0x00B0;
		}

		namespace MorphNodeWeightBase {
			constexpr uintptr_t NodeConns = 0x00A0;
		}

		namespace MorphNodeWeightByBoneAngle {
			constexpr uintptr_t Angle = 0x00B0;
			constexpr uintptr_t NodeWeight = 0x00B4;
			constexpr uintptr_t BaseBoneName = 0x00B8;
			constexpr uintptr_t BaseBoneAxis = 0x00C0;
			constexpr uintptr_t AngleBoneAxis = 0x00C1;
			constexpr uintptr_t Bitfields_0x00C4 = 0x00C4;  // Multiple: bInvertBaseBoneAxis, bInvertAngleBoneAxis, bControlMaterialParameter
			constexpr uintptr_t AngleBoneName = 0x00C8;
			constexpr uintptr_t MaterialSlotId = 0x00D0;
			constexpr uintptr_t ScalarParameterName = 0x00D4;
			constexpr uintptr_t MaterialInstanceConstant = 0x00E0;
			constexpr uintptr_t WeightArray = 0x00E8;
		}

		namespace MorphNodeWeightByBoneRotation {
			constexpr uintptr_t Angle = 0x00B0;
			constexpr uintptr_t NodeWeight = 0x00B4;
			constexpr uintptr_t BoneName = 0x00B8;
			constexpr uintptr_t BoneAxis = 0x00C0;
			constexpr uintptr_t Bitfields_0x00C4 = 0x00C4;  // Multiple: bInvertBoneAxis, bControlMaterialParameter
			constexpr uintptr_t WeightArray = 0x00C8;
			constexpr uintptr_t MaterialSlotId = 0x00D8;
			constexpr uintptr_t ScalarParameterName = 0x00DC;
			constexpr uintptr_t MaterialInstanceConstant = 0x00E8;
		}

		namespace MorphTarget {
			constexpr uintptr_t MorphLODModels = 0x0060;
			constexpr uintptr_t MaterialSlotId = 0x0070;
			constexpr uintptr_t ScalarParameterName = 0x0074;
		}

		namespace MorphTargetSet {
			constexpr uintptr_t Targets = 0x0060;
			constexpr uintptr_t BaseSkelMesh = 0x0070;
			constexpr uintptr_t RawWedgePointIndices = 0x0078;
		}

		namespace MotionBlurEffect {
			constexpr uintptr_t MaxVelocity = 0x0088;
			constexpr uintptr_t MotionBlurAmount = 0x008C;
			constexpr uintptr_t FullMotionBlur = 0x0090;
			constexpr uintptr_t CameraRotationThreshold = 0x0094;
			constexpr uintptr_t CameraTranslationThreshold = 0x0098;
		}

		namespace MultiCueSplineAudioComponent {
			constexpr uintptr_t SoundSlots = 0x0320;
			constexpr uintptr_t CurrentSlotIndex = 0x0330;
		}

		namespace MultiFont {
			constexpr uintptr_t ResolutionTestTable = 0x01C0;
		}

		namespace MultiProviderAnalytics {
			constexpr uintptr_t AnalyticsProviderClassNames = 0x00A0;
			constexpr uintptr_t AnalyticsProviders = 0x00B0;
		}

		namespace Mutator {
			constexpr uintptr_t NextMutator = 0x0268;
			constexpr uintptr_t GroupNames = 0x0270;
			constexpr uintptr_t bUserAdded = 0x0280;
		}

		namespace NavMeshBoundsVolume {
			constexpr uintptr_t UnknownData00 = 0x02A4;
		}

		namespace NavMeshGoalFilter_MinPathDistance {
			constexpr uintptr_t MinDistancePathShouldBe = 0x0070;
		}

		namespace NavMeshGoalFilter_NotNearOtherAI {
			constexpr uintptr_t DistanceToCheck = 0x0070;
		}

		namespace NavMeshGoalFilter_OutOfViewFrom {
			constexpr uintptr_t GoalPoly = 0x0070;
			constexpr uintptr_t OutOfViewLocation = 0x0078;
		}

		namespace NavMeshGoalFilter_OutSideOfDotProductWedge {
			constexpr uintptr_t Location = 0x0070;
			constexpr uintptr_t Rotation = 0x007C;
			constexpr uintptr_t Epsilon = 0x0088;
		}

		namespace NavMeshGoalFilter_PolyEncompassesAI {
			constexpr uintptr_t OverrideExtentToCheck = 0x0070;
		}

		namespace NavMeshGoal_At {
			constexpr uintptr_t Goal = 0x0080;
			constexpr uintptr_t GoalDist = 0x008C;
			constexpr uintptr_t Bitfields_0x0090 = 0x0090;  // Multiple: bKeepPartial, bWeightPartialByDist, bGoalInSamePolyAsAnchor
			constexpr uintptr_t PartialDistSq = 0x0094;
			constexpr uintptr_t GoalPoly = 0x0098;
			constexpr uintptr_t PartialGoal = 0x00A0;
		}

		namespace NavMeshGoal_ClosestActorInList {
			constexpr uintptr_t GoalList = 0x0080;
			constexpr uintptr_t PolyToGoalActorMap = 0x0090;
			constexpr uintptr_t CachedAnchorPoly = 0x00E0;
		}

		namespace NavMeshGoal_Filter {
			constexpr uintptr_t bShowDebug = 0x0060;
			constexpr uintptr_t NumNodesThrownOut = 0x0064;
			constexpr uintptr_t NumNodesProcessed = 0x0068;
		}

		namespace NavMeshGoal_GenericFilterContainer {
			constexpr uintptr_t GoalFilters = 0x0080;
			constexpr uintptr_t SuccessfulGoal = 0x0090;
			constexpr uintptr_t MyNavigationHandle = 0x0098;
			constexpr uintptr_t SeedLocations = 0x00A0;
		}

		namespace NavMeshGoal_Null {
			constexpr uintptr_t PartialGoal = 0x0080;
		}

		namespace NavMeshGoal_PolyEncompassesAI {
			constexpr uintptr_t OverrideExtentToCheck = 0x0080;
		}

		namespace NavMeshGoal_Random {
			constexpr uintptr_t MinDist = 0x0080;
			constexpr uintptr_t BestRating = 0x0084;
			constexpr uintptr_t PartialGoal = 0x0088;
		}

		namespace NavMeshGoal_WithinDistanceEnvelope {
			constexpr uintptr_t MaxDistance = 0x0080;
			constexpr uintptr_t MinDistance = 0x0084;
			constexpr uintptr_t MinTraversalDist = 0x0088;
			constexpr uintptr_t EnvelopeTestPoint = 0x008C;
		}

		namespace NavMeshObstacle {
			constexpr uintptr_t VfTable_IInterface_NavMeshPathObstacle = 0x0268;
			constexpr uintptr_t Bitfields_0x0270 = 0x0270;  // Multiple: bEnabled, bPreserveInternalGeo
		}

		namespace NavMeshPathConstraint {
			constexpr uintptr_t NextConstraint = 0x0060;
			constexpr uintptr_t NumNodesProcessed = 0x0068;
			constexpr uintptr_t NumThrownOutNodes = 0x006C;
			constexpr uintptr_t AddedDirectCost = 0x0070;
			constexpr uintptr_t AddedHeuristicCost = 0x0074;
		}

		namespace NavMeshPathGoalEvaluator {
			constexpr uintptr_t NextEvaluator = 0x0060;
			constexpr uintptr_t MaxPathVisits = 0x0068;
			constexpr uintptr_t Bitfields_0x006C = 0x006C;  // Multiple: bAlwaysCallEvaluateGoal, bDoPartialAStar
			constexpr uintptr_t NumNodesThrownOut = 0x0070;
			constexpr uintptr_t NumNodesProcessed = 0x0074;
			constexpr uintptr_t MaxOpenListSize = 0x0078;
		}

		namespace NavMeshPath_AlongLine {
			constexpr uintptr_t Direction = 0x0078;
		}

		namespace NavMeshPath_MinDistBetweenSpecsOfType {
			constexpr uintptr_t MinDistBetweenEdgeTypes = 0x0078;
			constexpr uintptr_t InitLocation = 0x007C;
			constexpr uintptr_t EdgeType = 0x0088;
			constexpr uintptr_t Penalty = 0x008C;
		}

		namespace NavMeshPath_SameCoverLink {
			constexpr uintptr_t TestLink = 0x0078;
		}

		namespace NavMeshPath_Toward {
			constexpr uintptr_t bBiasAgainstHighLevelPath = 0x0078;
			constexpr uintptr_t OutOfHighLevelPathBias = 0x007C;
			constexpr uintptr_t GoalActor = 0x0080;
			constexpr uintptr_t GoalPoint = 0x0088;
		}

		namespace NavMeshPath_WithinDistanceEnvelope {
			constexpr uintptr_t MaxDistance = 0x0078;
			constexpr uintptr_t MinDistance = 0x007C;
			constexpr uintptr_t Bitfields_0x0080 = 0x0080;  // Multiple: bSoft, bOnlyThrowOutNodesThatLeaveEnvelope
			constexpr uintptr_t SoftStartPenalty = 0x0084;
			constexpr uintptr_t EnvelopeTestPoint = 0x0088;
		}

		namespace NavMeshPath_WithinTraversalDist {
			constexpr uintptr_t MaxTraversalDist = 0x0078;
			constexpr uintptr_t bSoft = 0x007C;
			constexpr uintptr_t SoftStartPenalty = 0x0080;
		}

		namespace NavigationHandle {
			constexpr uintptr_t AnchorPylon = 0x0060;
			constexpr uintptr_t AnchorPoly = 0x0068;
			constexpr uintptr_t PathCache = 0x0070;
			constexpr uintptr_t BestUnfinishedPathPoint = 0x0080;
			constexpr uintptr_t CurrentEdge = 0x0088;
			constexpr uintptr_t SubGoal_DestPoly = 0x0090;
			constexpr uintptr_t FinalDestination = 0x0098;
			constexpr uintptr_t Bitfields_0x00D0 = 0x00D0;  // Multiple: bSkipRouteCacheUpdates, bUseORforEvaluateGoal, bDebugConstraintsAndGoalEvals, bUltraVerbosePathDebugging, bVisualPathDebugging, bDebug_Breadcrumbs
			constexpr uintptr_t PathConstraintList = 0x00D8;
			constexpr uintptr_t PathGoalList = 0x00E0;
			constexpr uintptr_t CachedPathParams = 0x00E8;
			constexpr uintptr_t LastPathError = 0x0120;
			constexpr uintptr_t LastPathFailTime = 0x0124;
			constexpr uintptr_t Breadcrumbs = 0x0128;
			constexpr uintptr_t BreadCrumbMostRecentIdx = 0x01A0;
			constexpr uintptr_t BreadCrumbDistanceInterval = 0x01A4;
		}

		namespace NavigationMeshBase {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace NavigationPoint {
			constexpr uintptr_t Bitfields_0x0268 = 0x0268;  // Multiple: bEndPoint, bTransientEndPoint, bHideEditorPaths, bCanReach, bBlocked, bOneWayPath, bNeverUseStrafing, bAlwaysUseStrafing, bForceNoStrafing, bAutoBuilt, bSpecialMove, bNoAutoConnect, bNotBased, bPathsChanged, bDestinationOnly, bSourceOnly, bSpecialForced, bMustBeReachable, bBlockable, bFlyingPreferred, bAlreadyVisited, bMakeSourceOnly, bMustTouchToReach, bCanWalkOnToReach, bBuildLongPaths, bHasCrossLevelPaths, bShouldSaveForCheckpoint
			constexpr uintptr_t NavOctreeObject = 0x0270;
			constexpr uintptr_t PathList = 0x02B0;
			constexpr uintptr_t EditorProscribedPaths = 0x02C0;
			constexpr uintptr_t EditorForcedPaths = 0x02D0;
			constexpr uintptr_t Volumes = 0x02E0;
			constexpr uintptr_t visitedWeight = 0x02F0;
			constexpr uintptr_t bestPathWeight = 0x02F4;
			constexpr uintptr_t nextNavigationPoint = 0x02F8;
			constexpr uintptr_t nextOrdered = 0x0300;
			constexpr uintptr_t prevOrdered = 0x0308;
			constexpr uintptr_t previousPath = 0x0310;
			constexpr uintptr_t Cost = 0x0318;
			constexpr uintptr_t ExtraCost = 0x031C;
			constexpr uintptr_t TransientCost = 0x0320;
			constexpr uintptr_t FearCost = 0x0324;
			constexpr uintptr_t CostArray = 0x0328;
			constexpr uintptr_t LastDetourWeight = 0x0338;
			constexpr uintptr_t CylinderComponent = 0x0340;
			constexpr uintptr_t MaxPathSize = 0x0348;
			constexpr uintptr_t NavGuid = 0x0350;
			constexpr uintptr_t GoodSprite = 0x0360;
			constexpr uintptr_t BadSprite = 0x0368;
			constexpr uintptr_t NetworkID = 0x0370;
			constexpr uintptr_t AnchoredPawn = 0x0378;
			constexpr uintptr_t LastAnchoredPawnTime = 0x0380;
		}

		namespace NetConnection {
			constexpr uintptr_t UnknownData00 = 0x00B8;
			constexpr uintptr_t Children = 0xB1B0;
			constexpr uintptr_t UnknownData01 = 0xB1C0;
			constexpr uintptr_t bUseSessionUID = 0xB1DC;
			constexpr uintptr_t UnknownData02 = 0xB1E0;
			constexpr uintptr_t BadConnectionPingThreshold = 0xB1E8;
			constexpr uintptr_t BadConnectionReceiveTimeThreshold = 0xB1EC;
		}

		namespace NetConnectionEncryptor {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace NetDriver {
			constexpr uintptr_t UnknownData00 = 0x0068;
			constexpr uintptr_t MatchFailureSeconds = 0x0070;
			constexpr uintptr_t UnknownData01 = 0x0074;
			constexpr uintptr_t ConnectionTimeout = 0x00EC;
			constexpr uintptr_t KeepAliveTime = 0x00F0;
			constexpr uintptr_t RelevantTimeout = 0x00F4;
			constexpr uintptr_t SpawnPrioritySeconds = 0x00F8;
			constexpr uintptr_t ServerTravelPause = 0x00FC;
			constexpr uintptr_t MinClientRate = 0x0100;
			constexpr uintptr_t MaxClientRate = 0x0104;
			constexpr uintptr_t MedianClientRate = 0x0108;
			constexpr uintptr_t MinReplicationRate = 0x010C;
			constexpr uintptr_t MaxReplicationRate = 0x0110;
			constexpr uintptr_t MedianReplicationRate = 0x0114;
			constexpr uintptr_t NetServerMaxTickRate = 0x0118;
			constexpr uintptr_t bClampListenServerTickRate = 0x011C;
			constexpr uintptr_t AllowDownloads = 0x0120;
			constexpr uintptr_t AllowPeerConnections = 0x0124;
			constexpr uintptr_t AllowPeerVoice = 0x0128;
			constexpr uintptr_t UnknownData02 = 0x012C;
			constexpr uintptr_t MaxDownloadSize = 0x0150;
			constexpr uintptr_t DownloadManagers = 0x0158;
			constexpr uintptr_t UnknownData03 = 0x0168;
			constexpr uintptr_t NetConnectionClassName = 0x0210;
			constexpr uintptr_t UnknownData04 = 0x0220;
		}

		namespace NetDriverSecurity {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace NetworkEncryptionKey {
			constexpr uintptr_t Key = 0x0060;
			constexpr uintptr_t IV = 0x0070;
			constexpr uintptr_t HMACKey = 0x0080;
			constexpr uintptr_t SessionId = 0x0090;
		}

		namespace Note {
			constexpr uintptr_t Text = 0x0268;
		}

		namespace NxCylindricalForceField {
			constexpr uintptr_t RadialStrength = 0x02C0;
			constexpr uintptr_t RotationalStrength = 0x02C4;
			constexpr uintptr_t LiftStrength = 0x02C8;
			constexpr uintptr_t ForceRadius = 0x02CC;
			constexpr uintptr_t ForceTopRadius = 0x02D0;
			constexpr uintptr_t LiftFalloffHeight = 0x02D4;
			constexpr uintptr_t EscapeVelocity = 0x02D8;
			constexpr uintptr_t ForceHeight = 0x02DC;
			constexpr uintptr_t HeightOffset = 0x02E0;
			constexpr uintptr_t UseSpecialRadialForce = 0x02E4;
			constexpr uintptr_t Kernel = 0x02E8;
		}

		namespace NxCylindricalForceFieldCapsule {
			constexpr uintptr_t RenderComponent = 0x02F0;
		}

		namespace NxForceField {
			constexpr uintptr_t ExcludeChannel = 0x0268;
			constexpr uintptr_t bForceActive = 0x026C;
			constexpr uintptr_t CollideWithChannels = 0x0270;
			constexpr uintptr_t RBChannel = 0x0274;
			constexpr uintptr_t ForceField = 0x0278;
			constexpr uintptr_t ConvexMeshes = 0x0280;
			constexpr uintptr_t ExclusionShapes = 0x0290;
			constexpr uintptr_t ExclusionShapePoses = 0x02A0;
			constexpr uintptr_t U2NRotation = 0x02B0;
			constexpr uintptr_t SceneIndex = 0x02B8;
		}

		namespace NxForceFieldComponent {
			constexpr uintptr_t Shape = 0x0258;
			constexpr uintptr_t DrawComponent = 0x0260;
			constexpr uintptr_t ExcludeChannel = 0x0268;
			constexpr uintptr_t Bitfields_0x026C = 0x026C;  // Multiple: bForceActive, bDestroyWhenInactive
			constexpr uintptr_t CollideWithChannels = 0x0270;
			constexpr uintptr_t Duration = 0x0274;
			constexpr uintptr_t ForceField = 0x0278;
			constexpr uintptr_t ConvexMeshes = 0x0280;
			constexpr uintptr_t ExclusionShapes = 0x0290;
			constexpr uintptr_t ExclusionShapePoses = 0x02A0;
			constexpr uintptr_t SceneIndex = 0x02B0;
			constexpr uintptr_t ElapsedTime = 0x02B4;
			constexpr uintptr_t RenderComponent = 0x02B8;
			constexpr uintptr_t RBPhysScene = 0x02C0;
		}

		namespace NxForceFieldCylindricalComponent {
			constexpr uintptr_t RadialStrength = 0x02C8;
			constexpr uintptr_t RotationalStrength = 0x02CC;
			constexpr uintptr_t LiftStrength = 0x02D0;
			constexpr uintptr_t ForceRadius = 0x02D4;
			constexpr uintptr_t ForceTopRadius = 0x02D8;
			constexpr uintptr_t LiftFalloffHeight = 0x02DC;
			constexpr uintptr_t EscapeVelocity = 0x02E0;
			constexpr uintptr_t ForceHeight = 0x02E4;
			constexpr uintptr_t HeightOffset = 0x02E8;
			constexpr uintptr_t UseSpecialRadialForce = 0x02EC;
			constexpr uintptr_t Kernel = 0x02F0;
		}

		namespace NxForceFieldGeneric {
			constexpr uintptr_t Shape = 0x02C0;
			constexpr uintptr_t DrawComponent = 0x02C8;
			constexpr uintptr_t RoughExtentX = 0x02D0;
			constexpr uintptr_t RoughExtentY = 0x02D4;
			constexpr uintptr_t RoughExtentZ = 0x02D8;
			constexpr uintptr_t Coordinates = 0x02DC;
			constexpr uintptr_t Constant = 0x02E0;
			constexpr uintptr_t PositionMultiplierX = 0x02EC;
			constexpr uintptr_t PositionMultiplierY = 0x02F8;
			constexpr uintptr_t PositionMultiplierZ = 0x0304;
			constexpr uintptr_t PositionTarget = 0x0310;
			constexpr uintptr_t VelocityMultiplierX = 0x031C;
			constexpr uintptr_t VelocityMultiplierY = 0x0328;
			constexpr uintptr_t VelocityMultiplierZ = 0x0334;
			constexpr uintptr_t VelocityTarget = 0x0340;
			constexpr uintptr_t Noise = 0x034C;
			constexpr uintptr_t FalloffLinear = 0x0358;
			constexpr uintptr_t FalloffQuadratic = 0x0364;
			constexpr uintptr_t TorusRadius = 0x0370;
			constexpr uintptr_t LinearKernel = 0x0378;
		}

		namespace NxForceFieldGenericComponent {
			constexpr uintptr_t RoughExtentX = 0x02C8;
			constexpr uintptr_t RoughExtentY = 0x02CC;
			constexpr uintptr_t RoughExtentZ = 0x02D0;
			constexpr uintptr_t Coordinates = 0x02D4;
			constexpr uintptr_t Constant = 0x02D8;
			constexpr uintptr_t PositionMultiplierX = 0x02E4;
			constexpr uintptr_t PositionMultiplierY = 0x02F0;
			constexpr uintptr_t PositionMultiplierZ = 0x02FC;
			constexpr uintptr_t PositionTarget = 0x0308;
			constexpr uintptr_t VelocityMultiplierX = 0x0314;
			constexpr uintptr_t VelocityMultiplierY = 0x0320;
			constexpr uintptr_t VelocityMultiplierZ = 0x032C;
			constexpr uintptr_t VelocityTarget = 0x0338;
			constexpr uintptr_t Noise = 0x0344;
			constexpr uintptr_t FalloffLinear = 0x0350;
			constexpr uintptr_t FalloffQuadratic = 0x035C;
			constexpr uintptr_t TorusRadius = 0x0368;
			constexpr uintptr_t Kernel = 0x0370;
		}

		namespace NxForceFieldRadial {
			constexpr uintptr_t Shape = 0x02C0;
			constexpr uintptr_t DrawComponent = 0x02C8;
			constexpr uintptr_t ForceStrength = 0x02D0;
			constexpr uintptr_t ForceRadius = 0x02D4;
			constexpr uintptr_t SelfRotationStrength = 0x02D8;
			constexpr uintptr_t ForceFalloff = 0x02DC;
			constexpr uintptr_t Kernel = 0x02E0;
		}

		namespace NxForceFieldRadialComponent {
			constexpr uintptr_t ForceStrength = 0x02C8;
			constexpr uintptr_t ForceRadius = 0x02CC;
			constexpr uintptr_t SelfRotationStrength = 0x02D0;
			constexpr uintptr_t ForceFalloff = 0x02D4;
			constexpr uintptr_t Kernel = 0x02D8;
		}

		namespace NxForceFieldSpawnable {
			constexpr uintptr_t ForceFieldComponent = 0x0268;
		}

		namespace NxForceFieldTornado {
			constexpr uintptr_t Shape = 0x02C0;
			constexpr uintptr_t DrawComponent = 0x02C8;
			constexpr uintptr_t RadialStrength = 0x02D0;
			constexpr uintptr_t RotationalStrength = 0x02D4;
			constexpr uintptr_t LiftStrength = 0x02D8;
			constexpr uintptr_t ForceRadius = 0x02DC;
			constexpr uintptr_t ForceTopRadius = 0x02E0;
			constexpr uintptr_t LiftFalloffHeight = 0x02E4;
			constexpr uintptr_t EscapeVelocity = 0x02E8;
			constexpr uintptr_t ForceHeight = 0x02EC;
			constexpr uintptr_t HeightOffset = 0x02F0;
			constexpr uintptr_t BSpecialRadialForceMode = 0x02F4;
			constexpr uintptr_t SelfRotationStrength = 0x02F8;
			constexpr uintptr_t Kernel = 0x0300;
		}

		namespace NxForceFieldTornadoComponent {
			constexpr uintptr_t RadialStrength = 0x02C8;
			constexpr uintptr_t RotationalStrength = 0x02CC;
			constexpr uintptr_t LiftStrength = 0x02D0;
			constexpr uintptr_t ForceRadius = 0x02D4;
			constexpr uintptr_t ForceTopRadius = 0x02D8;
			constexpr uintptr_t LiftFalloffHeight = 0x02DC;
			constexpr uintptr_t EscapeVelocity = 0x02E0;
			constexpr uintptr_t ForceHeight = 0x02E4;
			constexpr uintptr_t HeightOffset = 0x02E8;
			constexpr uintptr_t BSpecialRadialForceMode = 0x02EC;
			constexpr uintptr_t SelfRotationStrength = 0x02F0;
			constexpr uintptr_t Kernel = 0x02F8;
		}

		namespace NxGenericForceField {
			constexpr uintptr_t Coordinates = 0x02C0;
			constexpr uintptr_t Constant = 0x02C4;
			constexpr uintptr_t PositionMultiplierX = 0x02D0;
			constexpr uintptr_t PositionMultiplierY = 0x02DC;
			constexpr uintptr_t PositionMultiplierZ = 0x02E8;
			constexpr uintptr_t PositionTarget = 0x02F4;
			constexpr uintptr_t VelocityMultiplierX = 0x0300;
			constexpr uintptr_t VelocityMultiplierY = 0x030C;
			constexpr uintptr_t VelocityMultiplierZ = 0x0318;
			constexpr uintptr_t VelocityTarget = 0x0324;
			constexpr uintptr_t Noise = 0x0330;
			constexpr uintptr_t FalloffLinear = 0x033C;
			constexpr uintptr_t FalloffQuadratic = 0x0348;
			constexpr uintptr_t TorusRadius = 0x0354;
			constexpr uintptr_t LinearKernel = 0x0358;
		}

		namespace NxGenericForceFieldBox {
			constexpr uintptr_t RenderComponent = 0x0360;
			constexpr uintptr_t BoxExtent = 0x0368;
		}

		namespace NxGenericForceFieldBrush {
			constexpr uintptr_t ExcludeChannel = 0x02A8;
			constexpr uintptr_t CollideWithChannels = 0x02AC;
			constexpr uintptr_t RBChannel = 0x02B0;
			constexpr uintptr_t Coordinates = 0x02B1;
			constexpr uintptr_t Constant = 0x02B4;
			constexpr uintptr_t PositionMultiplierX = 0x02C0;
			constexpr uintptr_t PositionMultiplierY = 0x02CC;
			constexpr uintptr_t PositionMultiplierZ = 0x02D8;
			constexpr uintptr_t PositionTarget = 0x02E4;
			constexpr uintptr_t VelocityMultiplierX = 0x02F0;
			constexpr uintptr_t VelocityMultiplierY = 0x02FC;
			constexpr uintptr_t VelocityMultiplierZ = 0x0308;
			constexpr uintptr_t VelocityTarget = 0x0314;
			constexpr uintptr_t Noise = 0x0320;
			constexpr uintptr_t FalloffLinear = 0x032C;
			constexpr uintptr_t FalloffQuadratic = 0x0338;
			constexpr uintptr_t TorusRadius = 0x0344;
			constexpr uintptr_t ForceField = 0x0348;
			constexpr uintptr_t ConvexMeshes = 0x0350;
			constexpr uintptr_t ExclusionShapes = 0x0360;
			constexpr uintptr_t ExclusionShapePoses = 0x0370;
			constexpr uintptr_t LinearKernel = 0x0380;
		}

		namespace NxGenericForceFieldCapsule {
			constexpr uintptr_t RenderComponent = 0x0360;
			constexpr uintptr_t CapsuleHeight = 0x0368;
			constexpr uintptr_t CapsuleRadius = 0x036C;
		}

		namespace NxRadialCustomForceField {
			constexpr uintptr_t SelfRotationStrength = 0x02E0;
			constexpr uintptr_t Kernel = 0x02E8;
		}

		namespace NxRadialForceField {
			constexpr uintptr_t RenderComponent = 0x02C0;
			constexpr uintptr_t ForceStrength = 0x02C8;
			constexpr uintptr_t ForceRadius = 0x02CC;
			constexpr uintptr_t ForceFalloff = 0x02D0;
			constexpr uintptr_t LinearKernel = 0x02D8;
		}

		namespace NxTornadoAngularForceField {
			constexpr uintptr_t RadialStrength = 0x02C0;
			constexpr uintptr_t RotationalStrength = 0x02C4;
			constexpr uintptr_t LiftStrength = 0x02C8;
			constexpr uintptr_t ForceRadius = 0x02CC;
			constexpr uintptr_t ForceTopRadius = 0x02D0;
			constexpr uintptr_t LiftFalloffHeight = 0x02D4;
			constexpr uintptr_t EscapeVelocity = 0x02D8;
			constexpr uintptr_t ForceHeight = 0x02DC;
			constexpr uintptr_t HeightOffset = 0x02E0;
			constexpr uintptr_t BSpecialRadialForceMode = 0x02E4;
			constexpr uintptr_t SelfRotationStrength = 0x02E8;
			constexpr uintptr_t Kernel = 0x02F0;
		}

		namespace NxTornadoAngularForceFieldCapsule {
			constexpr uintptr_t RenderComponent = 0x02F8;
		}

		namespace NxTornadoForceField {
			constexpr uintptr_t RadialStrength = 0x02C0;
			constexpr uintptr_t RotationalStrength = 0x02C4;
			constexpr uintptr_t LiftStrength = 0x02C8;
			constexpr uintptr_t ForceRadius = 0x02CC;
			constexpr uintptr_t ForceTopRadius = 0x02D0;
			constexpr uintptr_t LiftFalloffHeight = 0x02D4;
			constexpr uintptr_t EscapeVelocity = 0x02D8;
			constexpr uintptr_t ForceHeight = 0x02DC;
			constexpr uintptr_t HeightOffset = 0x02E0;
			constexpr uintptr_t BSpecialRadialForceMode = 0x02E4;
			constexpr uintptr_t Kernel = 0x02E8;
		}

		namespace NxTornadoForceFieldCapsule {
			constexpr uintptr_t RenderComponent = 0x02F0;
		}

		namespace ObjectReferencer {
			constexpr uintptr_t ReferencedObjects = 0x0060;
		}

		namespace OnlineGameSearch {
			constexpr uintptr_t MaxSearchResults = 0x00A0;
			constexpr uintptr_t Query = 0x00A4;
			constexpr uintptr_t Bitfields_0x00B0 = 0x00B0;  // Multiple: bIsLanQuery, bUsesArbitration, bIsSearchInProgress
			constexpr uintptr_t GameSettingsClass = 0x00B8;
			constexpr uintptr_t Results = 0x00C0;
			constexpr uintptr_t ManualSkillOverride = 0x00D0;
			constexpr uintptr_t NamedProperties = 0x0108;
			constexpr uintptr_t FilterQuery = 0x0118;
			constexpr uintptr_t AdditionalSearchCriteria = 0x0138;
			constexpr uintptr_t PingBucketSize = 0x0148;
			constexpr uintptr_t NumPingProbes = 0x014C;
			constexpr uintptr_t MaxPingBytes = 0x0150;
		}

		namespace OnlineGameSettings {
			constexpr uintptr_t NumPublicConnections = 0x00A0;
			constexpr uintptr_t NumPrivateConnections = 0x00A4;
			constexpr uintptr_t NumOpenPublicConnections = 0x00A8;
			constexpr uintptr_t NumOpenPrivateConnections = 0x00AC;
			constexpr uintptr_t ServerNonce = 0x00B0;
			constexpr uintptr_t Bitfields_0x00B8 = 0x00B8;  // Multiple: bShouldAdvertise, bIsLanMatch, bUsesStats, bAllowJoinInProgress, bAllowInvites, bUsesPresence, bAllowJoinViaPresence, bAllowJoinViaPresenceFriendsOnly, bUsesArbitration, bAntiCheatProtected, bWasFromInvite, bIsDedicated, bHasSkillUpdateInProgress, bShouldShrinkArbitratedSessions
			constexpr uintptr_t OwningPlayerName = 0x00C0;
			constexpr uintptr_t OwningPlayerId = 0x00D0;
			constexpr uintptr_t PingInMs = 0x0118;
			constexpr uintptr_t MatchQuality = 0x011C;
			constexpr uintptr_t GameState = 0x0120;
			constexpr uintptr_t BuildUniqueId = 0x0124;
			constexpr uintptr_t DataboundPropertiesToAdvertise = 0x0128;
			constexpr uintptr_t Payload = 0x0138;
		}

		namespace OnlinePlayerStorage {
			constexpr uintptr_t VersionNumber = 0x0060;
			constexpr uintptr_t VersionSettingsId = 0x0064;
			constexpr uintptr_t SaveCountSettingId = 0x0068;
			constexpr uintptr_t ProfileSettings = 0x0070;
			constexpr uintptr_t ProfileMappings = 0x0080;
			constexpr uintptr_t AsyncState = 0x0090;
			constexpr uintptr_t DeviceID = 0x0094;
		}

		namespace OnlinePlaylistGameTypeProvider {
			constexpr uintptr_t PlaylistGameTypeName = 0x00A0;
			constexpr uintptr_t DisplayName = 0x00A8;
			constexpr uintptr_t Description = 0x00B8;
			constexpr uintptr_t GameTypeId = 0x00C8;
		}

		namespace OnlineProfileSettings {
			constexpr uintptr_t ProfileSettingIds = 0x0098;
			constexpr uintptr_t DefaultSettings = 0x00A8;
			constexpr uintptr_t OwnerMappings = 0x00B8;
		}

		namespace OnlineRecentPlayersList {
			constexpr uintptr_t RecentPlayers = 0x0060;
			constexpr uintptr_t RecentPlayerKeys = 0x0070;
			constexpr uintptr_t RecentParties = 0x0080;
			constexpr uintptr_t LastParty = 0x0090;
			constexpr uintptr_t MaxRecentPlayers = 0x00E8;
			constexpr uintptr_t MaxRecentParties = 0x00EC;
			constexpr uintptr_t RecentPlayersAddIndex = 0x00F0;
			constexpr uintptr_t RecentPartiesAddIndex = 0x00F4;
			constexpr uintptr_t CurrentPlayers = 0x00F8;
		}

		namespace OnlineSessionManager {
			constexpr uintptr_t AdditionalPlayerIds = 0x0060;
		}

		namespace OnlineStats {
			constexpr uintptr_t ViewIdMappings = 0x0060;
		}

		namespace OnlineStatsRead {
			constexpr uintptr_t ViewId = 0x0070;
			constexpr uintptr_t SortColumnId = 0x0074;
			constexpr uintptr_t ColumnIds = 0x0078;
			constexpr uintptr_t TotalRowsInView = 0x0088;
			constexpr uintptr_t Rows = 0x0090;
			constexpr uintptr_t ColumnMappings = 0x00A0;
			constexpr uintptr_t ViewName = 0x00B0;
			constexpr uintptr_t TitleId = 0x00C0;
			constexpr uintptr_t LeaderboardName = 0x00C8;
		}

		namespace OnlineStatsWrite {
			constexpr uintptr_t StatMappings = 0x0070;
			constexpr uintptr_t Properties = 0x0080;
			constexpr uintptr_t ViewIds = 0x0090;
			constexpr uintptr_t ArbitratedViewIds = 0x00A0;
			constexpr uintptr_t RatingId = 0x00B0;
		}

		namespace OnlineSubsystem {
			constexpr uintptr_t VfTable_FTickableObject = 0x0060;
			constexpr uintptr_t AccountInterface_Object = 0x0068;
			constexpr uintptr_t AccountInterface_Interface = 0x0070;
			constexpr uintptr_t PlayerInterface_Object = 0x0078;
			constexpr uintptr_t PlayerInterface_Interface = 0x0080;
			constexpr uintptr_t PlayerInterfaceEx_Object = 0x0088;
			constexpr uintptr_t PlayerInterfaceEx_Interface = 0x0090;
			constexpr uintptr_t MarketplaceInterface_Object = 0x0098;
			constexpr uintptr_t MarketplaceInterface_Interface = 0x00A0;
			constexpr uintptr_t SystemInterface_Object = 0x00A8;
			constexpr uintptr_t SystemInterface_Interface = 0x00B0;
			constexpr uintptr_t GameInterface_Object = 0x00B8;
			constexpr uintptr_t GameInterface_Interface = 0x00C0;
			constexpr uintptr_t ContentInterface_Object = 0x00C8;
			constexpr uintptr_t ContentInterface_Interface = 0x00D0;
			constexpr uintptr_t VoiceInterface_Object = 0x00D8;
			constexpr uintptr_t VoiceInterface_Interface = 0x00E0;
			constexpr uintptr_t StatsInterface_Object = 0x00E8;
			constexpr uintptr_t StatsInterface_Interface = 0x00F0;
			constexpr uintptr_t NewsInterface_Object = 0x00F8;
			constexpr uintptr_t NewsInterface_Interface = 0x0100;
			constexpr uintptr_t PartyChatInterface_Object = 0x0108;
			constexpr uintptr_t PartyChatInterface_Interface = 0x0110;
			constexpr uintptr_t TitleFileInterface_Object = 0x0118;
			constexpr uintptr_t TitleFileInterface_Interface = 0x0120;
			constexpr uintptr_t TitleFileCacheInterface_Object = 0x0128;
			constexpr uintptr_t TitleFileCacheInterface_Interface = 0x0130;
			constexpr uintptr_t UserCloudInterface_Object = 0x0138;
			constexpr uintptr_t UserCloudInterface_Interface = 0x0140;
			constexpr uintptr_t SharedCloudInterface_Object = 0x0148;
			constexpr uintptr_t SharedCloudInterface_Interface = 0x0150;
			constexpr uintptr_t SocialInterface_Object = 0x0158;
			constexpr uintptr_t SocialInterface_Interface = 0x0160;
			constexpr uintptr_t AuthInterface_Object = 0x0168;
			constexpr uintptr_t AuthInterface_Interface = 0x0170;
			constexpr uintptr_t PersistentAuthInterface_Object = 0x0178;
			constexpr uintptr_t PersistentAuthInterface_Interface = 0x0180;
			constexpr uintptr_t GameDVRInterface_Object = 0x0188;
			constexpr uintptr_t GameDVRInterface_Interface = 0x0190;
			constexpr uintptr_t CommunityContentInterface_Object = 0x0198;
			constexpr uintptr_t CommunityContentInterface_Interface = 0x01A0;
			constexpr uintptr_t PurchaseInterface_Object = 0x01A8;
			constexpr uintptr_t PurchaseInterface_Interface = 0x01B0;
			constexpr uintptr_t LobbyInterface_Object = 0x01B8;
			constexpr uintptr_t LobbyInterface_Interface = 0x01C0;
			constexpr uintptr_t FriendsInterface_Object = 0x01C8;
			constexpr uintptr_t FriendsInterface_Interface = 0x01D0;
			constexpr uintptr_t GameClipsInterface_Object = 0x01D8;
			constexpr uintptr_t GameClipsInterface_Interface = 0x01E0;
			constexpr uintptr_t SearchClass = 0x01E8;
			constexpr uintptr_t Bitfields_0x01F0 = 0x01F0;  // Multiple: bSupportsMultiSignin, bSupportsMultiVoice, bShowPrivilegeCheckErrors
			constexpr uintptr_t AccountSettings = 0x01F8;
			constexpr uintptr_t BlockListStatuses = 0x0208;
			constexpr uintptr_t UnsupportedCorrectiveActionURLs = 0x0218;
			constexpr uintptr_t SessionManager = 0x0228;
			constexpr uintptr_t SteamDLC = 0x0230;
			constexpr uintptr_t PS4DLC = 0x0240;
			constexpr uintptr_t XboxOneDLC = 0x0250;
			constexpr uintptr_t SwitchDLC = 0x0260;
			constexpr uintptr_t EpicDLC = 0x0270;
			constexpr uintptr_t OnlinePlatformType = 0x0280;
			constexpr uintptr_t CurrentConnectionStatus = 0x0281;
			constexpr uintptr_t OnlineSubsystemNames = 0x0288;
			constexpr uintptr_t NamedInterfaces = 0x0298;
			constexpr uintptr_t NamedInterfaceDefs = 0x02A8;
			constexpr uintptr_t Sessions = 0x02B8;
			constexpr uintptr_t IniLocPatcherClassName = 0x02C8;
			constexpr uintptr_t Patcher = 0x02D8;
			constexpr uintptr_t AsyncMinCompletionTime = 0x02E0;
		}

		namespace PBRuleNodeAlternate {
			constexpr uintptr_t RepeatAxis = 0x0098;
			constexpr uintptr_t ASize = 0x009C;
			constexpr uintptr_t BMaxSize = 0x00A0;
			constexpr uintptr_t Bitfields_0x00A4 = 0x00A4;  // Multiple: bInvertPatternOrder, bEqualSizeAB
		}

		namespace PBRuleNodeBase {
			constexpr uintptr_t NextRules = 0x0060;
			constexpr uintptr_t Comment = 0x0070;
			constexpr uintptr_t RulePosX = 0x0080;
			constexpr uintptr_t RulePosY = 0x0084;
			constexpr uintptr_t InDrawY = 0x0088;
			constexpr uintptr_t DrawWidth = 0x008C;
			constexpr uintptr_t DrawHeight = 0x0090;
		}

		namespace PBRuleNodeComment {
			constexpr uintptr_t SizeX = 0x0098;
			constexpr uintptr_t SizeY = 0x009C;
			constexpr uintptr_t BorderWidth = 0x00A0;
			constexpr uintptr_t BorderColor = 0x00A4;
			constexpr uintptr_t bFilled = 0x00A8;
			constexpr uintptr_t FillColor = 0x00AC;
		}

		namespace PBRuleNodeCorner {
			constexpr uintptr_t CornerSize = 0x0098;
			constexpr uintptr_t Angles = 0x00A0;
			constexpr uintptr_t FlatThreshold = 0x00B0;
			constexpr uintptr_t Bitfields_0x00B4 = 0x00B4;  // Multiple: bNoMeshForConcaveCorners, bUseAdjacentRulesetForRightGap
			constexpr uintptr_t CornerType = 0x00B8;
			constexpr uintptr_t CornerShapeOffset = 0x00BC;
			constexpr uintptr_t RoundTesselation = 0x00C0;
			constexpr uintptr_t RoundCurvature = 0x00C4;
		}

		namespace PBRuleNodeCycle {
			constexpr uintptr_t RepeatAxis = 0x0098;
			constexpr uintptr_t RepeatSize = 0x009C;
			constexpr uintptr_t CycleSize = 0x00A0;
			constexpr uintptr_t bFixRepeatSize = 0x00A4;
		}

		namespace PBRuleNodeEdgeAngle {
			constexpr uintptr_t Edge = 0x0098;
			constexpr uintptr_t Angles = 0x00A0;
		}

		namespace PBRuleNodeEdgeMesh {
			constexpr uintptr_t FlatThreshold = 0x0098;
			constexpr uintptr_t MainXPullIn = 0x009C;
		}

		namespace PBRuleNodeExtractTopBottom {
			constexpr uintptr_t ExtractTopZ = 0x0098;
			constexpr uintptr_t ExtractNotTopZ = 0x009C;
			constexpr uintptr_t ExtractBottomZ = 0x00A0;
			constexpr uintptr_t ExtractNotBottomZ = 0x00A4;
		}

		namespace PBRuleNodeLODQuad {
			constexpr uintptr_t MassiveLODDistanceScale = 0x0098;
		}

		namespace PBRuleNodeMesh {
			constexpr uintptr_t BuildingMeshes = 0x0098;
			constexpr uintptr_t PartialOccludedBuildingMesh = 0x00A8;
			constexpr uintptr_t Bitfields_0x00F8 = 0x00F8;  // Multiple: bDoOcclusionTest, bBlockAll
		}

		namespace PBRuleNodeOcclusion {
			constexpr uintptr_t UnknownData00 = 0x0094;
		}

		namespace PBRuleNodeQuad {
			constexpr uintptr_t Material = 0x0098;
			constexpr uintptr_t RepeatMaxSizeX = 0x00A0;
			constexpr uintptr_t RepeatMaxSizeZ = 0x00A4;
			constexpr uintptr_t QuadLightmapRes = 0x00A8;
			constexpr uintptr_t YOffset = 0x00AC;
			constexpr uintptr_t bDisableMaterialRepeat = 0x00B0;
		}

		namespace PBRuleNodeRandom {
			constexpr uintptr_t NumOutputs = 0x0098;
			constexpr uintptr_t MinNumExecuted = 0x009C;
			constexpr uintptr_t MaxNumExecuted = 0x00A0;
		}

		namespace PBRuleNodeRepeat {
			constexpr uintptr_t RepeatAxis = 0x0098;
			constexpr uintptr_t RepeatMaxSize = 0x009C;
		}

		namespace PBRuleNodeSize {
			constexpr uintptr_t SizeAxis = 0x0098;
			constexpr uintptr_t DecisionSize = 0x009C;
			constexpr uintptr_t bUseTopLevelScopeSize = 0x00A0;
		}

		namespace PBRuleNodeSplit {
			constexpr uintptr_t SplitAxis = 0x0098;
			constexpr uintptr_t SplitSetup = 0x00A0;
		}

		namespace PBRuleNodeSubRuleset {
			constexpr uintptr_t SubRuleset = 0x0098;
		}

		namespace PBRuleNodeTransform {
			constexpr uintptr_t Translation = 0x0098;
			constexpr uintptr_t Rotation = 0x00A0;
			constexpr uintptr_t Scale = 0x00A8;
		}

		namespace PBRuleNodeVariation {
			constexpr uintptr_t bVariationOfScopeOnLeft = 0x0098;
		}

		namespace PBRuleNodeWindowWall {
			constexpr uintptr_t CellMaxSizeX = 0x0098;
			constexpr uintptr_t CellMaxSizeZ = 0x009C;
			constexpr uintptr_t WindowSizeX = 0x00A0;
			constexpr uintptr_t WindowSizeZ = 0x00A4;
			constexpr uintptr_t WindowPosX = 0x00A8;
			constexpr uintptr_t WindowPosZ = 0x00AC;
			constexpr uintptr_t bScaleWindowWithCell = 0x00B0;
			constexpr uintptr_t YOffset = 0x00B4;
			constexpr uintptr_t Material = 0x00B8;
		}

		namespace PackageMapLevel {
			constexpr uintptr_t UnknownData00 = 0x0118;
		}

		namespace ParticleEmitter {
			constexpr uintptr_t EmitterName = 0x0060;
			constexpr uintptr_t SubUVDataOffset = 0x0068;
			constexpr uintptr_t EmitterRenderMode = 0x006C;
			constexpr uintptr_t EmitterEditorColor = 0x0070;
			constexpr uintptr_t LODLevels = 0x0078;
			constexpr uintptr_t Bitfields_0x0088 = 0x0088;  // Multiple: ConvertedModules, bCollapsed, bIsSoloing, bCookedOut, bDisableForLowIntensity
			constexpr uintptr_t PeakActiveParticles = 0x008C;
			constexpr uintptr_t InitialAllocationCount = 0x0090;
			constexpr uintptr_t MediumDetailSpawnRateScale = 0x0094;
		}

		namespace ParticleLODLevel {
			constexpr uintptr_t Level = 0x0060;
			constexpr uintptr_t Bitfields_0x0064 = 0x0064;  // Multiple: bEnabled, ConvertedModules
			constexpr uintptr_t RequiredModule = 0x0068;
			constexpr uintptr_t Modules = 0x0070;
			constexpr uintptr_t TypeDataModule = 0x0080;
			constexpr uintptr_t SpawnModule = 0x0088;
			constexpr uintptr_t EventGenerator = 0x0090;
			constexpr uintptr_t SpawningModules = 0x0098;
			constexpr uintptr_t SpawnModules = 0x00A8;
			constexpr uintptr_t UpdateModules = 0x00B8;
			constexpr uintptr_t OrbitModules = 0x00C8;
			constexpr uintptr_t EventReceiverModules = 0x00D8;
			constexpr uintptr_t PeakActiveParticles = 0x00E8;
		}

		namespace ParticleLightEnvironmentComponent {
			constexpr uintptr_t ReferenceCount = 0x0170;
			constexpr uintptr_t NumPooledReuses = 0x0174;
			constexpr uintptr_t SharedInstigator = 0x0178;
			constexpr uintptr_t SharedParticleSystem = 0x0180;
			constexpr uintptr_t bAllowDLESharing = 0x0188;
		}

		namespace ParticleModule {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: bSpawnModule, bUpdateModule, bFinalUpdateModule, bCurvesAsColor, b3DDrawMode, bSupported3DDrawMode, bEnabled, bEditable, LODDuplicate, bSupportsRandomSeed, bRequiresLoopingNotification, bRequiresUpdateInTick
			constexpr uintptr_t LODValidity = 0x0064;
			constexpr uintptr_t ModuleEditorColor = 0x0068;
		}

		namespace ParticleModuleAcceleration {
			constexpr uintptr_t Acceleration = 0x0078;
			constexpr uintptr_t bApplyOwnerScale = 0x00A0;
		}

		namespace ParticleModuleAccelerationBase {
			constexpr uintptr_t bAlwaysInWorldSpace = 0x0070;
		}

		namespace ParticleModuleAccelerationOverLifetime {
			constexpr uintptr_t AccelOverLife = 0x0078;
		}

		namespace ParticleModuleAttractorBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleAttractorBoneSocket {
			constexpr uintptr_t FalloffType = 0x0070;
			constexpr uintptr_t DestinationType = 0x0071;
			constexpr uintptr_t SelectionMethod = 0x0072;
			constexpr uintptr_t Bitfields_0x0074 = 0x0074;  // Multiple: bParticleLifeRelative, bAttractAlongLengthOfBone
			constexpr uintptr_t FalloffExponent = 0x0078;
			constexpr uintptr_t Range = 0x00A0;
			constexpr uintptr_t Strength = 0x00C8;
			constexpr uintptr_t CollisionRadius = 0x00F0;
			constexpr uintptr_t DragCoefficient = 0x0118;
			constexpr uintptr_t DragRadius = 0x0140;
			constexpr uintptr_t UniversalOffset = 0x0168;
			constexpr uintptr_t SourceLocations = 0x0178;
			constexpr uintptr_t SkelMeshActorParamName = 0x0188;
			constexpr uintptr_t EditorSkelMesh = 0x0190;
		}

		namespace ParticleModuleAttractorLine {
			constexpr uintptr_t EndPoint0 = 0x0070;
			constexpr uintptr_t EndPoint1 = 0x007C;
			constexpr uintptr_t Range = 0x0088;
			constexpr uintptr_t Strength = 0x00B0;
		}

		namespace ParticleModuleAttractorParticle {
			constexpr uintptr_t EmitterName = 0x0070;
			constexpr uintptr_t Range = 0x0078;
			constexpr uintptr_t Bitfields_0x00A0 = 0x00A0;  // Multiple: bStrengthByDistance, bAffectBaseVelocity, bRenewSource, bInheritSourceVel
			constexpr uintptr_t Strength = 0x00A8;
			constexpr uintptr_t SelectionMethod = 0x00D0;
			constexpr uintptr_t LastSelIndex = 0x00D4;
		}

		namespace ParticleModuleAttractorPoint {
			constexpr uintptr_t Position = 0x0070;
			constexpr uintptr_t Range = 0x0098;
			constexpr uintptr_t Strength = 0x00C0;
			constexpr uintptr_t Bitfields_0x00E8 = 0x00E8;  // Multiple: StrengthByDistance, bAffectBaseVelocity, bOverrideVelocity, bUseWorldSpacePosition
		}

		namespace ParticleModuleAttractorSkelVertSurface {
			constexpr uintptr_t FalloffType = 0x0070;
			constexpr uintptr_t DestinationType = 0x0071;
			constexpr uintptr_t Bitfields_0x0074 = 0x0074;  // Multiple: bParticleLifeRelative, bEnforceNormalCheck
			constexpr uintptr_t FalloffExponent = 0x0078;
			constexpr uintptr_t Range = 0x00A0;
			constexpr uintptr_t Strength = 0x00C8;
			constexpr uintptr_t CollisionRadius = 0x00F0;
			constexpr uintptr_t DragCoefficient = 0x0118;
			constexpr uintptr_t DragRadius = 0x0140;
			constexpr uintptr_t UniversalOffset = 0x0168;
			constexpr uintptr_t SkelMeshActorParamName = 0x0174;
			constexpr uintptr_t EditorSkelMesh = 0x0180;
			constexpr uintptr_t ValidAssociatedBones = 0x0188;
			constexpr uintptr_t NormalToCompare = 0x0198;
			constexpr uintptr_t NormalCheckToleranceDegrees = 0x01A4;
			constexpr uintptr_t NormalCheckTolerance = 0x01A8;
			constexpr uintptr_t ValidMaterialIndices = 0x01B0;
		}

		namespace ParticleModuleBeamBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleBeamModifier {
			constexpr uintptr_t ModifierType = 0x0070;
			constexpr uintptr_t PositionOptions = 0x0074;
			constexpr uintptr_t Position = 0x0078;
			constexpr uintptr_t TangentOptions = 0x00A0;
			constexpr uintptr_t Tangent = 0x00A8;
			constexpr uintptr_t bAbsoluteTangent = 0x00D0;
			constexpr uintptr_t StrengthOptions = 0x00D4;
			constexpr uintptr_t Strength = 0x00D8;
		}

		namespace ParticleModuleBeamNoise {
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bLowFreq_Enabled, bNRScaleEmitterTime, bSmooth, bNoiseLock, bOscillate, bUseNoiseTangents, bTargetNoise, bApplyNoiseScale
			constexpr uintptr_t Frequency = 0x0074;
			constexpr uintptr_t Frequency_LowRange = 0x0078;
			constexpr uintptr_t NoiseRange = 0x0080;
			constexpr uintptr_t NoiseRangeScale = 0x00A8;
			constexpr uintptr_t NoiseSpeed = 0x00D0;
			constexpr uintptr_t NoiseLockRadius = 0x00F8;
			constexpr uintptr_t NoiseLockTime = 0x00FC;
			constexpr uintptr_t NoiseTension = 0x0100;
			constexpr uintptr_t NoiseTangentStrength = 0x0108;
			constexpr uintptr_t NoiseTessellation = 0x0130;
			constexpr uintptr_t FrequencyDistance = 0x0134;
			constexpr uintptr_t NoiseScale = 0x0138;
		}

		namespace ParticleModuleBeamSource {
			constexpr uintptr_t SourceMethod = 0x0070;
			constexpr uintptr_t SourceTangentMethod = 0x0071;
			constexpr uintptr_t SourceName = 0x0074;
			constexpr uintptr_t Bitfields_0x007C = 0x007C;  // Multiple: bSourceAbsolute, bLockSource, bLockSourceTangent, bLockSourceStength
			constexpr uintptr_t Source = 0x0080;
			constexpr uintptr_t SourceTangent = 0x00A8;
			constexpr uintptr_t SourceStrength = 0x00D0;
		}

		namespace ParticleModuleBeamTarget {
			constexpr uintptr_t TargetMethod = 0x0070;
			constexpr uintptr_t TargetTangentMethod = 0x0071;
			constexpr uintptr_t TargetName = 0x0074;
			constexpr uintptr_t Target = 0x0080;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bTargetAbsolute, bLockTarget, bLockTargetTangent, bLockTargetStength
			constexpr uintptr_t TargetTangent = 0x00B0;
			constexpr uintptr_t TargetBone = 0x00D8;
			constexpr uintptr_t TargetStrength = 0x00E0;
			constexpr uintptr_t LockRadius = 0x0108;
		}

		namespace ParticleModuleCameraBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleCameraOffset {
			constexpr uintptr_t CameraOffset = 0x0070;
			constexpr uintptr_t bSpawnTimeOnly = 0x0098;
			constexpr uintptr_t UpdateMethod = 0x009C;
		}

		namespace ParticleModuleCollision {
			constexpr uintptr_t DampingFactor = 0x0070;
			constexpr uintptr_t DampingFactorRotation = 0x0098;
			constexpr uintptr_t MaxCollisions = 0x00C0;
			constexpr uintptr_t CollisionCompletionOption = 0x00E8;
			constexpr uintptr_t Bitfields_0x00EC = 0x00EC;  // Multiple: bApplyPhysics, bNoClip, bPawnsDoNotDecrementCount, bOnlyVerticalNormalsDecrementCount, bDropDetail, bCollideOnlyIfVisible, bCollideWithWorld, bCollideWithWorldAttractors
			constexpr uintptr_t DecalMaterial = 0x00F0;
			constexpr uintptr_t DecalWidth = 0x00F8;
			constexpr uintptr_t DecalHeight = 0x00FC;
			constexpr uintptr_t DecalThickness = 0x0100;
			constexpr uintptr_t DecalLifetime = 0x0104;
			constexpr uintptr_t DecalDepthBias = 0x0108;
			constexpr uintptr_t DecalBlendRange = 0x010C;
			constexpr uintptr_t ParticleMass = 0x0118;
			constexpr uintptr_t DirScalar = 0x0140;
			constexpr uintptr_t VerticalFudgeFactor = 0x0144;
			constexpr uintptr_t DelayAmount = 0x0148;
			constexpr uintptr_t MaxCollisionDistance = 0x0170;
			constexpr uintptr_t ParticleAttractorCollisionActions = 0x0178;
		}

		namespace ParticleModuleCollisionActor {
			constexpr uintptr_t ActorsToCollideWith = 0x0188;
			constexpr uintptr_t bCheckPawnCollisions = 0x0198;
		}

		namespace ParticleModuleCollisionBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleColor {
			constexpr uintptr_t StartColor = 0x0070;
			constexpr uintptr_t StartAlpha = 0x0098;
			constexpr uintptr_t bClampAlpha = 0x00C0;
		}

		namespace ParticleModuleColorBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleColorByParameter {
			constexpr uintptr_t ColorParam = 0x0070;
			constexpr uintptr_t DefaultColor = 0x0078;
		}

		namespace ParticleModuleColorOverLife {
			constexpr uintptr_t ColorOverLife = 0x0070;
			constexpr uintptr_t AlphaOverLife = 0x0098;
			constexpr uintptr_t bClampAlpha = 0x00C0;
		}

		namespace ParticleModuleColorScaleOverDensity {
			constexpr uintptr_t ColorScaleOverDensity = 0x0070;
			constexpr uintptr_t AlphaScaleOverDensity = 0x0098;
		}

		namespace ParticleModuleColorScaleOverLife {
			constexpr uintptr_t ColorScaleOverLife = 0x0070;
			constexpr uintptr_t AlphaScaleOverLife = 0x0098;
			constexpr uintptr_t bEmitterTime = 0x00C0;
		}

		namespace ParticleModuleColor_Seeded {
			constexpr uintptr_t RandomSeedInfo = 0x00C8;
		}

		namespace ParticleModuleEventBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleEventGenerator {
			constexpr uintptr_t Events = 0x0070;
		}

		namespace ParticleModuleEventReceiverBase {
			constexpr uintptr_t EventGeneratorType = 0x0070;
			constexpr uintptr_t EventName = 0x0074;
		}

		namespace ParticleModuleEventReceiverKillParticles {
			constexpr uintptr_t bStopSpawning = 0x0080;
		}

		namespace ParticleModuleEventReceiverSpawn {
			constexpr uintptr_t SpawnCount = 0x0080;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bUseParticleTime, bUsePSysLocation, bInheritVelocity
			constexpr uintptr_t InheritVelocityScale = 0x00B0;
		}

		namespace ParticleModuleKillBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleKillBox {
			constexpr uintptr_t LowerLeftCorner = 0x0070;
			constexpr uintptr_t UpperRightCorner = 0x0098;
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: bAbsolute, bKillInside, bAxisAlignedAndFixedSize
		}

		namespace ParticleModuleKillHeight {
			constexpr uintptr_t Height = 0x0070;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bAbsolute, bFloor, bApplyPSysScale
		}

		namespace ParticleModuleLifetime {
			constexpr uintptr_t LifeTime = 0x0070;
		}

		namespace ParticleModuleLifetimeBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleLifetime_Seeded {
			constexpr uintptr_t RandomSeedInfo = 0x0098;
		}

		namespace ParticleModuleLocation {
			constexpr uintptr_t StartLocation = 0x0070;
			constexpr uintptr_t DistributeOverNPoints = 0x0098;
			constexpr uintptr_t DistributeThreshold = 0x009C;
		}

		namespace ParticleModuleLocationBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleLocationBoneSocket {
			constexpr uintptr_t SourceType = 0x0070;
			constexpr uintptr_t SelectionMethod = 0x0071;
			constexpr uintptr_t UniversalOffset = 0x0074;
			constexpr uintptr_t SourceLocations = 0x0080;
			constexpr uintptr_t Bitfields_0x0090 = 0x0090;  // Multiple: bUpdatePositionEachFrame, bOrientMeshEmitters, bInheritVelocityAtSpawn
			constexpr uintptr_t SkelMeshActorParamName = 0x0094;
			constexpr uintptr_t EditorSkelMesh = 0x00A0;
			constexpr uintptr_t LastUpdateTime = 0x00A8;
		}

		namespace ParticleModuleLocationDirect {
			constexpr uintptr_t Location = 0x0070;
			constexpr uintptr_t LocationOffset = 0x0098;
			constexpr uintptr_t ScaleFactor = 0x00C0;
			constexpr uintptr_t Direction = 0x00E8;
		}

		namespace ParticleModuleLocationEmitter {
			constexpr uintptr_t EmitterName = 0x0070;
			constexpr uintptr_t SelectionMethod = 0x0078;
			constexpr uintptr_t Bitfields_0x007C = 0x007C;  // Multiple: InheritSourceVelocity, bInheritSourceRotation
			constexpr uintptr_t InheritSourceVelocityScale = 0x0080;
			constexpr uintptr_t InheritSourceRotationScale = 0x0084;
		}

		namespace ParticleModuleLocationEmitterDirect {
			constexpr uintptr_t EmitterName = 0x0070;
		}

		namespace ParticleModuleLocationPrimitiveBase {
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: Positive_X, Positive_Y, Positive_Z, Negative_X, Negative_Y, Negative_Z, SurfaceOnly, Velocity
			constexpr uintptr_t VelocityScale = 0x0078;
			constexpr uintptr_t StartLocation = 0x00A0;
		}

		namespace ParticleModuleLocationPrimitiveCylinder {
			constexpr uintptr_t Bitfields_0x00C8 = 0x00C8;  // Multiple: RadialVelocity, bAdjustForWorldSpace
			constexpr uintptr_t StartRadius = 0x00D0;
			constexpr uintptr_t StartHeight = 0x00F8;
			constexpr uintptr_t HeightAxis = 0x0120;
		}

		namespace ParticleModuleLocationPrimitiveCylinder_Seeded {
			constexpr uintptr_t RandomSeedInfo = 0x0128;
		}

		namespace ParticleModuleLocationPrimitiveSphere {
			constexpr uintptr_t StartRadius = 0x00C8;
		}

		namespace ParticleModuleLocationPrimitiveSphere_Seeded {
			constexpr uintptr_t RandomSeedInfo = 0x00F0;
		}

		namespace ParticleModuleLocationSkelVertSurface {
			constexpr uintptr_t SourceType = 0x0070;
			constexpr uintptr_t UniversalOffset = 0x0074;
			constexpr uintptr_t Bitfields_0x0080 = 0x0080;  // Multiple: bUpdatePositionEachFrame, bOrientMeshEmitters, bEnforceNormalCheck
			constexpr uintptr_t SkelMeshActorParamName = 0x0084;
			constexpr uintptr_t EditorSkelMesh = 0x0090;
			constexpr uintptr_t ValidAssociatedBones = 0x0098;
			constexpr uintptr_t NormalToCompare = 0x00A8;
			constexpr uintptr_t NormalCheckToleranceDegrees = 0x00B4;
			constexpr uintptr_t NormalCheckTolerance = 0x00B8;
			constexpr uintptr_t ValidMaterialIndices = 0x00C0;
		}

		namespace ParticleModuleLocationStaticVertSurface {
			constexpr uintptr_t SourceType = 0x0070;
			constexpr uintptr_t UniversalOffset = 0x0074;
			constexpr uintptr_t Bitfields_0x0080 = 0x0080;  // Multiple: bUpdatePositionEachFrame, bOrientMeshEmitters, bEnforceNormalCheck
			constexpr uintptr_t StaticMeshActorParamName = 0x0084;
			constexpr uintptr_t EditorStaticMesh = 0x0090;
			constexpr uintptr_t NormalToCompare = 0x0098;
			constexpr uintptr_t NormalCheckToleranceDegrees = 0x00A4;
			constexpr uintptr_t NormalCheckTolerance = 0x00A8;
			constexpr uintptr_t ValidMaterialIndices = 0x00B0;
		}

		namespace ParticleModuleLocationWorldOffset_Seeded {
			constexpr uintptr_t RandomSeedInfo = 0x00A0;
		}

		namespace ParticleModuleLocation_Seeded {
			constexpr uintptr_t RandomSeedInfo = 0x00A0;
		}

		namespace ParticleModuleMaterialBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleMaterialByParameter {
			constexpr uintptr_t MaterialParameters = 0x0070;
			constexpr uintptr_t DefaultMaterials = 0x0080;
		}

		namespace ParticleModuleMeshMaterial {
			constexpr uintptr_t MeshMaterials = 0x0070;
		}

		namespace ParticleModuleMeshRotation {
			constexpr uintptr_t StartRotation = 0x0070;
			constexpr uintptr_t bInheritParent = 0x0098;
		}

		namespace ParticleModuleMeshRotationRate {
			constexpr uintptr_t StartRotationRate = 0x0070;
		}

		namespace ParticleModuleMeshRotationRateMultiplyLife {
			constexpr uintptr_t LifeMultiplier = 0x0070;
		}

		namespace ParticleModuleMeshRotationRateOverLife {
			constexpr uintptr_t RotRate = 0x0070;
			constexpr uintptr_t bScaleRotRate = 0x0098;
		}

		namespace ParticleModuleMeshRotationRate_Seeded {
			constexpr uintptr_t RandomSeedInfo = 0x0098;
		}

		namespace ParticleModuleMeshRotation_Seeded {
			constexpr uintptr_t RandomSeedInfo = 0x00A0;
		}

		namespace ParticleModuleOrbit {
			constexpr uintptr_t ChainMode = 0x0078;
			constexpr uintptr_t OffsetAmount = 0x0080;
			constexpr uintptr_t OffsetOptions = 0x00A8;
			constexpr uintptr_t RotationAmount = 0x00B0;
			constexpr uintptr_t RotationOptions = 0x00D8;
			constexpr uintptr_t RotationRateAmount = 0x00E0;
			constexpr uintptr_t RotationRateOptions = 0x0108;
		}

		namespace ParticleModuleOrbitBase {
			constexpr uintptr_t bUseEmitterTime = 0x0070;
		}

		namespace ParticleModuleOrientationAxisLock {
			constexpr uintptr_t LockAxisFlags = 0x0070;
		}

		namespace ParticleModuleOrientationBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleParameterBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleParameterDynamic {
			constexpr uintptr_t DynamicParams = 0x0070;
			constexpr uintptr_t UpdateFlags = 0x0080;
			constexpr uintptr_t bUsesVelocity = 0x0084;
		}

		namespace ParticleModuleParameterDynamic_Seeded {
			constexpr uintptr_t RandomSeedInfo = 0x0088;
		}

		namespace ParticleModulePhysicsVolumes {
			constexpr uintptr_t GlobalInfluence = 0x0070;
			constexpr uintptr_t LevelInfluenceType = 0x0098;
		}

		namespace ParticleModuleRequired {
			constexpr uintptr_t Material = 0x0070;
			constexpr uintptr_t ScreenAlignment = 0x0078;
			constexpr uintptr_t SortMode = 0x0079;
			constexpr uintptr_t ParticleBurstMethod = 0x007A;
			constexpr uintptr_t InterpolationMethod = 0x007B;
			constexpr uintptr_t EmitterNormalsMode = 0x007C;
			constexpr uintptr_t Bitfields_0x0080 = 0x0080;  // Multiple: bAllowImageFlipping, bSquareImageFlipping, bUseLocalSpace, bKillOnDeactivate, bKillOnCompleted, bRequiresSorting, bUseLegacyEmitterTime, bEnableNearParticleCulling, bEnableFarParticleCulling, bEmitterDurationUseRange, bDurationRecalcEachLoop, bEmitterDelayUseRange, bDelayFirstLoopOnly, bScaleUV, bDirectUV, bOverrideSystemMacroUV, bUseMaxDrawCount, bOrbitModuleAffectsVelocityAlignment
			constexpr uintptr_t NearCullDistance = 0x0084;
			constexpr uintptr_t NearFadeDistance = 0x0088;
			constexpr uintptr_t FarFadeDistance = 0x008C;
			constexpr uintptr_t FarCullDistance = 0x0090;
			constexpr uintptr_t EmitterDuration = 0x0094;
			constexpr uintptr_t EmitterDurationLow = 0x0098;
			constexpr uintptr_t EmitterLoops = 0x009C;
			constexpr uintptr_t SpawnRate = 0x00A0;
			constexpr uintptr_t BurstList = 0x00C8;
			constexpr uintptr_t EmitterDelay = 0x00D8;
			constexpr uintptr_t EmitterDelayLow = 0x00DC;
			constexpr uintptr_t SubImages_Horizontal = 0x00E0;
			constexpr uintptr_t SubImages_Vertical = 0x00E4;
			constexpr uintptr_t RandomImageTime = 0x00E8;
			constexpr uintptr_t RandomImageChanges = 0x00EC;
			constexpr uintptr_t MacroUVPosition = 0x00F0;
			constexpr uintptr_t MacroUVRadius = 0x00FC;
			constexpr uintptr_t MaxDrawCount = 0x0100;
			constexpr uintptr_t DownsampleThresholdScreenFraction = 0x0104;
			constexpr uintptr_t NormalsSphereCenter = 0x0108;
			constexpr uintptr_t NormalsCylinderDirection = 0x0114;
		}

		namespace ParticleModuleRotation {
			constexpr uintptr_t StartRotation = 0x0070;
		}

		namespace ParticleModuleRotationBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleRotationOverLifetime {
			constexpr uintptr_t RotationOverLife = 0x0070;
			constexpr uintptr_t Scale = 0x0098;
		}

		namespace ParticleModuleRotationRate {
			constexpr uintptr_t StartRotationRate = 0x0070;
		}

		namespace ParticleModuleRotationRateBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleRotationRateMultiplyLife {
			constexpr uintptr_t LifeMultiplier = 0x0070;
		}

		namespace ParticleModuleRotationRate_Seeded {
			constexpr uintptr_t RandomSeedInfo = 0x0098;
		}

		namespace ParticleModuleRotation_Seeded {
			constexpr uintptr_t RandomSeedInfo = 0x0098;
		}

		namespace ParticleModuleSize {
			constexpr uintptr_t StartSize = 0x0070;
		}

		namespace ParticleModuleSizeBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleSizeMultiplyLife {
			constexpr uintptr_t LifeMultiplier = 0x0070;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: MultiplyX, MultiplyY, MultiplyZ
		}

		namespace ParticleModuleSizeMultiplyVelocity {
			constexpr uintptr_t VelocityMultiplier = 0x0070;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: MultiplyX, MultiplyY, MultiplyZ
			constexpr uintptr_t CapMaxSize = 0x009C;
			constexpr uintptr_t CapMinSize = 0x00A8;
		}

		namespace ParticleModuleSizeScale {
			constexpr uintptr_t SizeScale = 0x0070;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: EnableX, EnableY, EnableZ
		}

		namespace ParticleModuleSizeScaleByTime {
			constexpr uintptr_t SizeScaleByTime = 0x0070;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bEnableX, bEnableY, bEnableZ
		}

		namespace ParticleModuleSizeScaleOverDensity {
			constexpr uintptr_t SizeScaleOverDensity = 0x0070;
		}

		namespace ParticleModuleSize_Seeded {
			constexpr uintptr_t RandomSeedInfo = 0x0098;
		}

		namespace ParticleModuleSourceMovement {
			constexpr uintptr_t SourceMovementScale = 0x0070;
		}

		namespace ParticleModuleSpawn {
			constexpr uintptr_t Rate = 0x0078;
			constexpr uintptr_t RateScale = 0x00A0;
			constexpr uintptr_t ParticleBurstMethod = 0x00C8;
			constexpr uintptr_t BurstList = 0x00D0;
		}

		namespace ParticleModuleSpawnBase {
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bProcessSpawnRate, bProcessBurstList
		}

		namespace ParticleModuleSpawnPerUnit {
			constexpr uintptr_t UnitScalar = 0x0078;
			constexpr uintptr_t SpawnPerUnit = 0x0080;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bIgnoreSpawnRateWhenMoving, bIgnoreMovementAlongX, bIgnoreMovementAlongY, bIgnoreMovementAlongZ
			constexpr uintptr_t MovementTolerance = 0x00AC;
			constexpr uintptr_t MaxFrameDistance = 0x00B0;
			constexpr uintptr_t MinFrameDistance = 0x00B4;
		}

		namespace ParticleModuleStoreSpawnTimeBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleSubUV {
			constexpr uintptr_t SubImageIndex = 0x0070;
			constexpr uintptr_t bUseRealTime = 0x0098;
		}

		namespace ParticleModuleSubUVBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleSubUVDirect {
			constexpr uintptr_t SubUVPosition = 0x0070;
			constexpr uintptr_t SubUVSize = 0x0098;
		}

		namespace ParticleModuleSubUVMovie {
			constexpr uintptr_t bUseEmitterTime = 0x00A0;
			constexpr uintptr_t FrameRate = 0x00A8;
			constexpr uintptr_t StartingFrame = 0x00D0;
		}

		namespace ParticleModuleSubUVSelect {
			constexpr uintptr_t SubImageSelect = 0x0070;
		}

		namespace ParticleModuleTrailBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleTrailSource {
			constexpr uintptr_t SourceMethod = 0x0070;
			constexpr uintptr_t SelectionMethod = 0x0071;
			constexpr uintptr_t SourceName = 0x0074;
			constexpr uintptr_t SourceStrength = 0x0080;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bLockSourceStength, bInheritRotation
			constexpr uintptr_t SourceOffsetCount = 0x00AC;
			constexpr uintptr_t SourceOffsetDefaults = 0x00B0;
		}

		namespace ParticleModuleTrailSpawn {
			constexpr uintptr_t SpawnDistanceMap = 0x0070;
			constexpr uintptr_t MinSpawnVelocity = 0x0078;
		}

		namespace ParticleModuleTrailTaper {
			constexpr uintptr_t TaperMethod = 0x0070;
			constexpr uintptr_t TaperFactor = 0x0078;
		}

		namespace ParticleModuleTypeDataAnimTrail {
			constexpr uintptr_t ControlEdgeName = 0x0070;
			constexpr uintptr_t SheetsPerTrail = 0x0078;
			constexpr uintptr_t Bitfields_0x007C = 0x007C;  // Multiple: bDeadTrailsOnDeactivate, bClipSourceSegement, bEnablePreviousTangentRecalculation, bTangentRecalculationEveryFrame, bRenderGeometry, bRenderSpawnPoints, bRenderTangents, bRenderTessellation
			constexpr uintptr_t TilingDistance = 0x0080;
			constexpr uintptr_t DistanceTessellationStepSize = 0x0084;
			constexpr uintptr_t TangentTessellationScalar = 0x0088;
		}

		namespace ParticleModuleTypeDataApex {
			constexpr uintptr_t ApexIOFX = 0x0070;
			constexpr uintptr_t ApexEmitter = 0x0078;
		}

		namespace ParticleModuleTypeDataBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleModuleTypeDataBeam {
			constexpr uintptr_t BeamMethod = 0x0070;
			constexpr uintptr_t EndPointMethod = 0x0071;
			constexpr uintptr_t Distance = 0x0078;
			constexpr uintptr_t EndPoint = 0x00A0;
			constexpr uintptr_t TessellationFactor = 0x00C8;
			constexpr uintptr_t EmitterStrength = 0x00D0;
			constexpr uintptr_t TargetStrength = 0x00F8;
			constexpr uintptr_t EndPointDirection = 0x0120;
			constexpr uintptr_t TextureTile = 0x0148;
			constexpr uintptr_t Bitfields_0x014C = 0x014C;  // Multiple: RenderGeometry, RenderDirectLine, RenderLines, RenderTessellation
		}

		namespace ParticleModuleTypeDataBeam2 {
			constexpr uintptr_t BeamMethod = 0x0070;
			constexpr uintptr_t TaperMethod = 0x0071;
			constexpr uintptr_t TextureTile = 0x0074;
			constexpr uintptr_t TextureTileDistance = 0x0078;
			constexpr uintptr_t Sheets = 0x007C;
			constexpr uintptr_t MaxBeamCount = 0x0080;
			constexpr uintptr_t Speed = 0x0084;
			constexpr uintptr_t InterpolationPoints = 0x0088;
			constexpr uintptr_t Bitfields_0x008C = 0x008C;  // Multiple: bAlwaysOn, RenderGeometry, RenderDirectLine, RenderLines, RenderTessellation
			constexpr uintptr_t UpVectorStepSize = 0x0090;
			constexpr uintptr_t BranchParentName = 0x0094;
			constexpr uintptr_t Distance = 0x00A0;
			constexpr uintptr_t TaperFactor = 0x00C8;
			constexpr uintptr_t TaperScale = 0x00F0;
		}

		namespace ParticleModuleTypeDataMesh {
			constexpr uintptr_t Mesh = 0x0070;
			constexpr uintptr_t MeshParamName = 0x0078;
			constexpr uintptr_t Bitfields_0x0080 = 0x0080;  // Multiple: CastShadows, DoCollisions, bAllowMotionBlur, bOverrideMaterial, bCameraFacing, bApplyParticleRotationAsSpin
			constexpr uintptr_t MeshAlignment = 0x0084;
			constexpr uintptr_t AxisLockOption = 0x0085;
			constexpr uintptr_t CameraFacingUpAxisOption = 0x0086;
			constexpr uintptr_t CameraFacingOption = 0x0087;
			constexpr uintptr_t Pitch = 0x0088;
			constexpr uintptr_t Roll = 0x008C;
			constexpr uintptr_t Yaw = 0x0090;
		}

		namespace ParticleModuleTypeDataMeshPhysX {
			constexpr uintptr_t PhysXParSys = 0x0098;
			constexpr uintptr_t PhysXRotationMethod = 0x00A0;
			constexpr uintptr_t FluidRotationCoefficient = 0x00A4;
			constexpr uintptr_t VerticalLod = 0x00A8;
			constexpr uintptr_t ZOffset = 0x00B8;
		}

		namespace ParticleModuleTypeDataPhysX {
			constexpr uintptr_t PhysXParSys = 0x0070;
			constexpr uintptr_t VerticalLod = 0x0078;
		}

		namespace ParticleModuleTypeDataRibbon {
			constexpr uintptr_t MaxTessellationBetweenParticles = 0x0070;
			constexpr uintptr_t SheetsPerTrail = 0x0074;
			constexpr uintptr_t MaxTrailCount = 0x0078;
			constexpr uintptr_t MaxParticleInTrailCount = 0x007C;
			constexpr uintptr_t Bitfields_0x0080 = 0x0080;  // Multiple: bDeadTrailsOnDeactivate, bDeadTrailsOnSourceLoss, bClipSourceSegement, bEnablePreviousTangentRecalculation, bTangentRecalculationEveryFrame, bSpawnInitialParticle, bRenderGeometry, bRenderSpawnPoints, bRenderTangents, bRenderTessellation, bEnableTangentDiffInterpScale
			constexpr uintptr_t RenderAxis = 0x0084;
			constexpr uintptr_t TangentSpawningScalar = 0x0088;
			constexpr uintptr_t TilingDistance = 0x008C;
			constexpr uintptr_t DistanceTessellationStepSize = 0x0090;
			constexpr uintptr_t TangentTessellationScalar = 0x0094;
		}

		namespace ParticleModuleTypeDataTrail {
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: RenderGeometry, RenderLines, RenderTessellation, Tapered, SpawnByDistance
			constexpr uintptr_t TessellationFactor = 0x0074;
			constexpr uintptr_t Tension = 0x0078;
			constexpr uintptr_t SpawnDistance = 0x00A0;
		}

		namespace ParticleModuleTypeDataTrail2 {
			constexpr uintptr_t TessellationFactor = 0x0070;
			constexpr uintptr_t TessellationFactorDistance = 0x0074;
			constexpr uintptr_t TessellationStrength = 0x0078;
			constexpr uintptr_t TextureTile = 0x007C;
			constexpr uintptr_t Sheets = 0x0080;
			constexpr uintptr_t MaxTrailCount = 0x0084;
			constexpr uintptr_t MaxParticleInTrailCount = 0x0088;
			constexpr uintptr_t Bitfields_0x008C = 0x008C;  // Multiple: bClipSourceSegement, bClearTangents, RenderGeometry, RenderDirectLine, RenderLines, RenderTessellation
		}

		namespace ParticleModuleUberBase {
			constexpr uintptr_t RequiredModules = 0x0070;
		}

		namespace ParticleModuleUberLTISIVCL {
			constexpr uintptr_t LifeTime = 0x0080;
			constexpr uintptr_t StartSize = 0x00A8;
			constexpr uintptr_t StartVelocity = 0x00D0;
			constexpr uintptr_t StartVelocityRadial = 0x00F8;
			constexpr uintptr_t ColorOverLife = 0x0120;
			constexpr uintptr_t AlphaOverLife = 0x0148;
		}

		namespace ParticleModuleUberLTISIVCLIL {
			constexpr uintptr_t LifeTime = 0x0080;
			constexpr uintptr_t StartSize = 0x00A8;
			constexpr uintptr_t StartVelocity = 0x00D0;
			constexpr uintptr_t StartVelocityRadial = 0x00F8;
			constexpr uintptr_t ColorOverLife = 0x0120;
			constexpr uintptr_t AlphaOverLife = 0x0148;
			constexpr uintptr_t StartLocation = 0x0170;
		}

		namespace ParticleModuleUberLTISIVCLILIRSSBLIRR {
			constexpr uintptr_t LifeTime = 0x0080;
			constexpr uintptr_t StartSize = 0x00A8;
			constexpr uintptr_t StartVelocity = 0x00D0;
			constexpr uintptr_t StartVelocityRadial = 0x00F8;
			constexpr uintptr_t ColorOverLife = 0x0120;
			constexpr uintptr_t AlphaOverLife = 0x0148;
			constexpr uintptr_t StartLocation = 0x0170;
			constexpr uintptr_t StartRotation = 0x0198;
			constexpr uintptr_t SizeLifeMultiplier = 0x01C0;
			constexpr uintptr_t Bitfields_0x01E8 = 0x01E8;  // Multiple: SizeMultiplyX, SizeMultiplyY, SizeMultiplyZ
			constexpr uintptr_t StartRotationRate = 0x01F0;
		}

		namespace ParticleModuleUberRainDrops {
			constexpr uintptr_t LifetimeMin = 0x0080;
			constexpr uintptr_t LifetimeMax = 0x0084;
			constexpr uintptr_t StartSizeMin = 0x0088;
			constexpr uintptr_t StartSizeMax = 0x0094;
			constexpr uintptr_t StartVelocityMin = 0x00A0;
			constexpr uintptr_t StartVelocityMax = 0x00AC;
			constexpr uintptr_t StartVelocityRadialMin = 0x00B8;
			constexpr uintptr_t StartVelocityRadialMax = 0x00BC;
			constexpr uintptr_t ColorOverLife = 0x00C0;
			constexpr uintptr_t AlphaOverLife = 0x00CC;
			constexpr uintptr_t Bitfields_0x00D0 = 0x00D0;  // Multiple: bIsUsingCylinder, bPositive_X, bPositive_Y, bPositive_Z, bNegative_X, bNegative_Y, bNegative_Z, bSurfaceOnly, bVelocity, bRadialVelocity
			constexpr uintptr_t PC_VelocityScale = 0x00D4;
			constexpr uintptr_t PC_StartLocation = 0x00D8;
			constexpr uintptr_t PC_StartRadius = 0x00E4;
			constexpr uintptr_t PC_StartHeight = 0x00E8;
			constexpr uintptr_t PC_HeightAxis = 0x00EC;
			constexpr uintptr_t StartLocationMin = 0x00F0;
			constexpr uintptr_t StartLocationMax = 0x00FC;
		}

		namespace ParticleModuleUberRainImpacts {
			constexpr uintptr_t LifeTime = 0x0080;
			constexpr uintptr_t StartSize = 0x00A8;
			constexpr uintptr_t StartRotation = 0x00D0;
			constexpr uintptr_t Bitfields_0x00F8 = 0x00F8;  // Multiple: bInheritParent, MultiplyX, MultiplyY, MultiplyZ, bIsUsingCylinder, bPositive_X, bPositive_Y, bPositive_Z, bNegative_X, bNegative_Y, bNegative_Z, bSurfaceOnly, bVelocity, bRadialVelocity
			constexpr uintptr_t LifeMultiplier = 0x0100;
			constexpr uintptr_t PC_VelocityScale = 0x0128;
			constexpr uintptr_t PC_StartLocation = 0x0150;
			constexpr uintptr_t PC_StartRadius = 0x0178;
			constexpr uintptr_t PC_StartHeight = 0x01A0;
			constexpr uintptr_t PC_HeightAxis = 0x01C8;
			constexpr uintptr_t ColorOverLife = 0x01D0;
			constexpr uintptr_t AlphaOverLife = 0x01F8;
		}

		namespace ParticleModuleUberRainSplashA {
			constexpr uintptr_t LifeTime = 0x0080;
			constexpr uintptr_t StartSize = 0x00A8;
			constexpr uintptr_t StartRotation = 0x00D0;
			constexpr uintptr_t Bitfields_0x00F8 = 0x00F8;  // Multiple: bInheritParent, MultiplyX, MultiplyY, MultiplyZ
			constexpr uintptr_t LifeMultiplier = 0x0100;
			constexpr uintptr_t ColorOverLife = 0x0128;
			constexpr uintptr_t AlphaOverLife = 0x0150;
		}

		namespace ParticleModuleUberRainSplashB {
			constexpr uintptr_t LifeTime = 0x0080;
			constexpr uintptr_t StartSize = 0x00A8;
			constexpr uintptr_t ColorOverLife = 0x00D0;
			constexpr uintptr_t AlphaOverLife = 0x00F8;
			constexpr uintptr_t LifeMultiplier = 0x0120;
			constexpr uintptr_t Bitfields_0x0148 = 0x0148;  // Multiple: MultiplyX, MultiplyY, MultiplyZ
			constexpr uintptr_t StartRotationRate = 0x0150;
		}

		namespace ParticleModuleVelocity {
			constexpr uintptr_t StartVelocity = 0x0078;
			constexpr uintptr_t StartVelocityRadial = 0x00A0;
		}

		namespace ParticleModuleVelocityBase {
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bInWorldSpace, bApplyOwnerScale
		}

		namespace ParticleModuleVelocityCone {
			constexpr uintptr_t Angle = 0x0078;
			constexpr uintptr_t Velocity = 0x00A0;
			constexpr uintptr_t Direction = 0x00C8;
		}

		namespace ParticleModuleVelocityInheritParent {
			constexpr uintptr_t Scale = 0x0078;
			constexpr uintptr_t MaxAddedVelocity = 0x00A0;
		}

		namespace ParticleModuleVelocityOverLifetime {
			constexpr uintptr_t VelOverLife = 0x0078;
			constexpr uintptr_t Absolute = 0x00A0;
		}

		namespace ParticleModuleVelocity_Seeded {
			constexpr uintptr_t RandomSeedInfo = 0x00C8;
		}

		namespace ParticleModuleWorldAttractor {
			constexpr uintptr_t bParticleLifeRelative = 0x0070;
			constexpr uintptr_t AttractorInfluence = 0x0078;
		}

		namespace ParticleModuleWorldForcesBase {
			constexpr uintptr_t UnknownData00 = 0x006C;
		}

		namespace ParticleSystem {
			constexpr uintptr_t SystemUpdateMode = 0x0060;
			constexpr uintptr_t LODMethod = 0x0061;
			constexpr uintptr_t OcclusionBoundsMethod = 0x0062;
			constexpr uintptr_t UpdateTime_FPS = 0x0064;
			constexpr uintptr_t UpdateTime_Delta = 0x0068;
			constexpr uintptr_t WarmupTime = 0x006C;
			constexpr uintptr_t WarmupTickRate = 0x0070;
			constexpr uintptr_t Emitters = 0x0078;
			constexpr uintptr_t PreviewComponent = 0x0088;
			constexpr uintptr_t ThumbnailAngle = 0x0090;
			constexpr uintptr_t ThumbnailDistance = 0x009C;
			constexpr uintptr_t ThumbnailWarmup = 0x00A0;
			constexpr uintptr_t Bitfields_0x00A4 = 0x00A4;  // Multiple: bLit, bOrientZAxisTowardCamera, bRegenerateLODDuplicate, bUseFixedRelativeBoundingBox, bShouldResetPeakCounts, bHasPhysics, bUseRealtimeThumbnail, ThumbnailImageOutOfDate, bSkipSpawnCountCheck, bUseDelayRange
			constexpr uintptr_t CurveEdSetup = 0x00A8;
			constexpr uintptr_t LODDistanceCheckTime = 0x00B0;
			constexpr uintptr_t LODDistances = 0x00B8;
			constexpr uintptr_t EditorLODSetting = 0x00C8;
			constexpr uintptr_t LODSettings = 0x00D0;
			constexpr uintptr_t FixedRelativeBoundingBox = 0x00E0;
			constexpr uintptr_t SecondsBeforeInactive = 0x00FC;
			constexpr uintptr_t FloorMesh = 0x0100;
			constexpr uintptr_t FloorPosition = 0x0110;
			constexpr uintptr_t FloorRotation = 0x011C;
			constexpr uintptr_t FloorScale = 0x0128;
			constexpr uintptr_t FloorScale3D = 0x012C;
			constexpr uintptr_t BackgroundColor = 0x0138;
			constexpr uintptr_t ThumbnailImage = 0x0140;
			constexpr uintptr_t Delay = 0x0148;
			constexpr uintptr_t DelayLow = 0x014C;
			constexpr uintptr_t MacroUVPosition = 0x0150;
			constexpr uintptr_t MacroUVRadius = 0x015C;
			constexpr uintptr_t CustomOcclusionBounds = 0x0160;
			constexpr uintptr_t SoloTracking = 0x0180;
		}

		namespace ParticleSystemComponent {
			constexpr uintptr_t VfTable_IISetParameter = 0x0258;
			constexpr uintptr_t Template = 0x0260;
			constexpr uintptr_t LightEnvironmentClass = 0x0268;
			constexpr uintptr_t LightEnvironmentSharedInstigator = 0x0270;
			constexpr uintptr_t MaxLightEnvironmentPooledReuses = 0x0278;
			constexpr uintptr_t EmitterInstances = 0x0280;
			constexpr uintptr_t SMComponents = 0x0290;
			constexpr uintptr_t SMMaterialInterfaces = 0x02A0;
			constexpr uintptr_t SkelMeshComponents = 0x02B0;
			constexpr uintptr_t ViewMBInfoArray = 0x02C0;
			constexpr uintptr_t Bitfields_0x02D0 = 0x02D0;  // Multiple: bAutoActivate, bWasCompleted, bSuppressSpawning, bWasDeactivated, bResetOnDetach, bUpdateOnDedicatedServer, bJustAttached, bIsActive, bHasBeenActivated, bWarmingUp, bIsCachedInPool, bOverrideLODMethod, bSkipUpdateDynamicDataDuringTick, bSkipBoundsUpdate, bUpdateComponentInTick, bDeferredBeamUpdate, bForcedInActive, bIsWarmingUp, bIsViewRelevanceDirty, bRecacheViewRelevance, bParticleRequiresUpdateInTick, bLODUpdatePending, bSkipSpawnCountCheck
			constexpr uintptr_t LastDetailMode = 0x02D4;
			constexpr uintptr_t LODMethod = 0x02D5;
			constexpr uintptr_t ReplayState = 0x02D6;
			constexpr uintptr_t InstanceParameters = 0x02D8;
			constexpr uintptr_t OldPosition = 0x02E8;
			constexpr uintptr_t PartSysVelocity = 0x02F4;
			constexpr uintptr_t WarmupTime = 0x0300;
			constexpr uintptr_t WarmupTickRate = 0x0304;
			constexpr uintptr_t LODLevel = 0x0308;
			constexpr uintptr_t SecondsBeforeInactive = 0x030C;
			constexpr uintptr_t TimeSinceLastForceUpdateTransform = 0x0310;
			constexpr uintptr_t MaxTimeBeforeForceUpdateTransform = 0x0314;
			constexpr uintptr_t EditorLODLevel = 0x0318;
			constexpr uintptr_t EditorDetailMode = 0x031C;
			constexpr uintptr_t AccumTickTime = 0x0320;
			constexpr uintptr_t CachedViewRelevanceFlags = 0x0328;
			constexpr uintptr_t ReplayClips = 0x0338;
			constexpr uintptr_t ReplayClipIDNumber = 0x0348;
			constexpr uintptr_t ReplayFrameIndex = 0x034C;
			constexpr uintptr_t AccumLODDistanceCheckTime = 0x0350;
			constexpr uintptr_t SpawnEvents = 0x0358;
			constexpr uintptr_t DeathEvents = 0x0368;
			constexpr uintptr_t CollisionEvents = 0x0378;
			constexpr uintptr_t KismetEvents = 0x0388;
			constexpr uintptr_t AttractorCollisionEvents = 0x0398;
			constexpr uintptr_t ReleaseResourcesFence = 0x03A8;
			constexpr uintptr_t CustomTimeDilation = 0x03B0;
			constexpr uintptr_t EmitterDelay = 0x03B4;
			constexpr uintptr_t FakeVelocity = 0x03B8;
		}

		namespace ParticleSystemReplay {
			constexpr uintptr_t ClipIDNumber = 0x0060;
			constexpr uintptr_t Frames = 0x0068;
		}

		namespace PatchScriptCommandlet {
			constexpr uintptr_t UnknownData00 = 0x00B4;
		}

		namespace PathBlockingVolume {
			constexpr uintptr_t UnknownData00 = 0x02A4;
		}

		namespace PathConstraint {
			constexpr uintptr_t CacheIdx = 0x0060;
			constexpr uintptr_t NextConstraint = 0x0068;
		}

		namespace PathGoalEvaluator {
			constexpr uintptr_t NextEvaluator = 0x0060;
			constexpr uintptr_t GeneratedGoal = 0x0068;
			constexpr uintptr_t MaxPathVisits = 0x0070;
			constexpr uintptr_t CacheIdx = 0x0074;
		}

		namespace PathNode {
			constexpr uintptr_t UnknownData00 = 0x0384;
		}

		namespace Path_AlongLine {
			constexpr uintptr_t Direction = 0x0070;
		}

		namespace Path_AvoidInEscapableNodes {
			constexpr uintptr_t Radius = 0x0070;
			constexpr uintptr_t Height = 0x0074;
			constexpr uintptr_t MaxFallSpeed = 0x0078;
			constexpr uintptr_t MoveFlags = 0x007C;
		}

		namespace Path_MinDistBetweenSpecsOfType {
			constexpr uintptr_t MinDistBetweenSpecTypes = 0x0070;
			constexpr uintptr_t InitLocation = 0x0074;
			constexpr uintptr_t ReachSpecClass = 0x0080;
		}

		namespace Path_TowardGoal {
			constexpr uintptr_t GoalActor = 0x0070;
		}

		namespace Path_TowardPoint {
			constexpr uintptr_t GoalPoint = 0x0070;
		}

		namespace Path_WithinDistanceEnvelope {
			constexpr uintptr_t MaxDistance = 0x0070;
			constexpr uintptr_t MinDistance = 0x0074;
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bSoft, bOnlyThrowOutNodesThatLeaveEnvelope
			constexpr uintptr_t SoftStartPenalty = 0x007C;
			constexpr uintptr_t EnvelopeTestPoint = 0x0080;
		}

		namespace Path_WithinTraversalDist {
			constexpr uintptr_t MaxTraversalDist = 0x0070;
			constexpr uintptr_t bSoft = 0x0074;
			constexpr uintptr_t SoftStartPenalty = 0x0078;
		}

		namespace Pawn {
			constexpr uintptr_t VfTable_IInterface_Speaker = 0x0268;
			constexpr uintptr_t ObjectProvider = 0x0270;
			constexpr uintptr_t RegistryGroup = 0x0278;
			constexpr uintptr_t MaxStepHeight = 0x0280;
			constexpr uintptr_t MaxJumpHeight = 0x0284;
			constexpr uintptr_t WalkableFloorZ = 0x0288;
			constexpr uintptr_t LedgeCheckThreshold = 0x028C;
			constexpr uintptr_t PartialLedgeMoveDir = 0x0290;
			constexpr uintptr_t Controller = 0x02A0;
			constexpr uintptr_t NextPawn = 0x02A8;
			constexpr uintptr_t NetRelevancyTime = 0x02B0;
			constexpr uintptr_t LastRealViewer = 0x02B8;
			constexpr uintptr_t LastViewer = 0x02C0;
			constexpr uintptr_t Bitfields_0x02C8 = 0x02C8;  // Multiple: bScriptTickSpecial, bUpAndOut, bIsWalking, bWantsToCrouch, bIsCrouched, bTryToUncrouch, bCanCrouch, bCrawler, bReducedSpeed, bJumpCapable, bCanJump, bCanWalk, bCanFly, bCanStrafe, bAvoidLedges, bStopAtLedges, bAllowLedgeOverhang, bPartiallyOverLedge, bSimulateGravity, bIgnoreForces, bCanWalkOffLedges, bCanBeBaseForPawns, bSimGravityDisabled, bDirectHitWall, bPushesRigidBodies, bForceFloorCheck, bForceKeepAnchor, bCanMantle, bCanClimbUp, bCanClimbCeilings, bCanSwatTurn, bCanLeap
			constexpr uintptr_t Bitfields_0x02CC = 0x02CC;  // Multiple: bCanCoverSlip, bDisplayPathErrors, bAmbientCreature, bLOSHearing, bMuffledHearing, bDontPossess, bRollToDesired, bStationary, bCachedRelevant, bModifyReachSpecCost, bModifyNavPointDest, bPrevBypassSimulatedClientPhysics, bRunPhysicsWithNoController, bForceMaxAccel, bLimitFallAccel, bForceRMVelocity, bForceRegularVelocity, bDesiredRotationSet, bLockDesiredRotation, bUnlockWhenReached, bNeedsBaseTickedFirst, bUsedByMatinee, bRootMotionFromInterpCurve, bDebugShowCameraLocation, bFastAttachedMove
			constexpr uintptr_t WalkingPhysics = 0x02D0;
			constexpr uintptr_t PathSearchType = 0x02D1;
			constexpr uintptr_t RemoteViewPitch = 0x02D2;
			constexpr uintptr_t UncrouchTime = 0x02D4;
			constexpr uintptr_t CrouchHeight = 0x02D8;
			constexpr uintptr_t CrouchRadius = 0x02DC;
			constexpr uintptr_t FullHeight = 0x02E0;
			constexpr uintptr_t PathConstraintList = 0x02E8;
			constexpr uintptr_t PathGoalList = 0x02F0;
			constexpr uintptr_t DesiredSpeed = 0x02F8;
			constexpr uintptr_t MaxDesiredSpeed = 0x02FC;
			constexpr uintptr_t HearingThreshold = 0x0300;
			constexpr uintptr_t Alertness = 0x0304;
			constexpr uintptr_t SightRadius = 0x0308;
			constexpr uintptr_t PeripheralVision = 0x030C;
			constexpr uintptr_t AvgPhysicsTime = 0x0310;
			constexpr uintptr_t Mass = 0x0314;
			constexpr uintptr_t Buoyancy = 0x0318;
			constexpr uintptr_t MeleeRange = 0x031C;
			constexpr uintptr_t Anchor = 0x0320;
			constexpr uintptr_t AnchorItem = 0x0328;
			constexpr uintptr_t LastAnchor = 0x0330;
			constexpr uintptr_t FindAnchorFailedTime = 0x0338;
			constexpr uintptr_t LastValidAnchorTime = 0x033C;
			constexpr uintptr_t DestinationOffset = 0x0340;
			constexpr uintptr_t NextPathRadius = 0x0344;
			constexpr uintptr_t SerpentineDir = 0x0348;
			constexpr uintptr_t SerpentineDist = 0x0354;
			constexpr uintptr_t SerpentineTime = 0x0358;
			constexpr uintptr_t MaxPitchLimit = 0x035C;
			constexpr uintptr_t GroundSpeed = 0x0360;
			constexpr uintptr_t AirSpeed = 0x0364;
			constexpr uintptr_t AccelRate = 0x0368;
			constexpr uintptr_t JumpZ = 0x036C;
			constexpr uintptr_t OutofWaterZ = 0x0370;
			constexpr uintptr_t MaxOutOfWaterStepHeight = 0x0374;
			constexpr uintptr_t AirControl = 0x0378;
			constexpr uintptr_t WalkingPct = 0x037C;
			constexpr uintptr_t MovementSpeedModifier = 0x0380;
			constexpr uintptr_t CrouchedPct = 0x0384;
			constexpr uintptr_t MaxFallSpeed = 0x0388;
			constexpr uintptr_t AIMaxFallSpeedFactor = 0x038C;
			constexpr uintptr_t BaseEyeHeight = 0x0390;
			constexpr uintptr_t EyeHeight = 0x0394;
			constexpr uintptr_t Floor = 0x0398;
			constexpr uintptr_t RMVelocity = 0x03A4;
			constexpr uintptr_t noise1spot = 0x03B0;
			constexpr uintptr_t noise1time = 0x03BC;
			constexpr uintptr_t noise1other = 0x03C0;
			constexpr uintptr_t noise1loudness = 0x03C8;
			constexpr uintptr_t noise2spot = 0x03CC;
			constexpr uintptr_t noise2time = 0x03D8;
			constexpr uintptr_t noise2other = 0x03E0;
			constexpr uintptr_t noise2loudness = 0x03E8;
			constexpr uintptr_t SoundDampening = 0x03EC;
			constexpr uintptr_t DamageScaling = 0x03F0;
			constexpr uintptr_t MenuName = 0x03F8;
			constexpr uintptr_t ControllerClass = 0x0408;
			constexpr uintptr_t PlayerReplicationInfo = 0x0410;
			constexpr uintptr_t LandMovementState = 0x0418;
			constexpr uintptr_t WaterMovementState = 0x0420;
			constexpr uintptr_t LastStartSpot = 0x0428;
			constexpr uintptr_t LastStartTime = 0x0430;
			constexpr uintptr_t Mesh = 0x0438;
			constexpr uintptr_t CylinderComponent = 0x0440;
			constexpr uintptr_t RBPushRadius = 0x0448;
			constexpr uintptr_t RBPushStrength = 0x044C;
			constexpr uintptr_t AlwaysRelevantDistanceSquared = 0x0450;
			constexpr uintptr_t LastHitBy = 0x0458;
			constexpr uintptr_t ViewPitchMin = 0x0460;
			constexpr uintptr_t ViewPitchMax = 0x0464;
			constexpr uintptr_t AllowedYawError = 0x0468;
			constexpr uintptr_t DesiredRotation = 0x046C;
			constexpr uintptr_t PreRagdollCollisionComponent = 0x0478;
			constexpr uintptr_t PhysicsPushBody = 0x0480;
			constexpr uintptr_t FailedLandingCount = 0x0488;
			constexpr uintptr_t SlotNodes = 0x0490;
			constexpr uintptr_t InterpGroupList = 0x04A0;
			constexpr uintptr_t FacialAudioComp = 0x04B0;
			constexpr uintptr_t MIC_PawnMat = 0x04B8;
			constexpr uintptr_t MIC_PawnHair = 0x04C0;
			constexpr uintptr_t ScalarParameterInterpArray = 0x04C8;
			constexpr uintptr_t RootMotionInterpCurve = 0x04D8;
			constexpr uintptr_t RootMotionInterpRate = 0x0500;
			constexpr uintptr_t RootMotionInterpCurrentTime = 0x0504;
			constexpr uintptr_t RootMotionInterpCurveLastValue = 0x0508;
		}

		namespace PendingLevel {
			constexpr uintptr_t UnknownData00 = 0x00D8;
		}

		namespace PhysXParticleSystem {
			constexpr uintptr_t MaxParticles = 0x0060;
			constexpr uintptr_t ParticleSpawnReserve = 0x0064;
			constexpr uintptr_t RBChannel = 0x0068;
			constexpr uintptr_t SimulationMethod = 0x0069;
			constexpr uintptr_t PacketSizeMultiplier = 0x006A;
			constexpr uintptr_t RBCollideWithChannels = 0x006C;
			constexpr uintptr_t CollisionDistance = 0x0070;
			constexpr uintptr_t RestitutionWithStaticShapes = 0x0074;
			constexpr uintptr_t RestitutionWithDynamicShapes = 0x0078;
			constexpr uintptr_t FrictionWithStaticShapes = 0x007C;
			constexpr uintptr_t FrictionWithDynamicShapes = 0x0080;
			constexpr uintptr_t StaticFrictionWithStaticShapes = 0x0084;
			constexpr uintptr_t StaticFrictionWithDynamicShapes = 0x0088;
			constexpr uintptr_t Bitfields_0x008C = 0x008C;  // Multiple: bDynamicCollision, bDisableGravity, bStaticCollision, bTwoWayCollision, bDestroy, bSyncFailed, bIsInGame
			constexpr uintptr_t MaxMotionDistance = 0x0090;
			constexpr uintptr_t Damping = 0x0094;
			constexpr uintptr_t ExternalAcceleration = 0x0098;
			constexpr uintptr_t RestParticleDistance = 0x00A4;
			constexpr uintptr_t RestDensity = 0x00A8;
			constexpr uintptr_t KernelRadiusMultiplier = 0x00AC;
			constexpr uintptr_t Stiffness = 0x00B0;
			constexpr uintptr_t Viscosity = 0x00B4;
			constexpr uintptr_t CollisionResponseCoefficient = 0x00B8;
			constexpr uintptr_t CascadeScene = 0x00C0;
			constexpr uintptr_t PSys = 0x00C8;
		}

		namespace PhysicalMaterial {
			constexpr uintptr_t MaterialIndex = 0x0060;
			constexpr uintptr_t Friction = 0x0064;
			constexpr uintptr_t Restitution = 0x0068;
			constexpr uintptr_t Bitfields_0x006C = 0x006C;  // Multiple: bForceConeFriction, bEnableAnisotropicFriction
			constexpr uintptr_t AnisoFrictionDir = 0x0070;
			constexpr uintptr_t FrictionV = 0x007C;
			constexpr uintptr_t Density = 0x0080;
			constexpr uintptr_t AngularDamping = 0x0084;
			constexpr uintptr_t LinearDamping = 0x0088;
			constexpr uintptr_t MagneticResponse = 0x008C;
			constexpr uintptr_t WindResponse = 0x0090;
			constexpr uintptr_t InertiaScale = 0x0094;
			constexpr uintptr_t ImpactThreshold = 0x0098;
			constexpr uintptr_t ImpactReFireDelay = 0x009C;
			constexpr uintptr_t ImpactEffect = 0x00A0;
			constexpr uintptr_t ImpactSound = 0x00A8;
			constexpr uintptr_t SlideThreshold = 0x00B0;
			constexpr uintptr_t SlideReFireDelay = 0x00B4;
			constexpr uintptr_t SlideEffect = 0x00B8;
			constexpr uintptr_t SlideSound = 0x00C0;
			constexpr uintptr_t FractureSoundExplosion = 0x00C8;
			constexpr uintptr_t FractureSoundSingle = 0x00D0;
			constexpr uintptr_t Parent = 0x00D8;
			constexpr uintptr_t PhysicalMaterialProperty = 0x00E0;
		}

		namespace PhysicsAsset {
			constexpr uintptr_t DefaultSkelMesh = 0x0060;
			constexpr uintptr_t BodySetup = 0x0068;
			constexpr uintptr_t BodySetupIndexMap = 0x0078;
			constexpr uintptr_t BoundsBodies = 0x00C8;
			constexpr uintptr_t ConstraintSetup = 0x00D8;
			constexpr uintptr_t DefaultInstance = 0x00E8;
		}

		namespace PhysicsAssetInstance {
			constexpr uintptr_t Owner = 0x0060;
			constexpr uintptr_t RootBodyIndex = 0x0068;
			constexpr uintptr_t Bodies = 0x0070;
			constexpr uintptr_t Constraints = 0x0080;
			constexpr uintptr_t CollisionDisableTable = 0x0090;
			constexpr uintptr_t LinearSpringScale = 0x00E0;
			constexpr uintptr_t LinearDampingScale = 0x00E4;
			constexpr uintptr_t LinearForceLimitScale = 0x00E8;
			constexpr uintptr_t AngularSpringScale = 0x00EC;
			constexpr uintptr_t AngularDampingScale = 0x00F0;
			constexpr uintptr_t AngularForceLimitScale = 0x00F4;
			constexpr uintptr_t bInitBodies = 0x00F8;
		}

		namespace PhysicsLODVerticalEmitter {
			constexpr uintptr_t ParticlePercentage = 0x0060;
		}

		namespace PhysicsVolume {
			constexpr uintptr_t ZoneVelocity = 0x02A8;
			constexpr uintptr_t Bitfields_0x02B4 = 0x02B4;  // Multiple: bVelocityAffectsWalking, bDestructive, bMoveProjectiles, bBounceVelocity, bCrowdAgentsPlayDeathAnim, bPhysicsOnContact
			constexpr uintptr_t GroundFriction = 0x02B8;
			constexpr uintptr_t TerminalVelocity = 0x02BC;
			constexpr uintptr_t Priority = 0x02C0;
			constexpr uintptr_t FluidFriction = 0x02C4;
			constexpr uintptr_t RigidBodyDamping = 0x02C8;
			constexpr uintptr_t MaxDampingForce = 0x02CC;
			constexpr uintptr_t NextPhysicsVolume = 0x02D0;
		}

		namespace PitchTekSettings {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: bEnabled, bUseInitialColorTexture, bUseInitialDataTexture, bRenderBallDecalOnContact, bRenderCarPositionDecal
			constexpr uintptr_t ColorTargetSize = 0x0064;
			constexpr uintptr_t DataTargetSize = 0x0065;
			constexpr uintptr_t PitchLengthX = 0x0068;
			constexpr uintptr_t PitchLengthY = 0x006C;
			constexpr uintptr_t InitialColorTexture = 0x0070;
			constexpr uintptr_t InitialDataTexture = 0x0078;
			constexpr uintptr_t ClearSettings = 0x0080;
			constexpr uintptr_t BallContactHeight = 0x0090;
			constexpr uintptr_t BallSettings = 0x0098;
			constexpr uintptr_t WheelContactHeight = 0x00B8;
			constexpr uintptr_t WheelSettings = 0x00C0;
			constexpr uintptr_t CarBodyContactHeight = 0x00E0;
			constexpr uintptr_t CarBodySettings = 0x00E8;
			constexpr uintptr_t DemolitionExplosionMaxHeight = 0x0108;
			constexpr uintptr_t DemolitionSettings = 0x0110;
			constexpr uintptr_t GoalExplosionSettings = 0x0130;
			constexpr uintptr_t JumpBlastMaxHeight = 0x0150;
			constexpr uintptr_t JumpBlastSettings = 0x0158;
			constexpr uintptr_t CarPositionSettings = 0x0178;
		}

		namespace PlatformAccountSettings {
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bCrossplayEnabled, bAllowInvites
			constexpr uintptr_t CrossPlatformChatState = 0x0074;
		}

		namespace PlatformBlockListStatus {
			constexpr uintptr_t DownloadStatus = 0x0070;
		}

		namespace PlatformInterfaceBase {
			constexpr uintptr_t AllDelegates = 0x0060;
		}

		namespace PlatformInterfaceWebResponse {
			constexpr uintptr_t OriginalURL = 0x0060;
			constexpr uintptr_t ResponseCode = 0x0070;
			constexpr uintptr_t Tag = 0x0074;
			constexpr uintptr_t Headers = 0x0078;
			constexpr uintptr_t StringResponse = 0x00C8;
			constexpr uintptr_t BinaryResponse = 0x00D8;
		}

		namespace PlatformURL {
			constexpr uintptr_t URL = 0x0070;
		}

		namespace Player {
			constexpr uintptr_t VfTable_FExec = 0x0060;
			constexpr uintptr_t ObjectProvider = 0x0068;
			constexpr uintptr_t RegistryGroup = 0x0070;
			constexpr uintptr_t Actor = 0x0078;
			constexpr uintptr_t CurrentNetSpeed = 0x0080;
			constexpr uintptr_t ConfiguredInternetSpeed = 0x0084;
			constexpr uintptr_t ConfiguredReplicationRate = 0x0088;
			constexpr uintptr_t PP_DesaturationMultiplier = 0x008C;
			constexpr uintptr_t PP_HighlightsMultiplier = 0x0090;
			constexpr uintptr_t PP_MidTonesMultiplier = 0x0094;
			constexpr uintptr_t PP_ShadowsMultiplier = 0x0098;
		}

		namespace PlayerController {
			constexpr uintptr_t Player = 0x0478;
			constexpr uintptr_t PlayerCamera = 0x0480;
			constexpr uintptr_t CameraClass = 0x0488;
			constexpr uintptr_t Bitfields_0x0490 = 0x0490;  // Multiple: bFrozen, bPressedJump, bDoubleJump, bUpdatePosition, bUpdating, bCheatFlying, bCameraPositionLocked, bShortConnectTimeOut, bPendingDestroy, bWasSpeedHack, bWasSaturated, bAimingHelp, bCameraCut, bClientSimulatingViewTarget, bHasVoiceHandshakeCompleted, bIsChatBanned, bIsSocialBanned, bCinematicMode, bInteractiveMode, bCinemaDisableInputMove, bCinemaDisableInputLook, bIgnoreNetworkMessages, bShowKismetDrawText, bReplicateAllPawns, bIsUsingStreamingVolumes, bIsExternalUIOpen, bIsControllerConnected, bCheckSoundOcclusion, bDebugCameraAnims, bBlockCameraAnimsFromOverridingPostProcess, bLogHearSoundOverflow, bCheckRelevancyThroughPortals
			constexpr uintptr_t bDebugClientAdjustPosition = 0x0494;
			constexpr uintptr_t MaxResponseTime = 0x0498;
			constexpr uintptr_t WaitDelay = 0x049C;
			constexpr uintptr_t AcknowledgedPawn = 0x04A0;
			constexpr uintptr_t DoubleClickDir = 0x04A8;
			constexpr uintptr_t bIgnoreMoveInput = 0x04A9;
			constexpr uintptr_t bIgnoreLookInput = 0x04AA;
			constexpr uintptr_t bRun = 0x04AB;
			constexpr uintptr_t bDuck = 0x04AC;
			constexpr uintptr_t NetPlayerIndex = 0x04AD;
			constexpr uintptr_t ViewTarget = 0x04B0;
			constexpr uintptr_t RealViewTarget = 0x04B8;
			constexpr uintptr_t ControllingDirTrackInst = 0x04C0;
			constexpr uintptr_t FOVAngle = 0x04C8;
			constexpr uintptr_t DesiredFOV = 0x04CC;
			constexpr uintptr_t DefaultFOV = 0x04D0;
			constexpr uintptr_t LODDistanceFactor = 0x04D4;
			constexpr uintptr_t TargetViewRotation = 0x04D8;
			constexpr uintptr_t TargetEyeHeight = 0x04E4;
			constexpr uintptr_t BlendedTargetViewRotation = 0x04E8;
			constexpr uintptr_t myHUD = 0x04F8;
			constexpr uintptr_t mySecondaryHUD = 0x0500;
			constexpr uintptr_t SavedMoveClass = 0x0508;
			constexpr uintptr_t SavedMoves = 0x0510;
			constexpr uintptr_t FreeMoves = 0x0518;
			constexpr uintptr_t PendingMove = 0x0520;
			constexpr uintptr_t LastAckedAccel = 0x0528;
			constexpr uintptr_t CurrentTimeStamp = 0x0534;
			constexpr uintptr_t LastUpdateTime = 0x0538;
			constexpr uintptr_t ServerTimeStamp = 0x053C;
			constexpr uintptr_t TimeMargin = 0x0540;
			constexpr uintptr_t ClientUpdateTime = 0x0544;
			constexpr uintptr_t MaxTimeMargin = 0x0548;
			constexpr uintptr_t LastActiveTime = 0x054C;
			constexpr uintptr_t DynamicPingThreshold = 0x0550;
			constexpr uintptr_t LastPingUpdate = 0x0554;
			constexpr uintptr_t LastSpeedHackLog = 0x0558;
			constexpr uintptr_t PendingAdjustment = 0x0560;
			constexpr uintptr_t GroundPitch = 0x0598;
			constexpr uintptr_t CheatManager = 0x05A0;
			constexpr uintptr_t CheatClass = 0x05A8;
			constexpr uintptr_t PlayerInput = 0x05B0;
			constexpr uintptr_t InputClass = 0x05B8;
			constexpr uintptr_t FailedPathStart = 0x05C0;
			constexpr uintptr_t CylinderComponent = 0x05D0;
			constexpr uintptr_t ForceFeedbackManagerClassName = 0x05D8;
			constexpr uintptr_t ForceFeedbackManager = 0x05E8;
			constexpr uintptr_t Interactions = 0x05F0;
			constexpr uintptr_t VoiceMuteList = 0x0600;
			constexpr uintptr_t GameplayVoiceMuteList = 0x0610;
			constexpr uintptr_t VoicePacketFilter = 0x0620;
			constexpr uintptr_t ConnectedPeers = 0x0630;
			constexpr uintptr_t BestNextHostPeers = 0x0640;
			constexpr uintptr_t MigratedSearchToJoin = 0x0650;
			constexpr uintptr_t OnlineSub = 0x0658;
			constexpr uintptr_t VoiceInterface_Object = 0x0660;
			constexpr uintptr_t VoiceInterface_Interface = 0x0668;
			constexpr uintptr_t OnlinePlayerData = 0x0670;
			constexpr uintptr_t InteractDistance = 0x0678;
			constexpr uintptr_t DelayedJoinSessionName = 0x067C;
			constexpr uintptr_t InputRequests = 0x0688;
			constexpr uintptr_t LastBroadcastTime = 0x0698;
			constexpr uintptr_t LastBroadcastString = 0x06A0;
			constexpr uintptr_t PendingMapChangeLevelNames = 0x06E0;
			constexpr uintptr_t MyCoverReplicator = 0x06F0;
			constexpr uintptr_t DebugTextList = 0x06F8;
			constexpr uintptr_t SpectatorCameraSpeed = 0x0708;
			constexpr uintptr_t PendingSwapConnection = 0x0710;
			constexpr uintptr_t MinRespawnDelay = 0x0718;
			constexpr uintptr_t MaxConcurrentHearSounds = 0x071C;
			constexpr uintptr_t HearSoundActiveComponents = 0x0720;
			constexpr uintptr_t HearSoundPoolComponents = 0x0730;
			constexpr uintptr_t HiddenActors = 0x0740;
			constexpr uintptr_t LastSpectatorStateSynchTime = 0x0750;
		}

		namespace PlayerInput {
			constexpr uintptr_t Bitfields_0x01B0 = 0x01B0;  // Multiple: bUsingGamepad, bInvertMouse, bInvertTurn, bWasForward, bWasBack, bWasLeft, bWasRight, bEdgeForward, bEdgeBack, bEdgeLeft, bEdgeRight, bEnableMouseSmoothing, bEnableFOVScaling, bLockTurnUntilRelease
			constexpr uintptr_t LastAxisKeyName = 0x01B4;
			constexpr uintptr_t DoubleClickTimer = 0x01BC;
			constexpr uintptr_t DoubleClickTime = 0x01C0;
			constexpr uintptr_t MouseSensitivity = 0x01C4;
			constexpr uintptr_t aBaseX = 0x01C8;
			constexpr uintptr_t aBaseY = 0x01CC;
			constexpr uintptr_t aBaseZ = 0x01D0;
			constexpr uintptr_t aMouseX = 0x01D4;
			constexpr uintptr_t aMouseY = 0x01D8;
			constexpr uintptr_t aForward = 0x01DC;
			constexpr uintptr_t aTurn = 0x01E0;
			constexpr uintptr_t aStrafe = 0x01E4;
			constexpr uintptr_t aUp = 0x01E8;
			constexpr uintptr_t aLookUp = 0x01EC;
			constexpr uintptr_t aRightAnalogTrigger = 0x01F0;
			constexpr uintptr_t aLeftAnalogTrigger = 0x01F4;
			constexpr uintptr_t aPS3AccelX = 0x01F8;
			constexpr uintptr_t aPS3AccelY = 0x01FC;
			constexpr uintptr_t aPS3AccelZ = 0x0200;
			constexpr uintptr_t aPS3Gyro = 0x0204;
			constexpr uintptr_t aWiiUPointerX = 0x0208;
			constexpr uintptr_t aWiiUPointerY = 0x020C;
			constexpr uintptr_t aTilt = 0x0210;
			constexpr uintptr_t aRotationRate = 0x021C;
			constexpr uintptr_t aGravity = 0x0228;
			constexpr uintptr_t aAcceleration = 0x0234;
			constexpr uintptr_t aTouch = 0x0240;
			constexpr uintptr_t aBackTouch = 0x027C;
			constexpr uintptr_t RawJoyUp = 0x02B8;
			constexpr uintptr_t RawJoyRight = 0x02BC;
			constexpr uintptr_t RawJoyLookRight = 0x02C0;
			constexpr uintptr_t RawJoyLookUp = 0x02C4;
			constexpr uintptr_t MoveForwardSpeed = 0x02C8;
			constexpr uintptr_t MoveStrafeSpeed = 0x02CC;
			constexpr uintptr_t LookRightScale = 0x02D0;
			constexpr uintptr_t LookUpScale = 0x02D4;
			constexpr uintptr_t bStrafe = 0x02D8;
			constexpr uintptr_t bXAxis = 0x02D9;
			constexpr uintptr_t bYAxis = 0x02DA;
			constexpr uintptr_t ZeroTime = 0x02DC;
			constexpr uintptr_t SmoothedMouse = 0x02E4;
			constexpr uintptr_t MouseSamples = 0x02EC;
			constexpr uintptr_t MouseSamplingTotal = 0x02F0;
			constexpr uintptr_t AutoUnlockTurnTime = 0x02F4;
		}

		namespace PlayerReplicationInfo {
			constexpr uintptr_t ObjectProvider = 0x0268;
			constexpr uintptr_t RegistryGroup = 0x0270;
			constexpr uintptr_t Score = 0x0278;
			constexpr uintptr_t Deaths = 0x027C;
			constexpr uintptr_t Ping = 0x0280;
			constexpr uintptr_t TTSSpeaker = 0x0281;
			constexpr uintptr_t NumLives = 0x0284;
			constexpr uintptr_t PlayerName = 0x0288;
			constexpr uintptr_t OldName = 0x0298;
			constexpr uintptr_t PlayerID = 0x02A8;
			constexpr uintptr_t Team = 0x02B0;
			constexpr uintptr_t Bitfields_0x02B8 = 0x02B8;  // Multiple: bAdmin, bIsSpectator, bOnlySpectator, bWaitingPlayer, bReadyToPlay, bOutOfLives, bBot, bIsInactive, bFromPreviousLevel, bTimedOut, bUnregistered
			constexpr uintptr_t StartTime = 0x02BC;
			constexpr uintptr_t StringSpectating = 0x02C0;
			constexpr uintptr_t StringUnknown = 0x02D0;
			constexpr uintptr_t Kills = 0x02E0;
			constexpr uintptr_t ExactPing = 0x02E4;
			constexpr uintptr_t SavedNetworkAddress = 0x02E8;
			constexpr uintptr_t UniqueId = 0x02F8;
			constexpr uintptr_t SessionName = 0x0340;
			constexpr uintptr_t AutomatedTestingData = 0x0348;
			constexpr uintptr_t Avatar = 0x0350;
			constexpr uintptr_t PacketStats = 0x0358;
			constexpr uintptr_t PrevPacketStats = 0x0374;
			constexpr uintptr_t NetStats = 0x0390;
			constexpr uintptr_t RemoteUserData = 0x03E8;
		}

		namespace PlayerStart {
			constexpr uintptr_t Bitfields_0x0388 = 0x0388;  // Multiple: bEnabled, bPrimaryStart, bBestStart
			constexpr uintptr_t TeamIndex = 0x038C;
			constexpr uintptr_t Score = 0x0390;
			constexpr uintptr_t SelectionIndex = 0x0394;
		}

		namespace PointLight {
			constexpr uintptr_t UnknownData00 = 0x0274;
		}

		namespace PointLightComponent {
			constexpr uintptr_t ShadowRadiusMultiplier = 0x01C8;
			constexpr uintptr_t Radius = 0x01CC;
			constexpr uintptr_t FalloffExponent = 0x01D0;
			constexpr uintptr_t ShadowFalloffExponent = 0x01D4;
			constexpr uintptr_t MinShadowFalloffRadius = 0x01D8;
			constexpr uintptr_t CachedParentToWorld = 0x01E0;
			constexpr uintptr_t Translation = 0x0220;
			constexpr uintptr_t ShadowPlane = 0x0230;
			constexpr uintptr_t PreviewLightRadius = 0x0240;
			constexpr uintptr_t LightmassSettings = 0x0248;
			constexpr uintptr_t PreviewLightSourceRadius = 0x0258;
			constexpr uintptr_t MaxShadowDistanceToCastInLightDirection = 0x0260;
		}

		namespace Polys {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace PortalMarker {
			constexpr uintptr_t MyPortal = 0x0388;
		}

		namespace PortalTeleporter {
			constexpr uintptr_t SisterPortal = 0x0280;
			constexpr uintptr_t TextureResolutionX = 0x0288;
			constexpr uintptr_t TextureResolutionY = 0x028C;
			constexpr uintptr_t MyMarker = 0x0290;
			constexpr uintptr_t Bitfields_0x0298 = 0x0298;  // Multiple: bMovablePortal, bAlwaysTeleportNonPawns, bCanTeleportVehicles
		}

		namespace PortalVolume {
			constexpr uintptr_t Portals = 0x02A8;
		}

		namespace PostProcessChain {
			constexpr uintptr_t Effects = 0x0060;
		}

		namespace PostProcessEffect {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: bShowInEditor, bShowInGame, bUseWorldSettings, bAffectsLightingOnly
			constexpr uintptr_t EffectName = 0x0064;
			constexpr uintptr_t NodePosY = 0x006C;
			constexpr uintptr_t NodePosX = 0x0070;
			constexpr uintptr_t DrawWidth = 0x0074;
			constexpr uintptr_t DrawHeight = 0x0078;
			constexpr uintptr_t OutDrawY = 0x007C;
			constexpr uintptr_t InDrawY = 0x0080;
			constexpr uintptr_t SceneDPG = 0x0084;
		}

		namespace PostProcessVolume {
			constexpr uintptr_t Priority = 0x02A8;
			constexpr uintptr_t Bitfields_0x02AC = 0x02AC;  // Multiple: bOverrideWorldPostProcessChain, bEnabled
			constexpr uintptr_t Settings = 0x02B0;
			constexpr uintptr_t NextLowerPriorityVolume = 0x0418;
		}

		namespace PrecomputedVisibilityOverrideVolume {
			constexpr uintptr_t OverrideVisibleActors = 0x02A8;
			constexpr uintptr_t OverrideInvisibleActors = 0x02B8;
		}

		namespace PrecomputedVisibilityVolume {
			constexpr uintptr_t UnknownData00 = 0x02A4;
		}

		namespace Prefab {
			constexpr uintptr_t PrefabVersion = 0x0060;
			constexpr uintptr_t PrefabArchetypes = 0x0068;
			constexpr uintptr_t RemovedArchetypes = 0x0078;
			constexpr uintptr_t PrefabSequence = 0x0088;
			constexpr uintptr_t PrefabPreview = 0x0090;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bWorldspacePrefab, bAutoUpdatePrefabInstances
		}

		namespace PrefabInstance {
			constexpr uintptr_t TemplatePrefab = 0x0268;
			constexpr uintptr_t TemplateVersion = 0x0270;
			constexpr uintptr_t UnknownData00 = 0x0278;
			constexpr uintptr_t SequenceInstance = 0x02C8;
			constexpr uintptr_t PI_PackageVersion = 0x02D0;
			constexpr uintptr_t PI_LicenseePackageVersion = 0x02D4;
			constexpr uintptr_t PI_Bytes = 0x02D8;
			constexpr uintptr_t PI_CompleteObjects = 0x02E8;
			constexpr uintptr_t PI_ReferencedObjects = 0x02F8;
			constexpr uintptr_t PI_SavedNames = 0x0308;
			constexpr uintptr_t UnknownData01 = 0x0318;
		}

		namespace PrefabSequence {
			constexpr uintptr_t OwnerPrefab = 0x01D0;
		}

		namespace PrefabSequenceContainer {
			constexpr uintptr_t UnknownData00 = 0x01CC;
		}

		namespace PrimitiveComponent {
			constexpr uintptr_t Tag = 0x00A0;
			constexpr uintptr_t Bounds = 0x00A4;
			constexpr uintptr_t SceneInfo = 0x00C0;
			constexpr uintptr_t DetachFence = 0x00C8;
			constexpr uintptr_t LocalToWorldDeterminant = 0x00CC;
			constexpr uintptr_t LocalToWorld = 0x00D0;
			constexpr uintptr_t MotionBlurInfoIndex = 0x0110;
			constexpr uintptr_t DecalList = 0x0118;
			constexpr uintptr_t DecalsToReattach = 0x0128;
			constexpr uintptr_t ShadowParent = 0x0138;
			constexpr uintptr_t ReplacementPrimitive = 0x0140;
			constexpr uintptr_t FogVolumeComponent = 0x0148;
			constexpr uintptr_t OverrideLightComponent = 0x0150;
			constexpr uintptr_t LightEnvironment = 0x0158;
			constexpr uintptr_t PreviousLightEnvironment = 0x0160;
			constexpr uintptr_t MinDrawDistance = 0x0168;
			constexpr uintptr_t MassiveLODDistance = 0x016C;
			constexpr uintptr_t MaxDrawDistance = 0x0170;
			constexpr uintptr_t CachedMaxDrawDistance = 0x0174;
			constexpr uintptr_t MotionBlurInstanceScale = 0x0178;
			constexpr uintptr_t CullDistance = 0x017C;
			constexpr uintptr_t CachedCullDistance = 0x0180;
			constexpr uintptr_t DepthPriorityGroup = 0x0184;
			constexpr uintptr_t ViewOwnerDepthPriorityGroup = 0x0185;
			constexpr uintptr_t DetailMode = 0x0186;
			constexpr uintptr_t RBChannel = 0x0187;
			constexpr uintptr_t RBDominanceGroup = 0x0188;
			constexpr uintptr_t PreviewEnvironmentShadowing = 0x0189;
			constexpr uintptr_t Bitfields_0x018C = 0x018C;  // Multiple: bUseViewOwnerDepthPriorityGroup, bOnlyBlockActorMovement, bAllowCullDistanceVolume, HiddenGame, HiddenEditor, bOwnerNoSee, bOnlyOwnerSee, bIgnoreOwnerHidden, bUseAsOccluder, bAllowApproximateOcclusion, bFirstFrameOcclusion, bIgnoreNearPlaneIntersection, bSelectable, bForceMipStreaming, bAcceptsStaticDecals, bAcceptsDynamicDecals, bIsRefreshingDecals, bAllowDecalAutomaticReAttach, bUsePerInstanceHitProxies, CastShadow, bForceDirectLightMap, bCastDynamicShadow, bCastStaticShadow, bSelfShadowOnly, bNoModSelfShadow, bAcceptsDynamicDominantLightShadows, bCastHiddenShadow, bCastShadowAsTwoSided, bAcceptsLights, bAcceptsDynamicLights, bUseOnePassLightingOnTranslucency, bUsePrecomputedShadows
			constexpr uintptr_t Bitfields_0x0190 = 0x0190;  // Multiple: bHasExplicitShadowParent, bAllowAmbientOcclusion, CollideActors, AlwaysCheckCollision, BlockActors, BlockZeroExtent, BlockNonZeroExtent, CanBlockCamera, BlockRigidBody, bBlockFootPlacement, bDisableAllRigidBody, bSkipRBGeomCreation, bNotifyRigidBodyCollision, bFluidDrain, bFluidTwoWay, bIgnoreRadialImpulse, bIgnoreRadialForce, bIgnoreForceField, bUseCompartment, AlwaysLoadOnClient, AlwaysLoadOnServer, bIgnoreHiddenActorsMembership, AbsoluteTranslation, AbsoluteRotation, AbsoluteScale, bAllowShadowFade, bSupportedOnMobile, bWasSNFiltered
			constexpr uintptr_t OctreeNodes = 0x0198;
			constexpr uintptr_t AlwaysShowInSelectedPlatforms = 0x01A8;
			constexpr uintptr_t TranslucencySortPriority = 0x01B8;
			constexpr uintptr_t VisibilityId = 0x01BC;
			constexpr uintptr_t LightingChannels = 0x01C0;
			constexpr uintptr_t bHideInLowEffectsIntensity = 0x01C4;
			constexpr uintptr_t RBCollideWithChannels = 0x01C8;
			constexpr uintptr_t PhysMaterialOverride = 0x01D0;
			constexpr uintptr_t BodyInstance = 0x01D8;
			constexpr uintptr_t CachedParentToWorld = 0x01E0;
			constexpr uintptr_t Translation = 0x0220;
			constexpr uintptr_t Rotation = 0x022C;
			constexpr uintptr_t Scale = 0x0238;
			constexpr uintptr_t Scale3D = 0x023C;
			constexpr uintptr_t BoundsScale = 0x0248;
			constexpr uintptr_t LastSubmitTime = 0x024C;
			constexpr uintptr_t LastRenderTime = 0x0250;
			constexpr uintptr_t ScriptRigidBodyCollisionThreshold = 0x0254;
		}

		namespace PrimitiveComponentFactory {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: CollideActors, BlockActors, BlockZeroExtent, BlockNonZeroExtent, BlockRigidBody, HiddenGame, HiddenEditor, CastShadow
		}

		namespace ProcBuilding {
			constexpr uintptr_t Ruleset = 0x02A8;
			constexpr uintptr_t BuildingMeshCompInfos = 0x02B0;
			constexpr uintptr_t BuildingFracMeshCompInfos = 0x02C0;
			constexpr uintptr_t SimpleMeshComp = 0x02D0;
			constexpr uintptr_t Bitfields_0x02D8 = 0x02D8;  // Multiple: bGenerateRoofMesh, bGenerateFloorMesh, bApplyRulesToRoof, bApplyRulesToFloor, bSplitWallsAtRoofLevels, bSplitWallsAtWallEdges, bQuickEdited, bBuildingBrushCollision, bDebugDrawEdgeInfo, bDebugDrawScopes
			constexpr uintptr_t LODMeshComps = 0x02E0;
			constexpr uintptr_t LODMeshUVInfos = 0x02F0;
			constexpr uintptr_t TopLevelScopes = 0x0300;
			constexpr uintptr_t NumMeshedTopLevelScopes = 0x0310;
			constexpr uintptr_t TopLevelScopeUVInfos = 0x0318;
			constexpr uintptr_t TopLevelScopeInfos = 0x0328;
			constexpr uintptr_t EdgeInfos = 0x0338;
			constexpr uintptr_t MaxFacadeZ = 0x0348;
			constexpr uintptr_t MinFacadeZ = 0x034C;
			constexpr uintptr_t OverlappingBuildings = 0x0350;
			constexpr uintptr_t SimpleMeshMassiveLODDistance = 0x0360;
			constexpr uintptr_t RenderToTexturePullBackAmount = 0x0364;
			constexpr uintptr_t RoofLightmapRes = 0x0368;
			constexpr uintptr_t NonRectWallLightmapRes = 0x036C;
			constexpr uintptr_t LODRenderToTextureScale = 0x0370;
			constexpr uintptr_t ParamSwatchName = 0x0374;
			constexpr uintptr_t BuildingMaterialParams = 0x0380;
			constexpr uintptr_t BuildingMatParamMICs = 0x0390;
			constexpr uintptr_t LowLODPersistentActor = 0x03A0;
			constexpr uintptr_t CurrentSimpleMeshComp = 0x03A8;
			constexpr uintptr_t CurrentSimpleMeshActor = 0x03B0;
			constexpr uintptr_t AttachedBuildings = 0x03B8;
			constexpr uintptr_t BuildingInstanceVersion = 0x03C8;
		}

		namespace ProcBuildingRuleset {
			constexpr uintptr_t RootRule = 0x0060;
			constexpr uintptr_t Bitfields_0x0068 = 0x0068;  // Multiple: bBeingEdited, bEnableInteriorTexture, bLODOnlyRoof, bPickRandomSwatch
			constexpr uintptr_t DefaultRoofMaterial = 0x0070;
			constexpr uintptr_t DefaultFloorMaterial = 0x0078;
			constexpr uintptr_t DefaultNonRectWallMaterial = 0x0080;
			constexpr uintptr_t RoofZOffset = 0x0088;
			constexpr uintptr_t NotRoofZOffset = 0x008C;
			constexpr uintptr_t FloorZOffset = 0x0090;
			constexpr uintptr_t NotFloorZOffset = 0x0094;
			constexpr uintptr_t RoofPolyInset = 0x0098;
			constexpr uintptr_t FloorPolyInset = 0x009C;
			constexpr uintptr_t BuildingLODSpecular = 0x00A0;
			constexpr uintptr_t RoofEdgeScopeRaise = 0x00A4;
			constexpr uintptr_t LODCubemap = 0x00A8;
			constexpr uintptr_t InteriorTexture = 0x00B0;
			constexpr uintptr_t Variations = 0x00B8;
			constexpr uintptr_t ParamSwatches = 0x00C8;
			constexpr uintptr_t Comments = 0x00D8;
		}

		namespace ProcessReplayCommandlet {
			constexpr uintptr_t UnknownData00 = 0x00B4;
		}

		namespace Pylon {
			constexpr uintptr_t VfTable_IEditorLinkSelectionInterface = 0x0388;
			constexpr uintptr_t VfTable_IInterface_NavigationHandle = 0x0390;
			constexpr uintptr_t NavMeshPtr = 0x0398;
			constexpr uintptr_t ObstacleMesh = 0x03A0;
			constexpr uintptr_t DynamicObstacleMesh = 0x03A8;
			constexpr uintptr_t WorkingSetPtr = 0x03B0;
			constexpr uintptr_t PathObjectsThatAffectThisPylon = 0x03B8;
			constexpr uintptr_t NextPassSeedList = 0x03C0;
			constexpr uintptr_t OctreeId = 0x03D0;
			constexpr uintptr_t OctreeIWasAddedTo = 0x03E0;
			constexpr uintptr_t NextPylon = 0x03E8;
			constexpr uintptr_t ExpansionVolumes = 0x03F0;
			constexpr uintptr_t ExpansionRadius = 0x0400;
			constexpr uintptr_t MaxExpansionRadius = 0x0404;
			constexpr uintptr_t PylonRadiusPreview = 0x0408;
			constexpr uintptr_t Bitfields_0x0410 = 0x0410;  // Multiple: bImportedMesh, bUseExpansionSphereOverride, bNeedsCostCheck, bPylonInHighLevelPath, bUseRecast, bAllowRecastGenerator, bDrawEdgePolys, bDrawPolyBounds, bRenderInShowPaths, bDrawWalkableSurface, bDrawObstacleSurface, bSolidObstaclesInGame, bBuildThisPylon, bDisabled, bForceObstacleMeshCollision
			constexpr uintptr_t ExpansionSphereCenter = 0x0414;
			constexpr uintptr_t RenderingComp = 0x0420;
			constexpr uintptr_t BrokenSprite = 0x0428;
			constexpr uintptr_t ImposterPylons = 0x0430;
			constexpr uintptr_t OnBuild_DisableCollisionForThese = 0x0440;
			constexpr uintptr_t OnBuild_EnableCollisionForThese = 0x0450;
			constexpr uintptr_t MaxPolyHeight_Optional = 0x0460;
			constexpr uintptr_t NavMeshGenerator = 0x0464;
			constexpr uintptr_t VoxelFilterBounds = 0x0468;
			constexpr uintptr_t VoxelFilterTM = 0x0478;
			constexpr uintptr_t DebugEdgeCount = 0x0488;
			constexpr uintptr_t DebugPathExtent = 0x048C;
			constexpr uintptr_t DebugPathStartLocation = 0x0498;
		}

		namespace PylonSeed {
			constexpr uintptr_t VfTable_IInterface_NavMeshPathObject = 0x0268;
		}

		namespace RB_BSJointSetup {
			constexpr uintptr_t UnknownData00 = 0x0124;
		}

		namespace RB_BodyInstance {
			constexpr uintptr_t OwnerComponent = 0x0060;
			constexpr uintptr_t BodyIndex = 0x0068;
			constexpr uintptr_t Velocity = 0x006C;
			constexpr uintptr_t PreviousVelocity = 0x0078;
			constexpr uintptr_t SceneIndex = 0x0084;
			constexpr uintptr_t BodyData = 0x0088;
			constexpr uintptr_t BulletBodys = 0x0090;
			constexpr uintptr_t BoneSpring = 0x00A0;
			constexpr uintptr_t BoneSpringKinActor = 0x00A8;
			constexpr uintptr_t Bitfields_0x00B0 = 0x00B0;  // Multiple: bEnableBoneSpringLinear, bEnableBoneSpringAngular, bDisableOnOverextension, bNotifyOwnerOnOverextension, bTeleportOnOverextension, bUseKinActorForBoneSpring, bMakeSpringToBaseCollisionComponent, bOnlyCollideWithPawns, bEnableCollisionResponse, bPushBody, bForceUnfixed, bInstanceAlwaysFullAnimWeight
			constexpr uintptr_t BoneLinearSpring = 0x00B4;
			constexpr uintptr_t BoneLinearDamping = 0x00B8;
			constexpr uintptr_t BoneAngularSpring = 0x00BC;
			constexpr uintptr_t BoneAngularDamping = 0x00C0;
			constexpr uintptr_t OverextensionThreshold = 0x00C4;
			constexpr uintptr_t CustomGravityFactor = 0x00C8;
			constexpr uintptr_t LastEffectPlayedTime = 0x00CC;
			constexpr uintptr_t PhysMaterialOverride = 0x00D0;
			constexpr uintptr_t ContactReportForceThreshold = 0x00D8;
			constexpr uintptr_t InstanceMassScale = 0x00DC;
			constexpr uintptr_t InstanceDampingScale = 0x00E0;
		}

		namespace RB_BodySetup {
			constexpr uintptr_t SleepFamily = 0x00C0;
			constexpr uintptr_t BoneName = 0x00C4;
			constexpr uintptr_t Bitfields_0x00CC = 0x00CC;  // Multiple: bFixed, bNoCollision, bBlockZeroExtent, bBlockNonZeroExtent, bEnableContinuousCollisionDetection, bAlwaysFullAnimWeight, bConsiderForBounds
			constexpr uintptr_t PhysMaterial = 0x00D0;
			constexpr uintptr_t MassScale = 0x00D8;
			constexpr uintptr_t CollisionGeom = 0x00E0;
			constexpr uintptr_t CollisionGeomScale3D = 0x00F0;
			constexpr uintptr_t PreCachedPhysScale = 0x0100;
			constexpr uintptr_t PreCachedPhysData = 0x0110;
			constexpr uintptr_t PreCachedPhysDataVersion = 0x0120;
		}

		namespace RB_ConstraintActor {
			constexpr uintptr_t ConstraintActor1 = 0x0268;
			constexpr uintptr_t ConstraintActor2 = 0x0270;
			constexpr uintptr_t ConstraintSetup = 0x0278;
			constexpr uintptr_t ConstraintInstance = 0x0280;
			constexpr uintptr_t Bitfields_0x0288 = 0x0288;  // Multiple: bDisableCollision, bUpdateActor1RefFrame, bUpdateActor2RefFrame
			constexpr uintptr_t PulleyPivotActor1 = 0x0290;
			constexpr uintptr_t PulleyPivotActor2 = 0x0298;
		}

		namespace RB_ConstraintDrawComponent {
			constexpr uintptr_t LimitMaterial = 0x0258;
		}

		namespace RB_ConstraintInstance {
			constexpr uintptr_t Owner = 0x0060;
			constexpr uintptr_t OwnerComponent = 0x0068;
			constexpr uintptr_t ConstraintIndex = 0x0070;
			constexpr uintptr_t SceneIndex = 0x0074;
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bInHardware, bLinearXPositionDrive, bLinearXVelocityDrive, bLinearYPositionDrive, bLinearYVelocityDrive, bLinearZPositionDrive, bLinearZVelocityDrive, bSwingPositionDrive, bSwingVelocityDrive, bTwistPositionDrive, bTwistVelocityDrive, bAngularSlerpDrive, bTerminated
			constexpr uintptr_t ConstraintData = 0x0080;
			constexpr uintptr_t LinearPositionTarget = 0x0088;
			constexpr uintptr_t LinearVelocityTarget = 0x0094;
			constexpr uintptr_t LinearDriveSpring = 0x00A0;
			constexpr uintptr_t LinearDriveDamping = 0x00A4;
			constexpr uintptr_t LinearDriveForceLimit = 0x00A8;
			constexpr uintptr_t AngularPositionTarget = 0x00B0;
			constexpr uintptr_t AngularVelocityTarget = 0x00C0;
			constexpr uintptr_t AngularDriveSpring = 0x00CC;
			constexpr uintptr_t AngularDriveDamping = 0x00D0;
			constexpr uintptr_t AngularDriveForceLimit = 0x00D4;
			constexpr uintptr_t DummyKinActor = 0x00D8;
		}

		namespace RB_ConstraintSetup {
			constexpr uintptr_t JointName = 0x0060;
			constexpr uintptr_t ConstraintBone1 = 0x0068;
			constexpr uintptr_t ConstraintBone2 = 0x0070;
			constexpr uintptr_t Pos1 = 0x0078;
			constexpr uintptr_t PriAxis1 = 0x0084;
			constexpr uintptr_t SecAxis1 = 0x0090;
			constexpr uintptr_t Pos2 = 0x009C;
			constexpr uintptr_t PriAxis2 = 0x00A8;
			constexpr uintptr_t SecAxis2 = 0x00B4;
			constexpr uintptr_t PulleyPivot1 = 0x00C0;
			constexpr uintptr_t PulleyPivot2 = 0x00CC;
			constexpr uintptr_t Bitfields_0x00D8 = 0x00D8;  // Multiple: bEnableProjection, bLinearLimitSoft, bLinearBreakable, bSwingLimited, bTwistLimited, bSwingLimitSoft, bTwistLimitSoft, bAngularBreakable, bIsPulley, bMaintainMinDistance
			constexpr uintptr_t LinearXSetup = 0x00DC;
			constexpr uintptr_t LinearYSetup = 0x00E4;
			constexpr uintptr_t LinearZSetup = 0x00EC;
			constexpr uintptr_t LinearLimitStiffness = 0x00F4;
			constexpr uintptr_t LinearLimitDamping = 0x00F8;
			constexpr uintptr_t LinearBreakThreshold = 0x00FC;
			constexpr uintptr_t Swing1LimitAngle = 0x0100;
			constexpr uintptr_t Swing2LimitAngle = 0x0104;
			constexpr uintptr_t TwistLimitAngle = 0x0108;
			constexpr uintptr_t SwingLimitStiffness = 0x010C;
			constexpr uintptr_t SwingLimitDamping = 0x0110;
			constexpr uintptr_t TwistLimitStiffness = 0x0114;
			constexpr uintptr_t TwistLimitDamping = 0x0118;
			constexpr uintptr_t AngularBreakThreshold = 0x011C;
			constexpr uintptr_t PulleyRatio = 0x0120;
		}

		namespace RB_CylindricalForceActor {
			constexpr uintptr_t RenderComponent = 0x0268;
			constexpr uintptr_t RadialStrength = 0x0270;
			constexpr uintptr_t RotationalStrength = 0x0274;
			constexpr uintptr_t LiftStrength = 0x0278;
			constexpr uintptr_t LiftFalloffHeight = 0x027C;
			constexpr uintptr_t EscapeVelocity = 0x0280;
			constexpr uintptr_t ForceRadius = 0x0284;
			constexpr uintptr_t ForceTopRadius = 0x0288;
			constexpr uintptr_t ForceHeight = 0x028C;
			constexpr uintptr_t HeightOffset = 0x0290;
			constexpr uintptr_t Bitfields_0x0294 = 0x0294;  // Multiple: bForceActive, bForceApplyToCloth, bForceApplyToFluid, bForceApplyToRigidBodies, bForceApplyToProjectiles
			constexpr uintptr_t CollideWithChannels = 0x0298;
		}

		namespace RB_DistanceJointSetup {
			constexpr uintptr_t UnknownData00 = 0x0124;
		}

		namespace RB_ForceFieldExcludeVolume {
			constexpr uintptr_t ForceFieldChannel = 0x02A8;
			constexpr uintptr_t SceneIndex = 0x02AC;
		}

		namespace RB_Handle {
			constexpr uintptr_t GrabbedComponent = 0x00A0;
			constexpr uintptr_t GrabbedBoneName = 0x00A8;
			constexpr uintptr_t SceneIndex = 0x00B0;
			constexpr uintptr_t Bitfields_0x00B4 = 0x00B4;  // Multiple: bInHardware, bRotationConstrained, bInterpolating
			constexpr uintptr_t HandleData = 0x00B8;
			constexpr uintptr_t KinActorData = 0x00C0;
			constexpr uintptr_t LinearDamping = 0x00C8;
			constexpr uintptr_t LinearStiffness = 0x00CC;
			constexpr uintptr_t LinearStiffnessScale3D = 0x00D0;
			constexpr uintptr_t LinearDampingScale3D = 0x00DC;
			constexpr uintptr_t AngularDamping = 0x00E8;
			constexpr uintptr_t AngularStiffness = 0x00EC;
			constexpr uintptr_t Destination = 0x00F0;
			constexpr uintptr_t StepSize = 0x00FC;
			constexpr uintptr_t Location = 0x0108;
		}

		namespace RB_HingeSetup {
			constexpr uintptr_t UnknownData00 = 0x0124;
		}

		namespace RB_LineImpulseActor {
			constexpr uintptr_t ImpulseStrength = 0x0268;
			constexpr uintptr_t ImpulseRange = 0x026C;
			constexpr uintptr_t Bitfields_0x0270 = 0x0270;  // Multiple: bVelChange, bStopAtFirstHit, bCauseFracture
			constexpr uintptr_t Arrow = 0x0278;
			constexpr uintptr_t ImpulseCount = 0x0280;
		}

		namespace RB_PrismaticSetup {
			constexpr uintptr_t UnknownData00 = 0x0124;
		}

		namespace RB_PulleyJointSetup {
			constexpr uintptr_t UnknownData00 = 0x0124;
		}

		namespace RB_RadialForceActor {
			constexpr uintptr_t RenderComponent = 0x0268;
			constexpr uintptr_t ForceStrength = 0x0270;
			constexpr uintptr_t ForceRadius = 0x0274;
			constexpr uintptr_t SwirlStrength = 0x0278;
			constexpr uintptr_t SpinTorque = 0x027C;
			constexpr uintptr_t ForceFalloff = 0x0280;
			constexpr uintptr_t RadialForceMode = 0x0281;
			constexpr uintptr_t Bitfields_0x0284 = 0x0284;  // Multiple: bForceActive, bForceApplyToCloth, bForceApplyToFluid, bForceApplyToRigidBodies, bForceApplyToProjectiles
			constexpr uintptr_t CollideWithChannels = 0x0288;
		}

		namespace RB_RadialImpulseActor {
			constexpr uintptr_t RenderComponent = 0x0268;
			constexpr uintptr_t ImpulseComponent = 0x0270;
			constexpr uintptr_t ImpulseCount = 0x0278;
		}

		namespace RB_RadialImpulseComponent {
			constexpr uintptr_t ImpulseFalloff = 0x0258;
			constexpr uintptr_t ImpulseStrength = 0x025C;
			constexpr uintptr_t ImpulseRadius = 0x0260;
			constexpr uintptr_t Bitfields_0x0264 = 0x0264;  // Multiple: bVelChange, bCauseFracture
			constexpr uintptr_t PreviewSphere = 0x0268;
		}

		namespace RB_SkelJointSetup {
			constexpr uintptr_t UnknownData00 = 0x0124;
		}

		namespace RB_Spring {
			constexpr uintptr_t Component1 = 0x00A0;
			constexpr uintptr_t BoneName1 = 0x00A8;
			constexpr uintptr_t Component2 = 0x00B0;
			constexpr uintptr_t BoneName2 = 0x00B8;
			constexpr uintptr_t SceneIndex = 0x00C0;
			constexpr uintptr_t Bitfields_0x00C4 = 0x00C4;  // Multiple: bInHardware, bEnableForceMassRatio
			constexpr uintptr_t SpringData = 0x00C8;
			constexpr uintptr_t TimeSinceActivation = 0x00D0;
			constexpr uintptr_t MinBodyMass = 0x00D4;
			constexpr uintptr_t SpringSaturateDist = 0x00D8;
			constexpr uintptr_t SpringMaxForce = 0x00DC;
			constexpr uintptr_t MaxForceMassRatio = 0x00E0;
			constexpr uintptr_t SpringMaxForceTimeScale = 0x00E8;
			constexpr uintptr_t DampSaturateVel = 0x0100;
			constexpr uintptr_t DampMaxForce = 0x0104;
		}

		namespace RB_StayUprightSetup {
			constexpr uintptr_t UnknownData00 = 0x0124;
		}

		namespace RB_Thruster {
			constexpr uintptr_t bThrustEnabled = 0x0268;
			constexpr uintptr_t ThrustStrength = 0x026C;
		}

		namespace RadialBlurActor {
			constexpr uintptr_t RadialBlur = 0x0268;
		}

		namespace RadialBlurComponent {
			constexpr uintptr_t Material = 0x00A0;
			constexpr uintptr_t DepthPriorityGroup = 0x00A8;
			constexpr uintptr_t BlurScale = 0x00AC;
			constexpr uintptr_t BlurFalloffExponent = 0x00B0;
			constexpr uintptr_t BlurOpacity = 0x00B4;
			constexpr uintptr_t MaxCullDistance = 0x00B8;
			constexpr uintptr_t DistanceFalloffExponent = 0x00BC;
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: bRenderAsVelocity, bEnabled
			constexpr uintptr_t UnknownData00 = 0x00C4;
			constexpr uintptr_t LocalToWorld = 0x00D0;
		}

		namespace ReachSpec {
			constexpr uintptr_t NavOctreeObject = 0x0060;
			constexpr uintptr_t Distance = 0x0068;
			constexpr uintptr_t Direction = 0x006C;
			constexpr uintptr_t Start = 0x0078;
			constexpr uintptr_t End = 0x0080;
			constexpr uintptr_t CollisionRadius = 0x0098;
			constexpr uintptr_t CollisionHeight = 0x009C;
			constexpr uintptr_t reachFlags = 0x00A0;
			constexpr uintptr_t MaxLandingVelocity = 0x00A4;
			constexpr uintptr_t bPruned = 0x00A8;
			constexpr uintptr_t PathColorIndex = 0x00A9;
			constexpr uintptr_t Bitfields_0x00AC = 0x00AC;  // Multiple: bAddToNavigationOctree, bCanCutCorners, bCheckForObstructions, bSkipPrune, bDisabled
			constexpr uintptr_t PruneSpecList = 0x00B0;
			constexpr uintptr_t BlockedBy = 0x00C0;
		}

		namespace ReplicatedActor_ORS {
			constexpr uintptr_t ReplicatedOwner = 0x0268;
		}

		namespace ReverbVolume {
			constexpr uintptr_t Priority = 0x02A8;
			constexpr uintptr_t bEnabled = 0x02AC;
			constexpr uintptr_t Settings = 0x02B0;
			constexpr uintptr_t AmbientZoneSettings = 0x02C0;
			constexpr uintptr_t NextLowerPriorityVolume = 0x02E8;
		}

		namespace Route {
			constexpr uintptr_t VfTable_IEditorLinkSelectionInterface = 0x0268;
			constexpr uintptr_t RouteType = 0x0270;
			constexpr uintptr_t RouteList = 0x0278;
			constexpr uintptr_t FudgeFactor = 0x0288;
			constexpr uintptr_t RouteIndexOffset = 0x028C;
		}

		namespace SaveGameSummary {
			constexpr uintptr_t BaseLevel = 0x0060;
			constexpr uintptr_t Description = 0x0068;
		}

		namespace SavedMove {
			constexpr uintptr_t NextMove = 0x0060;
			constexpr uintptr_t TimeStamp = 0x0068;
			constexpr uintptr_t delta = 0x006C;
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bRun, bDuck, bPressedJump, bDoubleJump, bPreciseDestination, bForceRMVelocity, bForceMaxAccel, bRootMotionFromInterpCurve
			constexpr uintptr_t DoubleClickMove = 0x0074;
			constexpr uintptr_t SavedPhysics = 0x0075;
			constexpr uintptr_t RootMotionMode = 0x0076;
			constexpr uintptr_t StartLocation = 0x0078;
			constexpr uintptr_t StartRelativeLocation = 0x0084;
			constexpr uintptr_t StartVelocity = 0x0090;
			constexpr uintptr_t StartFloor = 0x009C;
			constexpr uintptr_t SavedLocation = 0x00A8;
			constexpr uintptr_t SavedVelocity = 0x00B4;
			constexpr uintptr_t SavedRelativeLocation = 0x00C0;
			constexpr uintptr_t RMVelocity = 0x00CC;
			constexpr uintptr_t Acceleration = 0x00D8;
			constexpr uintptr_t Rotation = 0x00E4;
			constexpr uintptr_t StartBase = 0x00F0;
			constexpr uintptr_t EndBase = 0x00F8;
			constexpr uintptr_t CustomTimeDilation = 0x0100;
			constexpr uintptr_t AccelDotThreshold = 0x0104;
			constexpr uintptr_t RootMotionInterpCurrentTime = 0x0108;
			constexpr uintptr_t RootMotionInterpCurveLastValue = 0x010C;
		}

		namespace SceneCapture2DActor {
			constexpr uintptr_t DrawFrustum = 0x0270;
		}

		namespace SceneCapture2DComponent {
			constexpr uintptr_t TextureTarget = 0x0100;
			constexpr uintptr_t FieldOfView = 0x0108;
			constexpr uintptr_t NearPlane = 0x010C;
			constexpr uintptr_t FarPlane = 0x0110;
			constexpr uintptr_t bUpdateMatrices = 0x0114;
			constexpr uintptr_t UnknownData00 = 0x0118;
			constexpr uintptr_t ViewMatrix = 0x0120;
			constexpr uintptr_t ProjMatrix = 0x0160;
		}

		namespace SceneCapture2DHitMaskComponent {
			constexpr uintptr_t TextureTarget = 0x0100;
			constexpr uintptr_t SkeletalMeshComp = 0x0108;
			constexpr uintptr_t MaterialIndex = 0x0110;
			constexpr uintptr_t ForceLOD = 0x0114;
			constexpr uintptr_t HitMaskCullDistance = 0x0118;
			constexpr uintptr_t FadingStartTimeSinceHit = 0x011C;
			constexpr uintptr_t FadingPercentage = 0x0120;
			constexpr uintptr_t FadingDurationTime = 0x0124;
			constexpr uintptr_t FadingIntervalTime = 0x0128;
		}

		namespace SceneCaptureActor {
			constexpr uintptr_t SceneCapture = 0x0268;
		}

		namespace SceneCaptureComponent {
			constexpr uintptr_t MaxCaptureTime = 0x00A0;
			constexpr uintptr_t CaptureTimeRemaining = 0x00A4;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bEnabled, bEnablePostProcess, bEnableFog, bUseMainScenePostProcessSettings, bSkipUpdateIfTextureUsersOccluded, bSkipUpdateIfOwnerOccluded, bSkipRenderingDepthPrepass
			constexpr uintptr_t ClearColor = 0x00AC;
			constexpr uintptr_t ViewMode = 0x00B0;
			constexpr uintptr_t PostMethod = 0x00B1;
			constexpr uintptr_t SceneLOD = 0x00B4;
			constexpr uintptr_t CubemapDesaturationAmount = 0x00B8;
			constexpr uintptr_t CubemapSeamlessRoughness = 0x00BC;
			constexpr uintptr_t FrameRate = 0x00C0;
			constexpr uintptr_t PostProcess = 0x00C8;
			constexpr uintptr_t MaxUpdateDist = 0x00D0;
			constexpr uintptr_t MaxViewDistanceOverride = 0x00D4;
			constexpr uintptr_t MaxStreamingUpdateDist = 0x00D8;
			constexpr uintptr_t CaptureInfo = 0x00E0;
			constexpr uintptr_t ViewState = 0x00E8;
			constexpr uintptr_t PostProcessProxies = 0x00F0;
		}

		namespace SceneCaptureCubeMapActor {
			constexpr uintptr_t StaticMesh = 0x0270;
			constexpr uintptr_t CubeMaterialInst = 0x0278;
		}

		namespace SceneCaptureCubeMapComponent {
			constexpr uintptr_t TextureTarget = 0x0100;
			constexpr uintptr_t NearPlane = 0x0108;
			constexpr uintptr_t FarPlane = 0x010C;
			constexpr uintptr_t WorldLocation = 0x0110;
			constexpr uintptr_t RenderThreadCubeCustomPPContext = 0x0120;
		}

		namespace SceneCapturePortalComponent {
			constexpr uintptr_t TextureTarget = 0x0100;
			constexpr uintptr_t ScaleFOV = 0x0108;
			constexpr uintptr_t ViewDestination = 0x0110;
		}

		namespace SceneCaptureReflectActor {
			constexpr uintptr_t StaticMesh = 0x0270;
			constexpr uintptr_t ReflectMaterialInst = 0x0278;
		}

		namespace SceneCaptureReflectComponent {
			constexpr uintptr_t TextureTarget = 0x0100;
			constexpr uintptr_t ScaleFOV = 0x0108;
		}

		namespace Scout {
			constexpr uintptr_t PathSizes = 0x0518;
			constexpr uintptr_t TestJumpZ = 0x0528;
			constexpr uintptr_t TestGroundSpeed = 0x052C;
			constexpr uintptr_t TestMaxFallSpeed = 0x0530;
			constexpr uintptr_t TestFallSpeed = 0x0534;
			constexpr uintptr_t MaxLandingVelocity = 0x0538;
			constexpr uintptr_t MinNumPlayerStarts = 0x053C;
			constexpr uintptr_t DefaultReachSpecClass = 0x0540;
			constexpr uintptr_t EdgePathColors = 0x0548;
			constexpr uintptr_t NavMeshGen_StepSize = 0x0558;
			constexpr uintptr_t NavMeshGen_EntityHalfHeight = 0x055C;
			constexpr uintptr_t NavMeshGen_StartingHeightOffset = 0x0560;
			constexpr uintptr_t NavMeshGen_MaxDropHeight = 0x0564;
			constexpr uintptr_t NavMeshGen_MaxStepHeight = 0x0568;
			constexpr uintptr_t NavMeshGen_VertZDeltaSnapThresh = 0x056C;
			constexpr uintptr_t NavMeshGen_MinPolyArea = 0x0570;
			constexpr uintptr_t NavMeshGen_BorderBackfill_CheckDist = 0x0574;
			constexpr uintptr_t NavMeshGen_MinMergeDotAreaThreshold = 0x0578;
			constexpr uintptr_t NavMeshGen_MinMergeDotSmallArea = 0x057C;
			constexpr uintptr_t NavMeshGen_MinMergeDotLargeArea = 0x0580;
			constexpr uintptr_t NavMeshGen_MaxPolyHeight = 0x0584;
			constexpr uintptr_t NavMeshGen_HeightMergeThreshold = 0x0588;
			constexpr uintptr_t NavMeshGen_EdgeMaxDelta = 0x058C;
			constexpr uintptr_t NavMeshGen_MaxGroundCheckSize = 0x0590;
			constexpr uintptr_t NavMeshGen_MinEdgeLength = 0x0594;
			constexpr uintptr_t Bitfields_0x0598 = 0x0598;  // Multiple: NavMeshGen_ExpansionDoObstacleMeshSimplification, bHightlightOneWayReachSpecs
			constexpr uintptr_t MinMantleFallDist = 0x059C;
			constexpr uintptr_t MaxMantleFallDist = 0x05A0;
			constexpr uintptr_t MinMantleLateralDist = 0x05A4;
			constexpr uintptr_t MaxMantleLateralDist = 0x05A8;
			constexpr uintptr_t MaxMantleFallTime = 0x05AC;
		}

		namespace ScriptGroup_ORS {
			constexpr uintptr_t GroupOwner = 0x0060;
		}

		namespace ScriptViewportClient {
			constexpr uintptr_t VfTable_FViewportClient = 0x0060;
		}

		namespace ScriptedTexture {
			constexpr uintptr_t Bitfields_0x0198 = 0x0198;  // Multiple: bNeedsUpdate, bSkipNextClear
		}

		namespace Selection {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace SeqAct_AIMoveToActor {
			constexpr uintptr_t Bitfields_0x0178 = 0x0178;  // Multiple: bInterruptable, bPickClosest
			constexpr uintptr_t Destination = 0x0180;
			constexpr uintptr_t MovementSpeedModifier = 0x0190;
			constexpr uintptr_t LookAt = 0x0198;
			constexpr uintptr_t LastDestinationChoice = 0x01A0;
		}

		namespace SeqAct_AccessObjectList {
			constexpr uintptr_t OutputObject = 0x0160;
			constexpr uintptr_t ObjectIndex = 0x0168;
		}

		namespace SeqAct_ActivateRemoteEvent {
			constexpr uintptr_t Instigator = 0x0160;
			constexpr uintptr_t EventName = 0x0168;
			constexpr uintptr_t bStatusIsOk = 0x0170;
		}

		namespace SeqAct_ActorFactory {
			constexpr uintptr_t Bitfields_0x0178 = 0x0178;  // Multiple: bEnabled, bIsSpawning, bCheckSpawnCollision
			constexpr uintptr_t Factory = 0x0180;
			constexpr uintptr_t PointSelection = 0x0188;
			constexpr uintptr_t SpawnPoints = 0x0190;
			constexpr uintptr_t SpawnLocations = 0x01A0;
			constexpr uintptr_t SpawnOrientations = 0x01B0;
			constexpr uintptr_t SpawnCount = 0x01C0;
			constexpr uintptr_t SpawnDelay = 0x01C4;
			constexpr uintptr_t LastSpawnIdx = 0x01C8;
			constexpr uintptr_t CurrentSpawnIdx = 0x01CC;
			constexpr uintptr_t SpawnedCount = 0x01D0;
			constexpr uintptr_t RemainingDelay = 0x01D4;
		}

		namespace SeqAct_AddFloat {
			constexpr uintptr_t ValueA = 0x0160;
			constexpr uintptr_t ValueB = 0x0164;
			constexpr uintptr_t FloatResult = 0x0168;
			constexpr uintptr_t IntResult = 0x016C;
		}

		namespace SeqAct_AddInt {
			constexpr uintptr_t ValueA = 0x0160;
			constexpr uintptr_t ValueB = 0x0164;
			constexpr uintptr_t FloatResult = 0x0168;
			constexpr uintptr_t IntResult = 0x016C;
		}

		namespace SeqAct_AddRemoveFaceFXAnimSet {
			constexpr uintptr_t FaceFXAnimSets = 0x0160;
		}

		namespace SeqAct_AndGate {
			constexpr uintptr_t bOpen = 0x0160;
			constexpr uintptr_t LinkedOutputFiredStatus = 0x0168;
			constexpr uintptr_t LinkedOutputs = 0x0178;
		}

		namespace SeqAct_ApplySoundNode {
			constexpr uintptr_t PlaySound = 0x0160;
			constexpr uintptr_t ApplyNode = 0x0168;
		}

		namespace SeqAct_AssignController {
			constexpr uintptr_t ControllerClass = 0x0160;
		}

		namespace SeqAct_AttachToActor {
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bDetach, bHardAttach, bUseRelativeOffset, bUseRelativeRotation
			constexpr uintptr_t BoneName = 0x0164;
			constexpr uintptr_t RelativeOffset = 0x016C;
			constexpr uintptr_t RelativeRotation = 0x0178;
		}

		namespace SeqAct_AttachToEvent {
			constexpr uintptr_t bPreferController = 0x0160;
		}

		namespace SeqAct_CameraFade {
			constexpr uintptr_t FadeColor = 0x0160;
			constexpr uintptr_t FadeAlpha = 0x0164;
			constexpr uintptr_t FadeOpacity = 0x016C;
			constexpr uintptr_t FadeTime = 0x0170;
			constexpr uintptr_t Bitfields_0x0174 = 0x0174;  // Multiple: bPersistFade, bFadeAudio
			constexpr uintptr_t FadeTimeRemaining = 0x0178;
			constexpr uintptr_t CachedPCs = 0x0180;
		}

		namespace SeqAct_CameraLookAt {
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bAffectCamera, bAlwaysFocus, bAdjustCamera, bTurnInPlace, bIgnoreTrace, bAffectHead, bRotatePlayerWithCamera, bToggleGodMode, bLeaveCameraRotation, bDisableInput, bUsedTimer, bCheckLineOfSight
			constexpr uintptr_t InterpSpeedRange = 0x0164;
			constexpr uintptr_t InFocusFOV = 0x016C;
			constexpr uintptr_t FocusBoneName = 0x0174;
			constexpr uintptr_t TextDisplay = 0x0180;
			constexpr uintptr_t TotalTime = 0x0190;
			constexpr uintptr_t CameraFOV = 0x0194;
			constexpr uintptr_t RemainingTime = 0x0198;
		}

		namespace SeqAct_CameraShake {
			constexpr uintptr_t Shake = 0x0160;
			constexpr uintptr_t ShakeScale = 0x0168;
			constexpr uintptr_t Bitfields_0x016C = 0x016C;  // Multiple: bDoControllerVibration, bRadialShake, bOrientTowardRadialEpicenter
			constexpr uintptr_t RadialShake_InnerRadius = 0x0170;
			constexpr uintptr_t RadialShake_OuterRadius = 0x0174;
			constexpr uintptr_t RadialShake_Falloff = 0x0178;
			constexpr uintptr_t PlaySpace = 0x017C;
			constexpr uintptr_t LocationActor = 0x0180;
		}

		namespace SeqAct_CastToFloat {
			constexpr uintptr_t Value = 0x0160;
			constexpr uintptr_t FloatResult = 0x0164;
		}

		namespace SeqAct_CastToInt {
			constexpr uintptr_t bTruncate = 0x0160;
			constexpr uintptr_t Value = 0x0164;
			constexpr uintptr_t IntResult = 0x0168;
		}

		namespace SeqAct_ChangeCollision {
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bCollideActors, bBlockActors, bIgnoreEncroachers
			constexpr uintptr_t CollisionType = 0x0164;
		}

		namespace SeqAct_ConsoleCommand {
			constexpr uintptr_t Command = 0x0160;
			constexpr uintptr_t Commands = 0x0170;
		}

		namespace SeqAct_ControlMovieTexture {
			constexpr uintptr_t MovieTexture = 0x0160;
		}

		namespace SeqAct_ConvertToString {
			constexpr uintptr_t bIncludeVarComment = 0x0160;
			constexpr uintptr_t VarSeparator = 0x0168;
			constexpr uintptr_t NumberOfInputs = 0x0178;
		}

		namespace SeqAct_Delay {
			constexpr uintptr_t Bitfields_0x0178 = 0x0178;  // Multiple: bDelayActive, bStartWillRestart
			constexpr uintptr_t DefaultDuration = 0x017C;
			constexpr uintptr_t Duration = 0x0180;
			constexpr uintptr_t LastUpdateTime = 0x0184;
			constexpr uintptr_t RemainingTime = 0x0188;
		}

		namespace SeqAct_DelaySwitch {
			constexpr uintptr_t LinkCount = 0x0178;
			constexpr uintptr_t CurrentIdx = 0x017C;
			constexpr uintptr_t SwitchDelay = 0x0180;
			constexpr uintptr_t NextLinkTime = 0x0184;
		}

		namespace SeqAct_Destroy {
			constexpr uintptr_t bDestroyBasedActors = 0x0160;
			constexpr uintptr_t IgnoreBasedClasses = 0x0168;
		}

		namespace SeqAct_DivideFloat {
			constexpr uintptr_t ValueA = 0x0160;
			constexpr uintptr_t ValueB = 0x0164;
			constexpr uintptr_t FloatResult = 0x0168;
			constexpr uintptr_t IntResult = 0x016C;
		}

		namespace SeqAct_DivideInt {
			constexpr uintptr_t ValueA = 0x0160;
			constexpr uintptr_t ValueB = 0x0164;
			constexpr uintptr_t FloatResult = 0x0168;
			constexpr uintptr_t IntResult = 0x016C;
		}

		namespace SeqAct_DrawText {
			constexpr uintptr_t DisplayTimeSeconds = 0x0160;
			constexpr uintptr_t bDisplayOnObject = 0x0164;
			constexpr uintptr_t DrawTextInfo = 0x0168;
		}

		namespace SeqAct_FeatureTest {
			constexpr uintptr_t FreezeAtParameters = 0x0188;
			constexpr uintptr_t ScreenShotDelay = 0x0198;
			constexpr uintptr_t ScreenShotName = 0x01A0;
			constexpr uintptr_t RemainingScreenShotDelay = 0x01B0;
		}

		namespace SeqAct_FinishSequence {
			constexpr uintptr_t OutputLabel = 0x0160;
		}

		namespace SeqAct_ForceFeedback {
			constexpr uintptr_t FFWaveform = 0x0160;
			constexpr uintptr_t PredefinedWaveForm = 0x0168;
		}

		namespace SeqAct_Gate {
			constexpr uintptr_t bOpen = 0x0160;
			constexpr uintptr_t AutoCloseCount = 0x0164;
			constexpr uintptr_t CurrentCloseCount = 0x0168;
		}

		namespace SeqAct_GetDistance {
			constexpr uintptr_t Distance = 0x0160;
		}

		namespace SeqAct_GetLocationAndRotation {
			constexpr uintptr_t Location = 0x0160;
			constexpr uintptr_t RotationVector = 0x016C;
			constexpr uintptr_t Rotation = 0x0178;
			constexpr uintptr_t SocketOrBoneName = 0x0184;
		}

		namespace SeqAct_GetProperty {
			constexpr uintptr_t PropertyName = 0x0160;
		}

		namespace SeqAct_GetVectorComponents {
			constexpr uintptr_t InVector = 0x0160;
			constexpr uintptr_t X = 0x016C;
			constexpr uintptr_t Y = 0x0170;
			constexpr uintptr_t Z = 0x0174;
		}

		namespace SeqAct_GetVelocity {
			constexpr uintptr_t VelocityMag = 0x0160;
			constexpr uintptr_t VelocityVect = 0x0164;
		}

		namespace SeqAct_HeadTrackingControl {
			constexpr uintptr_t TrackControllerName = 0x0160;
			constexpr uintptr_t LookAtActorRadius = 0x0170;
			constexpr uintptr_t Bitfields_0x0174 = 0x0174;  // Multiple: bDisableBeyondLimit, bLookAtPawns
			constexpr uintptr_t MaxLookAtTime = 0x0178;
			constexpr uintptr_t MinLookAtTime = 0x017C;
			constexpr uintptr_t MaxInterestTime = 0x0180;
			constexpr uintptr_t ActorClassesToLookAt = 0x0188;
			constexpr uintptr_t TargetBoneNames = 0x0198;
			constexpr uintptr_t LookAtTargets = 0x01A8;
			constexpr uintptr_t UnknownData00 = 0x01B8;
		}

		namespace SeqAct_Interp {
			constexpr uintptr_t UnknownData00 = 0x0178;
			constexpr uintptr_t UnknownData01 = 0x01C8;
			constexpr uintptr_t PlayRate = 0x0218;
			constexpr uintptr_t Position = 0x021C;
			constexpr uintptr_t ForceStartPosition = 0x0220;
			constexpr uintptr_t Bitfields_0x0224 = 0x0224;  // Multiple: bIsPlaying, bPaused, bIsBeingEdited, bLooping, bRewindOnPlay, bNoResetOnRewind, bRewindIfAlreadyPlaying, bReversePlayback, bInterpForPathBuilding, bForceStartPos, bDisableRadioFilter, bClientSideOnly, bSkipUpdateIfNotVisible, bIsSkippable, bActivateDumpMovieOnStart, bShouldShowGore
			constexpr uintptr_t LinkedCover = 0x0228;
			constexpr uintptr_t InterpData = 0x0238;
			constexpr uintptr_t GroupInst = 0x0240;
			constexpr uintptr_t ReplicatedActorClass = 0x0250;
			constexpr uintptr_t ReplicatedActor = 0x0258;
			constexpr uintptr_t PreferredSplitScreenNum = 0x0260;
			constexpr uintptr_t CameraCuts = 0x0268;
			constexpr uintptr_t TerminationTime = 0x0278;
			constexpr uintptr_t RenderingOverrides = 0x027C;
			constexpr uintptr_t ConstantCameraAnim = 0x0280;
			constexpr uintptr_t ConstantCameraAnimRate = 0x0284;
		}

		namespace SeqAct_IsInObjectList {
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bCheckForAllObjects, bObjectFound
		}

		namespace SeqAct_Latent {
			constexpr uintptr_t LatentActors = 0x0160;
			constexpr uintptr_t bAborted = 0x0170;
			constexpr uintptr_t LatentActivationTime = 0x0174;
		}

		namespace SeqAct_LevelStreaming {
			constexpr uintptr_t Level = 0x0180;
			constexpr uintptr_t LevelName = 0x0188;
			constexpr uintptr_t bStatusIsOk = 0x0190;
		}

		namespace SeqAct_LevelStreamingBase {
			constexpr uintptr_t Bitfields_0x0178 = 0x0178;  // Multiple: bMakeVisibleAfterLoad, bShouldBlockOnLoad
		}

		namespace SeqAct_LevelVisibility {
			constexpr uintptr_t Level = 0x0178;
			constexpr uintptr_t LevelName = 0x0180;
			constexpr uintptr_t bStatusIsOk = 0x0188;
		}

		namespace SeqAct_Log {
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bOutputToScreen, bIncludeObjComment
			constexpr uintptr_t TargetDuration = 0x0164;
			constexpr uintptr_t TargetOffset = 0x0168;
			constexpr uintptr_t LogMessage = 0x0178;
		}

		namespace SeqAct_MITV_Activate {
			constexpr uintptr_t DurationOfMITV = 0x0160;
		}

		namespace SeqAct_ModifyCover {
			constexpr uintptr_t Slots = 0x0160;
			constexpr uintptr_t ManualCoverType = 0x0170;
			constexpr uintptr_t bManualAdjustPlayersOnly = 0x0174;
		}

		namespace SeqAct_ModifyObjectList {
			constexpr uintptr_t ListEntriesCount = 0x0160;
		}

		namespace SeqAct_MultiLevelStreaming {
			constexpr uintptr_t Levels = 0x0180;
			constexpr uintptr_t Bitfields_0x0190 = 0x0190;  // Multiple: bUnloadAllOtherLevels, bStatusIsOk
		}

		namespace SeqAct_MultiplyFloat {
			constexpr uintptr_t ValueA = 0x0160;
			constexpr uintptr_t ValueB = 0x0164;
			constexpr uintptr_t FloatResult = 0x0168;
			constexpr uintptr_t IntResult = 0x016C;
		}

		namespace SeqAct_MultiplyInt {
			constexpr uintptr_t ValueA = 0x0160;
			constexpr uintptr_t ValueB = 0x0164;
			constexpr uintptr_t FloatResult = 0x0168;
			constexpr uintptr_t IntResult = 0x016C;
		}

		namespace SeqAct_ParticleEventGenerator {
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bEnabled, bUseEmitterLocation
			constexpr uintptr_t Instigator = 0x0168;
			constexpr uintptr_t EventNames = 0x0170;
			constexpr uintptr_t EventTime = 0x0180;
			constexpr uintptr_t EventLocation = 0x0184;
			constexpr uintptr_t EventDirection = 0x0190;
			constexpr uintptr_t EventVelocity = 0x019C;
			constexpr uintptr_t EventNormal = 0x01A8;
		}

		namespace SeqAct_PlayCameraAnim {
			constexpr uintptr_t CameraAnim = 0x0160;
			constexpr uintptr_t Bitfields_0x0168 = 0x0168;  // Multiple: bLoop, bRandomStartTime
			constexpr uintptr_t BlendInTime = 0x016C;
			constexpr uintptr_t BlendOutTime = 0x0170;
			constexpr uintptr_t Rate = 0x0174;
			constexpr uintptr_t IntensityScale = 0x0178;
			constexpr uintptr_t PlaySpace = 0x017C;
			constexpr uintptr_t UserDefinedSpaceActor = 0x0180;
		}

		namespace SeqAct_PlayFaceFXAnim {
			constexpr uintptr_t FaceFXAnimSetRef = 0x0160;
			constexpr uintptr_t FaceFXGroupName = 0x0168;
			constexpr uintptr_t FaceFXAnimName = 0x0178;
			constexpr uintptr_t SoundCueToPlay = 0x0188;
			constexpr uintptr_t AkEventToPlay = 0x0190;
		}

		namespace SeqAct_PlayMusicTrack {
			constexpr uintptr_t MusicTrack = 0x0160;
		}

		namespace SeqAct_PlaySound {
			constexpr uintptr_t PlaySound = 0x0178;
			constexpr uintptr_t ExtraDelay = 0x0180;
			constexpr uintptr_t Bitfields_0x0184 = 0x0184;  // Multiple: bDelayReached, bSuppressSubtitles, bStopped
			constexpr uintptr_t SoundDuration = 0x0188;
			constexpr uintptr_t FadeInTime = 0x018C;
			constexpr uintptr_t FadeOutTime = 0x0190;
			constexpr uintptr_t VolumeMultiplier = 0x0194;
			constexpr uintptr_t PitchMultiplier = 0x0198;
			constexpr uintptr_t BeforeEndTime = 0x019C;
		}

		namespace SeqAct_Possess {
			constexpr uintptr_t PawnToPossess = 0x0160;
			constexpr uintptr_t bKillOldPawn = 0x0168;
		}

		namespace SeqAct_PrepareMapChange {
			constexpr uintptr_t MainLevelName = 0x0178;
			constexpr uintptr_t InitiallyLoadedSecondaryLevelNames = 0x0180;
			constexpr uintptr_t Bitfields_0x0190 = 0x0190;  // Multiple: bIsHighPriority, bStatusIsOk
		}

		namespace SeqAct_RandomSwitch {
			constexpr uintptr_t AutoDisabledIndices = 0x0180;
		}

		namespace SeqAct_RangeSwitch {
			constexpr uintptr_t Ranges = 0x0160;
		}

		namespace SeqAct_SetActiveAnimChild {
			constexpr uintptr_t NodeName = 0x0160;
			constexpr uintptr_t ChildIndex = 0x0168;
			constexpr uintptr_t BlendTime = 0x016C;
		}

		namespace SeqAct_SetApexClothingParam {
			constexpr uintptr_t bEnableApexClothingSimulation = 0x0160;
		}

		namespace SeqAct_SetBool {
			constexpr uintptr_t DefaultValue = 0x0160;
		}

		namespace SeqAct_SetCameraTarget {
			constexpr uintptr_t CameraTarget = 0x0160;
			constexpr uintptr_t TransitionParams = 0x0168;
		}

		namespace SeqAct_SetDOFParams {
			constexpr uintptr_t FalloffExponent = 0x0178;
			constexpr uintptr_t BlurKernelSize = 0x017C;
			constexpr uintptr_t MaxNearBlurAmount = 0x0180;
			constexpr uintptr_t MinBlurAmount = 0x0184;
			constexpr uintptr_t MaxFarBlurAmount = 0x0188;
			constexpr uintptr_t FocusInnerRadius = 0x018C;
			constexpr uintptr_t FocusDistance = 0x0190;
			constexpr uintptr_t FocusPosition = 0x0194;
			constexpr uintptr_t InterpolateSeconds = 0x01A0;
			constexpr uintptr_t InterpolateElapsed = 0x01A4;
			constexpr uintptr_t OldFalloffExponent = 0x01A8;
			constexpr uintptr_t OldBlurKernelSize = 0x01AC;
			constexpr uintptr_t OldMaxNearBlurAmount = 0x01B0;
			constexpr uintptr_t OldMinBlurAmount = 0x01B4;
			constexpr uintptr_t OldMaxFarBlurAmount = 0x01B8;
			constexpr uintptr_t OldFocusInnerRadius = 0x01BC;
			constexpr uintptr_t OldFocusDistance = 0x01C0;
			constexpr uintptr_t OldFocusPosition = 0x01C4;
		}

		namespace SeqAct_SetFloat {
			constexpr uintptr_t Target = 0x0160;
			constexpr uintptr_t Value = 0x0168;
		}

		namespace SeqAct_SetInt {
			constexpr uintptr_t Target = 0x0160;
			constexpr uintptr_t Value = 0x0168;
		}

		namespace SeqAct_SetLocation {
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bSetLocation, bSetRotation
			constexpr uintptr_t LocationValue = 0x0164;
			constexpr uintptr_t RotationValue = 0x0170;
			constexpr uintptr_t Target = 0x0180;
		}

		namespace SeqAct_SetMatInstScalarParam {
			constexpr uintptr_t MatInst = 0x0160;
			constexpr uintptr_t ParamName = 0x0168;
			constexpr uintptr_t ScalarValue = 0x0170;
		}

		namespace SeqAct_SetMatInstTexParam {
			constexpr uintptr_t MatInst = 0x0160;
			constexpr uintptr_t NewTexture = 0x0168;
			constexpr uintptr_t ParamName = 0x0170;
		}

		namespace SeqAct_SetMatInstVectorParam {
			constexpr uintptr_t MatInst = 0x0160;
			constexpr uintptr_t ParamName = 0x0168;
			constexpr uintptr_t VectorValue = 0x0170;
		}

		namespace SeqAct_SetMaterial {
			constexpr uintptr_t NewMaterial = 0x0160;
			constexpr uintptr_t MaterialIndex = 0x0168;
		}

		namespace SeqAct_SetMesh {
			constexpr uintptr_t NewSkeletalMesh = 0x0160;
			constexpr uintptr_t NewStaticMesh = 0x0168;
			constexpr uintptr_t MeshType = 0x0170;
			constexpr uintptr_t Bitfields_0x0174 = 0x0174;  // Multiple: bIsAllowedToMove, bAllowDecalsToReattach
		}

		namespace SeqAct_SetMotionBlurParams {
			constexpr uintptr_t MotionBlurAmount = 0x0178;
			constexpr uintptr_t InterpolateSeconds = 0x017C;
			constexpr uintptr_t InterpolateElapsed = 0x0180;
			constexpr uintptr_t OldMotionBlurAmount = 0x0184;
		}

		namespace SeqAct_SetObject {
			constexpr uintptr_t DefaultValue = 0x0160;
			constexpr uintptr_t Value = 0x0168;
		}

		namespace SeqAct_SetParticleSysParam {
			constexpr uintptr_t InstanceParameters = 0x0160;
			constexpr uintptr_t Bitfields_0x0170 = 0x0170;  // Multiple: bOverrideScalar, bOverrideVector
			constexpr uintptr_t ScalarValue = 0x0174;
			constexpr uintptr_t VectorValue = 0x0178;
		}

		namespace SeqAct_SetPhysics {
			constexpr uintptr_t newPhysics = 0x0160;
		}

		namespace SeqAct_SetSkelControlTarget {
			constexpr uintptr_t SkelControlName = 0x0160;
			constexpr uintptr_t TargetActors = 0x0168;
		}

		namespace SeqAct_SetSoundMode {
			constexpr uintptr_t SoundMode = 0x0160;
			constexpr uintptr_t bTopPriority = 0x0168;
		}

		namespace SeqAct_SetString {
			constexpr uintptr_t Target = 0x0160;
			constexpr uintptr_t Value = 0x0170;
		}

		namespace SeqAct_SetVector {
			constexpr uintptr_t DefaultValue = 0x0160;
		}

		namespace SeqAct_SetVectorComponents {
			constexpr uintptr_t OutVector = 0x0160;
			constexpr uintptr_t X = 0x016C;
			constexpr uintptr_t Y = 0x0170;
			constexpr uintptr_t Z = 0x0174;
		}

		namespace SeqAct_SetVelocity {
			constexpr uintptr_t VelocityDir = 0x0160;
			constexpr uintptr_t VelocityMag = 0x016C;
			constexpr uintptr_t bVelocityRelativeToActorRotation = 0x0170;
		}

		namespace SeqAct_SetWorldAttractorParam {
			constexpr uintptr_t Attractor = 0x0160;
			constexpr uintptr_t Bitfields_0x0170 = 0x0170;  // Multiple: bEnabledField, bFalloffTypeField, bFalloffExponentField, bRangeField, bStrengthField, bEnabled
			constexpr uintptr_t FalloffType = 0x0174;
			constexpr uintptr_t FalloffExponent = 0x0178;
			constexpr uintptr_t Range = 0x01A0;
			constexpr uintptr_t Strength = 0x01C8;
		}

		namespace SeqAct_StreamInTextures {
			constexpr uintptr_t Bitfields_0x0178 = 0x0178;  // Multiple: bLocationBased, bStreamingActive, bHasTriggeredAllLoaded
			constexpr uintptr_t Seconds = 0x017C;
			constexpr uintptr_t StreamingDistanceMultiplier = 0x0180;
			constexpr uintptr_t NumWantingResourcesID = 0x0184;
			constexpr uintptr_t StopTimestamp = 0x0188;
			constexpr uintptr_t LocationActors = 0x0190;
			constexpr uintptr_t ForceMaterials = 0x01A0;
			constexpr uintptr_t CinematicTextureGroups = 0x01B0;
			constexpr uintptr_t SelectedCinematicTextureGroups = 0x01B4;
		}

		namespace SeqAct_SubtractFloat {
			constexpr uintptr_t ValueA = 0x0160;
			constexpr uintptr_t ValueB = 0x0164;
			constexpr uintptr_t FloatResult = 0x0168;
			constexpr uintptr_t IntResult = 0x016C;
		}

		namespace SeqAct_SubtractInt {
			constexpr uintptr_t ValueA = 0x0160;
			constexpr uintptr_t ValueB = 0x0164;
			constexpr uintptr_t FloatResult = 0x0168;
			constexpr uintptr_t IntResult = 0x016C;
		}

		namespace SeqAct_Switch {
			constexpr uintptr_t LinkCount = 0x0160;
			constexpr uintptr_t IncrementAmount = 0x0164;
			constexpr uintptr_t Bitfields_0x0168 = 0x0168;  // Multiple: bLooping, bAutoDisableLinks
			constexpr uintptr_t Indices = 0x0170;
		}

		namespace SeqAct_Teleport {
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bUpdateRotation, bCheckOverlap
			constexpr uintptr_t TeleportDistance = 0x0164;
			constexpr uintptr_t TeleportVolumes = 0x0168;
		}

		namespace SeqAct_Timer {
			constexpr uintptr_t ActivationTime = 0x0160;
			constexpr uintptr_t Time = 0x0164;
		}

		namespace SeqAct_ToggleCinematicMode {
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bDisableMovement, bDisableTurning, bHidePlayer, bDisableInput, bHideHUD, bDeadBodies, bDroppedPickups
		}

		namespace SeqAct_ToggleConstraintDrive {
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bEnableAngularPositionDrive, bEnableAngularVelocityDrive, bEnableLinearPositionDrive, bEnableLinearvelocityDrive
		}

		namespace SeqAct_ToggleHidden {
			constexpr uintptr_t bToggleBasedActors = 0x0160;
			constexpr uintptr_t IgnoreBasedClasses = 0x0168;
		}

		namespace SeqAct_ToggleInput {
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bToggleMovement, bToggleTurning
		}

		namespace SeqAct_Trace {
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bTraceActors, bTraceWorld
			constexpr uintptr_t TraceExtent = 0x0164;
			constexpr uintptr_t StartOffset = 0x0170;
			constexpr uintptr_t EndOffset = 0x017C;
			constexpr uintptr_t HitObject = 0x0188;
			constexpr uintptr_t Distance = 0x0190;
			constexpr uintptr_t HitLocation = 0x0194;
		}

		namespace SeqAct_WaitForLevelsVisible {
			constexpr uintptr_t LevelNames = 0x0178;
			constexpr uintptr_t bShouldBlockOnLoad = 0x0188;
		}

		namespace SeqCond_CompareBool {
			constexpr uintptr_t bResult = 0x0140;
		}

		namespace SeqCond_CompareFloat {
			constexpr uintptr_t ValueA = 0x0140;
			constexpr uintptr_t ValueB = 0x0144;
		}

		namespace SeqCond_CompareInt {
			constexpr uintptr_t ValueA = 0x0140;
			constexpr uintptr_t ValueB = 0x0144;
		}

		namespace SeqCond_Increment {
			constexpr uintptr_t IncrementAmount = 0x0140;
			constexpr uintptr_t ValueA = 0x0144;
			constexpr uintptr_t ValueB = 0x0148;
		}

		namespace SeqCond_IncrementFloat {
			constexpr uintptr_t IncrementAmount = 0x0140;
			constexpr uintptr_t ValueA = 0x0144;
			constexpr uintptr_t ValueB = 0x0148;
		}

		namespace SeqCond_IsLoggedIn {
			constexpr uintptr_t NumNeededLoggedIn = 0x0140;
		}

		namespace SeqCond_SwitchClass {
			constexpr uintptr_t ClassArray = 0x0140;
		}

		namespace SeqCond_SwitchObject {
			constexpr uintptr_t SupportedValues = 0x0140;
		}

		namespace SeqEvent_AIReachedRouteActor {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_AISeeEnemy {
			constexpr uintptr_t MaxSightDistance = 0x0180;
		}

		namespace SeqEvent_AnalogInput {
			constexpr uintptr_t bTrapInput = 0x0180;
			constexpr uintptr_t AllowedPlayerIndex = 0x0184;
			constexpr uintptr_t InputNames = 0x0188;
		}

		namespace SeqEvent_AnimNotify {
			constexpr uintptr_t NotifyName = 0x0180;
		}

		namespace SeqEvent_Console {
			constexpr uintptr_t ConsoleEventName = 0x0180;
			constexpr uintptr_t EventDesc = 0x0188;
		}

		namespace SeqEvent_ConstraintBroken {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_Death {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_Destroyed {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_HitWall {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_Input {
			constexpr uintptr_t bTrapInput = 0x0180;
			constexpr uintptr_t AllowedPlayerIndex = 0x0184;
			constexpr uintptr_t InputNames = 0x0188;
		}

		namespace SeqEvent_LOS {
			constexpr uintptr_t ScreenCenterDistance = 0x0180;
			constexpr uintptr_t TriggerDistance = 0x0184;
			constexpr uintptr_t bCheckForObstructions = 0x0188;
		}

		namespace SeqEvent_LevelBeginning {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_LevelLoaded {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_LevelStartup {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_MobileTouch {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_Mover {
			constexpr uintptr_t StayOpenTime = 0x0180;
		}

		namespace SeqEvent_ParticleEvent {
			constexpr uintptr_t EventType = 0x0180;
			constexpr uintptr_t EventPosition = 0x0184;
			constexpr uintptr_t EventEmitterTime = 0x0190;
			constexpr uintptr_t EventVelocity = 0x0194;
			constexpr uintptr_t EventParticleTime = 0x01A0;
			constexpr uintptr_t EventNormal = 0x01A4;
			constexpr uintptr_t UseRelfectedImpactVector = 0x01B0;
		}

		namespace SeqEvent_PickupStatusChange {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_PlayerSpawned {
			constexpr uintptr_t SpawnLocation = 0x0180;
			constexpr uintptr_t SpawnRotation = 0x018C;
		}

		namespace SeqEvent_RemoteEvent {
			constexpr uintptr_t EventName = 0x0180;
			constexpr uintptr_t bStatusIsOk = 0x0188;
		}

		namespace SeqEvent_RigidBodyCollision {
			constexpr uintptr_t MinCollisionVelocity = 0x0180;
		}

		namespace SeqEvent_SeeDeath {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_SequenceActivated {
			constexpr uintptr_t InputLabel = 0x0180;
		}

		namespace SeqEvent_Touch {
			constexpr uintptr_t ClassProximityTypes = 0x0180;
			constexpr uintptr_t IgnoredClassProximityTypes = 0x0190;
			constexpr uintptr_t bForceOverlapping = 0x01A0;
			constexpr uintptr_t TouchedList = 0x01A8;
		}

		namespace SeqEvent_TouchInput {
			constexpr uintptr_t bTrapInput = 0x0180;
			constexpr uintptr_t AllowedPlayerIndex = 0x0184;
			constexpr uintptr_t AllowedTouchIndex = 0x0188;
			constexpr uintptr_t AllowedTouchpadIndex = 0x018C;
		}

		namespace SeqEvent_Used {
			constexpr uintptr_t bAimToInteract = 0x0180;
			constexpr uintptr_t InteractDistance = 0x0184;
			constexpr uintptr_t InteractText = 0x0188;
			constexpr uintptr_t InteractIcon = 0x0198;
			constexpr uintptr_t ClassProximityTypes = 0x01A0;
			constexpr uintptr_t IgnoredClassProximityTypes = 0x01B0;
		}

		namespace SeqVar_Bool {
			constexpr uintptr_t bValue = 0x00E0;
		}

		namespace SeqVar_Character {
			constexpr uintptr_t PawnClass = 0x0108;
		}

		namespace SeqVar_External {
			constexpr uintptr_t ExpectedType = 0x00E0;
			constexpr uintptr_t VariableLabel = 0x00E8;
		}

		namespace SeqVar_Float {
			constexpr uintptr_t FloatValue = 0x00E0;
		}

		namespace SeqVar_Group {
			constexpr uintptr_t GroupName = 0x0108;
			constexpr uintptr_t bCachedList = 0x0110;
			constexpr uintptr_t Actors = 0x0118;
		}

		namespace SeqVar_Int {
			constexpr uintptr_t IntValue = 0x00E0;
		}

		namespace SeqVar_Named {
			constexpr uintptr_t ExpectedType = 0x00E0;
			constexpr uintptr_t FindVarName = 0x00E8;
			constexpr uintptr_t bStatusIsOk = 0x00F0;
		}

		namespace SeqVar_Object {
			constexpr uintptr_t ObjValue = 0x00E0;
			constexpr uintptr_t ActorLocation = 0x00E8;
			constexpr uintptr_t SupportedClasses = 0x00F8;
		}

		namespace SeqVar_ObjectList {
			constexpr uintptr_t ObjList = 0x0108;
		}

		namespace SeqVar_ObjectVolume {
			constexpr uintptr_t LastUpdateTime = 0x0108;
			constexpr uintptr_t ContainedObjects = 0x0110;
			constexpr uintptr_t ExcludeClassList = 0x0120;
			constexpr uintptr_t bCollidingOnly = 0x0130;
		}

		namespace SeqVar_Player {
			constexpr uintptr_t Players = 0x0108;
			constexpr uintptr_t bAllPlayers = 0x0118;
			constexpr uintptr_t PlayerIdx = 0x011C;
		}

		namespace SeqVar_RandomFloat {
			constexpr uintptr_t Min = 0x00E8;
			constexpr uintptr_t Max = 0x00EC;
		}

		namespace SeqVar_RandomInt {
			constexpr uintptr_t Min = 0x00E8;
			constexpr uintptr_t Max = 0x00EC;
		}

		namespace SeqVar_String {
			constexpr uintptr_t StrValue = 0x00E0;
		}

		namespace SeqVar_Vector {
			constexpr uintptr_t VectValue = 0x00E0;
		}

		namespace Sequence {
			constexpr uintptr_t LogFile = 0x0140;
			constexpr uintptr_t SequenceObjects = 0x0148;
			constexpr uintptr_t ActiveSequenceOps = 0x0158;
			constexpr uintptr_t NestedSequences = 0x0168;
			constexpr uintptr_t UnregisteredEvents = 0x0178;
			constexpr uintptr_t DelayedActivatedOps = 0x0188;
			constexpr uintptr_t DelayedLatentOps = 0x0198;
			constexpr uintptr_t bEnabled = 0x01A8;
			constexpr uintptr_t QueuedActivations = 0x01B0;
			constexpr uintptr_t DefaultViewX = 0x01C0;
			constexpr uintptr_t DefaultViewY = 0x01C4;
			constexpr uintptr_t DefaultViewZoom = 0x01C8;
		}

		namespace SequenceAction {
			constexpr uintptr_t HandlerName = 0x0140;
			constexpr uintptr_t bCallHandler = 0x0148;
			constexpr uintptr_t Targets = 0x0150;
		}

		namespace SequenceEvent {
			constexpr uintptr_t DuplicateEvts = 0x0140;
			constexpr uintptr_t Originator = 0x0150;
			constexpr uintptr_t Instigator = 0x0158;
			constexpr uintptr_t ActivationTime = 0x0160;
			constexpr uintptr_t TriggerCount = 0x0164;
			constexpr uintptr_t MaxTriggerCount = 0x0168;
			constexpr uintptr_t ReTriggerDelay = 0x016C;
			constexpr uintptr_t Bitfields_0x0170 = 0x0170;  // Multiple: bEnabled, bPlayerOnly, bRegistered, bClientSideOnly
			constexpr uintptr_t Priority = 0x0174;
			constexpr uintptr_t MaxWidth = 0x0178;
		}

		namespace SequenceFrame {
			constexpr uintptr_t SizeX = 0x00D8;
			constexpr uintptr_t SizeY = 0x00DC;
			constexpr uintptr_t BorderWidth = 0x00E0;
			constexpr uintptr_t Bitfields_0x00E4 = 0x00E4;  // Multiple: bDrawBox, bFilled, bTileFill
			constexpr uintptr_t BorderColor = 0x00E8;
			constexpr uintptr_t FillColor = 0x00EC;
			constexpr uintptr_t FillTexture = 0x00F0;
			constexpr uintptr_t FillMaterial = 0x00F8;
		}

		namespace SequenceObject {
			constexpr uintptr_t ObjInstanceVersion = 0x0060;
			constexpr uintptr_t ParentSequence = 0x0068;
			constexpr uintptr_t ObjPosX = 0x0070;
			constexpr uintptr_t ObjPosY = 0x0074;
			constexpr uintptr_t ObjName = 0x0078;
			constexpr uintptr_t ObjCategory = 0x0088;
			constexpr uintptr_t ObjRemoveInProject = 0x0098;
			constexpr uintptr_t ObjColor = 0x00A8;
			constexpr uintptr_t ObjComment = 0x00B0;
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: bDeletable, bDrawFirst, bDrawLast, bOutputObjCommentToScreen, bSuppressAutoComment
			constexpr uintptr_t DrawWidth = 0x00C4;
			constexpr uintptr_t DrawHeight = 0x00C8;
			constexpr uintptr_t PIESequenceObject = 0x00D0;
		}

		namespace SequenceOp {
			constexpr uintptr_t Bitfields_0x00D8 = 0x00D8;  // Multiple: bIsActivated, bIsCurrentDebuggerOp, bActive, bLatentExecution, bAutoActivateOutputLinks, bHaveMovingVarConnector, bHaveMovingInputConnector, bHaveMovingOutputConnector, bPendingVarConnectorRecalc, bPendingInputConnectorRecalc, bPendingOutputConnectorRecalc, bIsBreakpointSet, bIsHiddenBreakpointSet
			constexpr uintptr_t PIEActivationTime = 0x00DC;
			constexpr uintptr_t ActivatorSeqOp = 0x00E0;
			constexpr uintptr_t LastActivatedInputLink = 0x00E8;
			constexpr uintptr_t LastActivatedOutputLink = 0x00EC;
			constexpr uintptr_t InputLinks = 0x00F0;
			constexpr uintptr_t OutputLinks = 0x0100;
			constexpr uintptr_t VariableLinks = 0x0110;
			constexpr uintptr_t EventLinks = 0x0120;
			constexpr uintptr_t PlayerIndex = 0x0130;
			constexpr uintptr_t GamepadID = 0x0134;
			constexpr uintptr_t ActivateCount = 0x0138;
			constexpr uintptr_t SearchTag = 0x013C;
		}

		namespace SequenceVariable {
			constexpr uintptr_t VarName = 0x00D8;
		}

		namespace ServerCommandlet {
			constexpr uintptr_t UnknownData00 = 0x00B4;
		}

		namespace Settings {
			constexpr uintptr_t LocalizedSettings = 0x0060;
			constexpr uintptr_t Properties = 0x0070;
			constexpr uintptr_t LocalizedSettingsMappings = 0x0080;
			constexpr uintptr_t PropertyMappings = 0x0090;
		}

		namespace ShaderCache {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace ShadowMap1D {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace ShadowMap2D {
			constexpr uintptr_t Texture = 0x0060;
			constexpr uintptr_t CoordinateScale = 0x0068;
			constexpr uintptr_t CoordinateBias = 0x0070;
			constexpr uintptr_t LightGuid = 0x0078;
			constexpr uintptr_t bIsShadowFactorTexture = 0x0088;
			constexpr uintptr_t Component = 0x0090;
			constexpr uintptr_t InstanceIndex = 0x0098;
		}

		namespace ShadowMapTexture2D {
			constexpr uintptr_t ShadowmapFlags = 0x0280;
		}

		namespace SimpleSplineAudioComponent {
			constexpr uintptr_t bAttenuateWithLPF = 0x0320;
			constexpr uintptr_t LPFRadiusMin = 0x0324;
			constexpr uintptr_t LPFRadiusMax = 0x0328;
			constexpr uintptr_t dBAttenuationAtMax = 0x032C;
			constexpr uintptr_t FlattenAttenuationRadius = 0x0330;
			constexpr uintptr_t DistanceAlgorithm = 0x0334;
			constexpr uintptr_t RadiusMin = 0x0338;
			constexpr uintptr_t RadiusMax = 0x033C;
			constexpr uintptr_t SoundSlots = 0x0340;
			constexpr uintptr_t NotifyBufferFinishedHook = 0x0350;
		}

		namespace SimpleSplineNonLoopAudioComponent {
			constexpr uintptr_t DelayMin = 0x0358;
			constexpr uintptr_t DelayMax = 0x035C;
			constexpr uintptr_t PitchMin = 0x0360;
			constexpr uintptr_t PitchMax = 0x0364;
			constexpr uintptr_t VolumeMin = 0x0368;
			constexpr uintptr_t VolumeMax = 0x036C;
			constexpr uintptr_t CurrentSlotIndex = 0x0370;
			constexpr uintptr_t UsedVolumeModulation = 0x0374;
			constexpr uintptr_t UsedPitchModulation = 0x0378;
			constexpr uintptr_t NextSoundTime = 0x037C;
		}

		namespace SkelControlBase {
			constexpr uintptr_t ControlName = 0x0090;
			constexpr uintptr_t ControlStrength = 0x0098;
			constexpr uintptr_t BlendInTime = 0x009C;
			constexpr uintptr_t BlendOutTime = 0x00A0;
			constexpr uintptr_t BlendType = 0x00A4;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bPostPhysicsController, bSetStrengthFromAnimNode, bInitializedCachedNodeList, bControlledByAnimMetada, bInvertMetadataWeight, bPropagateSetActive, bIgnoreWhenNotRendered, bShouldTickInScript, bShouldTickOwner, bEnableEaseInOut
			constexpr uintptr_t StrengthTarget = 0x00AC;
			constexpr uintptr_t BlendTimeToGo = 0x00B0;
			constexpr uintptr_t StrengthAnimNodeNameList = 0x00B8;
			constexpr uintptr_t CachedNodeList = 0x00C8;
			constexpr uintptr_t AnimMetadataWeight = 0x00D8;
			constexpr uintptr_t AnimMetaDataUpdateTag = 0x00DC;
			constexpr uintptr_t BoneScale = 0x00E0;
			constexpr uintptr_t ControlTickTag = 0x00E4;
			constexpr uintptr_t IgnoreAtOrAboveLOD = 0x00E8;
			constexpr uintptr_t NextControl = 0x00F0;
			constexpr uintptr_t ControlPosX = 0x00F8;
			constexpr uintptr_t ControlPosY = 0x00FC;
		}

		namespace SkelControlFootPlacement {
			constexpr uintptr_t FootOffset = 0x0158;
			constexpr uintptr_t FootUpAxis = 0x015C;
			constexpr uintptr_t FootRotOffset = 0x0160;
			constexpr uintptr_t Bitfields_0x016C = 0x016C;  // Multiple: bInvertFootUpAxis, bOrientFootToGround, bOnlyEnableForUpAdjustment
			constexpr uintptr_t MaxUpAdjustment = 0x0170;
			constexpr uintptr_t MaxDownAdjustment = 0x0174;
			constexpr uintptr_t MaxFootOrientAdjust = 0x0178;
		}

		namespace SkelControlHandlebars {
			constexpr uintptr_t WheelRollAxis = 0x0130;
			constexpr uintptr_t HandlebarRotateAxis = 0x0131;
			constexpr uintptr_t WheelBoneName = 0x0134;
			constexpr uintptr_t bInvertRotation = 0x013C;
			constexpr uintptr_t SteerWheelBoneIndex = 0x0140;
		}

		namespace SkelControlLimb {
			constexpr uintptr_t EffectorLocation = 0x0100;
			constexpr uintptr_t EffectorLocationSpace = 0x010C;
			constexpr uintptr_t JointTargetLocationSpace = 0x010D;
			constexpr uintptr_t JointOffsetSpace = 0x010E;
			constexpr uintptr_t BoneAxis = 0x010F;
			constexpr uintptr_t JointAxis = 0x0110;
			constexpr uintptr_t EffectorSpaceBoneName = 0x0114;
			constexpr uintptr_t JointTargetLocation = 0x011C;
			constexpr uintptr_t JointTargetSpaceBoneName = 0x0128;
			constexpr uintptr_t JointOffset = 0x0130;
			constexpr uintptr_t JointOffsetBoneName = 0x013C;
			constexpr uintptr_t Bitfields_0x0144 = 0x0144;  // Multiple: bInvertBoneAxis, bInvertJointAxis, bRotateJoint, bMaintainEffectorRelRot, bTakeRotationFromEffectorSpace, bAllowStretching
			constexpr uintptr_t StretchLimits = 0x0148;
			constexpr uintptr_t StretchRollBoneName = 0x0150;
		}

		namespace SkelControlLookAt {
			constexpr uintptr_t TargetLocation = 0x0100;
			constexpr uintptr_t TargetLocationSpace = 0x010C;
			constexpr uintptr_t LookAtAxis = 0x010D;
			constexpr uintptr_t UpAxis = 0x010E;
			constexpr uintptr_t AllowRotationSpace = 0x010F;
			constexpr uintptr_t TargetSpaceBoneName = 0x0110;
			constexpr uintptr_t Bitfields_0x0118 = 0x0118;  // Multiple: bInvertLookAtAxis, bDefineUpAxis, bInvertUpAxis, bEnableLimit, bLimitBasedOnRefPose, bDisableBeyondLimit, bNotifyBeyondLimit, bShowLimit, bAllowRotationX, bAllowRotationY, bAllowRotationZ
			constexpr uintptr_t TargetLocationInterpSpeed = 0x011C;
			constexpr uintptr_t DesiredTargetLocation = 0x0120;
			constexpr uintptr_t ActorSpaceLookAtTarget = 0x012C;
			constexpr uintptr_t MaxAngle = 0x0138;
			constexpr uintptr_t OuterMaxAngle = 0x013C;
			constexpr uintptr_t DeadZoneAngle = 0x0140;
			constexpr uintptr_t RotationAngleRangeX = 0x0144;
			constexpr uintptr_t RotationAngleRangeY = 0x014C;
			constexpr uintptr_t RotationAngleRangeZ = 0x0154;
			constexpr uintptr_t AllowRotationOtherBoneName = 0x015C;
			constexpr uintptr_t LookAtAlpha = 0x0164;
			constexpr uintptr_t LookAtAlphaTarget = 0x0168;
			constexpr uintptr_t LookAtAlphaBlendTimeToGo = 0x016C;
			constexpr uintptr_t LimitLookDir = 0x0170;
			constexpr uintptr_t BaseLookDir = 0x017C;
			constexpr uintptr_t BaseBonePos = 0x0188;
			constexpr uintptr_t LastCalcTime = 0x0194;
			constexpr uintptr_t ControlBoneIndex = 0x0198;
		}

		namespace SkelControlSingleBone {
			constexpr uintptr_t Bitfields_0x0100 = 0x0100;  // Multiple: bApplyTranslation, bApplyRotation, bAddTranslation, bAddRotation, bRemoveMeshRotation
			constexpr uintptr_t BoneTranslation = 0x0104;
			constexpr uintptr_t BoneTranslationSpace = 0x0110;
			constexpr uintptr_t BoneRotationSpace = 0x0111;
			constexpr uintptr_t TranslationSpaceBoneName = 0x0114;
			constexpr uintptr_t BoneRotation = 0x011C;
			constexpr uintptr_t RotationSpaceBoneName = 0x0128;
		}

		namespace SkelControlSpline {
			constexpr uintptr_t SplineLength = 0x0100;
			constexpr uintptr_t SplineBoneAxis = 0x0104;
			constexpr uintptr_t BoneRotMode = 0x0105;
			constexpr uintptr_t bInvertSplineBoneAxis = 0x0108;
			constexpr uintptr_t EndSplineTension = 0x010C;
			constexpr uintptr_t StartSplineTension = 0x0110;
		}

		namespace SkelControlTrail {
			constexpr uintptr_t ChainLength = 0x0100;
			constexpr uintptr_t ChainBoneAxis = 0x0104;
			constexpr uintptr_t Bitfields_0x0108 = 0x0108;  // Multiple: bInvertChainBoneAxis, bLimitStretch, bActorSpaceFakeVel, bHadValidStrength
			constexpr uintptr_t TrailRelaxation = 0x010C;
			constexpr uintptr_t StretchLimit = 0x0110;
			constexpr uintptr_t FakeVelocity = 0x0114;
			constexpr uintptr_t ThisTimstep = 0x0120;
			constexpr uintptr_t TrailBoneLocations = 0x0128;
			constexpr uintptr_t UnknownData00 = 0x0138;
			constexpr uintptr_t OldLocalToWorld = 0x0140;
		}

		namespace SkelControlWheel {
			constexpr uintptr_t WheelDisplacement = 0x0130;
			constexpr uintptr_t WheelMaxRenderDisplacement = 0x0134;
			constexpr uintptr_t WheelRoll = 0x0138;
			constexpr uintptr_t WheelRollAxis = 0x013C;
			constexpr uintptr_t WheelSteeringAxis = 0x013D;
			constexpr uintptr_t WheelSteering = 0x0140;
			constexpr uintptr_t Bitfields_0x0144 = 0x0144;  // Multiple: bInvertWheelRoll, bInvertWheelSteering
		}

		namespace SkelControl_CCD_IK {
			constexpr uintptr_t EffectorLocation = 0x0100;
			constexpr uintptr_t EffectorLocationSpace = 0x010C;
			constexpr uintptr_t EffectorSpaceBoneName = 0x0110;
			constexpr uintptr_t EffectorTranslationFromBone = 0x0118;
			constexpr uintptr_t NumBones = 0x0124;
			constexpr uintptr_t MaxPerBoneIterations = 0x0128;
			constexpr uintptr_t IterationsCount = 0x012C;
			constexpr uintptr_t Precision = 0x0130;
			constexpr uintptr_t Bitfields_0x0134 = 0x0134;  // Multiple: bStartFromTail, bNoTurnOptimization
			constexpr uintptr_t AngleConstraint = 0x0138;
			constexpr uintptr_t MaxAngleSteps = 0x0148;
		}

		namespace SkelControl_Multiply {
			constexpr uintptr_t Multiplier = 0x0100;
		}

		namespace SkelControl_TwistBone {
			constexpr uintptr_t SourceBoneName = 0x0100;
			constexpr uintptr_t TwistAngleScale = 0x0108;
		}

		namespace SkeletalMesh {
			constexpr uintptr_t Bounds = 0x0060;
			constexpr uintptr_t Materials = 0x0080;
			constexpr uintptr_t ClothingAssets = 0x0090;
			constexpr uintptr_t ClothingLodMap = 0x00A0;
			constexpr uintptr_t Origin = 0x00B0;
			constexpr uintptr_t RotOrigin = 0x00BC;
			constexpr uintptr_t RefSkeleton = 0x00C8;
			constexpr uintptr_t SkeletalDepth = 0x00D8;
			constexpr uintptr_t UnknownData00 = 0x00E0;
			constexpr uintptr_t LODModels = 0x0130;
			constexpr uintptr_t SourceData = 0x0140;
			constexpr uintptr_t RefBasesInvMatrix = 0x0148;
			constexpr uintptr_t SkelMirrorTable = 0x0158;
			constexpr uintptr_t SkelMirrorAxis = 0x0168;
			constexpr uintptr_t SkelMirrorFlipAxis = 0x0169;
			constexpr uintptr_t Sockets = 0x0170;
			constexpr uintptr_t BoneBreakNames = 0x0180;
			constexpr uintptr_t BoneBreakOptions = 0x0190;
			constexpr uintptr_t LODInfo = 0x01A0;
			constexpr uintptr_t LODDistanceInfo = 0x01B0;
			constexpr uintptr_t OptimizationSettings = 0x01C0;
			constexpr uintptr_t PerPolyCollisionBones = 0x01D0;
			constexpr uintptr_t AddToParentPerPolyCollisionBone = 0x01E0;
			constexpr uintptr_t PerPolyBoneKDOPs = 0x01F0;
			constexpr uintptr_t Bitfields_0x0200 = 0x0200;  // Multiple: bPerPolyUseSoftWeighting, bUseSimpleLineCollision, bUseSimpleBoxCollision, bForceCPUSkinning, bUseFullPrecisionUVs, bHasBeenSimplified
			constexpr uintptr_t FaceFXAsset = 0x0208;
			constexpr uintptr_t BoundsPreviewAsset = 0x0210;
			constexpr uintptr_t PreviewMorphSets = 0x0218;
			constexpr uintptr_t LODBiasPC = 0x0228;
			constexpr uintptr_t LODBiasPS3 = 0x022C;
			constexpr uintptr_t LODBiasXbox360 = 0x0230;
			constexpr uintptr_t LODBiasPS4 = 0x0234;
			constexpr uintptr_t LODBiasNNX = 0x0238;
			constexpr uintptr_t SourceFilePath = 0x0240;
			constexpr uintptr_t SourceFileTimestamp = 0x0250;
			constexpr uintptr_t ClothMesh = 0x0260;
			constexpr uintptr_t ClothMeshScale = 0x0270;
			constexpr uintptr_t ClothToGraphicsVertMap = 0x0280;
			constexpr uintptr_t ClothMovementScale = 0x0290;
			constexpr uintptr_t ClothMovementScaleGenMode = 0x02A0;
			constexpr uintptr_t ClothToAnimMeshMaxDist = 0x02A4;
			constexpr uintptr_t bLimitClothToAnimMesh = 0x02A8;
			constexpr uintptr_t ClothWeldingMap = 0x02B0;
			constexpr uintptr_t ClothWeldingDomain = 0x02C0;
			constexpr uintptr_t ClothWeldedIndices = 0x02C8;
			constexpr uintptr_t bForceNoWelding = 0x02D8;
			constexpr uintptr_t NumFreeClothVerts = 0x02DC;
			constexpr uintptr_t ClothIndexBuffer = 0x02E0;
			constexpr uintptr_t ClothBones = 0x02F0;
			constexpr uintptr_t ClothHierarchyLevels = 0x0300;
			constexpr uintptr_t Bitfields_0x0304 = 0x0304;  // Multiple: bEnableClothBendConstraints, bEnableClothDamping, bUseClothCOMDamping
			constexpr uintptr_t ClothStretchStiffness = 0x0308;
			constexpr uintptr_t ClothBendStiffness = 0x030C;
			constexpr uintptr_t ClothDensity = 0x0310;
			constexpr uintptr_t ClothThickness = 0x0314;
			constexpr uintptr_t ClothDamping = 0x0318;
			constexpr uintptr_t ClothIterations = 0x031C;
			constexpr uintptr_t ClothHierarchicalIterations = 0x0320;
			constexpr uintptr_t ClothFriction = 0x0324;
			constexpr uintptr_t ClothRelativeGridSpacing = 0x0328;
			constexpr uintptr_t ClothPressure = 0x032C;
			constexpr uintptr_t ClothCollisionResponseCoefficient = 0x0330;
			constexpr uintptr_t ClothAttachmentResponseCoefficient = 0x0334;
			constexpr uintptr_t ClothAttachmentTearFactor = 0x0338;
			constexpr uintptr_t ClothSleepLinearVelocity = 0x033C;
			constexpr uintptr_t HardStretchLimitFactor = 0x0340;
			constexpr uintptr_t Bitfields_0x0344 = 0x0344;  // Multiple: bHardStretchLimit, bEnableClothOrthoBendConstraints, bEnableClothSelfCollision, bEnableClothPressure, bEnableClothTwoWayCollision
			constexpr uintptr_t ClothSpecialBones = 0x0348;
			constexpr uintptr_t Bitfields_0x0358 = 0x0358;  // Multiple: bEnableClothLineChecks, bClothMetal
			constexpr uintptr_t ClothMetalImpulseThreshold = 0x035C;
			constexpr uintptr_t ClothMetalPenetrationDepth = 0x0360;
			constexpr uintptr_t ClothMetalMaxDeformationDistance = 0x0364;
			constexpr uintptr_t bEnableClothTearing = 0x0368;
			constexpr uintptr_t ClothTearFactor = 0x036C;
			constexpr uintptr_t ClothTearReserve = 0x0370;
			constexpr uintptr_t bEnableValidBounds = 0x0374;
			constexpr uintptr_t ValidBoundsMin = 0x0378;
			constexpr uintptr_t ValidBoundsMax = 0x0384;
			constexpr uintptr_t ClothTornTriMap = 0x0390;
			constexpr uintptr_t SoftBodySurfaceToGraphicsVertMap = 0x03E0;
			constexpr uintptr_t SoftBodySurfaceIndices = 0x03F0;
			constexpr uintptr_t SoftBodyTetraVertsUnscaled = 0x0400;
			constexpr uintptr_t SoftBodyTetraIndices = 0x0410;
			constexpr uintptr_t SoftBodyTetraLinks = 0x0420;
			constexpr uintptr_t CachedSoftBodyMeshes = 0x0430;
			constexpr uintptr_t CachedSoftBodyMeshScales = 0x0440;
			constexpr uintptr_t SoftBodyBones = 0x0450;
			constexpr uintptr_t SoftBodySpecialBones = 0x0460;
			constexpr uintptr_t SoftBodyVolumeStiffness = 0x0470;
			constexpr uintptr_t SoftBodyStretchingStiffness = 0x0474;
			constexpr uintptr_t SoftBodyDensity = 0x0478;
			constexpr uintptr_t SoftBodyParticleRadius = 0x047C;
			constexpr uintptr_t SoftBodyDamping = 0x0480;
			constexpr uintptr_t SoftBodySolverIterations = 0x0484;
			constexpr uintptr_t SoftBodyFriction = 0x0488;
			constexpr uintptr_t SoftBodyRelativeGridSpacing = 0x048C;
			constexpr uintptr_t SoftBodySleepLinearVelocity = 0x0490;
			constexpr uintptr_t bEnableSoftBodySelfCollision = 0x0494;
			constexpr uintptr_t SoftBodyAttachmentResponse = 0x0498;
			constexpr uintptr_t SoftBodyCollisionResponse = 0x049C;
			constexpr uintptr_t SoftBodyDetailLevel = 0x04A0;
			constexpr uintptr_t SoftBodySubdivisionLevel = 0x04A4;
			constexpr uintptr_t Bitfields_0x04A8 = 0x04A8;  // Multiple: bSoftBodyIsoSurface, bEnableSoftBodyDamping, bUseSoftBodyCOMDamping
			constexpr uintptr_t SoftBodyAttachmentThreshold = 0x04AC;
			constexpr uintptr_t bEnableSoftBodyTwoWayCollision = 0x04B0;
			constexpr uintptr_t SoftBodyAttachmentTearFactor = 0x04B4;
			constexpr uintptr_t Bitfields_0x04B8 = 0x04B8;  // Multiple: bEnableSoftBodyLineChecks, bHasVertexColors
			constexpr uintptr_t GraphicsIndexIsCloth = 0x04C0;
			constexpr uintptr_t CachedStreamingTextureFactors = 0x04D0;
			constexpr uintptr_t StreamingDistanceMultiplier = 0x04E0;
			constexpr uintptr_t ReleaseResourcesFence = 0x04E4;
			constexpr uintptr_t SkelMeshRUID = 0x04E8;
			constexpr uintptr_t bUseClothingAssetMaterial = 0x04F0;
		}

		namespace SkeletalMeshActor {
			constexpr uintptr_t Bitfields_0x0268 = 0x0268;  // Multiple: bDamageAppliesImpulse, bShouldDoAnimNotifies, bForceSaveInCheckpoint, bCollideActors_OldValue, bShouldShadowParentAllAttachedActors
			constexpr uintptr_t SkeletalMeshComponent = 0x0270;
			constexpr uintptr_t LightEnvironment = 0x0278;
			constexpr uintptr_t FacialAudioComp = 0x0280;
			constexpr uintptr_t ReplicatedMesh = 0x0288;
			constexpr uintptr_t ReplicatedMaterial0 = 0x0290;
			constexpr uintptr_t ReplicatedMaterial1 = 0x0298;
			constexpr uintptr_t ControlTargets = 0x02A0;
			constexpr uintptr_t InterpGroupList = 0x02B0;
			constexpr uintptr_t SavedAnimSeqName = 0x02C0;
			constexpr uintptr_t SavedCurrentTime = 0x02C8;
		}

		namespace SkeletalMeshActorBasedOnExtremeContent {
			constexpr uintptr_t ExtremeContent = 0x02D0;
			constexpr uintptr_t NonExtremeContent = 0x02E0;
		}

		namespace SkeletalMeshActorMAT {
			constexpr uintptr_t SlotNodes = 0x02D0;
		}

		namespace SkeletalMeshActorSpawnable {
			constexpr uintptr_t UnknownData00 = 0x02CC;
		}

		namespace SkeletalMeshCinematicActor {
			constexpr uintptr_t UnknownData00 = 0x02CC;
		}

		namespace SkeletalMeshComponent {
			constexpr uintptr_t SkeletalMesh = 0x0280;
			constexpr uintptr_t AttachedToSkelComponent = 0x0288;
			constexpr uintptr_t AnimTreeTemplate = 0x0290;
			constexpr uintptr_t Animations = 0x0298;
			constexpr uintptr_t AnimTickArray = 0x02A0;
			constexpr uintptr_t AnimAlwaysTickArray = 0x02B0;
			constexpr uintptr_t AnimTickRelevancyArray = 0x02C0;
			constexpr uintptr_t AnimTickWeightsArray = 0x02D0;
			constexpr uintptr_t SkelControlTickArray = 0x02E0;
			constexpr uintptr_t PhysicsAsset = 0x02F0;
			constexpr uintptr_t PhysicsAssetInstance = 0x02F8;
			constexpr uintptr_t ApexClothing = 0x0300;
			constexpr uintptr_t PhysicsWeight = 0x0308;
			constexpr uintptr_t GlobalAnimRateScale = 0x030C;
			constexpr uintptr_t StreamingDistanceMultiplier = 0x0310;
			constexpr uintptr_t MeshObject = 0x0318;
			constexpr uintptr_t WireframeColor = 0x0320;
			constexpr uintptr_t SpaceBases = 0x0328;
			constexpr uintptr_t LocalAtoms = 0x0338;
			constexpr uintptr_t CachedLocalAtoms = 0x0348;
			constexpr uintptr_t CachedSpaceBases = 0x0358;
			constexpr uintptr_t LowUpdateFrameRate = 0x0368;
			constexpr uintptr_t RequiredBones = 0x0370;
			constexpr uintptr_t ComposeOrderedRequiredBones = 0x0380;
			constexpr uintptr_t ParentAnimComponent = 0x0390;
			constexpr uintptr_t ParentBoneMap = 0x0398;
			constexpr uintptr_t AnimSets = 0x03A8;
			constexpr uintptr_t TemporarySavedAnimSets = 0x03B8;
			constexpr uintptr_t MorphSets = 0x03C8;
			constexpr uintptr_t ActiveMorphs = 0x03D8;
			constexpr uintptr_t ActiveCurveMorphs = 0x03E8;
			constexpr uintptr_t UnknownData00 = 0x03F8;
			constexpr uintptr_t Attachments = 0x0448;
			constexpr uintptr_t SkelControlIndex = 0x0458;
			constexpr uintptr_t PostPhysSkelControlIndex = 0x0468;
			constexpr uintptr_t ForcedLodModel = 0x0478;
			constexpr uintptr_t MinLodModel = 0x047C;
			constexpr uintptr_t PredictedLODLevel = 0x0480;
			constexpr uintptr_t OldPredictedLODLevel = 0x0484;
			constexpr uintptr_t DistanceLODLevel = 0x0488;
			constexpr uintptr_t AnimationLODDistanceFactor = 0x048C;
			constexpr uintptr_t AnimationLODFrameRate = 0x0490;
			constexpr uintptr_t MaxDistanceFactor = 0x0494;
			constexpr uintptr_t ChunkIndexPreview = 0x0498;
			constexpr uintptr_t SectionIndexPreview = 0x049C;
			constexpr uintptr_t bForceWireframe = 0x04A0;
			constexpr uintptr_t bForceRefpose = 0x04A4;
			constexpr uintptr_t bOldForceRefPose = 0x04A8;
			constexpr uintptr_t bNoSkeletonUpdate = 0x04AC;
			constexpr uintptr_t bDisplayBones = 0x04B0;
			constexpr uintptr_t bShowPrePhysBones = 0x04B4;
			constexpr uintptr_t bHideSkin = 0x04B8;
			constexpr uintptr_t bForceRawOffset = 0x04BC;
			constexpr uintptr_t bIgnoreControllers = 0x04C0;
			constexpr uintptr_t bTransformFromAnimParent = 0x04C4;
			constexpr uintptr_t TickTag = 0x04C8;
			constexpr uintptr_t InitTag = 0x04CC;
			constexpr uintptr_t CachedAtomsTag = 0x04D0;
			constexpr uintptr_t bUseSingleBodyPhysics = 0x04D4;
			constexpr uintptr_t bRequiredBonesUpToDate = 0x04D8;
			constexpr uintptr_t MinDistFactorForKinematicUpdate = 0x04DC;
			constexpr uintptr_t FramesPhysicsAsleep = 0x04E0;
			constexpr uintptr_t SkipRateForTickAnimNodesAndGetBoneAtoms = 0x04E4;
			constexpr uintptr_t Bitfields_0x04E8 = 0x04E8;  // Multiple: bSkipTickAnimNodes, bSkipGetBoneAtoms, bInterpolateBoneAtoms, bHasValidBodies, bSkipAllUpdateWhenPhysicsAsleep, bComponentUseFixedSkelBounds, bUseBoundsFromParentAnimComponent, bConsiderAllBodiesForBounds, bUpdateSkelWhenNotRendered, bIgnoreControllersWhenNotRendered, bTickAnimNodesWhenNotRendered, bNotUpdatingKinematicDueToDistance, bForceDiscardRootMotion, bNotifyRootMotionProcessed, bRootMotionModeChangeNotify, bRootMotionExtractedNotify, bProcessingRootMotion, bDisableFaceFXMaterialInstanceCreation, bDisableFaceFX, bAnimTreeInitialised, bForceMeshObjectUpdate, bHasPhysicsAssetInstance, bUpdateKinematicBonesFromAnimation, bUpdateJointsFromAnimation, bSkelCompFixed, bHasHadPhysicsBlendedIn, bForceUpdateAttachmentsInTick, bEnableFullAnimWeightBodies, bPerBoneVolumeEffects, bPerBoneMotionBlur, bSyncActorLocationToRootRigidBody, bUseRawData
			constexpr uintptr_t Bitfields_0x04EC = 0x04EC;  // Multiple: bDisableWarningWhenAnimNotFound, bOverrideAttachmentOwnerVisibility, bNeedsToDeleteHitMask, bPauseAnims, bChartDistanceFactor, bEnableLineCheckWithBounds, bCanHighlightSelectedSections, bUpdateMorphWhenParentAnimComponentExists
			constexpr uintptr_t LineCheckBoundsScale = 0x04F0;
			constexpr uintptr_t Bitfields_0x04FC = 0x04FC;  // Multiple: bEnableClothSimulation, bDisableClothCollision, bClothFrozen, bAutoFreezeClothWhenNotRendered, bClothAwakeOnStartup, bClothBaseVelClamp, bClothBaseVelInterp, bAttachClothVertsToBaseBody, bIsClothOnStaticObject, bUpdatedFixedClothVerts, bClothPositionalDampening, bClothWindRelativeToOwner, bRecentlyRendered, bCacheAnimSequenceNodes, bNeedsInstanceWeightUpdate, bAlwaysUseInstanceWeights, bUpdateComposeSkeletonPasses, bValidTemporarySavedAnimSets
			constexpr uintptr_t InstanceVertexWeightBones = 0x0500;
			constexpr uintptr_t LODInfo = 0x0510;
			constexpr uintptr_t FrozenLocalToWorldPos = 0x0520;
			constexpr uintptr_t FrozenLocalToWorldRot = 0x052C;
			constexpr uintptr_t ClothExternalForce = 0x0538;
			constexpr uintptr_t ClothWind = 0x0544;
			constexpr uintptr_t ClothBaseVelClampRange = 0x0550;
			constexpr uintptr_t ClothBlendWeight = 0x055C;
			constexpr uintptr_t ClothDynamicBlendWeight = 0x0560;
			constexpr uintptr_t ClothBlendMinDistanceFactor = 0x0564;
			constexpr uintptr_t ClothBlendMaxDistanceFactor = 0x0568;
			constexpr uintptr_t MinPosDampRange = 0x056C;
			constexpr uintptr_t MaxPosDampRange = 0x0578;
			constexpr uintptr_t MinPosDampScale = 0x0584;
			constexpr uintptr_t MaxPosDampScale = 0x0590;
			constexpr uintptr_t ClothSim = 0x05A0;
			constexpr uintptr_t SceneIndex = 0x05A8;
			constexpr uintptr_t ClothMeshPosData = 0x05B0;
			constexpr uintptr_t ClothMeshNormalData = 0x05C0;
			constexpr uintptr_t ClothMeshIndexData = 0x05D0;
			constexpr uintptr_t NumClothMeshVerts = 0x05E0;
			constexpr uintptr_t NumClothMeshIndices = 0x05E4;
			constexpr uintptr_t ClothMeshParentData = 0x05E8;
			constexpr uintptr_t NumClothMeshParentIndices = 0x05F8;
			constexpr uintptr_t ClothMeshWeldedPosData = 0x0600;
			constexpr uintptr_t ClothMeshWeldedNormalData = 0x0610;
			constexpr uintptr_t ClothMeshWeldedIndexData = 0x0620;
			constexpr uintptr_t ClothDirtyBufferFlag = 0x0630;
			constexpr uintptr_t ClothRBChannel = 0x0634;
			constexpr uintptr_t ClothRBCollideWithChannels = 0x0638;
			constexpr uintptr_t ClothForceScale = 0x063C;
			constexpr uintptr_t ClothImpulseScale = 0x0640;
			constexpr uintptr_t ClothAttachmentTearFactor = 0x0644;
			constexpr uintptr_t bClothUseCompartment = 0x0648;
			constexpr uintptr_t MinDistanceForClothReset = 0x064C;
			constexpr uintptr_t LastClothLocation = 0x0650;
			constexpr uintptr_t ApexClothingRBChannel = 0x065C;
			constexpr uintptr_t ApexClothingRBCollideWithChannels = 0x0660;
			constexpr uintptr_t ApexClothingCollisionRBChannel = 0x0664;
			constexpr uintptr_t Bitfields_0x0668 = 0x0668;  // Multiple: bAutoFreezeApexClothingWhenNotRendered, bLocalSpaceWind
			constexpr uintptr_t WindVelocity = 0x066C;
			constexpr uintptr_t WindVelocityBlendTime = 0x0678;
			constexpr uintptr_t bSkipInitClothing = 0x067C;
			constexpr uintptr_t SoftBodySim = 0x0680;
			constexpr uintptr_t SoftBodySceneIndex = 0x0688;
			constexpr uintptr_t bEnableSoftBodySimulation = 0x068C;
			constexpr uintptr_t SoftBodyTetraPosData = 0x0690;
			constexpr uintptr_t SoftBodyTetraIndexData = 0x06A0;
			constexpr uintptr_t NumSoftBodyTetraVerts = 0x06B0;
			constexpr uintptr_t NumSoftBodyTetraIndices = 0x06B4;
			constexpr uintptr_t SoftBodyImpulseScale = 0x06B8;
			constexpr uintptr_t Bitfields_0x06BC = 0x06BC;  // Multiple: bSoftBodyFrozen, bAutoFreezeSoftBodyWhenNotRendered, bSoftBodyAwakeOnStartup, bSoftBodyUseCompartment
			constexpr uintptr_t SoftBodyRBChannel = 0x06C0;
			constexpr uintptr_t SoftBodyRBCollideWithChannels = 0x06C4;
			constexpr uintptr_t SoftBodyASVPlane = 0x06C8;
			constexpr uintptr_t LimitMaterial = 0x06D0;
			constexpr uintptr_t UnknownData01 = 0x06D8;
			constexpr uintptr_t RootMotionDelta = 0x06E0;
			constexpr uintptr_t RootMotionVelocity = 0x0700;
			constexpr uintptr_t RootBoneTranslation = 0x070C;
			constexpr uintptr_t RootMotionAccelScale = 0x0718;
			constexpr uintptr_t RootMotionMode = 0x0724;
			constexpr uintptr_t PreviousRMM = 0x0725;
			constexpr uintptr_t PendingRMM = 0x0726;
			constexpr uintptr_t OldPendingRMM = 0x0727;
			constexpr uintptr_t bRMMOneFrameDelay = 0x0728;
			constexpr uintptr_t RootMotionRotationMode = 0x072C;
			constexpr uintptr_t AnimRotationOnly = 0x072D;
			constexpr uintptr_t FaceFXBlendMode = 0x072E;
			constexpr uintptr_t FaceFXActorInstance = 0x0730;
			constexpr uintptr_t CachedFaceFXAudioComp = 0x0738;
			constexpr uintptr_t BoneVisibilityStates = 0x0740;
			constexpr uintptr_t CachedFaceFxAkEvent = 0x0750;
			constexpr uintptr_t UnknownData02 = 0x0758;
			constexpr uintptr_t LocalToWorldBoneAtom = 0x0760;
			constexpr uintptr_t ProgressiveDrawingFraction = 0x0780;
			constexpr uintptr_t CustomSortAlternateIndexMode = 0x0784;
			constexpr uintptr_t MorphTargetsQueried = 0x0788;
			constexpr uintptr_t bUseTickOptimization = 0x0798;
			constexpr uintptr_t TickCount = 0x079C;
			constexpr uintptr_t LastDropRate = 0x07A0;
			constexpr uintptr_t LastDropRateChange = 0x07A4;
			constexpr uintptr_t AccumulatedDroppedDeltaTime = 0x07A8;
			constexpr uintptr_t ComponentDroppedDeltaTime = 0x07AC;
		}

		namespace SkeletalMeshSocket {
			constexpr uintptr_t SocketName = 0x0060;
			constexpr uintptr_t BoneName = 0x0068;
			constexpr uintptr_t RelativeLocation = 0x0070;
			constexpr uintptr_t RelativeRotation = 0x007C;
			constexpr uintptr_t RelativeScale = 0x0088;
			constexpr uintptr_t PreviewSkelMesh = 0x0098;
			constexpr uintptr_t PreviewSkelComp = 0x00A0;
			constexpr uintptr_t PreviewStaticMesh = 0x00A8;
			constexpr uintptr_t PreviewParticleSystem = 0x00B0;
		}

		namespace SkyLight {
			constexpr uintptr_t UnknownData00 = 0x0274;
		}

		namespace SkyLightComponent {
			constexpr uintptr_t LowerBrightness = 0x01C8;
			constexpr uintptr_t LowerColor = 0x01CC;
		}

		namespace SlotToSlotReachSpec {
			constexpr uintptr_t SpecDirection = 0x00C8;
		}

		namespace SmokeTestCommandlet {
			constexpr uintptr_t UnknownData00 = 0x00B4;
		}

		namespace SoundClass {
			constexpr uintptr_t Properties = 0x0060;
			constexpr uintptr_t ChildClassNames = 0x0080;
			constexpr uintptr_t bIsChild = 0x0090;
			constexpr uintptr_t MenuID = 0x0094;
			constexpr uintptr_t UnknownData00 = 0x0098;
		}

		namespace SoundCue {
			constexpr uintptr_t SoundClass = 0x0060;
			constexpr uintptr_t SoundClassName = 0x0068;
			constexpr uintptr_t bDebug = 0x006C;
			constexpr uintptr_t FirstNode = 0x0070;
			constexpr uintptr_t UnknownData00 = 0x0078;
			constexpr uintptr_t MaxAudibleDistance = 0x00C8;
			constexpr uintptr_t VolumeMultiplier = 0x00CC;
			constexpr uintptr_t PitchMultiplier = 0x00D0;
			constexpr uintptr_t Duration = 0x00D4;
			constexpr uintptr_t FaceFXAnimSetRef = 0x00D8;
			constexpr uintptr_t FaceFXGroupName = 0x00E0;
			constexpr uintptr_t FaceFXAnimName = 0x00F0;
			constexpr uintptr_t MaxConcurrentPlayCount = 0x0100;
			constexpr uintptr_t CurrentPlayCount = 0x0104;
			constexpr uintptr_t SoundGroup = 0x0108;
		}

		namespace SoundMode {
			constexpr uintptr_t bApplyEQ = 0x0060;
			constexpr uintptr_t EQSettings = 0x0068;
			constexpr uintptr_t SoundClassEffects = 0x0090;
			constexpr uintptr_t InitialDelay = 0x00A0;
			constexpr uintptr_t FadeInTime = 0x00A4;
			constexpr uintptr_t Duration = 0x00A8;
			constexpr uintptr_t FadeOutTime = 0x00AC;
		}

		namespace SoundNode {
			constexpr uintptr_t NodeUpdateHint = 0x0060;
			constexpr uintptr_t ChildNodes = 0x0068;
		}

		namespace SoundNodeAmbient {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bAttenuate, bSpatialize, bAttenuateWithLPF
			constexpr uintptr_t dBAttenuationAtMax = 0x007C;
			constexpr uintptr_t DistanceModel = 0x0080;
			constexpr uintptr_t RadiusMin = 0x0084;
			constexpr uintptr_t RadiusMax = 0x0088;
			constexpr uintptr_t LPFRadiusMin = 0x008C;
			constexpr uintptr_t LPFRadiusMax = 0x0090;
			constexpr uintptr_t PitchMin = 0x0094;
			constexpr uintptr_t PitchMax = 0x0098;
			constexpr uintptr_t VolumeMin = 0x009C;
			constexpr uintptr_t VolumeMax = 0x00A0;
			constexpr uintptr_t SoundSlots = 0x00A8;
		}

		namespace SoundNodeAmbientNonLoop {
			constexpr uintptr_t DelayMin = 0x00B8;
			constexpr uintptr_t DelayMax = 0x00BC;
			constexpr uintptr_t DelayTime = 0x00C0;
		}

		namespace SoundNodeAttenuation {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bAttenuate, bSpatialize, bAttenuateWithLPF
			constexpr uintptr_t dBAttenuationAtMax = 0x007C;
			constexpr uintptr_t OmniRadius = 0x0080;
			constexpr uintptr_t DistanceAlgorithm = 0x0084;
			constexpr uintptr_t DistanceType = 0x0085;
			constexpr uintptr_t RadiusMin = 0x0088;
			constexpr uintptr_t RadiusMax = 0x008C;
			constexpr uintptr_t LPFRadiusMin = 0x0090;
			constexpr uintptr_t LPFRadiusMax = 0x0094;
		}

		namespace SoundNodeAttenuationAndGain {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bAttenuate, bSpatialize, bAttenuateWithLPF
			constexpr uintptr_t dBAttenuationAtMax = 0x007C;
			constexpr uintptr_t OmniRadius = 0x0080;
			constexpr uintptr_t GainDistanceAlgorithm = 0x0084;
			constexpr uintptr_t AttenuateDistanceAlgorithm = 0x0085;
			constexpr uintptr_t DistanceType = 0x0086;
			constexpr uintptr_t MinimalVolume = 0x0088;
			constexpr uintptr_t RadiusMin = 0x008C;
			constexpr uintptr_t RadiusPeak = 0x0090;
			constexpr uintptr_t RadiusMax = 0x0094;
			constexpr uintptr_t LPFMinimal = 0x0098;
			constexpr uintptr_t LPFRadiusMin = 0x009C;
			constexpr uintptr_t LPFRadiusPeak = 0x00A0;
			constexpr uintptr_t LPFRadiusMax = 0x00A4;
		}

		namespace SoundNodeConcatenator {
			constexpr uintptr_t InputVolume = 0x0078;
		}

		namespace SoundNodeDelay {
			constexpr uintptr_t DelayMin = 0x0078;
			constexpr uintptr_t DelayMax = 0x007C;
			constexpr uintptr_t DelayDuration = 0x0080;
		}

		namespace SoundNodeDistanceCrossFade {
			constexpr uintptr_t CrossFadeInput = 0x0078;
		}

		namespace SoundNodeDoppler {
			constexpr uintptr_t DopplerIntensity = 0x0078;
		}

		namespace SoundNodeEnveloper {
			constexpr uintptr_t LoopStart = 0x0078;
			constexpr uintptr_t LoopEnd = 0x007C;
			constexpr uintptr_t DurationAfterLoop = 0x0080;
			constexpr uintptr_t LoopCount = 0x0084;
			constexpr uintptr_t Bitfields_0x0088 = 0x0088;  // Multiple: bLoopIndefinitely, bLoop
			constexpr uintptr_t VolumeInterpCurve = 0x0090;
			constexpr uintptr_t PitchInterpCurve = 0x0098;
		}

		namespace SoundNodeLooping {
			constexpr uintptr_t bLoopIndefinitely = 0x0078;
			constexpr uintptr_t LoopCountMin = 0x007C;
			constexpr uintptr_t LoopCountMax = 0x0080;
			constexpr uintptr_t LoopCount = 0x0088;
		}

		namespace SoundNodeMixer {
			constexpr uintptr_t InputVolume = 0x0078;
		}

		namespace SoundNodeModulator {
			constexpr uintptr_t PitchMin = 0x0078;
			constexpr uintptr_t PitchMax = 0x007C;
			constexpr uintptr_t VolumeMin = 0x0080;
			constexpr uintptr_t VolumeMax = 0x0084;
			constexpr uintptr_t PitchModulation = 0x0088;
			constexpr uintptr_t VolumeModulation = 0x00B0;
		}

		namespace SoundNodeModulatorContinuous {
			constexpr uintptr_t PitchModulation = 0x0078;
			constexpr uintptr_t VolumeModulation = 0x00A0;
		}

		namespace SoundNodeOscillator {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bModulateVolume, bModulatePitch
			constexpr uintptr_t AmplitudeMin = 0x007C;
			constexpr uintptr_t AmplitudeMax = 0x0080;
			constexpr uintptr_t FrequencyMin = 0x0084;
			constexpr uintptr_t FrequencyMax = 0x0088;
			constexpr uintptr_t OffsetMin = 0x008C;
			constexpr uintptr_t OffsetMax = 0x0090;
			constexpr uintptr_t CenterMin = 0x0094;
			constexpr uintptr_t CenterMax = 0x0098;
			constexpr uintptr_t Amplitude = 0x00A0;
			constexpr uintptr_t Frequency = 0x00C8;
			constexpr uintptr_t Offset = 0x00F0;
			constexpr uintptr_t Center = 0x0118;
		}

		namespace SoundNodeRandom {
			constexpr uintptr_t Weights = 0x0078;
			constexpr uintptr_t PreselectAtLevelLoad = 0x0088;
			constexpr uintptr_t bRandomizeWithoutReplacement = 0x008C;
			constexpr uintptr_t HasBeenUsed = 0x0090;
			constexpr uintptr_t NumRandomUsed = 0x00A0;
		}

		namespace SoundNodeWave {
			constexpr uintptr_t CompressionQuality = 0x0078;
			constexpr uintptr_t Bitfields_0x007C = 0x007C;  // Multiple: bForceRealTimeDecompression, bLoopingSound, bDynamicResource, bUseTTS, bProcedural, bMature, bManualWordWrap, bSingleLine
			constexpr uintptr_t TTSSpeaker = 0x0080;
			constexpr uintptr_t DecompressionType = 0x0081;
			constexpr uintptr_t MobileDetailMode = 0x0082;
			constexpr uintptr_t SpokenText = 0x0088;
			constexpr uintptr_t Volume = 0x0098;
			constexpr uintptr_t Pitch = 0x009C;
			constexpr uintptr_t Duration = 0x00A0;
			constexpr uintptr_t NumChannels = 0x00A4;
			constexpr uintptr_t SampleRate = 0x00A8;
			constexpr uintptr_t ChannelOffsets = 0x00B0;
			constexpr uintptr_t ChannelSizes = 0x00C0;
			constexpr uintptr_t RawData = 0x00D0;
			constexpr uintptr_t VorbisDecompressor = 0x0128;
			constexpr uintptr_t RawPCMData = 0x0130;
			constexpr uintptr_t RawPCMDataSize = 0x0138;
			constexpr uintptr_t CompressedPCData = 0x0140;
			constexpr uintptr_t CompressedXbox360Data = 0x0198;
			constexpr uintptr_t CompressedDingoData = 0x01F0;
			constexpr uintptr_t CompressedPS3Data = 0x0248;
			constexpr uintptr_t CompressedWiiUData = 0x02A0;
			constexpr uintptr_t CompressedIPhoneData = 0x02F8;
			constexpr uintptr_t CompressedFlashData = 0x0350;
			constexpr uintptr_t CompressedPS4Data = 0x03A8;
			constexpr uintptr_t CompressedNNXData = 0x0400;
			constexpr uintptr_t ResourceID = 0x0458;
			constexpr uintptr_t ResourceSize = 0x045C;
			constexpr uintptr_t ResourceData = 0x0460;
			constexpr uintptr_t Subtitles = 0x0468;
			constexpr uintptr_t Comment = 0x0478;
			constexpr uintptr_t LocalizedSubtitles = 0x0488;
			constexpr uintptr_t SourceFilePath = 0x0498;
			constexpr uintptr_t SourceFileTimestamp = 0x04A8;
		}

		namespace SoundNodeWaveParam {
			constexpr uintptr_t WaveParameterName = 0x0078;
		}

		namespace SoundNodeWaveStreaming {
			constexpr uintptr_t QueuedAudio = 0x04B8;
			constexpr uintptr_t InactiveDuration = 0x04C8;
			constexpr uintptr_t MaxGenerateSamples = 0x04CC;
		}

		namespace SpeechRecognition {
			constexpr uintptr_t Language = 0x0060;
			constexpr uintptr_t ConfidenceThreshhold = 0x0070;
			constexpr uintptr_t Vocabularies = 0x0078;
			constexpr uintptr_t VoiceData = 0x0088;
			constexpr uintptr_t WorkingVoiceData = 0x0098;
			constexpr uintptr_t UserData = 0x00A8;
			constexpr uintptr_t InstanceData = 0x00B8;
			constexpr uintptr_t Bitfields_0x0118 = 0x0118;  // Multiple: bDirty, bInitialised
			constexpr uintptr_t FnxVoiceData = 0x0120;
		}

		namespace SpeedTree {
			constexpr uintptr_t bLegacySpeedTree = 0x0060;
			constexpr uintptr_t SRH = 0x0068;
			constexpr uintptr_t LeafStaticShadowOpacity = 0x0070;
			constexpr uintptr_t Branch1Material = 0x0078;
			constexpr uintptr_t Branch2Material = 0x0080;
			constexpr uintptr_t FrondMaterial = 0x0088;
			constexpr uintptr_t LeafCardMaterial = 0x0090;
			constexpr uintptr_t LeafMeshMaterial = 0x0098;
			constexpr uintptr_t BillboardMaterial = 0x00A0;
			constexpr uintptr_t WindStrength = 0x00A8;
			constexpr uintptr_t WindDirection = 0x00AC;
			constexpr uintptr_t LightingGuid = 0x00B8;
		}

		namespace SpeedTreeActor {
			constexpr uintptr_t SpeedTreeComponent = 0x0268;
		}

		namespace SpeedTreeActorFactory {
			constexpr uintptr_t SpeedTree = 0x00A0;
		}

		namespace SpeedTreeComponent {
			constexpr uintptr_t SpeedTree = 0x0258;
			constexpr uintptr_t Bitfields_0x0260 = 0x0260;  // Multiple: bUseLeafCards, bUseLeafMeshes, bUseBranches, bUseFronds, bUseBillboards
			constexpr uintptr_t Lod3DStart = 0x0264;
			constexpr uintptr_t Lod3DEnd = 0x0268;
			constexpr uintptr_t LodBillboardStart = 0x026C;
			constexpr uintptr_t LodBillboardEnd = 0x0270;
			constexpr uintptr_t LodLevelOverride = 0x0274;
			constexpr uintptr_t Branch1Material = 0x0278;
			constexpr uintptr_t Branch2Material = 0x0280;
			constexpr uintptr_t FrondMaterial = 0x0288;
			constexpr uintptr_t LeafCardMaterial = 0x0290;
			constexpr uintptr_t LeafMeshMaterial = 0x0298;
			constexpr uintptr_t BillboardMaterial = 0x02A0;
			constexpr uintptr_t SpeedTreeIcon = 0x02A8;
			constexpr uintptr_t StaticLights = 0x02B0;
			constexpr uintptr_t BranchLightMap = 0x02C0;
			constexpr uintptr_t FrondLightMap = 0x02C8;
			constexpr uintptr_t LeafMeshLightMap = 0x02D0;
			constexpr uintptr_t LeafCardLightMap = 0x02D8;
			constexpr uintptr_t BillboardLightMap = 0x02E0;
			constexpr uintptr_t UnknownData00 = 0x02E8;
			constexpr uintptr_t RotationOnlyMatrix = 0x02F0;
			constexpr uintptr_t LightmassSettings = 0x0330;
		}

		namespace SpeedTreeComponentFactory {
			constexpr uintptr_t SpeedTreeComponent = 0x0068;
		}

		namespace SphericalHarmonicLightComponent {
			constexpr uintptr_t UnknownData00 = 0x01C4;
			constexpr uintptr_t WorldSpaceIncidentLighting = 0x01D0;
			constexpr uintptr_t bRenderBeforeModShadows = 0x0260;
		}

		namespace SplineActor {
			constexpr uintptr_t Connections = 0x0268;
			constexpr uintptr_t SplineActorTangent = 0x0278;
			constexpr uintptr_t SplineColor = 0x0284;
			constexpr uintptr_t Bitfields_0x0288 = 0x0288;  // Multiple: bDisableDestination, bAlreadyVisited
			constexpr uintptr_t LinksFrom = 0x0290;
			constexpr uintptr_t nextOrdered = 0x02A0;
			constexpr uintptr_t prevOrdered = 0x02A8;
			constexpr uintptr_t previousPath = 0x02B0;
			constexpr uintptr_t bestPathWeight = 0x02B8;
			constexpr uintptr_t visitedWeight = 0x02BC;
			constexpr uintptr_t SplineVelocityOverTime = 0x02C0;
		}

		namespace SplineAudioComponent {
			constexpr uintptr_t ListenerScopeRadius = 0x0308;
			constexpr uintptr_t ClosestPointOnSplineIndex = 0x030C;
			constexpr uintptr_t Points = 0x0310;
		}

		namespace SplineComponent {
			constexpr uintptr_t SplineInfo = 0x0258;
			constexpr uintptr_t SplineCurviness = 0x0270;
			constexpr uintptr_t SplineColor = 0x0274;
			constexpr uintptr_t SplineDrawRes = 0x0278;
			constexpr uintptr_t SplineArrowSize = 0x027C;
			constexpr uintptr_t bSplineDisabled = 0x0280;
			constexpr uintptr_t SplineReparamTable = 0x0288;
		}

		namespace SplineLoftActor {
			constexpr uintptr_t ScaleX = 0x02D8;
			constexpr uintptr_t ScaleY = 0x02DC;
			constexpr uintptr_t SplineMeshComps = 0x02E0;
			constexpr uintptr_t DeformMesh = 0x02F0;
			constexpr uintptr_t DeformMeshMaterials = 0x02F8;
			constexpr uintptr_t Roll = 0x0308;
			constexpr uintptr_t WorldXDir = 0x030C;
			constexpr uintptr_t Offset = 0x0318;
			constexpr uintptr_t Bitfields_0x0320 = 0x0320;  // Multiple: bSmoothInterpRollAndScale, bAcceptsLights
			constexpr uintptr_t MeshLightEnvironment = 0x0328;
			constexpr uintptr_t MeshMaxDrawDistance = 0x0330;
		}

		namespace SplineLoftActorMovable {
			constexpr uintptr_t UnknownData00 = 0x0334;
		}

		namespace SplineMeshComponent {
			constexpr uintptr_t SplineParams = 0x0300;
			constexpr uintptr_t SplineXDir = 0x0358;
			constexpr uintptr_t bSmoothInterpRollScale = 0x0364;
		}

		namespace SpotLight {
			constexpr uintptr_t UnknownData00 = 0x0274;
		}

		namespace SpotLightComponent {
			constexpr uintptr_t InnerConeAngle = 0x0268;
			constexpr uintptr_t OuterConeAngle = 0x026C;
			constexpr uintptr_t LightShaftConeAngle = 0x0270;
			constexpr uintptr_t PreviewInnerCone = 0x0278;
			constexpr uintptr_t PreviewOuterCone = 0x0280;
			constexpr uintptr_t Rotation = 0x0288;
		}

		namespace SpriteComponent {
			constexpr uintptr_t Sprite = 0x0258;
			constexpr uintptr_t bIsScreenSizeScaled = 0x0260;
			constexpr uintptr_t ScreenSize = 0x0264;
			constexpr uintptr_t U = 0x0268;
			constexpr uintptr_t UL = 0x026C;
			constexpr uintptr_t V = 0x0270;
			constexpr uintptr_t VL = 0x0274;
			constexpr uintptr_t SpriteCategoryName = 0x0278;
		}

		namespace StaticEmitterCollectionActor {
			constexpr uintptr_t ParticleSystemComponents = 0x0280;
		}

		namespace StaticLensFlareSource {
			constexpr uintptr_t UnknownData00 = 0x0274;
		}

		namespace StaticLightCollectionActor {
			constexpr uintptr_t LightComponents = 0x0278;
			constexpr uintptr_t MaxLightComponents = 0x0288;
		}

		namespace StaticMesh {
			constexpr uintptr_t UnknownData00 = 0x0060;
			constexpr uintptr_t LODInfo = 0x0070;
			constexpr uintptr_t LODDistanceRatio = 0x0080;
			constexpr uintptr_t LODMaxRange = 0x0084;
			constexpr uintptr_t UnknownData01 = 0x0088;
			constexpr uintptr_t LightMapResolution = 0x0098;
			constexpr uintptr_t LightMapCoordinateIndex = 0x009C;
			constexpr uintptr_t UnknownData02 = 0x00A0;
			constexpr uintptr_t BodySetup = 0x00F8;
			constexpr uintptr_t UnknownData03 = 0x0100;
			constexpr uintptr_t UseSimpleLineCollision = 0x0140;
			constexpr uintptr_t UseSimpleBoxCollision = 0x0144;
			constexpr uintptr_t UseSimpleRigidBodyCollision = 0x0148;
			constexpr uintptr_t UseFullPrecisionUVs = 0x014C;
			constexpr uintptr_t bUsedForInstancing = 0x0150;
			constexpr uintptr_t ConsolePreallocateInstanceCount = 0x0154;
			constexpr uintptr_t bUseMaximumStreamingTexelRatio = 0x0158;
			constexpr uintptr_t bPartitionForEdgeGeometry = 0x015C;
			constexpr uintptr_t bCanBecomeDynamic = 0x0160;
			constexpr uintptr_t bStripComplexCollisionForConsole = 0x0168;
			constexpr uintptr_t bPerLODStaticLightingForInstancing = 0x016C;
			constexpr uintptr_t StreamingDistanceMultiplier = 0x0170;
			constexpr uintptr_t UnknownData04 = 0x0174;
		}

		namespace StaticMeshActor {
			constexpr uintptr_t StaticMeshComponent = 0x0268;
			constexpr uintptr_t Bitfields_0x0270 = 0x0270;  // Multiple: bDisableAutoBaseOnProcBuilding, bProxy, bHiddenByProxy, OldCastShadow, OldAcceptsLights
			constexpr uintptr_t OldCollisionType = 0x0274;
			constexpr uintptr_t PreCombinedStaticMeshActors = 0x0278;
		}

		namespace StaticMeshActorBasedOnExtremeContent {
			constexpr uintptr_t StaticMeshComponent = 0x0268;
			constexpr uintptr_t ExtremeContent = 0x0270;
			constexpr uintptr_t NonExtremeContent = 0x0280;
		}

		namespace StaticMeshCollectionActor {
			constexpr uintptr_t StaticMeshComponents = 0x0268;
			constexpr uintptr_t MaxStaticMeshComponents = 0x0278;
		}

		namespace StaticMeshComponent {
			constexpr uintptr_t ForcedLodModel = 0x0280;
			constexpr uintptr_t PreviousLODLevel = 0x0284;
			constexpr uintptr_t StaticMesh = 0x0288;
			constexpr uintptr_t WireframeColor = 0x0290;
			constexpr uintptr_t Bitfields_0x0294 = 0x0294;  // Multiple: bIgnoreInstanceForTextureStreaming, bOverrideLightMapResolution, bOverrideLightMapRes
			constexpr uintptr_t OverriddenLightMapResolution = 0x0298;
			constexpr uintptr_t OverriddenLightMapRes = 0x029C;
			constexpr uintptr_t OverriddenLODMaxRange = 0x02A0;
			constexpr uintptr_t StreamingDistanceMultiplier = 0x02A4;
			constexpr uintptr_t SubDivisionStepSize = 0x02A8;
			constexpr uintptr_t Bitfields_0x02AC = 0x02AC;  // Multiple: bUseSubDivisions, bForceStaticDecals, bCanHighlightSelectedSections, bUseSimpleLightmapModifications
			constexpr uintptr_t SimpleLightmapModificationTexture = 0x02B0;
			constexpr uintptr_t SimpleLightmapModificationFunction = 0x02B8;
			constexpr uintptr_t bNeverBecomeDynamic = 0x02BC;
			constexpr uintptr_t IrrelevantLights = 0x02C0;
			constexpr uintptr_t LODData = 0x02D0;
			constexpr uintptr_t VertexPositionVersionNumber = 0x02E0;
			constexpr uintptr_t LightmassSettings = 0x02E4;
		}

		namespace StaticMeshComponentFactory {
			constexpr uintptr_t StaticMesh = 0x0078;
		}

		namespace SwatTurnReachSpec {
			constexpr uintptr_t SpecDirection = 0x00C8;
		}

		namespace TargetPoint {
			constexpr uintptr_t SpawnSpriteTexture = 0x0270;
			constexpr uintptr_t SpawnRefCount = 0x0278;
		}

		namespace TeamInfo {
			constexpr uintptr_t TeamName = 0x0268;
			constexpr uintptr_t Size = 0x0278;
			constexpr uintptr_t Score = 0x027C;
			constexpr uintptr_t TeamIndex = 0x0280;
			constexpr uintptr_t TeamColor = 0x0284;
			constexpr uintptr_t RegistryGroup = 0x0288;
		}

		namespace Teleporter {
			constexpr uintptr_t URL = 0x0388;
			constexpr uintptr_t ProductRequired = 0x0398;
			constexpr uintptr_t Bitfields_0x03A0 = 0x03A0;  // Multiple: bChangesVelocity, bChangesYaw, bReversesX, bReversesY, bReversesZ, bEnabled
			constexpr uintptr_t TargetVelocity = 0x03A4;
			constexpr uintptr_t LastFired = 0x03B0;
		}

		namespace Terrain {
			constexpr uintptr_t Heights = 0x0268;
			constexpr uintptr_t InfoData = 0x0278;
			constexpr uintptr_t Layers = 0x0288;
			constexpr uintptr_t NormalMapLayer = 0x0298;
			constexpr uintptr_t DecoLayers = 0x02A0;
			constexpr uintptr_t AlphaMaps = 0x02B0;
			constexpr uintptr_t TerrainComponents = 0x02C0;
			constexpr uintptr_t NumSectionsX = 0x02D0;
			constexpr uintptr_t NumSectionsY = 0x02D4;
			constexpr uintptr_t WeightedMaterials = 0x02D8;
			constexpr uintptr_t WeightedTextureMaps = 0x02E8;
			constexpr uintptr_t MaxTesselationLevel = 0x02F8;
			constexpr uintptr_t MinTessellationLevel = 0x02FC;
			constexpr uintptr_t TesselationDistanceScale = 0x0300;
			constexpr uintptr_t TessellationCheckDistance = 0x0304;
			constexpr uintptr_t CollisionTesselationLevel = 0x0308;
			constexpr uintptr_t CachedTerrainMaterials = 0x0310;
			constexpr uintptr_t NumVerticesX = 0x0330;
			constexpr uintptr_t NumVerticesY = 0x0334;
			constexpr uintptr_t NumPatchesX = 0x0338;
			constexpr uintptr_t NumPatchesY = 0x033C;
			constexpr uintptr_t MaxComponentSize = 0x0340;
			constexpr uintptr_t StaticLightingResolution = 0x0344;
			constexpr uintptr_t Bitfields_0x0348 = 0x0348;  // Multiple: bIsOverridingLightResolution, bBilinearFilterLightmapGeneration, bCastShadow, bForceDirectLightMap, bCastDynamicShadow, bEnableSpecular, bBlockRigidBody, bAllowRigidBodyUnderneath, bAcceptsDynamicLights, bMorphingEnabled, bMorphingGradientsEnabled, bLocked, bHeightmapLocked, bShowingCollision, bUseWorldOriginTextureUVs, bShowWireframe
			constexpr uintptr_t TerrainPhysMaterialOverride = 0x0350;
			constexpr uintptr_t LightingChannels = 0x0358;
			constexpr uintptr_t LightmassSettings = 0x035C;
			constexpr uintptr_t ReleaseResourcesFence = 0x0378;
			constexpr uintptr_t EditorTessellationLevel = 0x0380;
			constexpr uintptr_t SelectedVertices = 0x0388;
			constexpr uintptr_t WireframeColor = 0x0398;
			constexpr uintptr_t LightingGuid = 0x039C;
		}

		namespace TerrainComponent {
			constexpr uintptr_t ShadowMaps = 0x0258;
			constexpr uintptr_t IrrelevantLights = 0x0268;
			constexpr uintptr_t TerrainObject = 0x0278;
			constexpr uintptr_t SectionBaseX = 0x0280;
			constexpr uintptr_t SectionBaseY = 0x0284;
			constexpr uintptr_t SectionSizeX = 0x0288;
			constexpr uintptr_t SectionSizeY = 0x028C;
			constexpr uintptr_t TrueSectionSizeX = 0x0290;
			constexpr uintptr_t TrueSectionSizeY = 0x0294;
			constexpr uintptr_t LightMap = 0x0298;
			constexpr uintptr_t PatchBounds = 0x02A0;
			constexpr uintptr_t BatchMaterials = 0x02B0;
			constexpr uintptr_t FullBatch = 0x02C0;
			constexpr uintptr_t BVTree = 0x02C8;
			constexpr uintptr_t CollisionVertices = 0x02D8;
			constexpr uintptr_t RBHeightfield = 0x02E8;
			constexpr uintptr_t bDisplayCollisionLevel = 0x02F0;
		}

		namespace TerrainLayerSetup {
			constexpr uintptr_t Materials = 0x0060;
		}

		namespace TerrainMaterial {
			constexpr uintptr_t LocalToMapping = 0x0060;
			constexpr uintptr_t MappingType = 0x00A0;
			constexpr uintptr_t MappingScale = 0x00A4;
			constexpr uintptr_t MappingRotation = 0x00A8;
			constexpr uintptr_t MappingPanU = 0x00AC;
			constexpr uintptr_t MappingPanV = 0x00B0;
			constexpr uintptr_t Material = 0x00B8;
			constexpr uintptr_t DisplacementMap = 0x00C0;
			constexpr uintptr_t DisplacementScale = 0x00C8;
		}

		namespace TerrainWeightMapTexture {
			constexpr uintptr_t ParentTerrain = 0x0280;
			constexpr uintptr_t WeightedMaterials = 0x0288;
		}

		namespace TestSplittingVolume {
			constexpr uintptr_t VfTable_IInterface_NavMeshPathObject = 0x02A8;
		}

		namespace Texture {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: SRGB, RGBE, bIsSourceArtUncompressed, CompressionNoAlpha, CompressionNone, CompressionNoMipmaps, CompressionFullDynamicRange, DeferCompression, NeverStream, bDitherMipMapAlpha, bPreserveBorderR, bPreserveBorderG, bPreserveBorderB, bPreserveBorderA, bNoTiling, bForcePVRTC4, bAsyncResourceReleaseHasBeenStarted, bUseCinematicMipLevels
			constexpr uintptr_t UnpackMin = 0x0064;
			constexpr uintptr_t UnpackMax = 0x0074;
			constexpr uintptr_t SourceArt = 0x0088;
			constexpr uintptr_t CompressionSettings = 0x00E0;
			constexpr uintptr_t Filter = 0x00E1;
			constexpr uintptr_t LODGroup = 0x00E2;
			constexpr uintptr_t CachedLODGroup = 0x00E3;
			constexpr uintptr_t MipGenSettings = 0x00E4;
			constexpr uintptr_t LODBias = 0x00E8;
			constexpr uintptr_t CachedCombinedLODBias = 0x00EC;
			constexpr uintptr_t NumCinematicMipLevels = 0x00F0;
			constexpr uintptr_t SourceFilePath = 0x00F8;
			constexpr uintptr_t SourceFileTimestamp = 0x0108;
			constexpr uintptr_t Resource = 0x0118;
			constexpr uintptr_t LightingGuid = 0x0120;
			constexpr uintptr_t AdjustBrightness = 0x0130;
			constexpr uintptr_t AdjustBrightnessCurve = 0x0134;
			constexpr uintptr_t AdjustVibrance = 0x0138;
			constexpr uintptr_t AdjustSaturation = 0x013C;
			constexpr uintptr_t AdjustRGBCurve = 0x0140;
			constexpr uintptr_t AdjustHue = 0x0144;
			constexpr uintptr_t InternalFormatLODBias = 0x0148;
			constexpr uintptr_t RequiredCreationFlags = 0x014C;
		}

		namespace Texture2D {
			constexpr uintptr_t Mips = 0x0150;
			constexpr uintptr_t CachedPVRTCMips = 0x0160;
			constexpr uintptr_t CachedATITCMips = 0x0170;
			constexpr uintptr_t CachedETCMips = 0x0180;
			constexpr uintptr_t CachedFlashMipsMaxResolution = 0x0190;
			constexpr uintptr_t CachedFlashMips = 0x0198;
			constexpr uintptr_t SizeX = 0x01F0;
			constexpr uintptr_t SizeY = 0x01F4;
			constexpr uintptr_t OriginalSizeX = 0x01F8;
			constexpr uintptr_t OriginalSizeY = 0x01FC;
			constexpr uintptr_t Format = 0x0200;
			constexpr uintptr_t AddressX = 0x0201;
			constexpr uintptr_t AddressY = 0x0202;
			constexpr uintptr_t Bitfields_0x0204 = 0x0204;  // Multiple: bIsEditorOnly, bIsStreamable, bHasCancelationPending, bHasBeenLoadedFromPersistentArchive, bForceMiplevelsToBeResident, bGlobalForceMipLevelsToBeResident, bIsCompositingSource, bHasBeenPaintedInEditor, bUseAlphaInThumbnail
			constexpr uintptr_t ForceMipLevelsToBeResidentTimestamp = 0x0208;
			constexpr uintptr_t TextureFileCacheName = 0x020C;
			constexpr uintptr_t TextureFileCacheGuid = 0x0214;
			constexpr uintptr_t RequestedMips = 0x0224;
			constexpr uintptr_t ResidentMips = 0x0228;
			constexpr uintptr_t MipsToRemoveOnCompress = 0x022C;
			constexpr uintptr_t PendingMipChangeRequestStatus = 0x0230;
			constexpr uintptr_t SystemMemoryData = 0x0238;
			constexpr uintptr_t RenderTarget2DRef = 0x0248;
			constexpr uintptr_t StreamableTexturesLink = 0x0250;
			constexpr uintptr_t StreamingIndex = 0x0268;
			constexpr uintptr_t MipTailBaseIdx = 0x026C;
			constexpr uintptr_t ResourceMem = 0x0270;
			constexpr uintptr_t FirstResourceMemMip = 0x0278;
			constexpr uintptr_t Timer = 0x027C;
		}

		namespace Texture2DComposite {
			constexpr uintptr_t SourceRegions = 0x0150;
			constexpr uintptr_t MaxTextureSize = 0x0160;
			constexpr uintptr_t DestSizeX = 0x0164;
			constexpr uintptr_t DestSizeY = 0x0168;
		}

		namespace Texture2DDynamic {
			constexpr uintptr_t SizeX = 0x0150;
			constexpr uintptr_t SizeY = 0x0154;
			constexpr uintptr_t Format = 0x0158;
			constexpr uintptr_t NumMips = 0x015C;
			constexpr uintptr_t bIsResolveTarget = 0x0160;
		}

		namespace TextureCube {
			constexpr uintptr_t SizeX = 0x0150;
			constexpr uintptr_t SizeY = 0x0154;
			constexpr uintptr_t Format = 0x0158;
			constexpr uintptr_t NumMips = 0x015C;
			constexpr uintptr_t bIsCubemapValid = 0x0160;
			constexpr uintptr_t FacePosX = 0x0168;
			constexpr uintptr_t FaceNegX = 0x0170;
			constexpr uintptr_t FacePosY = 0x0178;
			constexpr uintptr_t FaceNegY = 0x0180;
			constexpr uintptr_t FacePosZ = 0x0188;
			constexpr uintptr_t FaceNegZ = 0x0190;
		}

		namespace TextureFlipBook {
			constexpr uintptr_t VfTable_FTickableObject = 0x0280;
			constexpr uintptr_t TimeIntoMovie = 0x0288;
			constexpr uintptr_t TimeSinceLastFrame = 0x028C;
			constexpr uintptr_t HorizontalScale = 0x0290;
			constexpr uintptr_t VerticalScale = 0x0294;
			constexpr uintptr_t Bitfields_0x0298 = 0x0298;  // Multiple: bPaused, bStopped, bLooping, bAutoPlay
			constexpr uintptr_t HorizontalImages = 0x029C;
			constexpr uintptr_t VerticalImages = 0x02A0;
			constexpr uintptr_t FBMethod = 0x02A4;
			constexpr uintptr_t FrameRate = 0x02A8;
			constexpr uintptr_t FrameTime = 0x02AC;
			constexpr uintptr_t CurrentRow = 0x02B0;
			constexpr uintptr_t CurrentColumn = 0x02B4;
			constexpr uintptr_t RenderOffsetU = 0x02B8;
			constexpr uintptr_t RenderOffsetV = 0x02BC;
			constexpr uintptr_t ReleaseResourcesFence = 0x02C0;
		}

		namespace TextureMovie {
			constexpr uintptr_t SizeX = 0x0150;
			constexpr uintptr_t SizeY = 0x0154;
			constexpr uintptr_t Format = 0x0158;
			constexpr uintptr_t AddressX = 0x0159;
			constexpr uintptr_t AddressY = 0x015A;
			constexpr uintptr_t MovieStreamSource = 0x015B;
			constexpr uintptr_t DecoderClass = 0x0160;
			constexpr uintptr_t Decoder = 0x0168;
			constexpr uintptr_t Bitfields_0x0170 = 0x0170;  // Multiple: Paused, Stopped, Looping, ResetOnLastFrame, AutoPlay
			constexpr uintptr_t Data = 0x0178;
			constexpr uintptr_t ReleaseCodecFence = 0x01D0;
		}

		namespace TextureRenderTarget {
			constexpr uintptr_t Bitfields_0x0150 = 0x0150;  // Multiple: bUpdateImmediate, bNeedsTwoCopies, bRenderOnce
			constexpr uintptr_t TargetGamma = 0x0154;
		}

		namespace TextureRenderTarget2D {
			constexpr uintptr_t SizeX = 0x0158;
			constexpr uintptr_t SizeY = 0x015C;
			constexpr uintptr_t Format = 0x0160;
			constexpr uintptr_t AddressX = 0x0161;
			constexpr uintptr_t AddressY = 0x0162;
			constexpr uintptr_t ClearColor = 0x0164;
			constexpr uintptr_t bForceLinearGamma = 0x0174;
			constexpr uintptr_t ExtraTexCreateFlags = 0x0178;
		}

		namespace TextureRenderTargetCube {
			constexpr uintptr_t SizeX = 0x0158;
			constexpr uintptr_t Format = 0x015C;
		}

		namespace TickEventBase {
			constexpr uintptr_t DeltaSeconds = 0x0060;
			constexpr uintptr_t TimeDilation = 0x0064;
			constexpr uintptr_t Count = 0x0068;
		}

		namespace TimeWindow {
			constexpr uintptr_t WindowStartTime = 0x0060;
			constexpr uintptr_t WindowDuration = 0x0068;
			constexpr uintptr_t WindowResetInterval = 0x006C;
			constexpr uintptr_t bRepeatable = 0x0070;
		}

		namespace TranslationContext {
			constexpr uintptr_t TranslatorTags = 0x0060;
		}

		namespace TranslatorTag {
			constexpr uintptr_t Tag = 0x0060;
		}

		namespace Trigger {
			constexpr uintptr_t CylinderComponent = 0x0268;
			constexpr uintptr_t bRecentlyTriggered = 0x0270;
			constexpr uintptr_t AITriggerDelay = 0x0274;
		}

		namespace TriggerStreamingLevel {
			constexpr uintptr_t Levels = 0x0278;
		}

		namespace TriggerVolume {
			constexpr uintptr_t UnknownData00 = 0x02A4;
		}

		namespace Trigger_LOS {
			constexpr uintptr_t PCsWithLOS = 0x0278;
		}

		namespace TriggeredPath {
			constexpr uintptr_t bOpen = 0x0388;
			constexpr uintptr_t MyTrigger = 0x0390;
		}

		namespace UICharacterSummary {
			constexpr uintptr_t ClassPathName = 0x00A0;
			constexpr uintptr_t CharacterName = 0x00B0;
			constexpr uintptr_t CharacterBio = 0x00C0;
			constexpr uintptr_t bIsDisabled = 0x00D0;
		}

		namespace UIDataProvider_MenuItem {
			constexpr uintptr_t OptionType = 0x00A0;
			constexpr uintptr_t OptionSet = 0x00A8;
			constexpr uintptr_t DataStoreMarkup = 0x00B8;
			constexpr uintptr_t DescriptionMarkup = 0x00C8;
			constexpr uintptr_t RequiredGameMode = 0x00D8;
			constexpr uintptr_t FriendlyName = 0x00E0;
			constexpr uintptr_t CustomFriendlyName = 0x00F0;
			constexpr uintptr_t Description = 0x0100;
			constexpr uintptr_t Bitfields_0x0110 = 0x0110;  // Multiple: bEditableCombo, bNumericCombo, bKeyboardOrMouseOption, bOnlineOnly, bOfflineOnly, bSearchAllInis, bRemoveOn360, bRemoveOnPC, bRemoveOnPS3
			constexpr uintptr_t EditBoxMaxLength = 0x0114;
			constexpr uintptr_t RangeData = 0x0118;
			constexpr uintptr_t SchemaCellFields = 0x0130;
			constexpr uintptr_t IniName = 0x0140;
		}

		namespace UIDataProvider_OnlineFriendMessages {
			constexpr uintptr_t Messages = 0x0078;
			constexpr uintptr_t SendingPlayerNameCol = 0x0088;
			constexpr uintptr_t bIsFriendInviteCol = 0x0098;
			constexpr uintptr_t bWasAcceptedCol = 0x00A8;
			constexpr uintptr_t bWasDeniedCol = 0x00B8;
			constexpr uintptr_t MessageCol = 0x00C8;
			constexpr uintptr_t LastInviteFrom = 0x00D8;
		}

		namespace UIDataProvider_OnlineFriends {
			constexpr uintptr_t FriendsList = 0x0078;
			constexpr uintptr_t NickNameCol = 0x0088;
			constexpr uintptr_t PresenceInfoCol = 0x0098;
			constexpr uintptr_t FriendStateCol = 0x00A8;
			constexpr uintptr_t bIsOnlineCol = 0x00B8;
			constexpr uintptr_t bIsPlayingCol = 0x00C8;
			constexpr uintptr_t bIsPlayingThisGameCol = 0x00D8;
			constexpr uintptr_t bIsJoinableCol = 0x00E8;
			constexpr uintptr_t bHasVoiceSupportCol = 0x00F8;
			constexpr uintptr_t bHaveInvitedCol = 0x0108;
			constexpr uintptr_t bHasInvitedYouCol = 0x0118;
			constexpr uintptr_t OfflineText = 0x0128;
			constexpr uintptr_t OnlineText = 0x0138;
			constexpr uintptr_t AwayText = 0x0148;
			constexpr uintptr_t BusyText = 0x0158;
		}

		namespace UIDataProvider_OnlinePartyChatList {
			constexpr uintptr_t PartyMembersList = 0x0078;
			constexpr uintptr_t NatTypes = 0x0088;
			constexpr uintptr_t NickNameCol = 0x0098;
			constexpr uintptr_t NatTypeCol = 0x00A8;
			constexpr uintptr_t IsLocalCol = 0x00B8;
			constexpr uintptr_t IsInPartyVoiceCol = 0x00C8;
			constexpr uintptr_t IsTalkingCol = 0x00D8;
			constexpr uintptr_t IsInGameSessionCol = 0x00E8;
			constexpr uintptr_t IsPlayingThisGameCol = 0x00F8;
		}

		namespace UIDataProvider_OnlinePlayerDataBase {
			constexpr uintptr_t PlayerControllerId = 0x0070;
		}

		namespace UIDataProvider_OnlinePlayerStorage {
			constexpr uintptr_t Profile = 0x0078;
			constexpr uintptr_t ProviderName = 0x0080;
			constexpr uintptr_t Bitfields_0x0088 = 0x0088;  // Multiple: bWasErrorLastRead, bIsExternalUIOpen, bNeedsDeferredRefresh
			constexpr uintptr_t PlayerStorageArrayProviders = 0x0090;
			constexpr uintptr_t DeviceStorageSizeNeeded = 0x00A0;
		}

		namespace UIDataProvider_OnlinePlayerStorageArray {
			constexpr uintptr_t PlayerStorage = 0x0070;
			constexpr uintptr_t PlayerStorageId = 0x0078;
			constexpr uintptr_t ColumnHeaderText = 0x0080;
			constexpr uintptr_t Values = 0x0090;
		}

		namespace UIDataProvider_OnlineProfileSettings {
			constexpr uintptr_t UnknownData00 = 0x00A4;
		}

		namespace UIDataProvider_PlayerAchievements {
			constexpr uintptr_t Achievements = 0x0078;
		}

		namespace UIDataProvider_Settings {
			constexpr uintptr_t Settings = 0x0098;
			constexpr uintptr_t bIsAListRow = 0x00A0;
		}

		namespace UIDataProvider_SettingsArray {
			constexpr uintptr_t Settings = 0x0070;
			constexpr uintptr_t SettingsId = 0x0078;
			constexpr uintptr_t SettingsName = 0x007C;
			constexpr uintptr_t ColumnHeaderText = 0x0088;
			constexpr uintptr_t Values = 0x0098;
		}

		namespace UIDataStore {
			constexpr uintptr_t Tag = 0x0070;
		}

		namespace UIDataStore_DynamicResource {
			constexpr uintptr_t ProfileProvider = 0x00A0;
			constexpr uintptr_t GameResourceDataStore = 0x00A8;
			constexpr uintptr_t ResourceProviderDefinitions = 0x00B0;
			constexpr uintptr_t ResourceProviders = 0x00C0;
		}

		namespace UIDataStore_GameResource {
			constexpr uintptr_t ElementProviderTypes = 0x00A0;
			constexpr uintptr_t ListElementProviders = 0x00B0;
		}

		namespace UIDataStore_InputAlias {
			constexpr uintptr_t InputAliases = 0x00A0;
			constexpr uintptr_t UnknownData00 = 0x00B0;
		}

		namespace UIDataStore_MenuItems {
			constexpr uintptr_t CurrentGameSettingsTag = 0x0100;
			constexpr uintptr_t OptionProviders = 0x0108;
			constexpr uintptr_t DynamicProviders = 0x0158;
		}

		namespace UIDataStore_OnlineGameSearch {
			constexpr uintptr_t SearchResultsName = 0x00A0;
			constexpr uintptr_t OnlineSub = 0x00A8;
			constexpr uintptr_t GameInterface_Object = 0x00B0;
			constexpr uintptr_t GameInterface_Interface = 0x00B8;
			constexpr uintptr_t GameSearchCfgList = 0x00C0;
			constexpr uintptr_t SelectedIndex = 0x00D0;
			constexpr uintptr_t ActiveSearchIndex = 0x00D4;
		}

		namespace UIDataStore_OnlineGameSettings {
			constexpr uintptr_t GameSettingsCfgList = 0x00A0;
			constexpr uintptr_t SettingsProviderClass = 0x00B0;
			constexpr uintptr_t SelectedIndex = 0x00B8;
		}

		namespace UIDataStore_OnlinePlayerData {
			constexpr uintptr_t FriendsProvider = 0x00A0;
			constexpr uintptr_t PlayerControllerId = 0x00A8;
			constexpr uintptr_t ProfileSettingsClassName = 0x00B0;
			constexpr uintptr_t ProfileSettingsClass = 0x00C0;
			constexpr uintptr_t ProfileProvider = 0x00C8;
			constexpr uintptr_t ProfileProviderClassName = 0x00D0;
			constexpr uintptr_t ProfileProviderClass = 0x00E0;
			constexpr uintptr_t PlayerStorageClassName = 0x00E8;
			constexpr uintptr_t PlayerStorageClass = 0x00F8;
			constexpr uintptr_t StorageProvider = 0x0100;
			constexpr uintptr_t StorageProviderClassName = 0x0108;
			constexpr uintptr_t StorageProviderClass = 0x0118;
			constexpr uintptr_t FriendMessagesProvider = 0x0120;
			constexpr uintptr_t AchievementsProvider = 0x0128;
			constexpr uintptr_t FriendsProviderClassName = 0x0130;
			constexpr uintptr_t FriendsProviderClass = 0x0140;
			constexpr uintptr_t FriendMessagesProviderClassName = 0x0148;
			constexpr uintptr_t FriendMessagesProviderClass = 0x0158;
			constexpr uintptr_t AchievementsProviderClassName = 0x0160;
			constexpr uintptr_t AchievementsProviderClass = 0x0170;
			constexpr uintptr_t PartyChatProviderClassName = 0x0178;
			constexpr uintptr_t PartyChatProviderClass = 0x0188;
			constexpr uintptr_t PartyChatProvider = 0x0190;
		}

		namespace UIDataStore_OnlineStats {
			constexpr uintptr_t StatsReadClasses = 0x00A0;
			constexpr uintptr_t StatsReadName = 0x00B0;
			constexpr uintptr_t PlayerNickData = 0x00B8;
			constexpr uintptr_t RankNameMetaData = 0x00D0;
			constexpr uintptr_t TotalRowsName = 0x00E8;
			constexpr uintptr_t StatsReadObjects = 0x00F0;
			constexpr uintptr_t StatsRead = 0x0100;
			constexpr uintptr_t CurrentReadType = 0x0108;
			constexpr uintptr_t StatsInterface_Object = 0x0110;
			constexpr uintptr_t StatsInterface_Interface = 0x0118;
			constexpr uintptr_t PlayerInterface_Object = 0x0120;
			constexpr uintptr_t PlayerInterface_Interface = 0x0128;
		}

		namespace UIDataStore_Registry {
			constexpr uintptr_t RegistryData = 0x00A0;
		}

		namespace UIDataStore_StringAliasMap {
			constexpr uintptr_t MenuInputMapArray = 0x00A0;
			constexpr uintptr_t MenuInputSets = 0x00B0;
			constexpr uintptr_t PlayerIndex = 0x0100;
		}

		namespace UIGameInfoSummary {
			constexpr uintptr_t ClassName = 0x00A0;
			constexpr uintptr_t GameAcronym = 0x00B0;
			constexpr uintptr_t MapPrefix = 0x00C0;
			constexpr uintptr_t Bitfields_0x00D0 = 0x00D0;  // Multiple: bIsTeamGame, bIsDisabled
			constexpr uintptr_t GameSettingsClassName = 0x00D8;
			constexpr uintptr_t GameName = 0x00E8;
			constexpr uintptr_t Description = 0x00F8;
		}

		namespace UIInteraction {
			constexpr uintptr_t VfTable_FExec = 0x00D0;
			constexpr uintptr_t VfTable_FGlobalDataStoreClientManager = 0x00D8;
			constexpr uintptr_t VfTable_FCallbackEventDevice = 0x00E0;
			constexpr uintptr_t UIManager = 0x00E8;
			constexpr uintptr_t UIManagerClass = 0x00F0;
			constexpr uintptr_t SceneClientClass = 0x00F8;
			constexpr uintptr_t SceneClient = 0x0100;
			constexpr uintptr_t SupportedDoubleClickKeys = 0x0108;
			constexpr uintptr_t DataStoreManager = 0x0118;
			constexpr uintptr_t bProcessInput = 0x0120;
			constexpr uintptr_t UIJoystickDeadZone = 0x0124;
			constexpr uintptr_t UIAxisMultiplier = 0x0128;
			constexpr uintptr_t AxisRepeatDelay = 0x012C;
			constexpr uintptr_t MouseButtonRepeatDelay = 0x0130;
			constexpr uintptr_t DoubleClickTriggerSeconds = 0x0134;
			constexpr uintptr_t DoubleClickPixelTolerance = 0x0138;
			constexpr uintptr_t MouseButtonRepeatInfo = 0x0140;
			constexpr uintptr_t ConfiguredAxisEmulationDefinitions = 0x0150;
			constexpr uintptr_t UnknownData00 = 0x0160;
			constexpr uintptr_t AxisInputEmulation = 0x01B0;
		}

		namespace UIMapSummary {
			constexpr uintptr_t MapName = 0x00A0;
			constexpr uintptr_t ScreenshotPathName = 0x00B0;
			constexpr uintptr_t DisplayName = 0x00C0;
			constexpr uintptr_t Description = 0x00D0;
		}

		namespace UIPropertyDataProvider {
			constexpr uintptr_t ComplexPropertyTypes = 0x0070;
		}

		namespace UIResourceCombinationProvider {
			constexpr uintptr_t StaticDataProvider = 0x0070;
			constexpr uintptr_t ProfileProvider = 0x0078;
		}

		namespace UIResourceDataProvider {
			constexpr uintptr_t bSkipDuringEnumeration = 0x0098;
		}

		namespace UIRoot {
			constexpr uintptr_t BadCapsLocContexts = 0x0060;
		}

		namespace UISceneClient {
			constexpr uintptr_t VfTable_FExec = 0x0070;
			constexpr uintptr_t RenderViewport = 0x0078;
			constexpr uintptr_t MousePosition = 0x0080;
			constexpr uintptr_t DataStoreManager = 0x0088;
			constexpr uintptr_t CanvasToScreen = 0x0090;
			constexpr uintptr_t InvCanvasToScreen = 0x00D0;
			constexpr uintptr_t UIScenePostProcess = 0x0110;
			constexpr uintptr_t bEnablePostProcess = 0x0118;
		}

		namespace UISoundTheme {
			constexpr uintptr_t SoundEventBindings = 0x0060;
		}

		namespace UIWeaponSummary {
			constexpr uintptr_t ClassPathName = 0x00A0;
			constexpr uintptr_t FriendlyName = 0x00B0;
			constexpr uintptr_t WeaponDescription = 0x00C0;
			constexpr uintptr_t bIsDisabled = 0x00D0;
		}

		namespace UberPostProcessEffect {
			constexpr uintptr_t SceneShadows = 0x00F8;
			constexpr uintptr_t SceneHighLights = 0x0104;
			constexpr uintptr_t SceneMidTones = 0x0110;
			constexpr uintptr_t SceneDesaturation = 0x011C;
			constexpr uintptr_t SceneColorize = 0x0120;
			constexpr uintptr_t TonemapperType = 0x012C;
			constexpr uintptr_t PostProcessAAType = 0x012D;
			constexpr uintptr_t TonemapperRange = 0x0130;
			constexpr uintptr_t TonemapperToeFactor = 0x0134;
			constexpr uintptr_t TonemapperScale = 0x0138;
			constexpr uintptr_t MotionBlurSoftEdgeKernelSize = 0x013C;
			constexpr uintptr_t Bitfields_0x0140 = 0x0140;  // Multiple: bEnableImageGrain, bScaleEffectsWithViewSize, bEnableHDRTonemapper
			constexpr uintptr_t SceneImageGrainScale = 0x0144;
			constexpr uintptr_t BloomWeightSmall = 0x0148;
			constexpr uintptr_t BloomWeightMedium = 0x014C;
			constexpr uintptr_t BloomWeightLarge = 0x0150;
			constexpr uintptr_t BloomSizeScaleSmall = 0x0154;
			constexpr uintptr_t BloomSizeScaleMedium = 0x0158;
			constexpr uintptr_t BloomSizeScaleLarge = 0x015C;
			constexpr uintptr_t EdgeDetectionThreshold = 0x0160;
			constexpr uintptr_t PreviousLUTBlender = 0x0168;
			constexpr uintptr_t SceneHDRTonemapperScale = 0x0190;
		}

		namespace UserCloudFileCloudSaveSystemDataBlobStore {
			constexpr uintptr_t UserCloudFile_Object = 0x0060;
			constexpr uintptr_t UserCloudFile_Interface = 0x0068;
		}

		namespace VoiceChannel {
			constexpr uintptr_t UnknownData00 = 0x00A0;
		}

		namespace Volume {
			constexpr uintptr_t AssociatedActor = 0x0298;
			constexpr uintptr_t Bitfields_0x02A0 = 0x02A0;  // Multiple: bForcePawnWalk, bProcessAllActors, bPawnsOnly
		}

		namespace VolumePathNode {
			constexpr uintptr_t StartingRadius = 0x0388;
			constexpr uintptr_t StartingHeight = 0x038C;
		}

		namespace WaveFormBase {
			constexpr uintptr_t TheWaveForm = 0x0060;
		}

		namespace WindDirectionalSource {
			constexpr uintptr_t Component = 0x0268;
		}

		namespace WindDirectionalSourceComponent {
			constexpr uintptr_t SceneProxy = 0x00A0;
			constexpr uintptr_t Strength = 0x00A8;
			constexpr uintptr_t Phase = 0x00AC;
			constexpr uintptr_t Frequency = 0x00B0;
			constexpr uintptr_t Speed = 0x00B4;
		}

		namespace WindPointSource {
			constexpr uintptr_t Component = 0x0268;
		}

		namespace WindPointSourceComponent {
			constexpr uintptr_t PreviewRadiusComponent = 0x00B8;
			constexpr uintptr_t Radius = 0x00C0;
		}

		namespace World {
			constexpr uintptr_t UnknownData00 = 0x0060;
		}

		namespace WorldAttractor {
			constexpr uintptr_t bEnabled = 0x0268;
			constexpr uintptr_t LoopDuration = 0x026C;
			constexpr uintptr_t CurrentTime = 0x0270;
			constexpr uintptr_t FalloffType = 0x0274;
			constexpr uintptr_t FalloffExponent = 0x0278;
			constexpr uintptr_t Range = 0x02A8;
			constexpr uintptr_t Strength = 0x02D8;
			constexpr uintptr_t CollisionRadius = 0x0308;
			constexpr uintptr_t DragCoefficient = 0x0310;
			constexpr uintptr_t DragRadius = 0x0340;
		}

		namespace WorldInfo {
			constexpr uintptr_t DefaultPostProcessSettings = 0x0278;
			constexpr uintptr_t WorldPostProcessChain = 0x03E0;
			constexpr uintptr_t Bitfields_0x03E8 = 0x03E8;  // Multiple: bPersistPostProcessToNextLevel, bFogEnabled, bBumpOffsetEnabled, bUseGammaCorrection, bMapNeedsLightingFullyRebuilt, bMapHasMultipleDominantLightsAffectingOnePrimitive, bMapHasPathingErrors, bRequestedBlockOnAsyncLoading, bBegunPlay, bPlayersOnly, bPlayersOnlyPending, bSuspendAI, bDropDetail, bAggressiveLOD, bStartup, bPathsRebuilt, bHasPathNodes, bIsMenuLevel, bUnitTest, bDebugPauseExecution, bDebugStepExecution, bUseConsoleInput, bDisableGlobalGravityZ, bMinimizeBSPSections, bNoPathWarnings, bNoMobileMapWarnings, bHighPriorityLoading, bHighPriorityLoadingLocal, bUseProcBuildingRulesetOverride, bInteractiveMode, bForceInteractiveMode, bSupportDoubleBufferedPhysics
			constexpr uintptr_t Bitfields_0x03EC = 0x03EC;  // Multiple: bPhysicsIgnoreDeltaTime, bEnableChanceOfPhysicsChunkOverride, bLimitExplosionChunkSize, bLimitDamageChunkSize, bPrecomputeVisibility, bPlaceCellsOnSurfaces, bAffectIndirectCompositeShadowDirection, bAllowTemporalAA, bUseGlobalIllumination, bForceNoPrecomputedLighting, bHaveActiveCrowd, bAllowHostMigration, bGameplayFramePause
			constexpr uintptr_t SquintModeKernelSize = 0x03F0;
			constexpr uintptr_t HighestPriorityPostProcessVolume = 0x03F8;
			constexpr uintptr_t DefaultReverbSettings = 0x0400;
			constexpr uintptr_t DefaultAmbientZoneSettings = 0x0410;
			constexpr uintptr_t FogStart = 0x0434;
			constexpr uintptr_t FogEnd = 0x0438;
			constexpr uintptr_t FogColor = 0x043C;
			constexpr uintptr_t BumpEnd = 0x0440;
			constexpr uintptr_t HighestPriorityReverbVolume = 0x0448;
			constexpr uintptr_t MassiveLODOverrideVolumes = 0x0450;
			constexpr uintptr_t PortalVolumes = 0x0460;
			constexpr uintptr_t EnvironmentVolumes = 0x0470;
			constexpr uintptr_t StreamingLevels = 0x0480;
			constexpr uintptr_t LastTimeUnbuiltLightingWasEncountered = 0x0490;
			constexpr uintptr_t BookMarks = 0x0498;
			constexpr uintptr_t KismetBookMarks = 0x04E8;
			constexpr uintptr_t ClipPadEntries = 0x0538;
			constexpr uintptr_t TimeDilation = 0x0548;
			constexpr uintptr_t DemoPlayTimeDilation = 0x054C;
			constexpr uintptr_t TimeSeconds = 0x0550;
			constexpr uintptr_t RealTimeSeconds = 0x0554;
			constexpr uintptr_t RealDeltaSeconds = 0x0558;
			constexpr uintptr_t AudioTimeSeconds = 0x055C;
			constexpr uintptr_t DeltaSeconds = 0x0560;
			constexpr uintptr_t PauseDelay = 0x0564;
			constexpr uintptr_t RealTimeToUnPause = 0x0568;
			constexpr uintptr_t Pauser = 0x0570;
			constexpr uintptr_t VisibleGroups = 0x0578;
			constexpr uintptr_t VisibleLayers = 0x0588;
			constexpr uintptr_t DefaultTexture = 0x0598;
			constexpr uintptr_t WireframeTexture = 0x05A0;
			constexpr uintptr_t WhiteSquareTexture = 0x05A8;
			constexpr uintptr_t LargeVertex = 0x05B0;
			constexpr uintptr_t BSPVertex = 0x05B8;
			constexpr uintptr_t DeferredExecs = 0x05C0;
			constexpr uintptr_t GRI = 0x05D0;
			constexpr uintptr_t NetMode = 0x05D8;
			constexpr uintptr_t NextTravelType = 0x05D9;
			constexpr uintptr_t VisibilityAggressiveness = 0x05DA;
			constexpr uintptr_t PreferredLightmapType = 0x05DB;
			constexpr uintptr_t LevelLightingQuality = 0x05DC;
			constexpr uintptr_t ComputerName = 0x05E0;
			constexpr uintptr_t EngineVersion = 0x05F0;
			constexpr uintptr_t MinNetVersion = 0x0600;
			constexpr uintptr_t Game = 0x0610;
			constexpr uintptr_t StallZ = 0x0618;
			constexpr uintptr_t WorldGravityZ = 0x061C;
			constexpr uintptr_t DefaultGravityZ = 0x0620;
			constexpr uintptr_t GlobalGravityZ = 0x0624;
			constexpr uintptr_t RBPhysicsGravityScaling = 0x0628;
			constexpr uintptr_t GlobalGravityDirection = 0x062C;
			constexpr uintptr_t NavigationPointList = 0x0638;
			constexpr uintptr_t ControllerList = 0x0640;
			constexpr uintptr_t PawnList = 0x0648;
			constexpr uintptr_t CoverList = 0x0650;
			constexpr uintptr_t PylonList = 0x0658;
			constexpr uintptr_t MoveRepSize = 0x0660;
			constexpr uintptr_t ReplicationViewers = 0x0668;
			constexpr uintptr_t NextURL = 0x0678;
			constexpr uintptr_t NextSwitchCountdown = 0x0688;
			constexpr uintptr_t PackedLightAndShadowMapTextureSize = 0x068C;
			constexpr uintptr_t DefaultColorScale = 0x0690;
			constexpr uintptr_t DefaultGameType = 0x06A0;
			constexpr uintptr_t GameTypesSupportedOnThisMap = 0x06A8;
			constexpr uintptr_t GameTypeForPIE = 0x06B8;
			constexpr uintptr_t ClientDestroyedActorContent = 0x06C0;
			constexpr uintptr_t PreparingLevelNames = 0x06D0;
			constexpr uintptr_t CommittedPersistentLevelName = 0x06E0;
			constexpr uintptr_t PersistentMapForcedObjects = 0x06E8;
			constexpr uintptr_t MusicComp = 0x06F0;
			constexpr uintptr_t CurrentMusicTrack = 0x06F8;
			constexpr uintptr_t ReplicatedMusicTrack = 0x0728;
			constexpr uintptr_t Title = 0x0758;
			constexpr uintptr_t Author = 0x0768;
			constexpr uintptr_t MyMapInfo = 0x0778;
			constexpr uintptr_t EmitterPoolClassPath = 0x0780;
			constexpr uintptr_t MyEmitterPool = 0x0790;
			constexpr uintptr_t DecalManagerClassPath = 0x0798;
			constexpr uintptr_t MyDecalManager = 0x07A8;
			constexpr uintptr_t FractureManagerClassPath = 0x07B0;
			constexpr uintptr_t MyFractureManager = 0x07C0;
			constexpr uintptr_t ParticleEventManagerClassPath = 0x07C8;
			constexpr uintptr_t MyParticleEventManager = 0x07D8;
			constexpr uintptr_t ProcBuildingRulesetOverride = 0x07E0;
			constexpr uintptr_t SkelMeshCompTickTagCount = 0x07E8;
			constexpr uintptr_t MaxPhysicsDeltaTime = 0x07EC;
			constexpr uintptr_t MaxPhysicsSubsteps = 0x07F0;
			constexpr uintptr_t PhysicsProperties = 0x07F4;
			constexpr uintptr_t CompartmentRunFrames = 0x0830;
			constexpr uintptr_t DefaultSkinWidth = 0x0840;
			constexpr uintptr_t ApexLODResourceBudget = 0x0844;
			constexpr uintptr_t ApexDestructionLODResourceValue = 0x0848;
			constexpr uintptr_t ApexClothingLODResourceValue = 0x084C;
			constexpr uintptr_t DestructibleSettings = 0x0850;
			constexpr uintptr_t EmitterVertical = 0x0868;
			constexpr uintptr_t VerticalProperties = 0x0870;
			constexpr uintptr_t WorldAttractors = 0x0888;
			constexpr uintptr_t ConsoleTypeNames = 0x0898;
			constexpr uintptr_t ChanceOfPhysicsChunkOverride = 0x08A8;
			constexpr uintptr_t MaxExplosionChunkSize = 0x08AC;
			constexpr uintptr_t MaxDamageChunkSize = 0x08B0;
			constexpr uintptr_t FractureExplosionVelScale = 0x08B4;
			constexpr uintptr_t MaxNumFacturedChunksToSpawnInAFrame = 0x08B8;
			constexpr uintptr_t NumFacturedChunksSpawnedThisFrame = 0x08BC;
			constexpr uintptr_t FracturedMeshWeaponDamage = 0x08C0;
			constexpr uintptr_t VisibilityCellSize = 0x08C4;
			constexpr uintptr_t CharacterLitIndirectBrightness = 0x08C8;
			constexpr uintptr_t CharacterLitIndirectContrastFactor = 0x08CC;
			constexpr uintptr_t CharacterShadowedIndirectBrightness = 0x08D0;
			constexpr uintptr_t CharacterShadowedIndirectContrastFactor = 0x08D4;
			constexpr uintptr_t CharacterLightingContrastFactor = 0x08D8;
			constexpr uintptr_t ImageReflectionEnvironmentTexture = 0x08E0;
			constexpr uintptr_t ImageReflectionEnvironmentColor = 0x08E8;
			constexpr uintptr_t ImageReflectionEnvironmentRotation = 0x08F8;
			constexpr uintptr_t ScreenMessages = 0x0900;
			constexpr uintptr_t PriorityScreenMessages = 0x0950;
			constexpr uintptr_t MaxTrianglesPerLeaf = 0x0960;
			constexpr uintptr_t LMLevelSettings = 0x0968;
			constexpr uintptr_t UnknownData00 = 0x0970;
			constexpr uintptr_t LightmassSettings = 0x09C0;
			constexpr uintptr_t PitchTek = 0x0A18;
			constexpr uintptr_t UnknownData01 = 0x0A20;
			constexpr uintptr_t UnknownData02 = 0x0A70;
			constexpr uintptr_t PopulationManager = 0x0AC0;
			constexpr uintptr_t PeerHostMigration = 0x0AC8;
			constexpr uintptr_t HostMigrationTimeout = 0x0AF0;
			constexpr uintptr_t FirstPhysicsVolume = 0x0AF8;
			constexpr uintptr_t GameShare = 0x0B00;
		}

		namespace ZoneInfo {
			constexpr uintptr_t KillZ = 0x0268;
			constexpr uintptr_t SoftKill = 0x026C;
			constexpr uintptr_t bSoftKillZ = 0x0270;
		}

		namespace __GameInfo__Login_0x1 {
			constexpr uintptr_t NewPlayer = 0x0060;
		}

		namespace __ScriptGroup_ORS__CreateObjects_0x1 {
			constexpr uintptr_t ObjOuter = 0x0060;
		}

	}

	// ===== GFXUI MODULE =====
	namespace GFxUI {

		namespace GFxAction_CloseMovie {
			constexpr uintptr_t Movie = 0x0160;
			constexpr uintptr_t bUnload = 0x0168;
		}

		namespace GFxAction_GetVariable {
			constexpr uintptr_t Movie = 0x0160;
			constexpr uintptr_t Variable = 0x0168;
		}

		namespace GFxAction_Invoke {
			constexpr uintptr_t Movie = 0x0160;
			constexpr uintptr_t MethodName = 0x0168;
			constexpr uintptr_t Arguments = 0x0178;
		}

		namespace GFxAction_OpenMovie {
			constexpr uintptr_t Movie = 0x0160;
			constexpr uintptr_t MoviePlayerClass = 0x0168;
			constexpr uintptr_t MoviePlayer = 0x0170;
			constexpr uintptr_t Bitfields_0x0178 = 0x0178;  // Multiple: bTakeFocus, bCaptureInput, bStartPaused, bEnableGammaCorrection, bDisplayWithHudOff
			constexpr uintptr_t RenderTextureMode = 0x017C;
			constexpr uintptr_t RenderTexture = 0x0180;
			constexpr uintptr_t CaptureKeys = 0x0188;
			constexpr uintptr_t FocusIgnoreKeys = 0x0198;
		}

		namespace GFxAction_SetCaptureKeys {
			constexpr uintptr_t Movie = 0x0160;
			constexpr uintptr_t CaptureKeys = 0x0168;
		}

		namespace GFxAction_SetVariable {
			constexpr uintptr_t Movie = 0x0160;
			constexpr uintptr_t Variable = 0x0168;
		}

		namespace GFxEngine {
			constexpr uintptr_t GCReferences = 0x0060;
			constexpr uintptr_t RefCount = 0x0070;
			constexpr uintptr_t LoadingScreenInfo = 0x0078;
			constexpr uintptr_t IgnoreWarningsThatStartWith = 0x0118;
		}

		namespace GFxEvent_FSCommand {
			constexpr uintptr_t Movie = 0x0180;
			constexpr uintptr_t FSCommand = 0x0188;
			constexpr uintptr_t Handler = 0x0198;
		}

		namespace GFxInteraction {
			constexpr uintptr_t VfTable_FCallbackEventDevice = 0x00D0;
			constexpr uintptr_t bFakeMobileTouches = 0x00D8;
		}

		namespace GFxMoviePlayer {
			constexpr uintptr_t pMovie = 0x0060;
			constexpr uintptr_t pCaptureKeys = 0x0068;
			constexpr uintptr_t pFocusIgnoreKeys = 0x0070;
			constexpr uintptr_t UnknownData00 = 0x0078;
			constexpr uintptr_t UnknownData01 = 0x00C8;
			constexpr uintptr_t NextASUObject = 0x0118;
			constexpr uintptr_t MovieInfo = 0x0120;
			constexpr uintptr_t Bitfields_0x0128 = 0x0128;  // Multiple: bMovieIsOpen, bDisplayWithHudOff, bEnableGammaCorrection, bWidgetsInitializedThisFrame, bLogUnhandedWidgetInitializations, bAllowInput, bAllowFocus, bAutoPlay, bPauseGameWhileActive, bDisableWorldRendering, bCaptureWorldRendering, bCloseOnLevelChange, bOnlyOwnerFocusable, bForceFullViewport, bDiscardNonOwnerInput, bCaptureInput, bCaptureMouseInput, bIgnoreMouseInput, bIsSplitscreenLayoutModified, bShowHardwareMouseCursor, bForceFullScreen, bBlurLesserMovies, bHideLesserMovies, bIsPriorityBlurred, bIsPriorityHidden, bIgnoreVisibilityEffect, bIgnoreBlurEffect
			constexpr uintptr_t RenderTexture = 0x0130;
			constexpr uintptr_t LocalPlayerOwnerIndex = 0x0138;
			constexpr uintptr_t ExternalInterface = 0x0140;
			constexpr uintptr_t CaptureKeys = 0x0148;
			constexpr uintptr_t FocusIgnoreKeys = 0x0158;
			constexpr uintptr_t ExternalTextures = 0x0168;
			constexpr uintptr_t SoundThemes = 0x0178;
			constexpr uintptr_t TimingMode = 0x0188;
			constexpr uintptr_t RenderTextureMode = 0x0189;
			constexpr uintptr_t Priority = 0x018A;
			constexpr uintptr_t WidgetBindings = 0x0190;
			constexpr uintptr_t UnknownData02 = 0x01A0;
			constexpr uintptr_t SplitscreenLayoutObject = 0x01F0;
			constexpr uintptr_t SplitscreenLayoutYAdjust = 0x01F8;
		}

		namespace GFxObject {
			constexpr uintptr_t Value = 0x0060;
			constexpr uintptr_t SubWidgetBindings = 0x0090;
		}

		namespace GFxRawData {
			constexpr uintptr_t RawData = 0x0060;
			constexpr uintptr_t ReferencedSwfs = 0x0070;
			constexpr uintptr_t References = 0x0080;
			constexpr uintptr_t UserReferences = 0x0090;
		}

		namespace SwfMovie {
			constexpr uintptr_t Bitfields_0x00A0 = 0x00A0;  // Multiple: bUsesFontlib, bSetSRGBOnImportedTextures, bPackTextures, bForceSquarePacking
			constexpr uintptr_t SourceFile = 0x00A8;
			constexpr uintptr_t PackTextureSize = 0x00B8;
			constexpr uintptr_t TextureRescale = 0x00BC;
			constexpr uintptr_t TextureFormat = 0x00C0;
			constexpr uintptr_t SourceFileTimestamp = 0x00D0;
			constexpr uintptr_t SourceFileCRC = 0x00E0;
			constexpr uintptr_t Editions = 0x00E8;
			constexpr uintptr_t Features = 0x00F8;
			constexpr uintptr_t RTTextures = 0x0108;
			constexpr uintptr_t RTVideoTextures = 0x010C;
			constexpr uintptr_t ImportTimeStamp = 0x0110;
		}

	}

	// ===== IPDRV MODULE =====
	namespace IpDrv {

		namespace AdHocErrors {
			constexpr uintptr_t AdHocError = 0x0080;
		}

		namespace AvatarDownload {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t URL = 0x00A8;
			constexpr uintptr_t AvatarSize = 0x00B8;
			constexpr uintptr_t Texture = 0x00C0;
		}

		namespace AvatarDownloadComponent {
			constexpr uintptr_t AvatarDownloadCache = 0x0070;
			constexpr uintptr_t ImageDownloader = 0x0078;
		}

		namespace AvatarDownloadMap {
			constexpr uintptr_t AvatarMap = 0x0070;
			constexpr uintptr_t ImageMap = 0x00C0;
			constexpr uintptr_t AvatarsPendingImages = 0x0110;
		}

		namespace ClientBeaconAddressResolver {
			constexpr uintptr_t BeaconPort = 0x0060;
			constexpr uintptr_t BeaconName = 0x0064;
		}

		namespace HTTPDownload {
			constexpr uintptr_t ProxyServerHost = 0x0AB0;
			constexpr uintptr_t ProxyServerPort = 0x0AC0;
			constexpr uintptr_t MaxRedirection = 0x0AC4;
			constexpr uintptr_t ConnectionTimeout = 0x0AC8;
			constexpr uintptr_t UnknownData00 = 0x0ACC;
		}

		namespace HttpRequestCurl {
			constexpr uintptr_t Request = 0x0078;
			constexpr uintptr_t RequestVerb = 0x0080;
			constexpr uintptr_t RequestURL = 0x0090;
			constexpr uintptr_t Payload = 0x00A0;
			constexpr uintptr_t AllowedRedirectURLs = 0x00B0;
		}

		namespace HttpResponseCurl {
			constexpr uintptr_t Response = 0x0060;
			constexpr uintptr_t Payload = 0x0068;
		}

		namespace ImageDecoder {
			constexpr uintptr_t VfTable_FTickableObject = 0x0060;
			constexpr uintptr_t ActiveDecodeRequests = 0x0068;
		}

		namespace InternetLink {
			constexpr uintptr_t LinkMode = 0x0268;
			constexpr uintptr_t InLineMode = 0x0269;
			constexpr uintptr_t OutLineMode = 0x026A;
			constexpr uintptr_t ReceiveMode = 0x026B;
			constexpr uintptr_t Socket = 0x0270;
			constexpr uintptr_t Port = 0x0278;
			constexpr uintptr_t RemoteSocket = 0x0280;
			constexpr uintptr_t PrivateResolveInfo = 0x0288;
			constexpr uintptr_t DataPending = 0x0290;
		}

		namespace MCPBase {
			constexpr uintptr_t VfTable_FTickableObject = 0x0078;
		}

		namespace McpClashMobBase {
			constexpr uintptr_t McpClashMobClassName = 0x0078;
		}

		namespace McpClashMobManager {
			constexpr uintptr_t ChallengeListUrl = 0x0118;
			constexpr uintptr_t ChallengeStatusUrl = 0x0128;
			constexpr uintptr_t ChallengeMultiStatusUrl = 0x0138;
			constexpr uintptr_t AcceptChallengeUrl = 0x0148;
			constexpr uintptr_t UpdateChallengeProgressUrl = 0x0158;
			constexpr uintptr_t UpdateRewardProgressUrl = 0x0168;
			constexpr uintptr_t HTTPRequestChallengeList = 0x0178;
			constexpr uintptr_t ChallengeUserRequests = 0x0180;
			constexpr uintptr_t ChallengeEvents = 0x0190;
			constexpr uintptr_t ChallengeUserStatus = 0x01A0;
			constexpr uintptr_t TempChallengeUserStatus = 0x01B0;
			constexpr uintptr_t TempChallengeUserStatusArray = 0x0240;
			constexpr uintptr_t FileCache_Object = 0x0250;
			constexpr uintptr_t FileCache_Interface = 0x0258;
			constexpr uintptr_t FileDownloader = 0x0260;
		}

		namespace McpGroupsBase {
			constexpr uintptr_t McpGroupsManagerClassName = 0x0078;
			constexpr uintptr_t GroupLists = 0x0088;
		}

		namespace McpGroupsManager {
			constexpr uintptr_t CreateGroupUrl = 0x0170;
			constexpr uintptr_t DeleteGroupUrl = 0x0180;
			constexpr uintptr_t QueryGroupsUrl = 0x0190;
			constexpr uintptr_t QueryGroupMembersUrl = 0x01A0;
			constexpr uintptr_t AddGroupMembersUrl = 0x01B0;
			constexpr uintptr_t RemoveGroupMembersUrl = 0x01C0;
			constexpr uintptr_t DeleteAllGroupsUrl = 0x01D0;
			constexpr uintptr_t AcceptGroupInviteUrl = 0x01E0;
			constexpr uintptr_t RejectGroupInviteUrl = 0x01F0;
		}

		namespace McpIdMappingBase {
			constexpr uintptr_t McpIdMappingClassName = 0x0078;
		}

		namespace McpIdMappingManager {
			constexpr uintptr_t AccountMappings = 0x00B8;
			constexpr uintptr_t AddMappingUrl = 0x00C8;
			constexpr uintptr_t QueryMappingUrl = 0x00D8;
			constexpr uintptr_t AddMappingRequests = 0x00E8;
			constexpr uintptr_t QueryMappingRequests = 0x00F8;
		}

		namespace McpManagedValueManager {
			constexpr uintptr_t CreateSaveSlotUrl = 0x00E8;
			constexpr uintptr_t ReadSaveSlotUrl = 0x00F8;
			constexpr uintptr_t UpdateValueUrl = 0x0108;
			constexpr uintptr_t DeleteValueUrl = 0x0118;
			constexpr uintptr_t SaveSlots = 0x0128;
			constexpr uintptr_t CreateSaveSlotRequests = 0x0138;
			constexpr uintptr_t ReadSaveSlotRequests = 0x0148;
			constexpr uintptr_t UpdateValueRequests = 0x0158;
			constexpr uintptr_t DeleteValueRequests = 0x0168;
		}

		namespace McpManagedValueManagerBase {
			constexpr uintptr_t McpManagedValueManagerClassName = 0x0078;
		}

		namespace McpMessageBase {
			constexpr uintptr_t McpMessageManagerClassName = 0x0078;
			constexpr uintptr_t CompressionType = 0x0088;
			constexpr uintptr_t MessageContentsList = 0x0090;
			constexpr uintptr_t MessageLists = 0x00A0;
		}

		namespace McpMessageManager {
			constexpr uintptr_t VfTable_FTickableObject = 0x0110;
			constexpr uintptr_t CreateMessageUrl = 0x0118;
			constexpr uintptr_t DeleteMessageUrl = 0x0128;
			constexpr uintptr_t QueryMessagesUrl = 0x0138;
			constexpr uintptr_t QueryMessageContentsUrl = 0x0148;
			constexpr uintptr_t DeleteAllMessagesUrl = 0x0158;
			constexpr uintptr_t CompressMessageRequests = 0x0168;
			constexpr uintptr_t UncompressMessageRequests = 0x0178;
		}

		namespace McpServerTimeBase {
			constexpr uintptr_t McpServerTimeClassName = 0x0078;
		}

		namespace McpServerTimeManager {
			constexpr uintptr_t TimeStampUrl = 0x00A0;
			constexpr uintptr_t LastTimeStamp = 0x00B0;
			constexpr uintptr_t HTTPRequestServerTime = 0x00C0;
		}

		namespace McpServiceBase {
			constexpr uintptr_t McpConfigClassName = 0x0060;
			constexpr uintptr_t McpConfig = 0x0070;
		}

		namespace McpServiceConfig {
			constexpr uintptr_t Protocol = 0x0060;
			constexpr uintptr_t Domain = 0x0070;
			constexpr uintptr_t AppKey = 0x0080;
			constexpr uintptr_t AppSecret = 0x0090;
		}

		namespace McpUserCloudFileDownload {
			constexpr uintptr_t EnumerateCloudFilesUrl = 0x0078;
			constexpr uintptr_t ReadCloudFileUrl = 0x0088;
			constexpr uintptr_t WriteCloudFileUrl = 0x0098;
			constexpr uintptr_t DeleteCloudFileUrl = 0x00A8;
			constexpr uintptr_t UserCloudFileRequests = 0x00B8;
		}

		namespace McpUserInventoryBase {
			constexpr uintptr_t McpUserInventoryClassName = 0x0078;
		}

		namespace McpUserInventoryManager {
			constexpr uintptr_t CreateSaveSlotUrl = 0x0178;
			constexpr uintptr_t DeleteSaveSlotUrl = 0x0188;
			constexpr uintptr_t ListSaveSlotUrl = 0x0198;
			constexpr uintptr_t ListItemsUrl = 0x01A8;
			constexpr uintptr_t PurchaseItemUrl = 0x01B8;
			constexpr uintptr_t SellItemUrl = 0x01C8;
			constexpr uintptr_t EarnItemUrl = 0x01D8;
			constexpr uintptr_t ConsumeItemUrl = 0x01E8;
			constexpr uintptr_t DeleteItemUrl = 0x01F8;
			constexpr uintptr_t IapRecordUrl = 0x0208;
			constexpr uintptr_t SaveSlots = 0x0218;
			constexpr uintptr_t SaveSlotRequests = 0x0228;
			constexpr uintptr_t ListSaveSlotRequests = 0x0238;
			constexpr uintptr_t ListItemsRequests = 0x0248;
			constexpr uintptr_t ItemRequests = 0x0258;
		}

		namespace McpUserManager {
			constexpr uintptr_t UserStatuses = 0x00E8;
			constexpr uintptr_t RegisterUserMcpUrl = 0x00F8;
			constexpr uintptr_t RegisterUserFacebookUrl = 0x0108;
			constexpr uintptr_t QueryUserUrl = 0x0118;
			constexpr uintptr_t QueryUsersUrl = 0x0128;
			constexpr uintptr_t DeleteUserUrl = 0x0138;
			constexpr uintptr_t FacebookAuthUrl = 0x0148;
			constexpr uintptr_t McpAuthUrl = 0x0158;
			constexpr uintptr_t RegisterUserRequests = 0x0168;
			constexpr uintptr_t QueryUsersRequests = 0x0178;
			constexpr uintptr_t DeleteUserRequests = 0x0188;
			constexpr uintptr_t AuthUserRequests = 0x0198;
		}

		namespace McpUserManagerBase {
			constexpr uintptr_t McpUserManagerClassName = 0x0078;
		}

		namespace MeshBeacon {
			constexpr uintptr_t VfTable_FTickableObject = 0x0060;
			constexpr uintptr_t MeshBeaconPort = 0x0068;
			constexpr uintptr_t Socket = 0x0070;
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bIsInTick, bWantsDeferredDestroy, bShouldTick
			constexpr uintptr_t HeartbeatTimeout = 0x007C;
			constexpr uintptr_t ElapsedHeartbeatTime = 0x0080;
			constexpr uintptr_t BeaconName = 0x0084;
			constexpr uintptr_t SocketSendBufferSize = 0x008C;
			constexpr uintptr_t SocketReceiveBufferSize = 0x0090;
			constexpr uintptr_t MaxBandwidthTestBufferSize = 0x0094;
			constexpr uintptr_t MinBandwidthTestBufferSize = 0x0098;
			constexpr uintptr_t MaxBandwidthTestSendTime = 0x009C;
			constexpr uintptr_t MaxBandwidthTestReceiveTime = 0x00A0;
			constexpr uintptr_t MaxBandwidthHistoryEntries = 0x00A4;
		}

		namespace MeshBeaconClient {
			constexpr uintptr_t HostPendingRequest = 0x00A8;
			constexpr uintptr_t ClientPendingRequest = 0x00B8;
			constexpr uintptr_t CurrentBandwidthTest = 0x0128;
			constexpr uintptr_t ClientBeaconState = 0x013C;
			constexpr uintptr_t ClientBeaconRequestType = 0x013D;
			constexpr uintptr_t ConnectionRequestTimeout = 0x0140;
			constexpr uintptr_t ConnectionRequestElapsedTime = 0x0144;
			constexpr uintptr_t ResolverClassName = 0x0148;
			constexpr uintptr_t ResolverClass = 0x0158;
			constexpr uintptr_t Resolver = 0x0160;
			constexpr uintptr_t bUsingRegisteredAddr = 0x0168;
		}

		namespace MeshBeaconHost {
			constexpr uintptr_t ClientConnections = 0x00A8;
			constexpr uintptr_t PendingPlayerConnections = 0x00B8;
			constexpr uintptr_t OwningPlayerId = 0x00C8;
			constexpr uintptr_t bAllowBandwidthTesting = 0x0110;
			constexpr uintptr_t ConnectionBacklog = 0x0114;
		}

		namespace OnlineAuthInterfaceImpl {
			constexpr uintptr_t VfTable_IOnlineAuthInterface = 0x0060;
			constexpr uintptr_t AuthCodeRequests = 0x0068;
			constexpr uintptr_t NextAuthCodeID = 0x0078;
			constexpr uintptr_t OwningSubsystem = 0x0080;
			constexpr uintptr_t bAuthReady = 0x0088;
			constexpr uintptr_t ClientAuthSessions = 0x0090;
			constexpr uintptr_t ServerAuthSessions = 0x00C8;
			constexpr uintptr_t PeerAuthSessions = 0x0100;
			constexpr uintptr_t LocalClientAuthSessions = 0x0138;
			constexpr uintptr_t LocalServerAuthSessions = 0x0170;
			constexpr uintptr_t LocalPeerAuthSessions = 0x01A8;
		}

		namespace OnlineEventsInterfaceMcp {
			constexpr uintptr_t EventUploadConfigs = 0x0080;
			constexpr uintptr_t MCPEventPostObjects = 0x0090;
			constexpr uintptr_t DisabledUploadTypes = 0x00A0;
			constexpr uintptr_t bBinaryStats = 0x00B0;
		}

		namespace OnlineFriendsInterfaceImpl {
			constexpr uintptr_t VfTable_IOnlineFriendsInterface = 0x0060;
		}

		namespace OnlineGameInterfaceImpl {
			constexpr uintptr_t OwningSubsystem = 0x0060;
			constexpr uintptr_t GameSettings = 0x0068;
			constexpr uintptr_t GameSearch = 0x0070;
			constexpr uintptr_t LanBeaconState = 0x0128;
			constexpr uintptr_t LanNonce = 0x0129;
			constexpr uintptr_t LanAnnouncePort = 0x0134;
			constexpr uintptr_t LanGameUniqueId = 0x0138;
			constexpr uintptr_t LanPacketPlatformMask = 0x013C;
			constexpr uintptr_t LanQueryTimeLeft = 0x0140;
			constexpr uintptr_t LanQueryTimeout = 0x0144;
			constexpr uintptr_t LanBeacon = 0x0148;
			constexpr uintptr_t SessionInfo = 0x0150;
		}

		namespace OnlineImageDownloaderWeb {
			constexpr uintptr_t MaxSimultaneousDownloads = 0x0060;
			constexpr uintptr_t Downloads = 0x0068;
			constexpr uintptr_t URLQueue = 0x00B8;
			constexpr uintptr_t Decoder = 0x00C8;
			constexpr uintptr_t PendingDownloadCount = 0x00D0;
			constexpr uintptr_t ActiveDownloadCount = 0x00D4;
			constexpr uintptr_t SucceededDownloadCount = 0x00D8;
			constexpr uintptr_t FailedDownloadCount = 0x00DC;
		}

		namespace OnlineLobbyInterfaceImpl {
			constexpr uintptr_t ActiveLobbies = 0x0140;
			constexpr uintptr_t CachedFindLobbyResults = 0x0150;
			constexpr uintptr_t CachedBinaryData = 0x0160;
		}

		namespace OnlineNewsInterfaceMcp {
			constexpr uintptr_t NewsItems = 0x0080;
			constexpr uintptr_t bNeedsTicking = 0x00A0;
		}

		namespace OnlinePersistentAuthInterfaceImpl {
			constexpr uintptr_t VfTable_IOnlinePersistentAuthInterface = 0x0060;
		}

		namespace OnlinePlaylistManager {
			constexpr uintptr_t VfTable_FTickableObject = 0x0060;
			constexpr uintptr_t Playlists = 0x0068;
			constexpr uintptr_t PlaylistFileNames = 0x0078;
			constexpr uintptr_t DatastoresToRefresh = 0x0088;
			constexpr uintptr_t DownloadCount = 0x0098;
			constexpr uintptr_t SuccessfulCount = 0x009C;
			constexpr uintptr_t VersionNumber = 0x00A0;
			constexpr uintptr_t PopulationData = 0x00A8;
			constexpr uintptr_t WorldwideTotalPlayers = 0x00B8;
			constexpr uintptr_t RegionTotalPlayers = 0x00BC;
			constexpr uintptr_t TitleFileInterface_Object = 0x00C0;
			constexpr uintptr_t TitleFileInterface_Interface = 0x00C8;
			constexpr uintptr_t PopulationFileName = 0x00D0;
			constexpr uintptr_t NextPlaylistPopulationUpdateTime = 0x00E0;
			constexpr uintptr_t PlaylistPopulationUpdateInterval = 0x00E4;
			constexpr uintptr_t MinPlaylistIdToReport = 0x00E8;
			constexpr uintptr_t CurrentPlaylistId = 0x00EC;
			constexpr uintptr_t EventsInterfaceName = 0x00F0;
			constexpr uintptr_t DataCenterId = 0x00F8;
			constexpr uintptr_t DataCenterFileName = 0x0100;
			constexpr uintptr_t LastPlaylistDownloadTime = 0x0110;
			constexpr uintptr_t PlaylistRefreshInterval = 0x0114;
		}

		namespace OnlinePlaylistProvider {
			constexpr uintptr_t PlaylistId = 0x00A0;
			constexpr uintptr_t PlaylistGameTypeNames = 0x00A8;
			constexpr uintptr_t DisplayName = 0x00B8;
			constexpr uintptr_t Priority = 0x00C8;
		}

		namespace OnlineSubsystemCommonImpl {
			constexpr uintptr_t VoiceEngine = 0x0378;
			constexpr uintptr_t MaxLocalTalkers = 0x0380;
			constexpr uintptr_t MaxRemoteTalkers = 0x0384;
			constexpr uintptr_t bIsUsingSpeechRecognition = 0x0388;
			constexpr uintptr_t GameInterfaceImpl = 0x0390;
			constexpr uintptr_t AuthInterfaceImpl = 0x0398;
			constexpr uintptr_t PurchaseInterfaceImpl = 0x03A0;
		}

		namespace OnlineTitleFileDownloadBase {
			constexpr uintptr_t BaseUrl = 0x00A0;
			constexpr uintptr_t RequestFileListURL = 0x00B0;
			constexpr uintptr_t RequestFileURL = 0x00C0;
			constexpr uintptr_t Timeout = 0x00D0;
			constexpr uintptr_t FilesToUrls = 0x00D8;
		}

		namespace OnlineTitleFileDownloadMcp {
			constexpr uintptr_t TitleFiles = 0x0118;
			constexpr uintptr_t DownloadCount = 0x0128;
		}

		namespace OnlineTitleFileDownloadWeb {
			constexpr uintptr_t TitleFiles = 0x0118;
		}

		namespace PartyBeacon {
			constexpr uintptr_t VfTable_FTickableObject = 0x0060;
			constexpr uintptr_t PartyBeaconPort = 0x0068;
			constexpr uintptr_t Socket = 0x0070;
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bIsInTick, bWantsDeferredDestroy, bShouldTick
			constexpr uintptr_t HeartbeatTimeout = 0x007C;
			constexpr uintptr_t ElapsedHeartbeatTime = 0x0080;
			constexpr uintptr_t BeaconName = 0x0084;
		}

		namespace PartyBeaconClient {
			constexpr uintptr_t HostPendingRequest = 0x00A8;
			constexpr uintptr_t PendingRequest = 0x00B8;
			constexpr uintptr_t ClientBeaconState = 0x0118;
			constexpr uintptr_t ClientBeaconRequestType = 0x0119;
			constexpr uintptr_t ReservationRequestTimeout = 0x011C;
			constexpr uintptr_t ReservationRequestElapsedTime = 0x0120;
			constexpr uintptr_t ResolverClassName = 0x0128;
			constexpr uintptr_t ResolverClass = 0x0138;
			constexpr uintptr_t Resolver = 0x0140;
		}

		namespace PartyBeaconHost {
			constexpr uintptr_t Clients = 0x00A8;
			constexpr uintptr_t NumTeams = 0x00B8;
			constexpr uintptr_t NumPlayersPerTeam = 0x00BC;
			constexpr uintptr_t NumReservations = 0x00C0;
			constexpr uintptr_t NumConsumedReservations = 0x00C4;
			constexpr uintptr_t Reservations = 0x00C8;
			constexpr uintptr_t OnlineSessionName = 0x00D8;
			constexpr uintptr_t ConnectionBacklog = 0x00E0;
			constexpr uintptr_t ForceTeamNum = 0x00E4;
			constexpr uintptr_t ReservedHostTeamNum = 0x00E8;
			constexpr uintptr_t bBestFitTeamAssignment = 0x00EC;
			constexpr uintptr_t BeaconState = 0x00F0;
		}

		namespace TargetUserChatPermChangedEvent {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t TargetId = 0x00A8;
			constexpr uintptr_t bAllowed = 0x00F0;
		}

		namespace TcpLink {
			constexpr uintptr_t LinkState = 0x0298;
			constexpr uintptr_t RemoteAddr = 0x029C;
			constexpr uintptr_t AcceptClass = 0x02B0;
			constexpr uintptr_t SendFIFO = 0x02B8;
			constexpr uintptr_t RecvBuf = 0x02C8;
		}

		namespace TcpNetDriver {
			constexpr uintptr_t UnknownData00 = 0x0258;
			constexpr uintptr_t AllowPlayerPortUnreach = 0x02B0;
			constexpr uintptr_t LogPortUnreach = 0x02B4;
			constexpr uintptr_t UnknownData01 = 0x02B8;
		}

		namespace TcpipConnection {
			constexpr uintptr_t UnknownData00 = 0xB1F0;
		}

		namespace TitleFileDownloadCache {
			constexpr uintptr_t TitleFiles = 0x0080;
		}

		namespace UIDataStore_OnlinePlaylists {
			constexpr uintptr_t ProviderClassName = 0x00A0;
			constexpr uintptr_t ProviderClass = 0x00B0;
			constexpr uintptr_t RankedDataProviders = 0x00B8;
			constexpr uintptr_t UnrankedDataProviders = 0x00C8;
			constexpr uintptr_t RecModeDataProviders = 0x00D8;
			constexpr uintptr_t PrivateDataProviders = 0x00E8;
			constexpr uintptr_t PlaylistMan = 0x00F8;
		}

		namespace WebApplication {
			constexpr uintptr_t WorldInfo = 0x0060;
			constexpr uintptr_t WebServer = 0x0068;
			constexpr uintptr_t Path = 0x0070;
		}

		namespace WebConnection {
			constexpr uintptr_t WebServer = 0x02D8;
			constexpr uintptr_t ReceivedData = 0x02E0;
			constexpr uintptr_t Request = 0x02F0;
			constexpr uintptr_t Response = 0x02F8;
			constexpr uintptr_t Application = 0x0300;
			constexpr uintptr_t bDelayCleanup = 0x0308;
			constexpr uintptr_t RawBytesExpecting = 0x030C;
			constexpr uintptr_t MaxValueLength = 0x0310;
			constexpr uintptr_t MaxLineLength = 0x0314;
			constexpr uintptr_t ConnID = 0x0318;
		}

		namespace WebRequest {
			constexpr uintptr_t RemoteAddr = 0x0060;
			constexpr uintptr_t URI = 0x0070;
			constexpr uintptr_t Username = 0x0080;
			constexpr uintptr_t Password = 0x0090;
			constexpr uintptr_t ContentLength = 0x00A0;
			constexpr uintptr_t ContentType = 0x00A8;
			constexpr uintptr_t RequestType = 0x00B8;
			constexpr uintptr_t HeaderMap = 0x00C0;
			constexpr uintptr_t VariableMap = 0x0110;
		}

		namespace WebResponse {
			constexpr uintptr_t Headers = 0x0060;
			constexpr uintptr_t ReplacementMap = 0x0070;
			constexpr uintptr_t IncludePath = 0x00C0;
			constexpr uintptr_t CharSet = 0x00D0;
			constexpr uintptr_t Connection = 0x00E0;
			constexpr uintptr_t Bitfields_0x00E8 = 0x00E8;  // Multiple: bSentText, bSentResponse
		}

		namespace WebServer {
			constexpr uintptr_t ServerName = 0x02D8;
			constexpr uintptr_t Applications = 0x02E8;
			constexpr uintptr_t ApplicationPaths = 0x0388;
			constexpr uintptr_t bEnabled = 0x0428;
			constexpr uintptr_t ListenPort = 0x042C;
			constexpr uintptr_t MaxConnections = 0x0430;
			constexpr uintptr_t DefaultApplication = 0x0434;
			constexpr uintptr_t ExpirationSeconds = 0x0438;
			constexpr uintptr_t ServerURL = 0x0440;
			constexpr uintptr_t ApplicationObjects = 0x0450;
			constexpr uintptr_t ConnectionCount = 0x04A0;
			constexpr uintptr_t ConnID = 0x04A4;
		}

	}

	// ===== ONLINESUBSYSTEMEOS MODULE =====
	namespace OnlineSubsystemEOS {

		namespace EOSErrors {
			constexpr uintptr_t EpicUnknownError = 0x0080;
			constexpr uintptr_t BlockedListNotFound = 0x0088;
			constexpr uintptr_t AcceptFriendRequestFailed = 0x0090;
			constexpr uintptr_t RejectFriendRequestFailed = 0x0098;
			constexpr uintptr_t GameClipsActivationFailed = 0x00A0;
			constexpr uintptr_t GameClipsCleanAudioFailed = 0x00A8;
			constexpr uintptr_t GameClipsRecorderInitFailed = 0x00B0;
			constexpr uintptr_t GameClipsStartRecordingFailed = 0x00B8;
			constexpr uintptr_t GameClipsMaskAreaInvalid = 0x00C0;
			constexpr uintptr_t GameClipsStatusListenerFailed = 0x00C8;
			constexpr uintptr_t GameClipsUserStatusListenerFailed = 0x00D0;
			constexpr uintptr_t GameClipsNotAvailable = 0x00D8;
			constexpr uintptr_t GameClipsFailedToUpload = 0x00E0;
			constexpr uintptr_t GameClipsCoolingDown = 0x00E8;
			constexpr uintptr_t GameClipsUploadLimitReached = 0x00F0;
		}

		namespace OnlineAuthInterfaceEOS {
			constexpr uintptr_t PlayerInterfaceEOS = 0x03C8;
		}

		namespace OnlineFriendsInterfaceEOS {
			constexpr uintptr_t PlayerInterfaceEOS = 0x0080;
		}

		namespace OnlineGameClipsInterfaceEOS {
			constexpr uintptr_t GameClipsHandle = 0x0060;
		}

		namespace OnlineGameInterfaceEOS {
			constexpr uintptr_t SessionsHandle = 0x0318;
			constexpr uintptr_t CurrentSearchHandle = 0x0320;
			constexpr uintptr_t PlayerInterfaceEOS = 0x0328;
			constexpr uintptr_t bGameSessionUpdateInProgress = 0x0330;
		}

		namespace OnlinePersistentAuthInterfaceEOS {
			constexpr uintptr_t PlayerInterfaceEOS = 0x00B8;
		}

		namespace OnlinePlayerInterfaceEOS {
			constexpr uintptr_t AuthHandle = 0x0060;
			constexpr uintptr_t FriendsHandle = 0x0068;
			constexpr uintptr_t UserInfoHandle = 0x0070;
			constexpr uintptr_t PresenceHandle = 0x0078;
			constexpr uintptr_t ConnectHandle = 0x0080;
			constexpr uintptr_t PDSHandle = 0x0088;
			constexpr uintptr_t EcomHandle = 0x0090;
			constexpr uintptr_t OwningSubsystem = 0x0098;
			constexpr uintptr_t GameInterfaceEOS = 0x00A0;
			constexpr uintptr_t PersistentAuthInterfaceEOS = 0x00A8;
			constexpr uintptr_t VoiceInterfaceEOS = 0x00B0;
			constexpr uintptr_t DefaultLocalUser = 0x00B8;
			constexpr uintptr_t ProfileDataDirectory = 0x00C0;
			constexpr uintptr_t ProfileDataExtension = 0x00D0;
			constexpr uintptr_t CachedProfile = 0x0100;
			constexpr uintptr_t LastProfileSettings = 0x0108;
			constexpr uintptr_t FriendsReadState = 0x0128;
			constexpr uintptr_t StatusMappings = 0x0180;
			constexpr uintptr_t DefaultStatus = 0x0190;
			constexpr uintptr_t CachedFriendMessages = 0x01B0;
			constexpr uintptr_t AchievementsHandle = 0x01F0;
		}

		namespace OnlineStatsInterfaceEOS {
			constexpr uintptr_t StatsHandle = 0x0060;
			constexpr uintptr_t PlayerInterfaceEOS = 0x0068;
		}

		namespace OnlineSubsystemEOS {
			constexpr uintptr_t PlayerInterfaceEOS = 0x03D8;
			constexpr uintptr_t GameInterfaceEOS = 0x03E0;
			constexpr uintptr_t StatsInterfaceEOS = 0x03E8;
			constexpr uintptr_t AuthInterfaceEOS = 0x03F0;
			constexpr uintptr_t PersistentAuthInterfaceEOS = 0x03F8;
			constexpr uintptr_t FriendsInterfaceEOS = 0x0400;
			constexpr uintptr_t UserCloudFileInterfaceEOS = 0x0408;
			constexpr uintptr_t VoiceInterfaceEOS = 0x0410;
			constexpr uintptr_t GameClipsInterfaceEOS = 0x0418;
			constexpr uintptr_t AuthHandle = 0x0430;
			constexpr uintptr_t FriendsHandle = 0x0438;
			constexpr uintptr_t UserInfoHandle = 0x0440;
			constexpr uintptr_t PresenceHandle = 0x0448;
			constexpr uintptr_t ConnectHandle = 0x0450;
			constexpr uintptr_t SessionsHandle = 0x0458;
			constexpr uintptr_t PDSHandle = 0x0460;
			constexpr uintptr_t StatsHandle = 0x0468;
			constexpr uintptr_t AchievementsHandle = 0x0470;
			constexpr uintptr_t EcomHandle = 0x0478;
			constexpr uintptr_t UIHandle = 0x0480;
			constexpr uintptr_t RTCHandle = 0x0488;
			constexpr uintptr_t RTCAudioHandle = 0x0490;
			constexpr uintptr_t RTCAdminHandle = 0x0498;
			constexpr uintptr_t GameClipsHandle = 0x04A0;
			constexpr uintptr_t EULATrackingHandle = 0x04A8;
			constexpr uintptr_t UnlockedDLC = 0x04B0;
		}

		namespace OnlineUserCloudFileInterfaceEOS {
			constexpr uintptr_t PDSHandle = 0x0060;
			constexpr uintptr_t LastReadFileErrorCode = 0x0068;
			constexpr uintptr_t PlayerInterfaceEOS = 0x0070;
		}

		namespace OnlineVoiceInterfaceEOS {
			constexpr uintptr_t RTCHandle = 0x0060;
			constexpr uintptr_t RTCAudioHandle = 0x0068;
			constexpr uintptr_t RTCAdminHandle = 0x0070;
			constexpr uintptr_t EULATrackingHandle = 0x0078;
			constexpr uintptr_t PlayerInterfaceEOS = 0x0080;
			constexpr uintptr_t InputAudioDevices = 0x0088;
			constexpr uintptr_t OutputAudioDevices = 0x0098;
			constexpr uintptr_t AccountsAcceptedVoiceModerationEULAMap = 0x00A8;
			constexpr uintptr_t AccountsWithAgreementResponse = 0x00F8;
			constexpr uintptr_t ProductUserIdToEpicUserIdMap = 0x0108;
			constexpr uintptr_t PendingEpicIdQueries = 0x0158;
		}

		namespace VideoRecorderEOS {
			constexpr uintptr_t VfTable_FTickableObject = 0x0060;
		}

		namespace __OnlinePlayerInterfaceEOS__LinkedAccount_0x1 {
			constexpr uintptr_t LocalUserNum = 0x0060;
		}

		namespace __OnlinePlayerInterfaceEOS__RequestNativePlatformAuthTicket_0x1 {
			constexpr uintptr_t LocalUserNum = 0x0060;
		}

	}

	// ===== ONLINESUBSYSTEMSTEAMWORKS MODULE =====
	namespace OnlineSubsystemSteamworks {

		namespace IpNetDriverSteamworks {
			constexpr uintptr_t bSteamSocketsOnly = 0x02D8;
			constexpr uintptr_t UnknownData00 = 0x02DC;
		}

		namespace OnlineAuthInterfaceSteamworks {
			constexpr uintptr_t EncryptedTicket = 0x03C8;
			constexpr uintptr_t EncryptedTicketHandle = 0x03D8;
		}

		namespace OnlineCommunityContentInterfaceSteamworks {
			constexpr uintptr_t OwningSubsystem = 0x0060;
			constexpr uintptr_t WorkshopItem = 0x0068;
		}

		namespace OnlineGameInterfaceSteamworks {
			constexpr uintptr_t ServerBrowserSearchQuery = 0x0318;
			constexpr uintptr_t InviteSearchQuery = 0x0390;
			constexpr uintptr_t ServerBrowserTimeout = 0x0408;
			constexpr uintptr_t InviteTimeout = 0x040C;
			constexpr uintptr_t InviteServerUID = 0x0410;
			constexpr uintptr_t InviteGameSearch = 0x0458;
			constexpr uintptr_t InviteLocationUrl = 0x0460;
			constexpr uintptr_t bFilterEngineBuild = 0x0490;
			constexpr uintptr_t FilterKeyToSteamKeyMap = 0x0498;
		}

		namespace OnlineLobbyInterfaceSteamworks {
			constexpr uintptr_t CreateLobbySettings = 0x02C0;
			constexpr uintptr_t PendingCreateLobbyResult = 0x02D0;
			constexpr uintptr_t bLobbySearchInProgress = 0x02E0;
			constexpr uintptr_t LobbyMemberKeys = 0x02E8;
		}

		namespace OnlinePurchaseInterfaceSteamworks {
			constexpr uintptr_t AppPriceInfoRequests = 0x0090;
		}

		namespace OnlineSubsystemSteamworks {
			constexpr uintptr_t Discord = 0x03D8;
			constexpr uintptr_t UnlockedDLC = 0x03E0;
			constexpr uintptr_t Bitfields_0x0400 = 0x0400;  // Multiple: bStoringAchievement, bClientStatsStorePending, bGSStatsStoresSuccess, bNeedsKeyboardTicking, bLastHasConnection, bIsStatsSessionOk, bHasSteamworksAccount, bShouldUseMcp, bShowIPCCount, bInterceptFriendMessages
			constexpr uintptr_t TotalGSStatsStoresPending = 0x0404;
			constexpr uintptr_t UserStatsReceivedState = 0x0408;
			constexpr uintptr_t LoggedInStatus = 0x0409;
			constexpr uintptr_t KeyboardInputWasCanceled = 0x040A;
			constexpr uintptr_t bWasKeyboardInputCanceled = 0x040B;
			constexpr uintptr_t CurrentNotificationPosition = 0x040C;
			constexpr uintptr_t CachedGameInt = 0x0410;
			constexpr uintptr_t LocalProfileName = 0x0418;
			constexpr uintptr_t LoggedInPlayerName = 0x0428;
			constexpr uintptr_t LoggedInPlayerId = 0x0438;
			constexpr uintptr_t LoggedInPlayerNum = 0x0480;
			constexpr uintptr_t LoggedInCountry = 0x0488;
			constexpr uintptr_t AvatarSizes = 0x0498;
			constexpr uintptr_t CachedProfile = 0x04B8;
			constexpr uintptr_t KeyboardInputResults = 0x0650;
			constexpr uintptr_t CurrentLocalTalker = 0x0660;
			constexpr uintptr_t LastLocalTalkerNotificationTime = 0x06B8;
			constexpr uintptr_t MaxTalkerNotificationTime = 0x06BC;
			constexpr uintptr_t PendingRequestUserInformation = 0x06C0;
			constexpr uintptr_t RemoteTalkers = 0x06D0;
			constexpr uintptr_t AppID = 0x06E0;
			constexpr uintptr_t CurrentStatsRead = 0x06E8;
			constexpr uintptr_t PendingStats = 0x06F0;
			constexpr uintptr_t KeyboardResultsString = 0x0700;
			constexpr uintptr_t ProfileCache = 0x0750;
			constexpr uintptr_t PlayerStorageCache = 0x0788;
			constexpr uintptr_t CachedFriendMessage = 0x0790;
			constexpr uintptr_t DeviceCache = 0x07A0;
			constexpr uintptr_t LocationUrlsForInvites = 0x07D0;
			constexpr uintptr_t LocationUrl = 0x07E0;
			constexpr uintptr_t CachedFriendMessages = 0x0830;
			constexpr uintptr_t StatusMappings = 0x0840;
			constexpr uintptr_t DefaultStatus = 0x0850;
			constexpr uintptr_t GameInviteMessage = 0x0860;
			constexpr uintptr_t ControllerStates = 0x0870;
			constexpr uintptr_t ConnectionPresenceTimeInterval = 0x0890;
			constexpr uintptr_t ConnectionPresenceElapsedTime = 0x0894;
			constexpr uintptr_t EncryptedProductKey = 0x0898;
			constexpr uintptr_t MuteList = 0x08A8;
			constexpr uintptr_t UserCloudFiles = 0x08B8;
			constexpr uintptr_t UserCloudMetadata = 0x08C8;
			constexpr uintptr_t SharedFileCache = 0x08D8;
			constexpr uintptr_t QueuedAvatarRequests = 0x08E8;
			constexpr uintptr_t AchievementMappings = 0x08F8;
			constexpr uintptr_t PendingAchievementProgress = 0x0908;
			constexpr uintptr_t LeaderboardList = 0x0918;
			constexpr uintptr_t DeferredLeaderboardReads = 0x0928;
			constexpr uintptr_t DeferredLeaderboardWrites = 0x0938;
			constexpr uintptr_t PendingLeaderboardStats = 0x0948;
			constexpr uintptr_t LeaderboardNameMappings = 0x0958;
			constexpr uintptr_t GameServerStatsMappings = 0x0968;
			constexpr uintptr_t CachedPurchaseInt = 0x0978;
			constexpr uintptr_t CachedAuthInt = 0x0980;
			constexpr uintptr_t PendingRedirects = 0x0988;
			constexpr uintptr_t LobbyInterfaceImpl = 0x0998;
		}

		namespace SteamWorkshopCommandlet {
			constexpr uintptr_t OnlineSub = 0x00B8;
		}

		namespace SteamWorkshopEngine {
			constexpr uintptr_t bHasFinsihed = 0x0B48;
		}

	}

	// ===== PROJECTX MODULE =====
	namespace ProjectX {

		namespace ActionQueue_X {
			constexpr uintptr_t ActionsPerSecond = 0x0070;
			constexpr uintptr_t QueueIndex = 0x0088;
		}

		namespace ActivateAnimSeriesComponent_X {
			constexpr uintptr_t AnimNodeName = 0x00A8;
		}

		namespace ActorComponent_X {
			constexpr uintptr_t Bitfields_0x00A0 = 0x00A0;  // Multiple: bTick, bIgnoreScriptAttach
		}

		namespace AdHocBeacon_X {
			constexpr uintptr_t VfTable_FTickableObject = 0x0060;
			constexpr uintptr_t pAdHoc = 0x0068;
		}

		namespace AdHocBrowser_X {
			constexpr uintptr_t AdHocBeacon = 0x0060;
			constexpr uintptr_t AdHocNodesOnNetwork = 0x0068;
			constexpr uintptr_t SearchTimeout = 0x0078;
			constexpr uintptr_t SearchTask = 0x0080;
			constexpr uintptr_t SearchResults = 0x0088;
			constexpr uintptr_t AdHocAccessPointsAvailable = 0x0098;
		}

		namespace AdHocInterface_X {
			constexpr uintptr_t OldLanBrowser = 0x0060;
			constexpr uintptr_t AdHocBeacon = 0x0068;
			constexpr uintptr_t OnlineGameParty = 0x0070;
			constexpr uintptr_t Matchmaking = 0x0078;
		}

		namespace AddReservationMessagePrivate_X {
			constexpr uintptr_t Settings = 0x00D0;
		}

		namespace AddReservationMessagePublic_X {
			constexpr uintptr_t Settings = 0x00D0;
			constexpr uintptr_t MapPrefs = 0x00F0;
		}

		namespace AddReservationMessage_X {
			constexpr uintptr_t Players = 0x0060;
			constexpr uintptr_t PartyLeaderID = 0x0070;
			constexpr uintptr_t ReservationID = 0x00B8;
			constexpr uintptr_t Bitfields_0x00C8 = 0x00C8;  // Multiple: bDisableCrossPlay, bMarkSplitscreenAsRemote
		}

		namespace AgeGateRequiredResponse {
			constexpr uintptr_t ageGateRequired = 0x0060;
		}

		namespace AnimNodeBlendBase_X {
			constexpr uintptr_t BlendTime = 0x0170;
			constexpr uintptr_t ChildBlendTimes = 0x0178;
			constexpr uintptr_t Bitfields_0x0188 = 0x0188;  // Multiple: bRebuildChildren, bChildrenUpdated
		}

		namespace AnimNodeBlendList_X {
			constexpr uintptr_t UnknownData00 = 0x018C;
		}

		namespace AnimNodeCustomSeries_X {
			constexpr uintptr_t UnknownData00 = 0x018C;
		}

		namespace AnimNodeSequence_X {
			constexpr uintptr_t AnimSetBlendTime = 0x01A8;
			constexpr uintptr_t bResetOnRelevant = 0x01AC;
			constexpr uintptr_t PrevAnimSeq = 0x01B0;
			constexpr uintptr_t PrevAnimLinkupIndex = 0x01B8;
			constexpr uintptr_t BlendTimeLeft = 0x01BC;
		}

		namespace AnimNodeSeries_X {
			constexpr uintptr_t Bitfields_0x0190 = 0x0190;  // Multiple: bActive, bInitialized
			constexpr uintptr_t IntroAnim = 0x0198;
			constexpr uintptr_t OutroAnim = 0x01A0;
		}

		namespace AnimNotify_PlayParticleEffect_X {
			constexpr uintptr_t PSC = 0x0098;
		}

		namespace AnimateParametersComponent_X {
			constexpr uintptr_t FloatParameters = 0x00A0;
			constexpr uintptr_t VectorParameters = 0x00B0;
			constexpr uintptr_t ColorParameters = 0x00C0;
			constexpr uintptr_t bResetMaterialsOnComplete = 0x00D0;
			constexpr uintptr_t AnimTime = 0x00D4;
			constexpr uintptr_t EndTime = 0x00D8;
		}

		namespace AppConfig_X {
			constexpr uintptr_t bSpinSleep = 0x0078;
		}

		namespace AprilConfig_X {
			constexpr uintptr_t StartTime = 0x0078;
			constexpr uintptr_t EndTime = 0x0080;
			constexpr uintptr_t Bitfields_0x0088 = 0x0088;  // Multiple: bChangeRankedIcons, bChangePlaylists, bChangeCrowd
			constexpr uintptr_t QuickChatDisplayOverrides = 0x0090;
			constexpr uintptr_t HatScale = 0x00A0;
			constexpr uintptr_t AntennaScale = 0x00A4;
		}

		namespace ArchetypePrefab_X {
			constexpr uintptr_t PrefabArchetypes = 0x0268;
			constexpr uintptr_t ArchetypeInstances = 0x0278;
		}

		namespace ArchetypeSpawnPoint_X {
			constexpr uintptr_t VfTable_IInterface_NavMeshPathObject = 0x0268;
			constexpr uintptr_t ArchetypePath = 0x0270;
			constexpr uintptr_t Bitfields_0x0280 = 0x0280;  // Multiple: bSeedNavMesh, bSpawnOnLevelStart, bOnlyAllowOneInstance
			constexpr uintptr_t ActorArchetype = 0x0288;
			constexpr uintptr_t PlacementSprite = 0x0290;
			constexpr uintptr_t ArchetypeSkeletalMesh = 0x0298;
			constexpr uintptr_t ArchetypeStaticMesh = 0x02A0;
			constexpr uintptr_t SpawnedActors = 0x02A8;
			constexpr uintptr_t SpawnedActor = 0x02B8;
		}

		namespace AvatarRequester_X {
			constexpr uintptr_t VanityConfig = 0x0060;
			constexpr uintptr_t AllRequests = 0x0068;
			constexpr uintptr_t PendingPermissionRequests = 0x0078;
			constexpr uintptr_t PendingAvatarRequests = 0x0088;
		}

		namespace BanMessage_X {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t BanType = 0x00A8;
			constexpr uintptr_t SeverityType = 0x00A9;
			constexpr uintptr_t Title = 0x00B0;
			constexpr uintptr_t Body = 0x00C0;
			constexpr uintptr_t BannedMinutes = 0x00D0;
			constexpr uintptr_t bContributedToBan = 0x00D4;
			constexpr uintptr_t Citations = 0x00D8;
			constexpr uintptr_t BannedUntilTime = 0x00E8;
		}

		namespace BeaconConfig_X {
			constexpr uintptr_t bUdpPingMetrics = 0x0078;
			constexpr uintptr_t MaxPingsPerAddress = 0x007C;
			constexpr uintptr_t MaxPingsWindowSeconds = 0x0080;
			constexpr uintptr_t StatsLogDelaySeconds = 0x0084;
			constexpr uintptr_t WaitForPongSeconds = 0x0088;
			constexpr uintptr_t PingsPerSecond = 0x008C;
		}

		namespace BlockStatusReporterConfig_X {
			constexpr uintptr_t DownloadTimeoutSeconds = 0x0078;
			constexpr uintptr_t bSubmitBugReportOnTimeout = 0x007C;
		}

		namespace BlockStatusReporter_X {
			constexpr uintptr_t PlayerSubscriptions = 0x0060;
			constexpr uintptr_t PrimaryStatus = 0x0070;
			constexpr uintptr_t Config = 0x0078;
		}

		namespace BlogConfig_X {
			constexpr uintptr_t Entries = 0x0078;
			constexpr uintptr_t MotD = 0x0088;
		}

		namespace BlogTile_X {
			constexpr uintptr_t Title = 0x0060;
			constexpr uintptr_t DescriptionHeader = 0x0070;
			constexpr uintptr_t Description = 0x0080;
			constexpr uintptr_t WebURL = 0x0090;
			constexpr uintptr_t CarName = 0x00A0;
			constexpr uintptr_t ImageURL = 0x00B0;
			constexpr uintptr_t StartTime = 0x00C0;
			constexpr uintptr_t StartTimeEpoch = 0x00D0;
			constexpr uintptr_t EndTime = 0x00D8;
			constexpr uintptr_t EndTimeEpoch = 0x00E8;
			constexpr uintptr_t LinkType = 0x00F0;
			constexpr uintptr_t ShopID = 0x00F4;
			constexpr uintptr_t ShopItemID = 0x00F8;
			constexpr uintptr_t ProductID = 0x00FC;
			constexpr uintptr_t CategoryID = 0x0100;
			constexpr uintptr_t PlaylistId = 0x0104;
			constexpr uintptr_t InfoURL = 0x0108;
		}

		namespace BoxCollisionShape_X {
			constexpr uintptr_t StartSize = 0x0088;
			constexpr uintptr_t EndSize = 0x0094;
		}

		namespace BreadcrumbBroadcaster_X {
			constexpr uintptr_t BreadcrumbConfig = 0x0060;
			constexpr uintptr_t BreadcrumbInstance = 0x0068;
		}

		namespace BreadcrumbConfig_X {
			constexpr uintptr_t PollCrumbsIntervalSeconds = 0x0078;
		}

		namespace BugMetrics_X {
			constexpr uintptr_t ReportedIDs = 0x0080;
		}

		namespace CDN_X {
			constexpr uintptr_t URL = 0x0060;
			constexpr uintptr_t BlogURL = 0x0070;
		}

		namespace CabinedModeResponse {
			constexpr uintptr_t ArrayOfCabinedModeData = 0x0060;
		}

		namespace CacheTimer_X {
			constexpr uintptr_t CacheTimeoutSeconds = 0x0070;
			constexpr uintptr_t CacheExpireTime = 0x0074;
			constexpr uintptr_t bEnabled = 0x0078;
		}

		namespace CachedWebData_X {
			constexpr uintptr_t Data = 0x0060;
			constexpr uintptr_t DataCRC = 0x0070;
			constexpr uintptr_t ETag = 0x0078;
			constexpr uintptr_t ContentType = 0x0088;
			constexpr uintptr_t Signature = 0x0098;
			constexpr uintptr_t LoadError = 0x00A8;
			constexpr uintptr_t DownloadError = 0x00B0;
			constexpr uintptr_t bNewData = 0x00B8;
		}

		namespace CameraAttachmentComponent_X {
			constexpr uintptr_t Attachments = 0x00A0;
			constexpr uintptr_t bDirtyTransform = 0x00B0;
		}

		namespace CameraModifier_CameraShake_X {
			constexpr uintptr_t UnknownData00 = 0x009C;
		}

		namespace CameraStateBlender_X {
			constexpr uintptr_t Transition = 0x0070;
			constexpr uintptr_t TransitionDelta = 0x00C0;
			constexpr uintptr_t CameraState = 0x00F0;
		}

		namespace CameraState_CamActorCinematic_X {
			constexpr uintptr_t UnknownData00 = 0x020C;
		}

		namespace CameraState_CamActor_X {
			constexpr uintptr_t bUseOverridePostProcess = 0x0090;
			constexpr uintptr_t CamActor = 0x0098;
			constexpr uintptr_t PrevPost = 0x00A0;
			constexpr uintptr_t PrevPostAlpha = 0x0208;
		}

		namespace CameraState_X {
			constexpr uintptr_t DefaultBlendParams = 0x0068;
			constexpr uintptr_t WorldInfo = 0x0078;
			constexpr uintptr_t Camera = 0x0080;
			constexpr uintptr_t bCanSwivel = 0x0088;
		}

		namespace Camera_X {
			constexpr uintptr_t States = 0x05B8;
			constexpr uintptr_t PCDeltaRotation = 0x05C8;
			constexpr uintptr_t OldControllerRotation = 0x05D4;
			constexpr uintptr_t PCDeltaLocation = 0x05E0;
			constexpr uintptr_t OldControllerLocation = 0x05EC;
			constexpr uintptr_t PreProcessPOV = 0x05F8;
			constexpr uintptr_t PostProcessPOV = 0x0624;
			constexpr uintptr_t Blender = 0x0650;
			constexpr uintptr_t ShakeLocationOffset = 0x0658;
			constexpr uintptr_t ShakeRotationOffset = 0x0664;
			constexpr uintptr_t ShakeFOVOffset = 0x0670;
			constexpr uintptr_t StartFadeColor = 0x0674;
			constexpr uintptr_t EndFadeColor = 0x0678;
			constexpr uintptr_t ClipOffset = 0x067C;
			constexpr uintptr_t LocationKnocks = 0x0688;
			constexpr uintptr_t RotationKnocks = 0x0698;
			constexpr uintptr_t Bitfields_0x06A8 = 0x06A8;  // Multiple: bDisableCameraShake, bSnapNextTransition
		}

		namespace CanvasTextureComponent_X {
			constexpr uintptr_t Mesh = 0x00A0;
			constexpr uintptr_t MaterialIndex = 0x00A8;
			constexpr uintptr_t MaterialParamName = 0x00AC;
			constexpr uintptr_t Texture = 0x00B8;
		}

		namespace CheckReservation_X {
			constexpr uintptr_t StartDelay = 0x0060;
			constexpr uintptr_t Rate = 0x0064;
			constexpr uintptr_t LastMatchmakingHeartbeatTime = 0x0068;
			constexpr uintptr_t CheckReservationTask = 0x0070;
			constexpr uintptr_t FoundReservation = 0x0090;
			constexpr uintptr_t Config = 0x0100;
			constexpr uintptr_t ReservationBeacon = 0x0108;
		}

		namespace ClanforgeReservation_X {
			constexpr uintptr_t ReserveURLs = 0x0060;
			constexpr uintptr_t ReserveState = 0x0090;
			constexpr uintptr_t RetryDelays = 0x0098;
			constexpr uintptr_t SendFailures = 0x00A8;
			constexpr uintptr_t QueuedRequests = 0x00B0;
			constexpr uintptr_t PendingRequest = 0x00C0;
		}

		namespace ClassPropertyConfig_X {
			constexpr uintptr_t Overrides = 0x0078;
		}

		namespace ClientNetMetrics_X {
			constexpr uintptr_t RecordPeriod = 0x0060;
			constexpr uintptr_t LastRecordTime = 0x0064;
			constexpr uintptr_t OldStats = 0x0068;
			constexpr uintptr_t GamePings = 0x0088;
			constexpr uintptr_t Pinger = 0x0098;
			constexpr uintptr_t PsyPings = 0x00A0;
			constexpr uintptr_t PsyPacketsLost = 0x00B0;
			constexpr uintptr_t ConnectionType = 0x00B4;
		}

		namespace ClientReservationMessage_X {
			constexpr uintptr_t Reservation = 0x0060;
		}

		namespace ClubDetails_X {
			constexpr uintptr_t ClubID = 0x0088;
			constexpr uintptr_t OwnerPlayerID = 0x0090;
			constexpr uintptr_t Bitfields_0x00D8 = 0x00D8;  // Multiple: bVerified, bServerReplicated
			constexpr uintptr_t LastUpdatedTime = 0x00E0;
			constexpr uintptr_t Badges = 0x00E8;
			constexpr uintptr_t EquippedTitle = 0x00F8;
			constexpr uintptr_t Members = 0x0100;
		}

		namespace ClubErrors_X {
			constexpr uintptr_t ClubNotFound = 0x0080;
			constexpr uintptr_t PlayerAlreadyInClub = 0x0088;
			constexpr uintptr_t PlayerInSameClub = 0x0090;
			constexpr uintptr_t PlayerInDifferentClub = 0x0098;
			constexpr uintptr_t NotClubOwner = 0x00A0;
			constexpr uintptr_t ClubNameChangeNotAllowed = 0x00A8;
			constexpr uintptr_t ClubFull = 0x00B0;
			constexpr uintptr_t ClubMemberNotFound = 0x00B8;
			constexpr uintptr_t ClubInviteNotFound = 0x00C0;
			constexpr uintptr_t ClubInvalidParameters = 0x00C8;
			constexpr uintptr_t ClubNameInvalid = 0x00D0;
			constexpr uintptr_t ClubTagInvalid = 0x00D8;
			constexpr uintptr_t ClubTagPlusNameInvalid = 0x00E0;
			constexpr uintptr_t ClubMotdInvalid = 0x00E8;
			constexpr uintptr_t ClubInvalidTitle = 0x00F0;
			constexpr uintptr_t ClubNameTaken = 0x00F8;
			constexpr uintptr_t ClubOwnerCannotLeaveUnlessEmpty = 0x0100;
			constexpr uintptr_t CrossPlatformClubsDisabled = 0x0108;
			constexpr uintptr_t ClubInviteCrossPlatformClubsDisabled = 0x0110;
			constexpr uintptr_t ClubBanned = 0x0118;
			constexpr uintptr_t ClubInsufficientRole = 0x0120;
			constexpr uintptr_t AlreadyClubOwner = 0x0128;
		}

		namespace ClubInvite_X {
			constexpr uintptr_t ClubID = 0x0060;
			constexpr uintptr_t ClubName = 0x0068;
			constexpr uintptr_t ClubTag = 0x0078;
			constexpr uintptr_t InvitedBy = 0x0088;
		}

		namespace ClubServerResult_X {
			constexpr uintptr_t Host = 0x0060;
			constexpr uintptr_t Port = 0x0070;
			constexpr uintptr_t ServerName = 0x0078;
			constexpr uintptr_t CustomServerName = 0x0088;
			constexpr uintptr_t CustomServerPassword = 0x0098;
		}

		namespace ClubSettings_X {
			constexpr uintptr_t ClubName = 0x0060;
			constexpr uintptr_t ClubTag = 0x0070;
			constexpr uintptr_t PrimaryColor = 0x0080;
			constexpr uintptr_t AccentColor = 0x0084;
		}

		namespace ColorPalette_X {
			constexpr uintptr_t DefaultId = 0x0060;
			constexpr uintptr_t HueCount = 0x0064;
			constexpr uintptr_t ValueCount = 0x0068;
			constexpr uintptr_t Colors = 0x0070;
		}

		namespace ConnectionInfoMessage_X {
			constexpr uintptr_t ConnectionInfo = 0x0070;
		}

		namespace ContentConfig_X {
			constexpr uintptr_t ContentMap = 0x0078;
		}

		namespace ControlPreset_X {
			constexpr uintptr_t PCBindings = 0x0060;
			constexpr uintptr_t GamepadBindings = 0x0070;
			constexpr uintptr_t Bitfields_0x0080 = 0x0080;  // Multiple: bRemovedPCOverrides, bRemovedGamepadOverrides
			constexpr uintptr_t SteamInputBindings = 0x0088;
			constexpr uintptr_t CustomPresetName = 0x0098;
			constexpr uintptr_t DefaultPresetName = 0x00A0;
		}

		namespace CrossplayConfig_X {
			constexpr uintptr_t Groups = 0x0078;
			constexpr uintptr_t DisabledCrossplayGroups = 0x0088;
			constexpr uintptr_t bAllowCrossplayTextChat = 0x0098;
		}

		namespace DSPendingMessage_X {
			constexpr uintptr_t Message = 0x0060;
			constexpr uintptr_t TimeoutTime = 0x0068;
		}

		namespace DSR_ClientMessage_X {
			constexpr uintptr_t ReservationID = 0x0090;
			constexpr uintptr_t MessageType = 0x00A0;
			constexpr uintptr_t MessagePayload = 0x00B0;
		}

		namespace DSR_DSMessage_X {
			constexpr uintptr_t PlayerID = 0x0090;
			constexpr uintptr_t ReservationID = 0x00A0;
			constexpr uintptr_t MessageType = 0x00B0;
			constexpr uintptr_t MessagePayload = 0x00C0;
		}

		namespace DSR_DSToDSMessage_X {
			constexpr uintptr_t MessageType = 0x0090;
			constexpr uintptr_t MessagePayload = 0x00A0;
		}

		namespace DebugDrawer_X {
			constexpr uintptr_t TextScale = 0x00C0;
			constexpr uintptr_t Canvas = 0x00C8;
			constexpr uintptr_t DebugCategories = 0x00D0;
			constexpr uintptr_t PossibleDebugCategories = 0x00E0;
			constexpr uintptr_t CharWidth = 0x00F0;
			constexpr uintptr_t LastWidestElement = 0x00F4;
			constexpr uintptr_t bHideDebug = 0x00F8;
			constexpr uintptr_t OffsetX = 0x00FC;
		}

		namespace DecodeObjectJson_X {
			constexpr uintptr_t JsonSerializer = 0x0070;
			constexpr uintptr_t Stream = 0x0078;
		}

		namespace DecodeObjectUObject_X {
			constexpr uintptr_t ObjectSerializer = 0x0070;
			constexpr uintptr_t Stream = 0x0078;
		}

		namespace DecodeObject_X {
			constexpr uintptr_t Checksum = 0x0060;
			constexpr uintptr_t Error = 0x0068;
		}

		namespace DistributionFloatShakeParameter_X {
			constexpr uintptr_t UnknownData00 = 0x00A1;
		}

		namespace DownloadedPlaylistsData_X {
			constexpr uintptr_t Playlists = 0x0060;
		}

		namespace DynamicValueModifierCurve_X {
			constexpr uintptr_t Curve = 0x0078;
		}

		namespace DynamicValueModifierDuration_X {
			constexpr uintptr_t Duration = 0x0078;
			constexpr uintptr_t Value = 0x007C;
			constexpr uintptr_t CurveValue = 0x0080;
			constexpr uintptr_t bUseCurve = 0x0098;
		}

		namespace DynamicValueModifier_X {
			constexpr uintptr_t DisplayName = 0x0060;
			constexpr uintptr_t Type = 0x0070;
			constexpr uintptr_t Priority = 0x0074;
		}

		namespace DynamicValue_X {
			constexpr uintptr_t DefaultValue = 0x0060;
			constexpr uintptr_t Bitfields_0x0064 = 0x0064;  // Multiple: bClampMax, bClampMin
			constexpr uintptr_t MaxValue = 0x0068;
			constexpr uintptr_t MinValue = 0x006C;
			constexpr uintptr_t Modifiers = 0x0070;
			constexpr uintptr_t CachedValue = 0x0080;
		}

		namespace EASAuthResponse {
			constexpr uintptr_t access_token = 0x0060;
		}

		namespace EOSEvent_Presence_X {
			constexpr uintptr_t Location = 0x0068;
			constexpr uintptr_t MapName = 0x0078;
			constexpr uintptr_t StreamingService = 0x0088;
			constexpr uintptr_t PlaylistId = 0x0098;
			constexpr uintptr_t LevelSessionID = 0x009C;
			constexpr uintptr_t ServerRegion = 0x00B0;
		}

		namespace EOSMetricEvent_X {
			constexpr uintptr_t EventName = 0x0060;
		}

		namespace EOSMetricsConfig_X {
			constexpr uintptr_t DataRouterURL = 0x0078;
			constexpr uintptr_t PingDelayTime = 0x0088;
		}

		namespace EOSMetrics_X {
			constexpr uintptr_t PsyNet = 0x0060;
			constexpr uintptr_t EOSMetricsConfig = 0x0068;
			constexpr uintptr_t LocalPlayer = 0x0070;
			constexpr uintptr_t bCrashing = 0x0078;
			constexpr uintptr_t EMGuid = 0x0080;
			constexpr uintptr_t QueryParamsTemplate = 0x0090;
			constexpr uintptr_t CurrentEvents = 0x00A0;
			constexpr uintptr_t LatestLocation = 0x00B0;
			constexpr uintptr_t StreamingServiceType = 0x00C0;
		}

		namespace EOS_AccountSummaryResponse {
			constexpr uintptr_t Friends = 0x0070;
			constexpr uintptr_t Incoming = 0x0080;
			constexpr uintptr_t Outgoing = 0x0090;
			constexpr uintptr_t BlockList = 0x00A0;
			constexpr uintptr_t Settings = 0x00B0;
		}

		namespace EOS_ErrorResponse {
			constexpr uintptr_t ErrorMessage = 0x0060;
			constexpr uintptr_t NumericErrorCode = 0x0070;
			constexpr uintptr_t ErrorCode = 0x0078;
			constexpr uintptr_t MessageVars = 0x0088;
		}

		namespace EOS_GetAccountsResponse {
			constexpr uintptr_t Accounts = 0x0060;
		}

		namespace EOS_ManageBlockListResponse {
			constexpr uintptr_t AccountId = 0x0060;
			constexpr uintptr_t Created = 0x0070;
		}

		namespace EOS_ManageFriendsListResponse {
			constexpr uintptr_t Status = 0x0060;
		}

		namespace EffectsMap_X {
			constexpr uintptr_t Effects = 0x0060;
		}

		namespace EncodeObjectFactory_X {
			constexpr uintptr_t JsonSerializer = 0x0060;
			constexpr uintptr_t ObjectSerializer = 0x0068;
		}

		namespace EncodeObjectJson_X {
			constexpr uintptr_t JsonSerializer = 0x0078;
		}

		namespace EncodeObjectUObject_X {
			constexpr uintptr_t ObjectSerializer = 0x0078;
		}

		namespace EncodeObject_X {
			constexpr uintptr_t Encoding = 0x0060;
			constexpr uintptr_t Checksum = 0x0064;
			constexpr uintptr_t Encoded = 0x0068;
		}

		namespace EngineShare_X {
			constexpr uintptr_t OnlineGame = 0x0060;
			constexpr uintptr_t LocalCache = 0x0068;
			constexpr uintptr_t ArchetypeString_OnlineGame = 0x0070;
			constexpr uintptr_t ArchetypeString_OnlineGameDedicatedServer = 0x0080;
			constexpr uintptr_t Bitfields_0x0090 = 0x0090;  // Multiple: bDisableSaving, bIsShowingLoadmapMovie, bUndocked
		}

		namespace EpicConfig_X {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bAllowRemoteAvatars, bPollDuringAccountLinking, bEnforcePinRequirementForFriends, bEnforceCabinedMode, bPromptForPin, bForceEnableTrade
			constexpr uintptr_t RemoteAvatarPermissionRequestDelay = 0x007C;
			constexpr uintptr_t SecondsBetweenPolling = 0x0080;
			constexpr uintptr_t SecondsBeforeRequestsTimeout = 0x0084;
			constexpr uintptr_t SecondsToWaitBeforeRetryingAuth = 0x0088;
			constexpr uintptr_t SecondsToWaitBeforeUpdatingFriendsList = 0x008C;
			constexpr uintptr_t AccountLinkURLOverrides = 0x0090;
			constexpr uintptr_t DefaultAccountLinkURL = 0x00A0;
			constexpr uintptr_t PermissionServerURL = 0x00B0;
			constexpr uintptr_t IdentityServerURL = 0x00C0;
			constexpr uintptr_t CabinedModeURL = 0x00D0;
			constexpr uintptr_t CreateAccountURL = 0x00E0;
			constexpr uintptr_t ChatPermissionPairs = 0x00F0;
			constexpr uintptr_t DefaultChatPermissionLevel = 0x0100;
			constexpr uintptr_t DefaultPermissions = 0x0104;
			constexpr uintptr_t ForgotPinURL = 0x0110;
			constexpr uintptr_t ParentalControlsURL = 0x0120;
			constexpr uintptr_t PrivacyPolicyURL = 0x0130;
			constexpr uintptr_t ActivateURL = 0x0140;
			constexpr uintptr_t AccountURL = 0x0150;
			constexpr uintptr_t TOSURL = 0x0160;
			constexpr uintptr_t SandboxId = 0x0170;
			constexpr uintptr_t DeploymentId = 0x0180;
		}

		namespace EpicErrors_X {
			constexpr uintptr_t EpicAccountLinkingFailed = 0x0080;
			constexpr uintptr_t EOSFailedToConnect = 0x0088;
			constexpr uintptr_t EOSFailedToConnectSplitscreen = 0x0090;
			constexpr uintptr_t NotLoggedInToEOS = 0x0098;
			constexpr uintptr_t EOSUpdateRequired = 0x00A0;
			constexpr uintptr_t PinGrantCodeExpired = 0x00A8;
			constexpr uintptr_t PrimaryAccountNotSet = 0x00B0;
			constexpr uintptr_t EpicInvalidPlayer = 0x00B8;
			constexpr uintptr_t EpicThrottlingHit = 0x00C0;
			constexpr uintptr_t EpicNotAcceptingFriendInvites = 0x00C8;
			constexpr uintptr_t EpicRemoteFriendLimitReached = 0x00D0;
			constexpr uintptr_t EpicMaxOutgoingInvitesReached = 0x00D8;
			constexpr uintptr_t EpicLocalFriendLimitReached = 0x00E0;
			constexpr uintptr_t EpicAccountLookupFailed = 0x00E8;
			constexpr uintptr_t EpicAccountCreationFailed = 0x00F0;
			constexpr uintptr_t EpicAccountRestricted = 0x00F8;
			constexpr uintptr_t EpicPartyInviteFailed = 0x0100;
			constexpr uintptr_t IncorrectSaveLoaded = 0x0108;
			constexpr uintptr_t EpicSocialBanned = 0x0110;
			constexpr uintptr_t MaxPendingFriendInvitesReached = 0x0118;
			constexpr uintptr_t PinRequiredForFriends = 0x0120;
			constexpr uintptr_t InvalidPin = 0x0128;
			constexpr uintptr_t EpicInvalidDateOfBirth = 0x0130;
			constexpr uintptr_t EpicInvalidEmail = 0x0138;
			constexpr uintptr_t EpicContinuationTokenNotFound = 0x0140;
			constexpr uintptr_t EpicCabinedExtAuthCreateNotAllowed = 0x0148;
			constexpr uintptr_t EpicEmailNotAllowed = 0x0150;
		}

		namespace EpicFriendsPlugin_X {
			constexpr uintptr_t ServerURL = 0x0060;
			constexpr uintptr_t FriendsServerURL = 0x0070;
			constexpr uintptr_t AddFriendURL = 0x0080;
			constexpr uintptr_t RemoveFriendURL = 0x0090;
			constexpr uintptr_t OutgoingFriendRequestsURL = 0x00A0;
			constexpr uintptr_t IncomingFriendRequestsURL = 0x00B0;
			constexpr uintptr_t BlockPlayerURL = 0x00C0;
			constexpr uintptr_t BlockListURL = 0x00D0;
			constexpr uintptr_t AccountSummaryURL = 0x00E0;
		}

		namespace EpicLogin_X {
			constexpr uintptr_t PinGrantCode = 0x0060;
			constexpr uintptr_t PinGrantURL = 0x0070;
			constexpr uintptr_t PinGrantExpiration = 0x0080;
			constexpr uintptr_t Bitfields_0x0088 = 0x0088;  // Multiple: bLoggedIn, bCorrectiveActionRequired, bSetAsPrimaryAccount, bPollDuringAccountLinking, bPinGrantRequestInProgress, bLoginInProgress, bNintendoServiceAccountLinkingNeeded, bRefusedNintendoAccountAuthorization, bUserSpecifiedPrimaryAccount, bInitialized, bIsExternalUIOpen
			constexpr uintptr_t ParentalConsentURL = 0x0090;
			constexpr uintptr_t CabinedFlowState = 0x00A0;
			constexpr uintptr_t OldCabinedFlowState_Switch = 0x00A1;
			constexpr uintptr_t LoginFailureCount = 0x00A4;
			constexpr uintptr_t LoginError = 0x00A8;
			constexpr uintptr_t LoginErrorTimestamp = 0x00B0;
			constexpr uintptr_t EpicConfig = 0x00B8;
			constexpr uintptr_t linkedAccounts = 0x00C0;
			constexpr uintptr_t EpicAccountId = 0x00D0;
		}

		namespace EpochTimerTick_X {
			constexpr uintptr_t VfTable_FTickableObject = 0x0060;
			constexpr uintptr_t Timers = 0x0068;
		}

		namespace Errors_X {
			constexpr uintptr_t UnknownError = 0x0080;
			constexpr uintptr_t RequestError = 0x0088;
			constexpr uintptr_t HTTPError = 0x0090;
			constexpr uintptr_t SessionNotActive = 0x0098;
			constexpr uintptr_t OSCS_NotConnected = 0x00A0;
			constexpr uintptr_t OSCS_Connected = 0x00A8;
			constexpr uintptr_t OSCS_ConnectionDropped = 0x00B0;
			constexpr uintptr_t OSCS_NoNetworkConnection = 0x00B8;
			constexpr uintptr_t OSCS_ServiceUnavailable = 0x00C0;
			constexpr uintptr_t OSCS_UpdateRequired = 0x00C8;
			constexpr uintptr_t OSCS_ServersTooBusy = 0x00D0;
			constexpr uintptr_t OSCS_DuplicateLoginDetected = 0x00D8;
			constexpr uintptr_t OSCS_InvalidUser = 0x00E0;
			constexpr uintptr_t OSCS_InvalidResponse = 0x00E8;
			constexpr uintptr_t OSCS_EpicAccountLinkingFailed = 0x00F0;
			constexpr uintptr_t ConnectionStatusErrors = 0x00F8;
			constexpr uintptr_t VersionMismatch = 0x0158;
			constexpr uintptr_t NoServers = 0x0160;
			constexpr uintptr_t FileDoesNotExist = 0x0168;
			constexpr uintptr_t FileLoadFail = 0x0170;
			constexpr uintptr_t FileLoadCorrupt = 0x0178;
			constexpr uintptr_t FileMountCorrupt = 0x0180;
			constexpr uintptr_t FileSaveFail = 0x0188;
			constexpr uintptr_t FileSaveNoSpace = 0x0190;
			constexpr uintptr_t FileSaveCorrupt = 0x0198;
			constexpr uintptr_t UserAuthBanned = 0x01A0;
			constexpr uintptr_t UserSocialBanned = 0x01A8;
			constexpr uintptr_t NotLoggedInToPsynet = 0x01B0;
			constexpr uintptr_t FriendsList = 0x01B8;
			constexpr uintptr_t InviteLimitReached = 0x01C0;
			constexpr uintptr_t OutOfRetries = 0x01C8;
			constexpr uintptr_t AuthenticationFailed = 0x01D0;
			constexpr uintptr_t NoExportCountry = 0x01D8;
			constexpr uintptr_t UnauthorizedAccess = 0x01E0;
			constexpr uintptr_t ServiceNotFound = 0x01E8;
			constexpr uintptr_t FeatureDisabled = 0x01F0;
			constexpr uintptr_t OtherPlayerFeatureDisabled = 0x01F8;
			constexpr uintptr_t MatchmakingDisabled = 0x0200;
			constexpr uintptr_t NoValidPlaylistsSelected = 0x0208;
			constexpr uintptr_t PlaylistNotAvailable = 0x0210;
			constexpr uintptr_t PlayerNameNotSet = 0x0218;
			constexpr uintptr_t NotAuthorized = 0x0220;
			constexpr uintptr_t GameServerPending = 0x0228;
			constexpr uintptr_t CacheError = 0x0230;
			constexpr uintptr_t WordFilterEvil = 0x0238;
			constexpr uintptr_t WordFilterPlatformError = 0x0240;
			constexpr uintptr_t WordFilterPlatformChatError = 0x0248;
			constexpr uintptr_t InvalidSettings = 0x0250;
			constexpr uintptr_t Maintenance = 0x0258;
			constexpr uintptr_t PlatformAuthError = 0x0260;
			constexpr uintptr_t MicrotransactionAuthExpired = 0x0268;
			constexpr uintptr_t CannotFriendSelf = 0x0270;
			constexpr uintptr_t CannotBlockSelf = 0x0278;
			constexpr uintptr_t InvalidPlayer = 0x0280;
			constexpr uintptr_t FriendRequestNotFound = 0x0288;
			constexpr uintptr_t FriendRequestFailed = 0x0290;
			constexpr uintptr_t AlreadyFriends = 0x0298;
			constexpr uintptr_t FriendLimitReached = 0x02A0;
			constexpr uintptr_t LocalFriendLimitReached = 0x02A8;
			constexpr uintptr_t RemoteFriendLimitReached = 0x02B0;
			constexpr uintptr_t LocalHostConnectionError = 0x02B8;
			constexpr uintptr_t UGCRestricted = 0x02C0;
			constexpr uintptr_t MicrotransactionServiceMaintenance = 0x02C8;
			constexpr uintptr_t GenericStorageOutOfSync = 0x02D0;
			constexpr uintptr_t GenericStorageSync_RequestNotFound = 0x02D8;
			constexpr uintptr_t SignatureMismatch = 0x02E0;
			constexpr uintptr_t JsonDeserialization = 0x02E8;
			constexpr uintptr_t InvalidPlatform = 0x02F0;
			constexpr uintptr_t InvalidPlatformForCodeRedemption = 0x02F8;
			constexpr uintptr_t InvalidParameters = 0x0300;
			constexpr uintptr_t NotMatchmaking = 0x0308;
			constexpr uintptr_t AccessDenied = 0x0310;
			constexpr uintptr_t CallLimitReached = 0x0318;
			constexpr uintptr_t PerConDisconnected = 0x0320;
			constexpr uintptr_t AccountNotFound = 0x0328;
			constexpr uintptr_t ServerNotFound = 0x0330;
			constexpr uintptr_t ExpiredDsConnectToken = 0x0338;
			constexpr uintptr_t MatchmakingNoInternet = 0x0340;
			constexpr uintptr_t PartyRankDisparity = 0x0348;
			constexpr uintptr_t FriendAddsThrottledGeneric = 0x0350;
			constexpr uintptr_t PlayerLevelNotReached = 0x0358;
			constexpr uintptr_t RankedCriteriaUnmet = 0x0360;
		}

		namespace EulaTextResponse {
			constexpr uintptr_t Key = 0x0060;
			constexpr uintptr_t Title = 0x0070;
			constexpr uintptr_t Body = 0x0080;
			constexpr uintptr_t Locale = 0x0090;
			constexpr uintptr_t Version = 0x00A0;
			constexpr uintptr_t Status = 0x00A4;
			constexpr uintptr_t Revision = 0x00A8;
			constexpr uintptr_t CreatedTimestamp = 0x00B0;
			constexpr uintptr_t LastModifiedTimestamp = 0x00C0;
			constexpr uintptr_t Custom = 0x00D0;
			constexpr uintptr_t URL = 0x00E0;
			constexpr uintptr_t Bitfields_0x00F0 = 0x00F0;  // Multiple: WasDeclined, HasResponse
		}

		namespace EventRecorderConfig_X {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bEnabled, bSeparatePlayerIDs, bExcludePlayerIDs
			constexpr uintptr_t DisabledEvents = 0x0080;
			constexpr uintptr_t EventRecorderClass = 0x0090;
			constexpr uintptr_t PlayerNetMetricsPeriod = 0x0098;
			constexpr uintptr_t MaxUnstableConnections = 0x009C;
			constexpr uintptr_t UnstableConnectionsTimePeriodSeconds = 0x00A0;
		}

		namespace EventRecorderGroup_X {
			constexpr uintptr_t Category = 0x0070;
		}

		namespace EventRecorder_X {
			constexpr uintptr_t VfTable_FTickableObject = 0x0070;
			constexpr uintptr_t Config = 0x0078;
			constexpr uintptr_t MaxQueuedEvents = 0x0080;
			constexpr uintptr_t MaxQueuedMinutes = 0x0084;
			constexpr uintptr_t bPaused = 0x0088;
			constexpr uintptr_t QueuedEvents = 0x0090;
			constexpr uintptr_t AppSessionID = 0x00A0;
			constexpr uintptr_t LevelSessionID = 0x00B0;
			constexpr uintptr_t NextSendTime = 0x00C0;
			constexpr uintptr_t FloodPreventionTimeSeconds = 0x00C4;
			constexpr uintptr_t LastFullSendTime = 0x00C8;
			constexpr uintptr_t AppEventCount = 0x00CC;
		}

		namespace ExplosionCollisionShapes_X {
			constexpr uintptr_t Location = 0x0070;
			constexpr uintptr_t GrowthAmount = 0x007C;
			constexpr uintptr_t NormalizedLifetime = 0x0080;
		}

		namespace ExplosionComponent_X {
			constexpr uintptr_t RBVelocityChange = 0x00A8;
			constexpr uintptr_t StartRadius = 0x00AC;
			constexpr uintptr_t EndRadius = 0x00B0;
			constexpr uintptr_t Speed = 0x00B4;
			constexpr uintptr_t Falloff = 0x00B8;
			constexpr uintptr_t Bitfields_0x00BC = 0x00BC;  // Multiple: bPassThroughWorldGeometry, bIgnoreInstigator, bDebug
			constexpr uintptr_t MomentumOffset = 0x00C0;
			constexpr uintptr_t LifeTime = 0x00CC;
			constexpr uintptr_t DamagedActors = 0x00D0;
		}

		namespace ExplosionHitHandler_X {
			constexpr uintptr_t StartTime = 0x00A8;
			constexpr uintptr_t EndTime = 0x00AC;
			constexpr uintptr_t CollisionInformation = 0x00B0;
			constexpr uintptr_t Bitfields_0x00B8 = 0x00B8;  // Multiple: bIgnoreInstigator, bPassThroughWorldGeometry, bOnlyApplyImpulseOnce, bDebug, bPullTowardHitLocation
			constexpr uintptr_t Falloff = 0x00BC;
			constexpr uintptr_t RBVelocityChange = 0x00C0;
			constexpr uintptr_t Speed = 0x00C4;
			constexpr uintptr_t MomentumOffset = 0x00C8;
			constexpr uintptr_t GoalWorldBox = 0x00D4;
			constexpr uintptr_t LifeTime = 0x00F0;
		}

		namespace Explosion_X {
			constexpr uintptr_t ExplosionComponent = 0x0268;
			constexpr uintptr_t FXActorArchetype = 0x0270;
			constexpr uintptr_t FXActor = 0x0278;
			constexpr uintptr_t Scorer = 0x0280;
			constexpr uintptr_t PostSpawnEvents = 0x0288;
			constexpr uintptr_t MuteExplosionOnSpawn = 0x0298;
			constexpr uintptr_t EnvDemoSoundAttachmentName = 0x029C;
		}

		namespace FXActor_X {
			constexpr uintptr_t SpawnState = 0x0268;
			constexpr uintptr_t ActivationState = 0x0270;
			constexpr uintptr_t Attachments = 0x0278;
			constexpr uintptr_t Locality = 0x0288;
			constexpr uintptr_t SocketOrBoneName = 0x028C;
			constexpr uintptr_t Bitfields_0x0294 = 0x0294;  // Multiple: bDeactivateWhenOwnerDestroyed, bAllowShadowCasting, bAutoActivate, bRenderInactive, bActive, bHadOwner
			constexpr uintptr_t Parent = 0x0298;
			constexpr uintptr_t AttachmentActor = 0x02A0;
			constexpr uintptr_t FXStates = 0x02A8;
			constexpr uintptr_t FXEvents = 0x02B8;
			constexpr uintptr_t DestroyWaitTime = 0x02C8;
			constexpr uintptr_t DestroyTime = 0x02CC;
			constexpr uintptr_t Parameters = 0x02D0;
			constexpr uintptr_t EditID = 0x02D8;
			constexpr uintptr_t EventSubscriptions = 0x02E0;
			constexpr uintptr_t AnimationEndState = 0x02F0;
		}

		namespace FakeData_X {
			constexpr uintptr_t RandomSeed = 0x0060;
			constexpr uintptr_t Data1 = 0x0068;
			constexpr uintptr_t Data2 = 0x00A0;
			constexpr uintptr_t Data3 = 0x0130;
			constexpr uintptr_t Data4 = 0x0260;
		}

		namespace FindServerTask_X {
			constexpr uintptr_t SearchTimeout = 0x00D0;
			constexpr uintptr_t RPC = 0x00D8;
		}

		namespace FuncTestCommandPair_X {
			constexpr uintptr_t Device = 0x0060;
			constexpr uintptr_t Command = 0x0068;
		}

		namespace FuncTestDesc_X {
			constexpr uintptr_t TestName = 0x0060;
			constexpr uintptr_t Tags = 0x0070;
			constexpr uintptr_t Groups = 0x0080;
		}

		namespace FuncTestGroup_X {
			constexpr uintptr_t Commands = 0x0060;
		}

		namespace GFxDataCallback_X {
			constexpr uintptr_t Table = 0x0090;
			constexpr uintptr_t Row = 0x0098;
			constexpr uintptr_t Column = 0x009C;
			constexpr uintptr_t Type = 0x00A4;
		}

		namespace GFxDataRow_X {
			constexpr uintptr_t TableName = 0x0060;
			constexpr uintptr_t PrimaryKeyName = 0x0068;
			constexpr uintptr_t ProxyClass = 0x0070;
			constexpr uintptr_t bLevelTransitionPersistent = 0x0078;
			constexpr uintptr_t ProxyObject = 0x0080;
			constexpr uintptr_t Shell = 0x0088;
			constexpr uintptr_t RowIndex = 0x0090;
		}

		namespace GFxDataSingleton_X {
			constexpr uintptr_t UnknownData00 = 0x0094;
		}

		namespace GFxDataStore_X {
			constexpr uintptr_t Tables = 0x0070;
			constexpr uintptr_t DirtyTables = 0x0080;
			constexpr uintptr_t ObjectNameToTable = 0x0090;
			constexpr uintptr_t bDebugGetValue = 0x00E0;
		}

		namespace GFxEngine_X {
			constexpr uintptr_t ShellArchetype = 0x0128;
			constexpr uintptr_t Shells = 0x0130;
			constexpr uintptr_t DirtyObjects = 0x0140;
			constexpr uintptr_t bAnyShellHasInput = 0x0150;
			constexpr uintptr_t AvailableGamepadType = 0x0154;
		}

		namespace GFxModal_X {
			constexpr uintptr_t ActionScriptModalName = 0x0060;
			constexpr uintptr_t GFxPopup = 0x0070;
			constexpr uintptr_t ConfirmString = 0x0088;
		}

		namespace GFxMoviePlayer_X {
			constexpr uintptr_t Shell = 0x0218;
			constexpr uintptr_t DataStore = 0x0220;
			constexpr uintptr_t DataCallbacks = 0x0228;
			constexpr uintptr_t ActionScriptClasses = 0x0238;
			constexpr uintptr_t ActionScriptClassMap = 0x0248;
			constexpr uintptr_t CursorScenes = 0x0298;
			constexpr uintptr_t InputScenes = 0x02A8;
			constexpr uintptr_t CaptureScenes = 0x02B8;
			constexpr uintptr_t DebugTableCallback = 0x02C8;
			constexpr uintptr_t DebugColumnCallback = 0x02D0;
			constexpr uintptr_t ShellHooksClass = 0x02D8;
			constexpr uintptr_t LoadedSoundPacks = 0x02E0;
		}

		namespace GFxObjectReference_X {
			constexpr uintptr_t Value = 0x0060;
		}

		namespace GFxShell_X {
			constexpr uintptr_t MoviePlayerArchetype = 0x0098;
			constexpr uintptr_t Player = 0x00A0;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bGamePaused, bWasFullscreen
			constexpr uintptr_t LeftX = 0x00AC;
			constexpr uintptr_t LeftY = 0x00B0;
			constexpr uintptr_t RightX = 0x00B4;
			constexpr uintptr_t RightY = 0x00B8;
			constexpr uintptr_t Movies = 0x00C0;
			constexpr uintptr_t DataStore = 0x00D0;
			constexpr uintptr_t InputType = 0x00D8;
			constexpr uintptr_t OnlinePlatformType = 0x00D9;
			constexpr uintptr_t OnlineSub = 0x00E0;
		}

		namespace GFxSoundPack_X {
			constexpr uintptr_t ExportClassName = 0x0060;
			constexpr uintptr_t Sounds = 0x0070;
			constexpr uintptr_t bHasSubtitles = 0x0080;
		}

		namespace GRI_X {
			constexpr uintptr_t ReplicatedGamePlaylist = 0x02D8;
			constexpr uintptr_t ReplicatedGameMutatorIndex = 0x02DC;
			constexpr uintptr_t ReplicatedServerRegion = 0x02E0;
			constexpr uintptr_t Reservations = 0x02F0;
			constexpr uintptr_t GameServerID = 0x05F0;
			constexpr uintptr_t Bitfields_0x0600 = 0x0600;  // Multiple: bGameStarted, bGameEnded
			constexpr uintptr_t MatchGUID = 0x0608;
		}

		namespace GameInfo_X {
			constexpr uintptr_t GameReplicationInfoArchetype = 0x0488;
			constexpr uintptr_t PlayerControllerArchetype = 0x0490;
			constexpr uintptr_t PawnArchetype = 0x0498;
			constexpr uintptr_t PCPausers = 0x04A0;
		}

		namespace GameServerPinger_X {
			constexpr uintptr_t Config = 0x0070;
			constexpr uintptr_t Address = 0x0078;
			constexpr uintptr_t PingBeacon = 0x0080;
		}

		namespace GameSettingCategory_X {
			constexpr uintptr_t SelectedNames = 0x0060;
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bHidden, bUseableWhileHidden
			constexpr uintptr_t GamemodeVisibleOverrideList = 0x0078;
			constexpr uintptr_t GamemodeHiddenOverrideList = 0x0088;
			constexpr uintptr_t GameSettings = 0x0098;
		}

		namespace GameSettingConfig_X {
			constexpr uintptr_t HidingOverrides = 0x0078;
		}

		namespace GameSettingPlaylist_X {
			constexpr uintptr_t Title = 0x0068;
			constexpr uintptr_t Description = 0x0078;
			constexpr uintptr_t BadgeTitle = 0x0088;
			constexpr uintptr_t PlayerCount = 0x0098;
			constexpr uintptr_t Bitfields_0x009C = 0x009C;  // Multiple: bStandard, bRanked, bSolo, bExtraMode, bPrivate, bTournament, bApplyQuitPenalty, bAllowForfeit, bDisableRankedReconnect, bIgnoreAssignTeams, bAllowBotFills, bKickOnMigrate, bCheckRankedMatchReservationID, bServerBroadcastCancellations, bSkipGameModeVerification, bNoBackFill, bIsMicroEventPlaylist, bHasVariablePlayerCount, bNew, bAllowClubs, bDisableSaveReplays, bOpenDetailsOnFirstTimeClicked, bAllowStayAsParty
			constexpr uintptr_t PlaylistImageURL = 0x00A0;
			constexpr uintptr_t PlaylistImageTexture = 0x00B0;
			constexpr uintptr_t PlaylistIconActiveURL = 0x00C0;
			constexpr uintptr_t PlaylistIconInactiveURL = 0x00D0;
			constexpr uintptr_t PlaylistNodeThumbnailURL = 0x00E0;
			constexpr uintptr_t PlaylistNodeDefaultThumbnailPackage = 0x00F0;
			constexpr uintptr_t SecondaryTitleOverride = 0x0100;
			constexpr uintptr_t PlaylistId = 0x0110;
			constexpr uintptr_t PlaylistTimeWindow = 0x0118;
			constexpr uintptr_t PresetMutators = 0x0120;
			constexpr uintptr_t MapName = 0x0130;
			constexpr uintptr_t ServerCommand = 0x0138;
			constexpr uintptr_t MapSetName = 0x0148;
			constexpr uintptr_t PopulationBuckets = 0x0150;
		}

		namespace GameSetting_X {
			constexpr uintptr_t bHidden = 0x0060;
		}

		namespace GameViewportClient_X {
			constexpr uintptr_t Bitfields_0x0248 = 0x0248;  // Multiple: bHandCursor, bMuteSoundOnFocusLost, bIsFinishedLoadingSaveSettings
			constexpr uintptr_t MaxSplitScreenPlayers = 0x024C;
		}

		namespace GetPlayerStorageResultItem_X {
			constexpr uintptr_t Category = 0x0060;
			constexpr uintptr_t Tick = 0x0068;
			constexpr uintptr_t Data = 0x0070;
			constexpr uintptr_t Checksum = 0x0080;
			constexpr uintptr_t bChecksumMatch = 0x0084;
			constexpr uintptr_t Encoding = 0x0088;
		}

		namespace GetPlayerStorageResult_X {
			constexpr uintptr_t Items = 0x0060;
		}

		namespace GoalCollisionShape_X {
			constexpr uintptr_t UnknownData00 = 0x0084;
		}

		namespace HUD_X {
			constexpr uintptr_t ShowDebugObject = 0x0308;
			constexpr uintptr_t DebugDrawer = 0x0310;
			constexpr uintptr_t DebugTexture = 0x0318;
		}

		namespace InterpComponent_X {
			constexpr uintptr_t InterpStart = 0x00A0;
			constexpr uintptr_t InterpEnd = 0x00E0;
			constexpr uintptr_t InterpLocalToWorld = 0x0120;
			constexpr uintptr_t InterpStartTime = 0x0160;
			constexpr uintptr_t InterpEndTime = 0x0164;
			constexpr uintptr_t Attachments = 0x0168;
		}

		namespace JSONSerializer_X {
			constexpr uintptr_t bDebug = 0x0060;
		}

		namespace LanBeacon_X {
			constexpr uintptr_t VfTable_FTickableObject = 0x0070;
			constexpr uintptr_t LanBeacon = 0x0078;
			constexpr uintptr_t LanAnnouncePort = 0x0080;
			constexpr uintptr_t QueryNonce = 0x0088;
			constexpr uintptr_t BeaconState = 0x0090;
			constexpr uintptr_t MessageComponent = 0x0098;
			constexpr uintptr_t MaxPacketSize = 0x00A0;
		}

		namespace LanMessage_HostQuery_X {
			constexpr uintptr_t Filter = 0x0068;
			constexpr uintptr_t BuildID = 0x00F0;
			constexpr uintptr_t bHost = 0x00F4;
		}

		namespace LanMessage_HostResponse_X {
			constexpr uintptr_t Result = 0x0068;
			constexpr uintptr_t ServerId = 0x0110;
			constexpr uintptr_t MetaData = 0x0120;
		}

		namespace LanMessage_X {
			constexpr uintptr_t Nonce = 0x0060;
		}

		namespace LanServerRecord_X {
			constexpr uintptr_t ServerId = 0x0060;
			constexpr uintptr_t MetaData = 0x0070;
		}

		namespace LensFlareComponent_X {
			constexpr uintptr_t VfTable_IISetParameter = 0x02C0;
			constexpr uintptr_t AlphaOverTime = 0x02C8;
			constexpr uintptr_t ColorOverTime = 0x02F0;
			constexpr uintptr_t MaterialFloatParamValuesOverTime = 0x0318;
			constexpr uintptr_t SourceColorParamName = 0x0328;
			constexpr uintptr_t SourceColorAlphaParamName = 0x0330;
			constexpr uintptr_t AttachTime = 0x0338;
		}

		namespace LinkedAccountMap_X {
			constexpr uintptr_t PlayerMap = 0x0070;
		}

		namespace LocalCacheTests_X {
			constexpr uintptr_t CacheFilePath = 0x0060;
		}

		namespace LocalCache_X {
			constexpr uintptr_t VfTable_FTickableObject = 0x0060;
			constexpr uintptr_t ImportTasks = 0x0068;
			constexpr uintptr_t ImportCallbacks = 0x0078;
			constexpr uintptr_t ExportTasks = 0x0088;
			constexpr uintptr_t ExportCallbacks = 0x0098;
			constexpr uintptr_t bDebug = 0x00A8;
		}

		namespace LocalClubData_X {
			constexpr uintptr_t Clubs = 0x0060;
			constexpr uintptr_t Invites = 0x0070;
			constexpr uintptr_t NextClubID = 0x0080;
		}

		namespace LocalPlayer_X {
			constexpr uintptr_t OnlinePlayer = 0x04D0;
			constexpr uintptr_t CabinedOrGuest_Object = 0x04D8;
			constexpr uintptr_t CabinedOrGuest_Interface = 0x04E0;
		}

		namespace LocalizationConfig_X {
			constexpr uintptr_t Overrides = 0x0078;
		}

		namespace LocalizedAccountLinkURL {
			constexpr uintptr_t Language = 0x0060;
			constexpr uintptr_t URL = 0x0070;
		}

		namespace LoginResponse_X {
			constexpr uintptr_t BannedMessage = 0x0060;
			constexpr uintptr_t BannedMinutes = 0x0070;
		}

		namespace MICParamDispenserComponent_X {
			constexpr uintptr_t VfTable_IISetParameter = 0x00A8;
			constexpr uintptr_t MaterialIndex = 0x00B0;
			constexpr uintptr_t AttachedComponentName = 0x00B4;
			constexpr uintptr_t MeshComp = 0x00C0;
		}

		namespace MapFlythroughProfiler_X {
			constexpr uintptr_t Accel = 0x0268;
			constexpr uintptr_t TurnRate = 0x026C;
			constexpr uintptr_t ProfileTime = 0x0270;
			constexpr uintptr_t FinishTime = 0x0274;
			constexpr uintptr_t Speed = 0x0278;
			constexpr uintptr_t Profile = 0x027C;
		}

		namespace MapPrefsConfig_X {
			constexpr uintptr_t PreferenceWeight = 0x0078;
			constexpr uintptr_t MaxLikes = 0x007C;
			constexpr uintptr_t MaxDislikes = 0x0080;
		}

		namespace MatchData_X {
			constexpr uintptr_t MatchGUID = 0x0060;
			constexpr uintptr_t RecordStartTimestamp = 0x0070;
			constexpr uintptr_t RecordEndTimestamp = 0x0078;
			constexpr uintptr_t MatchStartTimestamp = 0x0080;
			constexpr uintptr_t MatchEndTimestamp = 0x0088;
			constexpr uintptr_t MapName = 0x0090;
			constexpr uintptr_t Playlist = 0x0098;
			constexpr uintptr_t Mutators = 0x00A0;
			constexpr uintptr_t Bitfields_0x00B0 = 0x00B0;  // Multiple: bIsBotMatch, bClubVsClub, bOverTime, bNoContest, bForfeit
			constexpr uintptr_t ClubID = 0x00B4;
			constexpr uintptr_t CustomMatchCreatorPlayerID = 0x00B8;
			constexpr uintptr_t CustomServerName = 0x0100;
			constexpr uintptr_t CustomServerPassword = 0x0110;
			constexpr uintptr_t SecondsPlayed = 0x0120;
			constexpr uintptr_t OvertimeSecondsPlayed = 0x0124;
			constexpr uintptr_t WinningTeam = 0x0128;
			constexpr uintptr_t Team0Score = 0x012C;
			constexpr uintptr_t Team1Score = 0x0130;
			constexpr uintptr_t Players = 0x0138;
		}

		namespace MatchInfoMessage_X {
			constexpr uintptr_t Playlist = 0x0070;
			constexpr uintptr_t bIsBotMatch = 0x0074;
			constexpr uintptr_t BotNames = 0x0078;
			constexpr uintptr_t ReservationID = 0x0088;
			constexpr uintptr_t JoinName = 0x0098;
			constexpr uintptr_t JoinPassword = 0x00A8;
		}

		namespace MatchLog_X {
			constexpr uintptr_t LogFileStartSize = 0x0060;
			constexpr uintptr_t URL = 0x0068;
			constexpr uintptr_t Content = 0x0078;
		}

		namespace MatchPlayerData_X {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t PlayerName = 0x00A8;
			constexpr uintptr_t ConnectTimestamp = 0x00B8;
			constexpr uintptr_t JoinTimestamp = 0x00C0;
			constexpr uintptr_t LeaveTimestamp = 0x00C8;
			constexpr uintptr_t Bitfields_0x00D0 = 0x00D0;  // Multiple: InParty, bAbandoned, bMvp
			constexpr uintptr_t PartyLeaderID = 0x00D8;
			constexpr uintptr_t LastTeam = 0x0120;
			constexpr uintptr_t TeamColor = 0x0128;
			constexpr uintptr_t SecondsPlayed = 0x0138;
			constexpr uintptr_t Goals = 0x013C;
			constexpr uintptr_t Assists = 0x0140;
			constexpr uintptr_t Saves = 0x0144;
			constexpr uintptr_t Shots = 0x0148;
			constexpr uintptr_t Demolishes = 0x014C;
			constexpr uintptr_t Score = 0x0150;
			constexpr uintptr_t OwnGoals = 0x0154;
			constexpr uintptr_t ClubID = 0x0158;
			constexpr uintptr_t Skills = 0x015C;
			constexpr uintptr_t ActorID = 0x0180;
		}

		namespace MatchRecorder_X {
			constexpr uintptr_t MatchDataClass = 0x0060;
			constexpr uintptr_t PlayerDataClass = 0x0068;
			constexpr uintptr_t Match = 0x0070;
		}

		namespace MatchmakingMetrics_X {
			constexpr uintptr_t StartTime = 0x0080;
			constexpr uintptr_t MMGuid = 0x0084;
			constexpr uintptr_t bIsCrossplayDisabled = 0x0094;
			constexpr uintptr_t PartyLeaderMMR = 0x0098;
			constexpr uintptr_t PartyLeaderTier = 0x009C;
		}

		namespace MaterialEffect_X {
			constexpr uintptr_t TimeParamName = 0x0090;
			constexpr uintptr_t FadeInTime = 0x0098;
			constexpr uintptr_t FadeInFalloff = 0x009C;
			constexpr uintptr_t FadeOutTime = 0x00A0;
			constexpr uintptr_t FadeOutFalloff = 0x00A4;
			constexpr uintptr_t ActiveTime = 0x00A8;
			constexpr uintptr_t ValueMin = 0x00AC;
			constexpr uintptr_t ValueMax = 0x00B0;
			constexpr uintptr_t MatInst = 0x00B8;
			constexpr uintptr_t Stage = 0x00C0;
			constexpr uintptr_t StageTime = 0x00C4;
		}

		namespace MigrationStartedMessage_X {
			constexpr uintptr_t bRematch = 0x0070;
			constexpr uintptr_t PrivateMatchSettings = 0x0078;
			constexpr uintptr_t PrivateMatchCreator = 0x0100;
			constexpr uintptr_t MigratingPlayers = 0x0148;
		}

		namespace NNXErrors_X {
			constexpr uintptr_t SwitchServiceMaintenance = 0x0080;
		}

		namespace NetMetrics_X {
			constexpr uintptr_t Config = 0x0080;
			constexpr uintptr_t UnstableConnectionsQueue = 0x0088;
		}

		namespace NetworkPingEvent_X {
			constexpr uintptr_t DeltaSeconds = 0x0060;
		}

		namespace OSSConfig_X {
			constexpr uintptr_t bEnablePresence = 0x0078;
			constexpr uintptr_t EosInitTimeoutSeconds = 0x007C;
			constexpr uintptr_t GdkUpdateDlcTimeoutSeconds = 0x0080;
			constexpr uintptr_t GdkMaxConcurrentDlcLicenseRequests = 0x0084;
		}

		namespace ObjectSerializer_X {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: bPersistent, bDebug
		}

		namespace OnlineClubCache_X {
			constexpr uintptr_t ClubDetailsCache = 0x0070;
		}

		namespace OnlineClubManager_X {
			constexpr uintptr_t Connection = 0x0060;
		}

		namespace OnlineClubProvider_X {
			constexpr uintptr_t Cache = 0x0060;
			constexpr uintptr_t SyncingClubs = 0x0068;
			constexpr uintptr_t SyncingPlayers = 0x0078;
			constexpr uintptr_t SyncingClubsArray = 0x0088;
			constexpr uintptr_t PlayerClubSyncResults = 0x0098;
		}

		namespace OnlineClubServerList_X {
			constexpr uintptr_t Servers = 0x0060;
			constexpr uintptr_t RPC = 0x0070;
			constexpr uintptr_t Error = 0x0078;
		}

		namespace OnlineConfigDispatcher_X {
			constexpr uintptr_t bDebug = 0x0060;
		}

		namespace OnlineConfig_X {
			constexpr uintptr_t bAllowOnServer = 0x0060;
			constexpr uintptr_t AllSubscriptions = 0x0068;
		}

		namespace OnlineFriendMap_X {
			constexpr uintptr_t PlayerMap = 0x0070;
		}

		namespace OnlineGameAccount_X {
			constexpr uintptr_t PrimaryPlayer = 0x00B0;
			constexpr uintptr_t UpdateCurrentGameTaskTimer = 0x00B8;
			constexpr uintptr_t CurrentPlaylistId = 0x00BC;
		}

		namespace OnlineGameDLC_X {
			constexpr uintptr_t SyncInterval = 0x00B0;
			constexpr uintptr_t PlayerOwnershipSyncInterval = 0x00B4;
			constexpr uintptr_t PlayerDLCInfos = 0x00B8;
			constexpr uintptr_t SteamWebRequests = 0x00C8;
		}

		namespace OnlineGameDedicatedServerRegistration_X {
			constexpr uintptr_t MyConfig = 0x00B0;
			constexpr uintptr_t HeartbeatTimer = 0x00B8;
			constexpr uintptr_t GameTimeTimer = 0x00C0;
			constexpr uintptr_t GameTimeSeconds = 0x00C4;
			constexpr uintptr_t CreateGameServerRPC = 0x00C8;
			constexpr uintptr_t UpdateGameServerRPC = 0x00D0;
			constexpr uintptr_t PsyNetDisconnectShutdownTime = 0x00D8;
		}

		namespace OnlineGameDedicatedServer_X {
			constexpr uintptr_t GameServerID = 0x0188;
			constexpr uintptr_t GameServerHost = 0x0198;
			constexpr uintptr_t EnvironmentZone = 0x01A8;
			constexpr uintptr_t GameStats = 0x01B0;
			constexpr uintptr_t Registration = 0x01B8;
			constexpr uintptr_t Reservations = 0x01C0;
			constexpr uintptr_t Clanforge = 0x01C8;
			constexpr uintptr_t Region = 0x01D0;
			constexpr uintptr_t SubRegion = 0x01E0;
			constexpr uintptr_t DataCenter = 0x01F0;
			constexpr uintptr_t CurrentPlaylistId = 0x0200;
			constexpr uintptr_t MutatorIndex = 0x0204;
			constexpr uintptr_t AverageMMR = 0x0208;
			constexpr uintptr_t AverageConservativeMMR = 0x020C;
			constexpr uintptr_t MachineId = 0x0210;
			constexpr uintptr_t CustomMatch = 0x0218;
			constexpr uintptr_t CustomMatchOwner = 0x02A0;
			constexpr uintptr_t CustomMatchClubID = 0x02E8;
			constexpr uintptr_t Bitfields_0x02F0 = 0x02F0;  // Multiple: bQueuedShutdown, bFindingReplacementServer, bHasValidMigrationServer, bDisableMatchmakingBan, bBotTest
			constexpr uintptr_t ReplacementServerID = 0x02F8;
			constexpr uintptr_t PlayerTracker = 0x0308;
			constexpr uintptr_t ExploitManager = 0x0310;
			constexpr uintptr_t MatchRecorderClass = 0x0318;
			constexpr uintptr_t MatchRecorder = 0x0320;
			constexpr uintptr_t MatchLog = 0x0328;
			constexpr uintptr_t Config = 0x0330;
			constexpr uintptr_t PsyNetConfig = 0x0338;
		}

		namespace OnlineGameInvite_X {
			constexpr uintptr_t FriendJoinPlayerID = 0x00B0;
			constexpr uintptr_t UnableToFindFriendsGameString = 0x00F8;
			constexpr uintptr_t AlreadyInSameServerString = 0x0108;
			constexpr uintptr_t FriendNotJoinable = 0x0118;
			constexpr uintptr_t GameInviteCredentials = 0x0128;
			constexpr uintptr_t ActionRequired = 0x0138;
		}

		namespace OnlineGameJoinGame_X {
			constexpr uintptr_t JoinCountdownTime = 0x00B0;
			constexpr uintptr_t FailCommand = 0x00B8;
			constexpr uintptr_t LoadingScreenCommand = 0x00C8;
			constexpr uintptr_t JoinGameShake = 0x00D8;
			constexpr uintptr_t ReservationBeacon = 0x00E0;
			constexpr uintptr_t WaitingForPlayersString = 0x00E8;
			constexpr uintptr_t ReservationNotRespondingString = 0x00F8;
			constexpr uintptr_t ReservationFullString = 0x0108;
			constexpr uintptr_t PartyTeamReservationFullString = 0x0118;
			constexpr uintptr_t NoFriendJoinPrivateMatchString = 0x0128;
			constexpr uintptr_t BeaconTimedOutString = 0x0138;
			constexpr uintptr_t NotAllPlayersJoinedString = 0x0148;
			constexpr uintptr_t CanceledString = 0x0158;
			constexpr uintptr_t SecurityKeyAcquisitionFailed = 0x0168;
			constexpr uintptr_t SecurityKeyVerificationFailed = 0x0178;
			constexpr uintptr_t SendingReservationMessage = 0x0188;
			constexpr uintptr_t JoiningPartyLeadersGame = 0x0198;
			constexpr uintptr_t InvalidPassword = 0x01A8;
			constexpr uintptr_t WrongPlaylistString = 0x01B8;
			constexpr uintptr_t WrongRankedMatchString = 0x01C8;
			constexpr uintptr_t MatchEndedString = 0x01D8;
			constexpr uintptr_t CrossplayDisabled = 0x01E8;
			constexpr uintptr_t AnotherPlayerCanceled = 0x01F8;
			constexpr uintptr_t ActiveServer = 0x0208;
			constexpr uintptr_t Settings = 0x02A8;
			constexpr uintptr_t PendingFailMessage = 0x02C8;
			constexpr uintptr_t JoinedPlayers = 0x02D8;
			constexpr uintptr_t CustomMatch = 0x02E8;
		}

		namespace OnlineGameLeaderboards_X {
			constexpr uintptr_t NumResults = 0x00B0;
			constexpr uintptr_t CachedLeaderboards = 0x00B8;
			constexpr uintptr_t NumFriendsLeaderboardRequests = 0x00C8;
			constexpr uintptr_t CurrentLeaderboardID = 0x00CC;
			constexpr uintptr_t CurrentFriendIndex = 0x00D4;
			constexpr uintptr_t bGlobalLeaderboards = 0x00D8;
			constexpr uintptr_t GetLoaderboardPlayerValueRPC = 0x00E0;
			constexpr uintptr_t LeaderboardRequests = 0x00E8;
		}

		namespace OnlineGameMatchmakingBase_X {
			constexpr uintptr_t CheckReservation = 0x00B0;
			constexpr uintptr_t StartMatchmakingTask = 0x00B8;
			constexpr uintptr_t PingingRegionsString = 0x00C0;
		}

		namespace OnlineGameMatchmaking_X {
			constexpr uintptr_t PreferredPlaylists = 0x0130;
			constexpr uintptr_t PreferredRegions = 0x0140;
			constexpr uintptr_t SearchingString = 0x0150;
			constexpr uintptr_t StartSearchFailString = 0x0160;
			constexpr uintptr_t FoundServerString = 0x0170;
			constexpr uintptr_t PlaylistsHaveChangedString = 0x0180;
			constexpr uintptr_t RegionsHaveChangedString = 0x0190;
			constexpr uintptr_t MatchmakingAttemptString = 0x01A0;
			constexpr uintptr_t MatchmakingStartTime = 0x01B0;
			constexpr uintptr_t MatchmakingBanTime = 0x01B4;
			constexpr uintptr_t EstimatedQueueTime = 0x01B8;
			constexpr uintptr_t bIgnoreSkill = 0x01BC;
			constexpr uintptr_t MatchmakingDisabledDuration = 0x01C0;
			constexpr uintptr_t MatchmakingDisabledUntilTime = 0x01C4;
			constexpr uintptr_t LastReservationID = 0x01C8;
		}

		namespace OnlineGameParty_X {
			constexpr uintptr_t PartyMembers = 0x00B0;
			constexpr uintptr_t PartyID = 0x00C0;
			constexpr uintptr_t PartyLeader = 0x00D0;
			constexpr uintptr_t MaxPartySize = 0x0118;
			constexpr uintptr_t MessageComponent = 0x0120;
			constexpr uintptr_t JoinMatchType = 0x0128;
			constexpr uintptr_t PendingSearchStatus = 0x0138;
			constexpr uintptr_t NullSearchStatus = 0x0140;
			constexpr uintptr_t PartyTimeout = 0x0148;
			constexpr uintptr_t CurrentPartySize = 0x014C;
			constexpr uintptr_t Bitfields_0x0150 = 0x0150;  // Multiple: LastbSearchingStatus, LastLockStatus, bPendingIncomingTradeInvite, bTradeLocked
			constexpr uintptr_t LastSearchState = 0x0154;
			constexpr uintptr_t MatchSettings = 0x0160;
			constexpr uintptr_t ProcessingStatus = 0x01B8;
			constexpr uintptr_t NotInSameOnlineGameError = 0x01C0;
			constexpr uintptr_t MissingLicenseAgreementError = 0x01D0;
			constexpr uintptr_t SequenceInvitedToPlatformParty = 0x01E0;
			constexpr uintptr_t SequencePsyNetPartyUpgrade = 0x01E8;
			constexpr uintptr_t SequenceInvitedToPsyNetParty = 0x01F0;
			constexpr uintptr_t PartyConfig = 0x01F8;
			constexpr uintptr_t Config = 0x0200;
			constexpr uintptr_t PlatformLobbyInterface_Object = 0x0208;
			constexpr uintptr_t PlatformLobbyInterface_Interface = 0x0210;
			constexpr uintptr_t PsyNetLobbyInterface = 0x0218;
			constexpr uintptr_t CreatePartyLocalPlayerNum = 0x0220;
			constexpr uintptr_t CrossplayConfig = 0x0228;
			constexpr uintptr_t FindServerTask = 0x0230;
			constexpr uintptr_t JoinLobbyError = 0x0238;
			constexpr uintptr_t LeaderPreferredPlaylists = 0x0248;
		}

		namespace OnlineGamePlaylists_X {
			constexpr uintptr_t PlaylistClass = 0x00B0;
			constexpr uintptr_t DownloadedPlaylists = 0x00B8;
			constexpr uintptr_t RankedConfig = 0x00C8;
			constexpr uintptr_t CompetitiveCategory = 0x00D0;
			constexpr uintptr_t CasualCategory = 0x00E0;
			constexpr uintptr_t ExtraModeCategory = 0x00F0;
			constexpr uintptr_t PrivateCategory = 0x0100;
			constexpr uintptr_t TournamentCategory = 0x0110;
		}

		namespace OnlineGamePopulation_X {
			constexpr uintptr_t UpdatePopulationDelay = 0x00B0;
			constexpr uintptr_t LastUpdatePopulationTime = 0x00B4;
			constexpr uintptr_t GetPopulationRPC = 0x00B8;
			constexpr uintptr_t TotalPlayers = 0x00C0;
			constexpr uintptr_t Populations = 0x00C8;
		}

		namespace OnlineGamePrivateMatch_X {
			constexpr uintptr_t bCancelled = 0x0130;
			constexpr uintptr_t PreferredRegion = 0x0138;
			constexpr uintptr_t PreferredPlaylistID = 0x0148;
			constexpr uintptr_t SearchingString = 0x0150;
			constexpr uintptr_t StartSearchFailString = 0x0160;
			constexpr uintptr_t FoundServerString = 0x0170;
			constexpr uintptr_t AlreadyJoiningGameString = 0x0180;
			constexpr uintptr_t TimeoutString = 0x0190;
			constexpr uintptr_t WrongRegionString = 0x01A0;
			constexpr uintptr_t Settings = 0x01B0;
			constexpr uintptr_t SearchTimeout = 0x0238;
		}

		namespace OnlineGamePrivileges_X {
			constexpr uintptr_t PendingChecks = 0x00B0;
			constexpr uintptr_t bIsCheckingPrivileges = 0x00C0;
		}

		namespace OnlineGameRegions_X {
			constexpr uintptr_t PingRegionsCacheTime = 0x00B0;
			constexpr uintptr_t LastPingRegionsTime = 0x00B4;
			constexpr uintptr_t Config = 0x00B8;
			constexpr uintptr_t RegionPings = 0x00C0;
			constexpr uintptr_t CachedRegionPings = 0x00D0;
			constexpr uintptr_t BeaconConfig = 0x00E0;
			constexpr uintptr_t bPingingRegions = 0x00E8;
		}

		namespace OnlineGameReservations_X {
			constexpr uintptr_t ExtraMapLoadTime = 0x00B0;
			constexpr uintptr_t WaitForReservationsTimeout = 0x00B4;
			constexpr uintptr_t InitialReservationTimeoutSeconds = 0x00B8;
			constexpr uintptr_t InitialMigrationTimeoutSeconds = 0x00BC;
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: bAllowPrivateMatchCrossPlayDisable, bSkipReservationCheck, bSinglePlayerMatchmaking, bServerTraveling, bScrambleTeams, bMatchStarted, bLockTeams, bIsBotMatch, bMigrationInProgress, bFirstClubDetailsRequestDone
			constexpr uintptr_t Beacon = 0x00C8;
			constexpr uintptr_t PingBeacon = 0x00D0;
			constexpr uintptr_t Players = 0x00D8;
			constexpr uintptr_t TeamPairHistories = 0x00E8;
			constexpr uintptr_t BotNames = 0x00F8;
			constexpr uintptr_t Crossplay = 0x0108;
			constexpr uintptr_t MapPrefsConfig = 0x0110;
			constexpr uintptr_t BeaconConfig = 0x0118;
			constexpr uintptr_t PendingReservations = 0x0120;
			constexpr uintptr_t GetClubTask = 0x0130;
			constexpr uintptr_t RankedMatchReservationID = 0x0138;
			constexpr uintptr_t RankedMatchPushedPlayerIDs = 0x0148;
			constexpr uintptr_t Clubs = 0x0158;
			constexpr uintptr_t JoinName = 0x0160;
			constexpr uintptr_t JoinPassword = 0x0170;
		}

		namespace OnlineGameSearch_X {
			constexpr uintptr_t InclusiveGameTagsArray = 0x0158;
			constexpr uintptr_t ExclusiveGameTagsArray = 0x0168;
			constexpr uintptr_t MapName = 0x0178;
			constexpr uintptr_t GameTagsDelimiter = 0x0188;
		}

		namespace OnlineGameServerBrowser_X {
			constexpr uintptr_t PreferredRegion = 0x00B0;
			constexpr uintptr_t Filter = 0x00C0;
			constexpr uintptr_t StartSearchFailString = 0x0148;
			constexpr uintptr_t NoResultsFound = 0x0158;
			constexpr uintptr_t NotLoggedInToPsynet = 0x0168;
		}

		namespace OnlineGameServer_X {
			constexpr uintptr_t PsyNetConnection = 0x0180;
		}

		namespace OnlineGameSettings_X {
			constexpr uintptr_t NumPublicConnections = 0x00A0;
			constexpr uintptr_t NumOpenPublicConnections = 0x00A4;
			constexpr uintptr_t GameSettingCategories = 0x00A8;
			constexpr uintptr_t GameModeMutatorSettingPresets = 0x00B8;
			constexpr uintptr_t Bitfields_0x00C8 = 0x00C8;  // Multiple: bOffline, bIgnoreHiddenMutatorsOverride
			constexpr uintptr_t MinimumPlayersRequired = 0x00CC;
			constexpr uintptr_t NumSecondsWaitingForPlayers = 0x00D0;
			constexpr uintptr_t SearchScore = 0x00D4;
			constexpr uintptr_t LogTime = 0x00D8;
		}

		namespace OnlineGameSkill_X {
			constexpr uintptr_t Playlists = 0x00B0;
			constexpr uintptr_t SeasonRewards = 0x00C0;
			constexpr uintptr_t SyncRequests = 0x00D0;
			constexpr uintptr_t SkillsSyncedPlayers = 0x00E0;
		}

		namespace OnlineGameStats_X {
			constexpr uintptr_t MatchGUID = 0x00B0;
			constexpr uintptr_t PlaylistId = 0x00C0;
		}

		namespace OnlineGameVersion_X {
			constexpr uintptr_t bUpdateRequired = 0x00B0;
		}

		namespace OnlineGameWordFilterProcessor_X {
			constexpr uintptr_t ResponseDelay = 0x00B0;
			constexpr uintptr_t SanitizeCallbacks = 0x00B8;
		}

		namespace OnlineGameWordFilter_X {
			constexpr uintptr_t Filtered = 0x00B0;
			constexpr uintptr_t Config = 0x00C0;
			constexpr uintptr_t PsyNetWordFilter = 0x00C8;
		}

		namespace OnlineGame_Base_X {
			constexpr uintptr_t OnlineSubGameInterfaceName = 0x00B0;
			constexpr uintptr_t DefaultGameSettingsArchetype = 0x00C0;
			constexpr uintptr_t DefaultGameSettings = 0x00C8;
			constexpr uintptr_t GameSettings = 0x00D0;
			constexpr uintptr_t Playlists = 0x00D8;
			constexpr uintptr_t ImageDownloader = 0x00E0;
			constexpr uintptr_t DLC = 0x00E8;
			constexpr uintptr_t Skill = 0x00F0;
			constexpr uintptr_t StartServerCommand = 0x00F8;
			constexpr uintptr_t WebCache = 0x0108;
			constexpr uintptr_t WebImageCache = 0x0110;
			constexpr uintptr_t PsyNetStaticData = 0x0118;
			constexpr uintptr_t Bitfields_0x0120 = 0x0120;  // Multiple: bLockGameSettings, bUseEnvironmentZone
			constexpr uintptr_t CurrentConnectionStatus = 0x0124;
			constexpr uintptr_t ServerName = 0x0128;
			constexpr uintptr_t CachedOptions = 0x0138;
			constexpr uintptr_t OnlineConfigDispatcher = 0x0148;
			constexpr uintptr_t WordFilter = 0x0150;
			constexpr uintptr_t OnlineComponents = 0x0158;
		}

		namespace OnlineGame_X {
			constexpr uintptr_t Account = 0x0180;
			constexpr uintptr_t Matchmaking = 0x0188;
			constexpr uintptr_t PrivateMatch = 0x0190;
			constexpr uintptr_t ServerBrowser = 0x0198;
			constexpr uintptr_t Leaderboards = 0x01A0;
			constexpr uintptr_t Population = 0x01A8;
			constexpr uintptr_t Voice = 0x01B0;
			constexpr uintptr_t Party = 0x01B8;
			constexpr uintptr_t GameInvite = 0x01C0;
			constexpr uintptr_t JoinGame = 0x01C8;
			constexpr uintptr_t Regions = 0x01D0;
			constexpr uintptr_t Privileges = 0x01D8;
			constexpr uintptr_t WordFilterProcessor = 0x01E0;
			constexpr uintptr_t GameVersion = 0x01E8;
			constexpr uintptr_t PlayerArchetype = 0x01F0;
			constexpr uintptr_t OnlinePlayers = 0x01F8;
			constexpr uintptr_t Eula = 0x0208;
			constexpr uintptr_t PrivacyPolicy = 0x0210;
			constexpr uintptr_t ToS = 0x0218;
			constexpr uintptr_t SCT = 0x0220;
			constexpr uintptr_t PaymentServices = 0x0228;
			constexpr uintptr_t bRequestPublicIP = 0x0230;
			constexpr uintptr_t PublicIP = 0x0238;
			constexpr uintptr_t AvatarRequester = 0x0248;
			constexpr uintptr_t AvatarPermissions = 0x0250;
		}

		namespace OnlineLegalTextEOS_X {
			constexpr uintptr_t EOSKey = 0x0070;
			constexpr uintptr_t OfflineFolder = 0x0080;
			constexpr uintptr_t OfflineTitleKey = 0x0090;
			constexpr uintptr_t LastResponse = 0x00A0;
			constexpr uintptr_t LastResponseCode = 0x00A8;
			constexpr uintptr_t TextResponse = 0x00B0;
			constexpr uintptr_t TextResponseCode = 0x00B8;
			constexpr uintptr_t bInputRecorded = 0x00BC;
			constexpr uintptr_t SyncState = 0x00C0;
			constexpr uintptr_t PendingResponseToAccept = 0x00C8;
			constexpr uintptr_t EOSServerURL = 0x00D0;
			constexpr uintptr_t EOSTextURL = 0x00E0;
			constexpr uintptr_t EOSSyncURL = 0x00F0;
			constexpr uintptr_t EOSAcceptURL = 0x0100;
			constexpr uintptr_t EOSDeclineURL = 0x0110;
			constexpr uintptr_t OfflineURL = 0x0120;
		}

		namespace OnlineLegalText_X {
			constexpr uintptr_t Folder = 0x0070;
			constexpr uintptr_t CachedData = 0x0080;
			constexpr uintptr_t AppendedPath = 0x0088;
		}

		namespace OnlineMessageComponent_X {
			constexpr uintptr_t Serializer = 0x0070;
			constexpr uintptr_t Compressor = 0x0078;
			constexpr uintptr_t MessageHandlers = 0x0080;
		}

		namespace OnlinePlayerAuthentication_X {
			constexpr uintptr_t LoginRPC = 0x00B0;
			constexpr uintptr_t LoginSuccessRPC = 0x00B8;
			constexpr uintptr_t LoggedInPlayerId = 0x00C0;
			constexpr uintptr_t PlayerUID = 0x0108;
			constexpr uintptr_t Platform = 0x0118;
			constexpr uintptr_t Bitfields_0x0128 = 0x0128;  // Multiple: bLoggedIn, bPlatformTokenAuthenticationFailed, bPlatformAuthTicketFailed_Switch, bSkipAuth, bLastChanceAuthBan
			constexpr uintptr_t AuthLoginError = 0x0130;
			constexpr uintptr_t BanMessage = 0x0138;
			constexpr uintptr_t EncryptedAuthTicket = 0x0140;
			constexpr uintptr_t EpicAuthTicket = 0x0150;
			constexpr uintptr_t AuthRequestFailureMax = 0x0160;
			constexpr uintptr_t AuthRequestRetryTime = 0x0164;
			constexpr uintptr_t AuthRequestFailureCount = 0x0168;
			constexpr uintptr_t AuthenticatedName = 0x0170;
			constexpr uintptr_t EpicLogin = 0x0180;
			constexpr uintptr_t PrimaryAccountNotSetError = 0x0188;
		}

		namespace OnlinePlayerFriends_X {
			constexpr uintptr_t Bitfields_0x00B0 = 0x00B0;  // Multiple: bAllowSamePlatformPsyNetFriends, bRepeatFriendsListDownloadsUntilSuccess, bFetchingLinkedAccounts
			constexpr uintptr_t CachedFriends = 0x00B8;
			constexpr uintptr_t PlatformFriends = 0x00C0;
			constexpr uintptr_t EpicFriends = 0x00C8;
			constexpr uintptr_t EpicInvites = 0x00D0;
			constexpr uintptr_t BlockedPlayers = 0x00E0;
			constexpr uintptr_t EpicBlockList = 0x00E8;
			constexpr uintptr_t PlatformBlockList = 0x00F0;
			constexpr uintptr_t PlatformToEpicAccountMap = 0x00F8;
			constexpr uintptr_t EpicToPlatformAccountMap = 0x0100;
			constexpr uintptr_t PlatformFriendsDownloadDelayer = 0x0108;
			constexpr uintptr_t PsyNetFriendsDownloadDelayer = 0x0110;
			constexpr uintptr_t EpicFriendsDownloadDelayer = 0x0118;
			constexpr uintptr_t PendingFriendAccepts = 0x0120;
			constexpr uintptr_t BlockStatusReporter = 0x0130;
			constexpr uintptr_t OSSConfig = 0x0138;
			constexpr uintptr_t EpicConfig = 0x0140;
			constexpr uintptr_t EpicFriendsPlugin = 0x0148;
			constexpr uintptr_t BlockPlayerCallbacks = 0x0150;
			constexpr uintptr_t UnblockPlayerCallbacks = 0x0160;
		}

		namespace OnlinePlayerPermissions_X {
			constexpr uintptr_t SyncDelay = 0x0060;
			constexpr uintptr_t PendingPlayerRequests = 0x0068;
			constexpr uintptr_t PlayerPermissions = 0x0078;
		}

		namespace OnlinePlayerRegionRestrictions_X {
			constexpr uintptr_t Restrictions = 0x00B0;
		}

		namespace OnlinePlayerStorageConfig_X {
			constexpr uintptr_t QueueBatchDelay = 0x0078;
		}

		namespace OnlinePlayerStorageManifest_X {
			constexpr uintptr_t MetaData = 0x0060;
		}

		namespace OnlinePlayerStorageQueue_X {
			constexpr uintptr_t Config = 0x0060;
			constexpr uintptr_t QueuedObjects = 0x0068;
			constexpr uintptr_t PendingObjects = 0x0078;
			constexpr uintptr_t DefaultStorageMaxSizeBytes = 0x0088;
			constexpr uintptr_t StorageMaxSizes = 0x0090;
		}

		namespace OnlinePlayerStorage_X {
			constexpr uintptr_t Queue = 0x00B0;
			constexpr uintptr_t Sync = 0x00B8;
			constexpr uintptr_t Manifest = 0x00C0;
		}

		namespace OnlinePlayer_X {
			constexpr uintptr_t Friends = 0x00B0;
			constexpr uintptr_t Authentication = 0x00B8;
			constexpr uintptr_t PsyNetConnection = 0x00C0;
			constexpr uintptr_t Storage = 0x00C8;
			constexpr uintptr_t RegionRestrictions = 0x00D0;
			constexpr uintptr_t BugReporter = 0x00D8;
			constexpr uintptr_t PlayerName = 0x00E0;
			constexpr uintptr_t PlayerID = 0x00F0;
			constexpr uintptr_t CleanPlayerID = 0x0138;
			constexpr uintptr_t LoginStatus = 0x0180;
			constexpr uintptr_t LocalPlayerNum = 0x0184;
			constexpr uintptr_t Bitfields_0x0188 = 0x0188;  // Multiple: bLoggingIn, bLoggingOut, bCabinedModeStatusKnown
			constexpr uintptr_t LoginError = 0x0190;
			constexpr uintptr_t CachedEpicID = 0x0198;
			constexpr uintptr_t LoginStatusError = 0x01A8;
			constexpr uintptr_t BannedError = 0x01B0;
		}

		namespace OnlineResource_X {
			constexpr uintptr_t URL = 0x0070;
			constexpr uintptr_t RetryDelays = 0x0080;
			constexpr uintptr_t CacheSeconds = 0x0090;
			constexpr uintptr_t Bitfields_0x0094 = 0x0094;  // Multiple: bZipResponse, bSyncing
			constexpr uintptr_t Headers = 0x0098;
			constexpr uintptr_t CachedData = 0x00A0;
			constexpr uintptr_t RetryCount = 0x00A8;
			constexpr uintptr_t LastSyncTime = 0x00AC;
			constexpr uintptr_t RetryConfig = 0x00B0;
			constexpr uintptr_t ServiceName = 0x00B8;
		}

		namespace OnlineSaveLock_X {
			constexpr uintptr_t EnableCount = 0x0060;
		}

		namespace Online_X {
			constexpr uintptr_t OnlineSub = 0x0068;
			constexpr uintptr_t PsyNet = 0x0070;
			constexpr uintptr_t EOS = 0x0078;
		}

		namespace ParameterDispenser_X {
			constexpr uintptr_t VfTable_IISetParameter = 0x0070;
			constexpr uintptr_t NameParams = 0x0078;
			constexpr uintptr_t FloatParams = 0x0088;
			constexpr uintptr_t VectorParams = 0x0098;
			constexpr uintptr_t ColorParams = 0x00A8;
			constexpr uintptr_t ActorParams = 0x00B8;
			constexpr uintptr_t AllComponents = 0x00C8;
		}

		namespace ParticleModuleBeamTarget_X {
			constexpr uintptr_t UnknownData00 = 0x010C;
		}

		namespace ParticleModuleLocationBoneSocket_X {
			constexpr uintptr_t UnknownData00 = 0x00AC;
		}

		namespace ParticleModuleVelocitySurfaceNormal_X {
			constexpr uintptr_t MeshActorParamName = 0x0078;
			constexpr uintptr_t VelocityMultiplier = 0x0080;
		}

		namespace ParticleModuleWind_X {
			constexpr uintptr_t StrengthScaleOverLife = 0x0070;
			constexpr uintptr_t AccelerationOverLife = 0x0098;
		}

		namespace Parties_X {
			constexpr uintptr_t ActiveLobby = 0x0060;
			constexpr uintptr_t LastActiveLobby = 0x0090;
			constexpr uintptr_t PartyLeaderID = 0x00A0;
			constexpr uintptr_t PsyNet = 0x00E8;
			constexpr uintptr_t OnlineGameParty = 0x00F0;
			constexpr uintptr_t MessageQueue = 0x00F8;
			constexpr uintptr_t PsyNetConnection = 0x0100;
			constexpr uintptr_t PsyNetChannel = 0x0108;
			constexpr uintptr_t Subscriptions = 0x0110;
			constexpr uintptr_t PlatformSession = 0x0118;
			constexpr uintptr_t SequenceCreateParty = 0x0120;
			constexpr uintptr_t SequenceJoinParty = 0x0128;
			constexpr uintptr_t SequenceLeaveParty = 0x0130;
			constexpr uintptr_t SequenceInviteToParty = 0x0138;
			constexpr uintptr_t SequenceJoinRequest = 0x0140;
			constexpr uintptr_t bRejoiningParty = 0x0148;
			constexpr uintptr_t SecondToWaitForPerConReconnect = 0x014C;
			constexpr uintptr_t PartySetting_PsyNetPartyId = 0x0150;
			constexpr uintptr_t PartySetting_JoinKey = 0x0160;
			constexpr uintptr_t PendingNotifications = 0x0170;
		}

		namespace PartyConfig_X {
			constexpr uintptr_t bCompressMessages = 0x0078;
		}

		namespace PartyErrors_X {
			constexpr uintptr_t AlreadyInParty = 0x0080;
			constexpr uintptr_t CreatePartyFailed = 0x0088;
			constexpr uintptr_t CreatePartyFailedTeamFull = 0x0090;
			constexpr uintptr_t CreatePlayerFailedPartyFull = 0x0098;
			constexpr uintptr_t InvitePlayerToPartyFailedPartyFull = 0x00A0;
			constexpr uintptr_t JoinPartyFailedPartyFull = 0x00A8;
			constexpr uintptr_t JoinPartyFailedPartyMatchmaking = 0x00B0;
			constexpr uintptr_t JoinPartyFailedPartyInGame = 0x00B8;
			constexpr uintptr_t JoinRequestNotFound = 0x00C0;
			constexpr uintptr_t KickedFromParty = 0x00C8;
			constexpr uintptr_t PartyDestroyedConnectionError = 0x00D0;
			constexpr uintptr_t PartyDestroyedSignedOut = 0x00D8;
			constexpr uintptr_t PlayerOffline = 0x00E0;
			constexpr uintptr_t JoinPartyFailed = 0x00E8;
			constexpr uintptr_t JoinPartyFailedNotAllowed = 0x00F0;
			constexpr uintptr_t JoinPartyFailedNotJoinable = 0x00F8;
			constexpr uintptr_t PartyBuildID = 0x0100;
			constexpr uintptr_t PartyNotFound = 0x0108;
			constexpr uintptr_t UserNotOwner = 0x0110;
			constexpr uintptr_t PartyIsFull = 0x0118;
			constexpr uintptr_t CannotAddToParty = 0x0120;
			constexpr uintptr_t UserListInvalid = 0x0128;
			constexpr uintptr_t InvalidOwner = 0x0130;
			constexpr uintptr_t ChatDisabled = 0x0138;
			constexpr uintptr_t MissingOrExpiredInvite = 0x0140;
			constexpr uintptr_t MemberNotFound = 0x0148;
			constexpr uintptr_t PartyIdConflict = 0x0150;
			constexpr uintptr_t CannotKickSelf = 0x0158;
			constexpr uintptr_t RegionRestrictedTrade = 0x0160;
			constexpr uintptr_t CannotCrossPlayInvite = 0x0168;
			constexpr uintptr_t RestrictedPlatformInvite = 0x0170;
			constexpr uintptr_t PlatformNotSupported = 0x0178;
			constexpr uintptr_t KickedCrossplayDisabled = 0x0180;
			constexpr uintptr_t KickedLeaderPartyUp = 0x0188;
			constexpr uintptr_t VoterDisconnected = 0x0190;
			constexpr uintptr_t VoteEnded = 0x0198;
			constexpr uintptr_t UsePlatformPartySystem = 0x01A0;
			constexpr uintptr_t InvitationRejected = 0x01A8;
			constexpr uintptr_t SplitScreenNotAllowedInLan = 0x01B0;
			constexpr uintptr_t PartyChatBlockedNotFriendsWithSomeone = 0x01B8;
			constexpr uintptr_t PartyChatBlockedChatDisabled = 0x01C0;
		}

		namespace PartyMessageQueue_X {
			constexpr uintptr_t Pending = 0x0070;
			constexpr uintptr_t CurrentBatch = 0x0080;
			constexpr uintptr_t bPaused = 0x0090;
			constexpr uintptr_t BatchDelayTime = 0x0094;
		}

		namespace PartyMessage_CrossPlayTextChat_X {
			constexpr uintptr_t CrossChatState = 0x00A8;
		}

		namespace PartyMessage_DisableCrossPlay_X {
			constexpr uintptr_t bDisableCrossPlay = 0x00A8;
		}

		namespace PartyMessage_GetPlatformPartyResponse_X {
			constexpr uintptr_t PlatformPartyID = 0x00A8;
			constexpr uintptr_t OriginalSender = 0x00B8;
		}

		namespace PartyMessage_JoinGame_X {
			constexpr uintptr_t Settings = 0x00A8;
		}

		namespace PartyMessage_Kick_X {
			constexpr uintptr_t KickPlayer = 0x00A8;
			constexpr uintptr_t KickReason = 0x00F0;
		}

		namespace PartyMessage_LobbySettings_X {
			constexpr uintptr_t BuildID = 0x00A8;
		}

		namespace PartyMessage_LocalPlayers_X {
			constexpr uintptr_t PrimaryMemberId = 0x00A8;
			constexpr uintptr_t Members = 0x00F0;
		}

		namespace PartyMessage_MatchmakingAvailability_X {
			constexpr uintptr_t MatchmakeRestrictions = 0x00A8;
		}

		namespace PartyMessage_PartyMemberJoinGame_X {
			constexpr uintptr_t Server = 0x00A8;
		}

		namespace PartyMessage_SearchStatus_X {
			constexpr uintptr_t SearchState = 0x00A8;
			constexpr uintptr_t bIsSearching = 0x00B0;
			constexpr uintptr_t PreferredPlaylists = 0x00B8;
		}

		namespace PartyMessage_SetPlatformParty_X {
			constexpr uintptr_t PlatformPartyID = 0x00A8;
		}

		namespace PartyMessage_X {
			constexpr uintptr_t Sender = 0x0060;
		}

		namespace PartyMetrics_X {
			constexpr uintptr_t PartyData = 0x0080;
		}

		namespace PartyPlatformSession_X {
			constexpr uintptr_t PartyID = 0x0060;
		}

		namespace PartySequence_CreateParty_X {
			constexpr uintptr_t PendingRPC = 0x0060;
		}

		namespace Pawn_X {
			constexpr uintptr_t GravityScale = 0x0518;
			constexpr uintptr_t PreviousController = 0x0520;
		}

		namespace PendingAvatarRequest_X {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t Size = 0x00A8;
		}

		namespace PerConMetrics_X {
			constexpr uintptr_t StartConnectFailCount = 0x0080;
			constexpr uintptr_t ConnectFailCount = 0x0084;
			constexpr uintptr_t DisconnectCount = 0x0088;
			constexpr uintptr_t RPCErrorCount = 0x008C;
			constexpr uintptr_t InvalidMessageCount = 0x0090;
			constexpr uintptr_t bConnected = 0x0094;
			constexpr uintptr_t StartTime = 0x0098;
		}

		namespace PerCon_X {
			constexpr uintptr_t Config = 0x0060;
			constexpr uintptr_t URL = 0x0068;
			constexpr uintptr_t Status = 0x0078;
		}

		namespace PhysicalMaterialProperty_X {
			constexpr uintptr_t SurfaceType = 0x0060;
		}

		namespace PingMessage_X {
			constexpr uintptr_t bIsResponse = 0x0060;
		}

		namespace PlayerController_X {
			constexpr uintptr_t CameraArchetype = 0x07E8;
			constexpr uintptr_t HUDArchetype = 0x07F0;
			constexpr uintptr_t OldPawnReference = 0x07F8;
			constexpr uintptr_t LockedDebugActor = 0x0800;
			constexpr uintptr_t bPausedForExternalUI = 0x0808;
			constexpr uintptr_t NetConnection = 0x0810;
		}

		namespace PlayerInput_X {
			constexpr uintptr_t GamepadDeadzone = 0x02F8;
			constexpr uintptr_t GamepadDeadzones = 0x0300;
			constexpr uintptr_t KeyboardAxisBlendTime = 0x0310;
			constexpr uintptr_t KeyboardAxisBlendTimes = 0x0318;
			constexpr uintptr_t CurrentKey = 0x0328;
			constexpr uintptr_t ActiveDPadButton = 0x0330;
			constexpr uintptr_t LastDoubleTapKey = 0x0338;
			constexpr uintptr_t DisabledActions = 0x0340;
			constexpr uintptr_t DisabledActionsUntilNextUse = 0x0350;
			constexpr uintptr_t Actions = 0x0360;
			constexpr uintptr_t ControlPreset = 0x0370;
			constexpr uintptr_t PCBindings = 0x0378;
			constexpr uintptr_t GamepadBindings = 0x0388;
			constexpr uintptr_t SteamInputBindings = 0x0398;
			constexpr uintptr_t TapTime = 0x03A8;
			constexpr uintptr_t DoubleTapTime = 0x03AC;
			constexpr uintptr_t HeldBindings = 0x03B0;
			constexpr uintptr_t Bitfields_0x03C0 = 0x03C0;  // Multiple: bDebugInput, bAbsorbCurrentKeyPress
			constexpr uintptr_t UnknownData00 = 0x03C8;
		}

		namespace PlaylistSettings_X {
			constexpr uintptr_t Title = 0x0060;
			constexpr uintptr_t Description = 0x0070;
			constexpr uintptr_t BadgeTitle = 0x0080;
			constexpr uintptr_t PlaylistId = 0x0090;
			constexpr uintptr_t PlayerCount = 0x0094;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bStandard, bRanked, bCheckRankedMatchReservationID, bSolo, bHidden, bExtraMode, bPrivate, bTournament, bApplyQuitPenalty, bAllowForfeit, bDisableRankedReconnect, bIgnoreAssignTeams, bKickOnMigrate, bAllowBotFills, bServerBroadcastCancellations, bSkipGameModeVerification, bNoBackFill, bIsMicroEventPlaylist, bHasVariablePlayerCount, bNew, bAllowClubs, bDisableSaveReplays, bOpenDetailsOnFirstTimeClicked, bAllowStayAsParty
			constexpr uintptr_t PlaylistImageURL = 0x00A0;
			constexpr uintptr_t PlaylistImageTexture = 0x00B0;
			constexpr uintptr_t PlaylistIconActiveURL = 0x00C0;
			constexpr uintptr_t PlaylistIconInactiveURL = 0x00D0;
			constexpr uintptr_t PlaylistNodeThumbnailURL = 0x00E0;
			constexpr uintptr_t PlaylistNodeDefaultThumbnailPackage = 0x00F0;
			constexpr uintptr_t SecondaryTitleOverride = 0x0100;
			constexpr uintptr_t PlaylistTimeWindow = 0x0110;
			constexpr uintptr_t PresetMutators = 0x0118;
			constexpr uintptr_t MapName = 0x0128;
			constexpr uintptr_t ServerCommand = 0x0130;
			constexpr uintptr_t MapSetName = 0x0140;
			constexpr uintptr_t PopulationBuckets = 0x0148;
		}

		namespace PlaylistSkillCache_X {
			constexpr uintptr_t Players = 0x0060;
			constexpr uintptr_t RankedConfig = 0x0070;
		}

		namespace PointLightComponent_X {
			constexpr uintptr_t BrightnessOverTime = 0x0268;
			constexpr uintptr_t AttachTime = 0x0270;
		}

		namespace PostProcessManager_X {
			constexpr uintptr_t PlayerOwner = 0x0060;
			constexpr uintptr_t ActiveEffects = 0x0068;
			constexpr uintptr_t bNeedsReset = 0x0078;
			constexpr uintptr_t EffectDefaults = 0x0080;
			constexpr uintptr_t PersistentEffectDefaults = 0x0090;
			constexpr uintptr_t ActiveChains = 0x00A0;
			constexpr uintptr_t ChainDefaults = 0x00B0;
			constexpr uintptr_t PostProcessOverrides = 0x00C0;
		}

		namespace PresetMutators_X {
			constexpr uintptr_t PresetTags = 0x0060;
			constexpr uintptr_t RequiresMaps = 0x0070;
			constexpr uintptr_t bHideSettings = 0x0080;
			constexpr uintptr_t OverrideName = 0x0088;
		}

		namespace PrimaryAuthLoggedIn_TA {
			constexpr uintptr_t PrimaryAuthedConnection = 0x0060;
		}

		namespace PrivilegeCheck_X {
			constexpr uintptr_t ControllerIDs = 0x0060;
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bHasRestriction, bFinished
			constexpr uintptr_t FailReason = 0x0078;
			constexpr uintptr_t PendingPrivileges = 0x0080;
			constexpr uintptr_t FailedControllerID = 0x0090;
			constexpr uintptr_t FailedPrivilege = 0x0094;
			constexpr uintptr_t FailedPrivilegeLevel = 0x0095;
			constexpr uintptr_t PendingControllerIDs = 0x0098;
		}

		namespace PsyNetBeaconConnection_X {
			constexpr uintptr_t VfTable_IIReservationConnection_X = 0x0060;
			constexpr uintptr_t ReservationID = 0x0068;
			constexpr uintptr_t ConnectionID = 0x0078;
			constexpr uintptr_t TimeoutTime = 0x0088;
		}

		namespace PsyNetBeacon_X {
			constexpr uintptr_t ConnectionTimeoutSeconds = 0x0070;
			constexpr uintptr_t PsyNetConnection = 0x0078;
			constexpr uintptr_t Connections = 0x0080;
			constexpr uintptr_t PendingMessages = 0x0090;
			constexpr uintptr_t PsyNetConfig = 0x00A0;
		}

		namespace PsyNetChannel_X {
			constexpr uintptr_t ChannelName = 0x0060;
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bOpen, bReceivedFirstMessage, bClosed, bTimedOut
			constexpr uintptr_t NextMessageID = 0x0074;
			constexpr uintptr_t WaitForMessageTime = 0x0078;
			constexpr uintptr_t ServiceQueue = 0x0080;
			constexpr uintptr_t Subscriptions = 0x0090;
		}

		namespace PsyNetClientServiceCollection_X {
			constexpr uintptr_t ServiceArchetypes = 0x0060;
		}

		namespace PsyNetClientService_X {
			constexpr uintptr_t Service = 0x0060;
			constexpr uintptr_t Version = 0x0070;
			constexpr uintptr_t Error = 0x0078;
			constexpr uintptr_t Connection = 0x0080;
			constexpr uintptr_t Expiration = 0x0088;
		}

		namespace PsyNetConfig_X {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bAllowPerCon, bRequiresPerCon, bAllowPsyNetParty, bSendPingMessage, bAllowServerBacktraceUploads, bAllowServerBacktraceLogUploads, bAllowClientBacktraceUploads, bAllowClientBacktraceLogUploads, bAllowPlayerCancelMatch
			constexpr uintptr_t PerConTimeout = 0x007C;
			constexpr uintptr_t PerConPingInterval = 0x0080;
			constexpr uintptr_t DisabledServerBacktracePlatforms = 0x0088;
			constexpr uintptr_t DisabledClientBacktracePlatforms = 0x0098;
			constexpr uintptr_t FreshConnectionWindow = 0x00A8;
			constexpr uintptr_t MatchmakingHeartbeatTimeSeconds = 0x00AC;
			constexpr uintptr_t SuppressHeadersForDebug = 0x00B0;
			constexpr uintptr_t PsyNetEnvironment = 0x00C0;
		}

		namespace PsyNetConnection_X {
			constexpr uintptr_t PsyNet = 0x0060;
			constexpr uintptr_t OnlineSub = 0x0068;
			constexpr uintptr_t Config = 0x0070;
			constexpr uintptr_t RetryConfig = 0x0078;
			constexpr uintptr_t URL = 0x0080;
			constexpr uintptr_t Headers = 0x0088;
			constexpr uintptr_t RequestQue = 0x0090;
			constexpr uintptr_t RPCQueue = 0x0098;
			constexpr uintptr_t ServiceProvider = 0x00A0;
			constexpr uintptr_t HttpMessenger = 0x00A8;
			constexpr uintptr_t PerConMessenger = 0x00B0;
			constexpr uintptr_t PerCon = 0x00B8;
			constexpr uintptr_t PerConMetrics = 0x00C0;
			constexpr uintptr_t Bitfields_0x00C8 = 0x00C8;  // Multiple: bAuthorized, bConnected, bFreshConnection, bPerConConnected
			constexpr uintptr_t ConnectedChangeTime = 0x00CC;
			constexpr uintptr_t DisabledError = 0x00D0;
			constexpr uintptr_t DisabledErrorStack = 0x00D8;
			constexpr uintptr_t MaintenanceError = 0x00E8;
			constexpr uintptr_t DuplicateLoginError = 0x00F0;
			constexpr uintptr_t NoInternetError = 0x00F8;
			constexpr uintptr_t NoUrlError = 0x0100;
			constexpr uintptr_t AuthDisabledError = 0x0108;
			constexpr uintptr_t AuthRetryDelays = 0x0110;
			constexpr uintptr_t ConsecutiveAuthFailures = 0x0120;
		}

		namespace PsyNetMessage_X {
			constexpr uintptr_t Headers = 0x0060;
			constexpr uintptr_t Body = 0x0068;
		}

		namespace PsyNetMessengerHttp_X {
			constexpr uintptr_t URL = 0x0078;
		}

		namespace PsyNetMessengerWebSocket_X {
			constexpr uintptr_t MessageSendTimeout = 0x0078;
			constexpr uintptr_t HandshakeHeaders = 0x0080;
			constexpr uintptr_t URL = 0x0088;
			constexpr uintptr_t Connection = 0x0098;
			constexpr uintptr_t QueuedMessages = 0x00A0;
			constexpr uintptr_t PsyNetConfig = 0x00B0;
		}

		namespace PsyNetMetrics_X {
			constexpr uintptr_t ServiceData = 0x0080;
			constexpr uintptr_t ErrorData = 0x0090;
		}

		namespace PsyNetRequestQue_X {
			constexpr uintptr_t RequestTimeout = 0x0060;
			constexpr uintptr_t Requests = 0x0068;
		}

		namespace PsyNetRetryConfig_X {
			constexpr uintptr_t RetryDelays = 0x0078;
			constexpr uintptr_t RetryPolicies = 0x0088;
			constexpr uintptr_t ReAuthPolicies = 0x0098;
		}

		namespace PsyNetServiceProvider_X {
			constexpr uintptr_t ServiceCollection = 0x0060;
			constexpr uintptr_t Subscriptions = 0x0068;
			constexpr uintptr_t Channels = 0x0070;
		}

		namespace PsyNetServiceSubscriptions_X {
			constexpr uintptr_t Subscriptions = 0x0070;
		}

		namespace PsyNetService_Backfill_X {
			constexpr uintptr_t Playlist = 0x00B0;
			constexpr uintptr_t Parties = 0x00B8;
		}

		namespace PsyNetService_CreateHonorDuel_X {
			constexpr uintptr_t Playlist = 0x00B0;
			constexpr uintptr_t PlayerRoles = 0x00B8;
		}

		namespace PsyNetService_CreatePrivate_X {
			constexpr uintptr_t PlaylistId = 0x00B0;
		}

		namespace PsyNetService_Echo_X {
			constexpr uintptr_t RequestString = 0x0090;
			constexpr uintptr_t ResponseString = 0x00A0;
		}

		namespace PsyNetService_NewGame_X {
			constexpr uintptr_t Playlist = 0x00B0;
			constexpr uintptr_t IsBotMatch = 0x00B4;
			constexpr uintptr_t BotNames = 0x00B8;
			constexpr uintptr_t Parties = 0x00C8;
		}

		namespace PsyNetService_OnlineStatusUpdate_X {
			constexpr uintptr_t PlayerID = 0x0090;
			constexpr uintptr_t OnlineStatus = 0x00D8;
			constexpr uintptr_t RichPresenceInfo = 0x00E8;
		}

		namespace PsyNetService_PartyJoinRequestAccepted_X {
			constexpr uintptr_t PartyComplete = 0x01B0;
		}

		namespace PsyNetService_PartyOwnerChanged_X {
			constexpr uintptr_t PartyID = 0x0090;
			constexpr uintptr_t NotificationType = 0x00A0;
			constexpr uintptr_t Content = 0x00B0;
			constexpr uintptr_t FromUserId = 0x00F8;
			constexpr uintptr_t CreatedAt = 0x0140;
			constexpr uintptr_t ForUserId = 0x0148;
		}

		namespace PsyNetService_PartyUserKicked_X {
			constexpr uintptr_t PartyID = 0x0090;
			constexpr uintptr_t NotificationType = 0x00A0;
			constexpr uintptr_t Content = 0x00B0;
			constexpr uintptr_t FromUserId = 0x00F8;
			constexpr uintptr_t CreatedAt = 0x0140;
			constexpr uintptr_t ForUserId = 0x0148;
			constexpr uintptr_t KickReason = 0x0190;
		}

		namespace PsyNetService_Party_X {
			constexpr uintptr_t PartyID = 0x0090;
			constexpr uintptr_t NotificationType = 0x00A0;
			constexpr uintptr_t Content = 0x00B0;
			constexpr uintptr_t FromUserId = 0x00C0;
			constexpr uintptr_t FromUserName = 0x0108;
			constexpr uintptr_t CreatedAt = 0x0118;
			constexpr uintptr_t ForUserId = 0x0120;
			constexpr uintptr_t FromEpicUserID = 0x0168;
		}

		namespace PsyNetService_PersonaInfo_X {
			constexpr uintptr_t FromPlayer = 0x0090;
		}

		namespace PsyNetService_PlayerUnfriended_X {
			constexpr uintptr_t PlayerID = 0x0090;
		}

		namespace PsyNetService_ReservationBase_X {
			constexpr uintptr_t ReservationID = 0x0090;
			constexpr uintptr_t Players = 0x00A0;
		}

		namespace PsyNetStaticData_X {
			constexpr uintptr_t PsyConfigTemplateURL = 0x0070;
			constexpr uintptr_t LocalCacheTimeoutSeconds = 0x0080;
			constexpr uintptr_t SyncDataTimeoutSeconds = 0x0084;
			constexpr uintptr_t PsyNet = 0x0088;
			constexpr uintptr_t OnlineSub = 0x0090;
			constexpr uintptr_t WebConfig = 0x0098;
			constexpr uintptr_t Bitfields_0x00A0 = 0x00A0;  // Multiple: bDebug, bLoaded
			constexpr uintptr_t CacheTimer = 0x00A8;
			constexpr uintptr_t WebData = 0x00B0;
			constexpr uintptr_t DefaultObjects = 0x00B8;
			constexpr uintptr_t DownloadedObjects = 0x00C8;
			constexpr uintptr_t RegisteredObjects = 0x00D8;
			constexpr uintptr_t PsyConfigQueryParams = 0x00E8;
			constexpr uintptr_t PsyConfigSecret = 0x00F8;
			constexpr uintptr_t PsyConfigAltEnv = 0x0108;
			constexpr uintptr_t BlockingSyncStartTime = 0x0118;
		}

		namespace PsyNetUrl_X {
			constexpr uintptr_t bUseSubsystemURL = 0x0060;
			constexpr uintptr_t URL = 0x0068;
			constexpr uintptr_t URLv2 = 0x0078;
		}

		namespace PsyNetWordFilter_X {
			constexpr uintptr_t Config = 0x0070;
			constexpr uintptr_t PendingFilterRPCs = 0x0078;
		}

		namespace PsyNet_X {
			constexpr uintptr_t Environment = 0x0060;
			constexpr uintptr_t EnvironmentName = 0x0068;
			constexpr uintptr_t Keys = 0x0078;
			constexpr uintptr_t Headers = 0x00B8;
			constexpr uintptr_t Services = 0x00C0;
			constexpr uintptr_t PrimaryEnabledConnection = 0x00C8;
			constexpr uintptr_t PrimaryAuthedConnection = 0x00D0;
			constexpr uintptr_t AnonymousConnection = 0x00D8;
			constexpr uintptr_t LastReportCheaterTime = 0x00E0;
			constexpr uintptr_t bUsePsynetEnvironment = 0x00E4;
		}

		namespace RPCBatch_X {
			constexpr uintptr_t SendTime = 0x0060;
			constexpr uintptr_t Requests = 0x0068;
			constexpr uintptr_t Responses = 0x0078;
			constexpr uintptr_t Error = 0x0088;
			constexpr uintptr_t Result = 0x00A8;
			constexpr uintptr_t RequestMessage = 0x00B0;
			constexpr uintptr_t ResponseMessage = 0x00B8;
			constexpr uintptr_t ResponseError = 0x00C0;
			constexpr uintptr_t bUseRpcV2 = 0x00C8;
		}

		namespace RPCConfig_X {
			constexpr uintptr_t DisabledClasses = 0x0078;
			constexpr uintptr_t DisabledServices = 0x0088;
			constexpr uintptr_t MaxRPCsPerBatch = 0x0098;
		}

		namespace RPCQueue_X {
			constexpr uintptr_t VfTable_FTickableObject = 0x0070;
			constexpr uintptr_t AuthTimeoutSeconds = 0x0078;
			constexpr uintptr_t RPCConfig = 0x0080;
			constexpr uintptr_t RetryConfig = 0x0088;
			constexpr uintptr_t PsyNetUrl = 0x0090;
			constexpr uintptr_t PendingRPCs = 0x0098;
			constexpr uintptr_t PendingBatches = 0x00A8;
			constexpr uintptr_t ServiceFailureDelayTimes = 0x00B8;
			constexpr uintptr_t bAuthorized = 0x0108;
		}

		namespace RPC_AcceptClubInvite_X {
			constexpr uintptr_t ClubID = 0x00F8;
		}

		namespace RPC_AddPlayerToRole_X {
			constexpr uintptr_t RoleID = 0x00E8;
		}

		namespace RPC_AddQuitter_X {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Reason = 0x0130;
			constexpr uintptr_t PlaylistId = 0x0140;
			constexpr uintptr_t MatchGUID = 0x0148;
		}

		namespace RPC_CanShowAvatar_X {
			constexpr uintptr_t PlayerIds = 0x00E8;
			constexpr uintptr_t AllowedPlayerIDs = 0x00F8;
			constexpr uintptr_t HiddenPlayerIDs = 0x0108;
		}

		namespace RPC_CheckReplacementDedicatedServer_X {
			constexpr uintptr_t ServerId = 0x00E8;
			constexpr uintptr_t bFoundReplacement = 0x00F8;
			constexpr uintptr_t Server = 0x0100;
		}

		namespace RPC_ClubDetailsBase_X {
			constexpr uintptr_t ClubDetails = 0x00E8;
			constexpr uintptr_t ClubDetailsTask = 0x00F0;
		}

		namespace RPC_ClubsRecordStats_X {
			constexpr uintptr_t Clubs = 0x00E8;
			constexpr uintptr_t MatchGUID = 0x00F8;
			constexpr uintptr_t Playlist = 0x0108;
		}

		namespace RPC_CreateClub_X {
			constexpr uintptr_t ClubName = 0x00F8;
			constexpr uintptr_t ClubTag = 0x0108;
			constexpr uintptr_t PrimaryColor = 0x0118;
			constexpr uintptr_t AccentColor = 0x011C;
		}

		namespace RPC_CreateGameServer_X {
			constexpr uintptr_t ServerName = 0x00E8;
			constexpr uintptr_t MachineId = 0x00F8;
			constexpr uintptr_t IP = 0x0100;
			constexpr uintptr_t Region = 0x0110;
			constexpr uintptr_t DataCenter = 0x0120;
			constexpr uintptr_t BuildID = 0x0130;
			constexpr uintptr_t ServerType = 0x0138;
			constexpr uintptr_t ServerId = 0x0148;
			constexpr uintptr_t Host = 0x0158;
			constexpr uintptr_t Zone = 0x0168;
			constexpr uintptr_t UseWebSocket = 0x016C;
			constexpr uintptr_t PerConURL = 0x0170;
			constexpr uintptr_t PerConURLv2 = 0x0180;
			constexpr uintptr_t PsyToken = 0x0190;
		}

		namespace RPC_DeactivateGameServer_X {
			constexpr uintptr_t ServerId = 0x00E8;
		}

		namespace RPC_FileStorage_GetFileDownloadUrl_X {
			constexpr uintptr_t Path = 0x00E8;
			constexpr uintptr_t URL = 0x00F8;
		}

		namespace RPC_FileStorage_GetFileUploadUrl_X {
			constexpr uintptr_t Path = 0x00E8;
			constexpr uintptr_t ContentType = 0x00F8;
			constexpr uintptr_t URL = 0x0108;
		}

		namespace RPC_FilterContent_X {
			constexpr uintptr_t Content = 0x00E8;
			constexpr uintptr_t Policy = 0x00F8;
			constexpr uintptr_t FilteredContent = 0x0108;
			constexpr uintptr_t PlayerIds = 0x0128;
			constexpr uintptr_t Usage = 0x0138;
		}

		namespace RPC_GetAntiAddictionData_X {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Bitfields_0x0130 = 0x0130;  // Multiple: bUnderAge, bShowMessage
			constexpr uintptr_t HoursPlayed = 0x0134;
		}

		namespace RPC_GetClubDetailsArray_X {
			constexpr uintptr_t ClubIDs = 0x00E8;
			constexpr uintptr_t ClubDetails = 0x00F8;
		}

		namespace RPC_GetClubDetails_X {
			constexpr uintptr_t ClubID = 0x00F8;
		}

		namespace RPC_GetClubInvites_X {
			constexpr uintptr_t ClubInvites = 0x00E8;
		}

		namespace RPC_GetClubPrivateMatches_X {
			constexpr uintptr_t Servers = 0x00E8;
		}

		namespace RPC_GetClubStats_X {
			constexpr uintptr_t CareerStats = 0x00E8;
			constexpr uintptr_t SeasonalStats = 0x0160;
			constexpr uintptr_t PreviousSeasonalBadges = 0x0170;
			constexpr uintptr_t SeasonalTitles = 0x0180;
		}

		namespace RPC_GetClubTitles_X {
			constexpr uintptr_t ClubTitles = 0x00E8;
		}

		namespace RPC_GetGameServerPingList2_X {
			constexpr uintptr_t Regions = 0x00E8;
			constexpr uintptr_t Servers = 0x00F8;
		}

		namespace RPC_GetGameServerPingList_X {
			constexpr uintptr_t Regions = 0x00E8;
			constexpr uintptr_t Servers = 0x00F8;
		}

		namespace RPC_GetGenericDataAll_X {
			constexpr uintptr_t GenericData = 0x00E8;
		}

		namespace RPC_GetLeaderboardBase_X {
			constexpr uintptr_t bDisableCrossPlay = 0x00E8;
			constexpr uintptr_t LeaderboardId = 0x00F0;
			constexpr uintptr_t Platforms = 0x0100;
		}

		namespace RPC_GetLeaderboardRankForUsersBase_X {
			constexpr uintptr_t PlayerIds = 0x00E8;
			constexpr uintptr_t LeaderboardId = 0x00F8;
			constexpr uintptr_t Players = 0x0108;
		}

		namespace RPC_GetLeaderboardRankForUsers_X {
			constexpr uintptr_t Stat = 0x0118;
		}

		namespace RPC_GetLeaderboardValueForUserBase_X {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t LeaderboardId = 0x0130;
			constexpr uintptr_t Bitfields_0x0140 = 0x0140;  // Multiple: bHasSkill, bHasValue
			constexpr uintptr_t Value = 0x0144;
			constexpr uintptr_t MMR = 0x0148;
		}

		namespace RPC_GetLeaderboardValueForUser_X {
			constexpr uintptr_t Stat = 0x0150;
		}

		namespace RPC_GetLeaderboard_X {
			constexpr uintptr_t Stat = 0x0110;
		}

		namespace RPC_GetPartyMemberSkill_X {
			constexpr uintptr_t PlayerIds = 0x00E8;
			constexpr uintptr_t Players = 0x00F8;
		}

		namespace RPC_GetPlayerClubDetails_X {
			constexpr uintptr_t PlayerID = 0x00F8;
		}

		namespace RPC_GetPlayerPermissions_X {
			constexpr uintptr_t PlayerIds = 0x00E8;
			constexpr uintptr_t PlayerPermissions = 0x00F8;
		}

		namespace RPC_GetPlayerSkill_X {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Skills = 0x0130;
			constexpr uintptr_t RewardLevels = 0x0140;
		}

		namespace RPC_GetPlayerTitles_X {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Titles = 0x0130;
		}

		namespace RPC_GetPopulation_X {
			constexpr uintptr_t Playlists = 0x00E8;
		}

		namespace RPC_GetPublicIP_X {
			constexpr uintptr_t IP = 0x00E8;
		}

		namespace RPC_GetSkillLeaderboardRankForUsers_X {
			constexpr uintptr_t Playlist = 0x0118;
		}

		namespace RPC_GetSkillLeaderboardValueForUser_X {
			constexpr uintptr_t Playlist = 0x0150;
		}

		namespace RPC_GetSkillLeaderboard_X {
			constexpr uintptr_t Playlist = 0x0110;
		}

		namespace RPC_GetSubRegions_X {
			constexpr uintptr_t RequestRegions = 0x00E8;
			constexpr uintptr_t Regions = 0x00F8;
		}

		namespace RPC_InviteToClub_X {
			constexpr uintptr_t PlayerID = 0x00E8;
		}

		namespace RPC_JoinMatch_X {
			constexpr uintptr_t JoinType = 0x00E8;
			constexpr uintptr_t ServerName = 0x00F0;
			constexpr uintptr_t Password = 0x0100;
		}

		namespace RPC_LoginAuthPlayer_X {
			constexpr uintptr_t Platform = 0x00E8;
			constexpr uintptr_t PlayerName = 0x00F8;
			constexpr uintptr_t PlayerID = 0x0108;
			constexpr uintptr_t Language = 0x0118;
			constexpr uintptr_t AuthTicket = 0x0128;
			constexpr uintptr_t BuildRegion = 0x0138;
			constexpr uintptr_t FeatureSet = 0x0148;
			constexpr uintptr_t Device = 0x0150;
			constexpr uintptr_t LocalFirstPlayerID = 0x0160;
			constexpr uintptr_t Bitfields_0x0170 = 0x0170;  // Multiple: bSkipAuth, bSetAsPrimaryAccount, UseWebSocket, IsLastChanceAuthBan
			constexpr uintptr_t EpicAuthTicket = 0x0178;
			constexpr uintptr_t EpicAccountId = 0x0188;
			constexpr uintptr_t SessionId = 0x0198;
			constexpr uintptr_t PsyToken = 0x01A8;
			constexpr uintptr_t BanMessage = 0x01B8;
			constexpr uintptr_t VerifiedPlayerName = 0x01C0;
			constexpr uintptr_t PerConURL = 0x01D0;
			constexpr uintptr_t PerConURLv2 = 0x01E0;
			constexpr uintptr_t CountryRestrictions = 0x01F0;
			constexpr uintptr_t EulaResetCounter = 0x0200;
		}

		namespace RPC_PartyAcceptJoinRequest_X {
			constexpr uintptr_t PlayerID = 0x00E8;
		}

		namespace RPC_PartyBase_X {
			constexpr uintptr_t PartyID = 0x00E8;
		}

		namespace RPC_PartyChangeOwner_X {
			constexpr uintptr_t NewOwnerId = 0x00F8;
			constexpr uintptr_t Info = 0x0140;
			constexpr uintptr_t Members = 0x01B0;
		}

		namespace RPC_PartyChat_X {
			constexpr uintptr_t Message = 0x00F8;
		}

		namespace RPC_PartyCreate_X {
			constexpr uintptr_t bForcePartyonix = 0x00E8;
			constexpr uintptr_t Info = 0x00F0;
			constexpr uintptr_t Members = 0x0160;
		}

		namespace RPC_PartyInfo_X {
			constexpr uintptr_t Invites = 0x00E8;
			constexpr uintptr_t Member = 0x00F8;
		}

		namespace RPC_PartyJoin_X {
			constexpr uintptr_t JoinID = 0x00F8;
			constexpr uintptr_t Info = 0x0108;
			constexpr uintptr_t Members = 0x0178;
		}

		namespace RPC_PartyKickMember_X {
			constexpr uintptr_t Members = 0x00F8;
			constexpr uintptr_t KickReason = 0x0108;
		}

		namespace RPC_PartyMessage_X {
			constexpr uintptr_t Message = 0x00F8;
		}

		namespace RPC_PartySendInvite_X {
			constexpr uintptr_t InviteeID = 0x00F8;
		}

		namespace RPC_PartySendJoinRequest_X {
			constexpr uintptr_t PlayerID = 0x00E8;
		}

		namespace RPC_PlayerSearchPrivateMatch_X {
			constexpr uintptr_t Region = 0x00E8;
			constexpr uintptr_t PlaylistId = 0x00F8;
		}

		namespace RPC_PlayerStorageGet_X {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Items = 0x0130;
			constexpr uintptr_t Result = 0x0140;
		}

		namespace RPC_PlayerStorageSet_X {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Items = 0x0130;
			constexpr uintptr_t Result = 0x0140;
		}

		namespace RPC_PsyNetSendIndividualChat_X {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Message = 0x0130;
		}

		namespace RPC_RecordMatchResults_X {
			constexpr uintptr_t MatchGUID = 0x00E8;
			constexpr uintptr_t Match = 0x00F8;
			constexpr uintptr_t MatchName = 0x0120;
			constexpr uintptr_t Winners = 0x0130;
			constexpr uintptr_t Losers = 0x0140;
			constexpr uintptr_t AppSessionID = 0x0150;
			constexpr uintptr_t LevelSessionID = 0x0160;
			constexpr uintptr_t bIsBotMatch = 0x0170;
		}

		namespace RPC_RecordMatch_X {
			constexpr uintptr_t Match = 0x00E8;
		}

		namespace RPC_RecordMetrics_X {
			constexpr uintptr_t AppSessionID = 0x00E8;
			constexpr uintptr_t LevelSessionID = 0x00F8;
			constexpr uintptr_t CurrentTimeSeconds = 0x0108;
			constexpr uintptr_t FirstEventIndex = 0x010C;
			constexpr uintptr_t Events = 0x0110;
		}

		namespace RPC_RejectClubInvite_X {
			constexpr uintptr_t ClubID = 0x00E8;
		}

		namespace RPC_RelayToClient_X {
			constexpr uintptr_t PlayerIds = 0x00E8;
			constexpr uintptr_t ReservationID = 0x00F8;
			constexpr uintptr_t MessageType = 0x0108;
			constexpr uintptr_t MessagePayload = 0x0118;
			constexpr uintptr_t Bitfields_0x0128 = 0x0128;  // Multiple: AllowPartialSuccess, QueueOffline
			constexpr uintptr_t OfflineTTLSeconds = 0x012C;
		}

		namespace RPC_RelayToServer_X {
			constexpr uintptr_t DSConnectToken = 0x00E8;
			constexpr uintptr_t ReservationID = 0x00F8;
			constexpr uintptr_t MessageType = 0x0108;
			constexpr uintptr_t MessagePayload = 0x0118;
		}

		namespace RPC_RemoveFromClub_X {
			constexpr uintptr_t PlayerID = 0x00F8;
		}

		namespace RPC_RemovePlayerFromRole_X {
			constexpr uintptr_t RoleID = 0x00E8;
		}

		namespace RPC_RemoveQuitter_X {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t PlaylistId = 0x0130;
			constexpr uintptr_t MatchGUID = 0x0138;
		}

		namespace RPC_ReportExploiter_X {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Reason = 0x0130;
			constexpr uintptr_t MatchGUID = 0x0138;
			constexpr uintptr_t Data = 0x0148;
		}

		namespace RPC_ReportLowFPS_X {
			constexpr uintptr_t IP = 0x00E8;
			constexpr uintptr_t MachineId = 0x00F8;
			constexpr uintptr_t ServerId = 0x0100;
			constexpr uintptr_t ServerName = 0x0110;
			constexpr uintptr_t NumHumans = 0x0120;
			constexpr uintptr_t NumBots = 0x0124;
		}

		namespace RPC_ServerToServer_X {
			constexpr uintptr_t ServerId = 0x00E8;
			constexpr uintptr_t MessageType = 0x00F8;
			constexpr uintptr_t MessagePayload = 0x0108;
		}

		namespace RPC_SetClubMotD_X {
			constexpr uintptr_t Text = 0x0120;
		}

		namespace RPC_SetClubOwner_X {
			constexpr uintptr_t PlayerID = 0x00F8;
		}

		namespace RPC_SetClubRole_X {
			constexpr uintptr_t PlayerID = 0x00F8;
			constexpr uintptr_t RoleID = 0x0140;
		}

		namespace RPC_SetPlayerSkillTier_X {
			constexpr uintptr_t Playlist = 0x00E8;
			constexpr uintptr_t Tier = 0x00EC;
			constexpr uintptr_t MatchesPlayed = 0x00F0;
		}

		namespace RPC_SetPlayerSkill_X {
			constexpr uintptr_t Playlist = 0x00E8;
			constexpr uintptr_t Mu = 0x00EC;
			constexpr uintptr_t Sigma = 0x00F0;
			constexpr uintptr_t MatchesPlayed = 0x00F4;
		}

		namespace RPC_SetRichPresence_X {
			constexpr uintptr_t PresenceInfo = 0x00E8;
			constexpr uintptr_t PresenceState = 0x00F8;
		}

		namespace RPC_SetSeasonReward_X {
			constexpr uintptr_t SeasonLevel = 0x00E8;
			constexpr uintptr_t SeasonLevelWins = 0x00EC;
		}

		namespace RPC_SetServerNotJoinable_X {
			constexpr uintptr_t ServerId = 0x00E8;
		}

		namespace RPC_StartMatchmaking_X {
			constexpr uintptr_t Regions = 0x00E8;
			constexpr uintptr_t Playlists = 0x00F8;
			constexpr uintptr_t SecondsSearching = 0x0108;
			constexpr uintptr_t CurrentServerID = 0x0110;
			constexpr uintptr_t bDisableCrossPlay = 0x0120;
			constexpr uintptr_t PartyID = 0x0128;
			constexpr uintptr_t PartyMembers = 0x0138;
			constexpr uintptr_t BannedSecondsRemaining = 0x0148;
			constexpr uintptr_t EstimatedQueueTime = 0x014C;
		}

		namespace RPC_TestPlayerID_X {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t ResponsePlayerID = 0x0130;
		}

		namespace RPC_Test_X {
			constexpr uintptr_t TestParamLocalizedString = 0x00E8;
			constexpr uintptr_t TestParamString = 0x00F8;
			constexpr uintptr_t TestParamStruct = 0x0108;
			constexpr uintptr_t TestParamStructs = 0x0190;
			constexpr uintptr_t TestResultLocalizedString = 0x01A0;
			constexpr uintptr_t TestResultString = 0x01B0;
			constexpr uintptr_t TestResultStruct = 0x01C0;
			constexpr uintptr_t TestResultStructs = 0x0248;
		}

		namespace RPC_UpdateClubColors_X {
			constexpr uintptr_t PrimaryColor = 0x00F8;
			constexpr uintptr_t AccentColor = 0x00FC;
		}

		namespace RPC_UpdateClubName_X {
			constexpr uintptr_t ClubName = 0x00F8;
			constexpr uintptr_t ClubTag = 0x0108;
		}

		namespace RPC_UpdateClubTitle_X {
			constexpr uintptr_t EquippedTitle = 0x00F8;
		}

		namespace RPC_UpdateGameServer_X {
			constexpr uintptr_t ServerId = 0x00E8;
			constexpr uintptr_t Playlist = 0x00F8;
			constexpr uintptr_t MaxPlayers = 0x00FC;
			constexpr uintptr_t NumPlayersTeam1 = 0x0100;
			constexpr uintptr_t NumPlayersTeam2 = 0x0104;
			constexpr uintptr_t ReservationsTeam1 = 0x0108;
			constexpr uintptr_t ReservationsTeam2 = 0x010C;
			constexpr uintptr_t Bitfields_0x0110 = 0x0110;  // Multiple: bIsPostGame, bIsBotMatch
			constexpr uintptr_t TimeRemaining = 0x0114;
			constexpr uintptr_t ExclusivePlatform = 0x0118;
			constexpr uintptr_t PlayersPlatforms = 0x0128;
			constexpr uintptr_t PlayerIds = 0x0138;
			constexpr uintptr_t AbandonedPlayerIDs = 0x0148;
			constexpr uintptr_t CustomServerName = 0x0158;
			constexpr uintptr_t CustomServerPassword = 0x0168;
			constexpr uintptr_t ScoreTeam1 = 0x0178;
			constexpr uintptr_t ScoreTeam2 = 0x017C;
			constexpr uintptr_t NumTeam1BackfillPlayers = 0x0180;
			constexpr uintptr_t NumTeam2BackfillPlayers = 0x0184;
			constexpr uintptr_t ClubID = 0x0188;
		}

		namespace RPC_UpdateLeaderboard_X {
			constexpr uintptr_t Updates = 0x00E8;
			constexpr uintptr_t MatchGUID = 0x00F8;
			constexpr uintptr_t PlaylistId = 0x0108;
		}

		namespace RPC_UpdatePlayerPlaylist_X {
			constexpr uintptr_t Playlist = 0x00E8;
			constexpr uintptr_t NumLocalPlayers = 0x00EC;
		}

		namespace RPC_UpdateSkills_X {
			constexpr uintptr_t Playlist = 0x0178;
			constexpr uintptr_t NewSkills = 0x0180;
			constexpr uintptr_t NewRewardLevels = 0x0190;
			constexpr uintptr_t MatchData = 0x01A0;
		}

		namespace RPC_X {
			constexpr uintptr_t Service = 0x0060;
			constexpr uintptr_t Version = 0x0070;
			constexpr uintptr_t ServiceFailRetryDelay = 0x0074;
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bAllowBatching, bRequiresAuth, bDisposed
			constexpr uintptr_t Priority = 0x007C;
			constexpr uintptr_t Headers = 0x0080;
			constexpr uintptr_t Error = 0x0090;
			constexpr uintptr_t Task = 0x0098;
		}

		namespace RadialBlurComponent_X {
			constexpr uintptr_t FadeTime = 0x0110;
			constexpr uintptr_t FadeFalloff = 0x0114;
		}

		namespace RandomStream_X {
			constexpr uintptr_t Stream = 0x0060;
			constexpr uintptr_t CurrentSeed = 0x0064;
		}

		namespace RankedConfig_X {
			constexpr uintptr_t ReconnectTimeoutSeconds = 0x0078;
			constexpr uintptr_t SkillTierToSeasonRewardLevel = 0x0080;
			constexpr uintptr_t SeasonRewardRequiredWinsPerLevel = 0x0090;
			constexpr uintptr_t bCheckReservationID = 0x00A0;
			constexpr uintptr_t SeasonEndTimeSeconds = 0x00A8;
			constexpr uintptr_t MaximumRankDisparity = 0x00B0;
			constexpr uintptr_t PlacementMatchesNeededToReceiveRank = 0x00B4;
			constexpr uintptr_t HighestTierNewPlayersCanPlayWith = 0x00B8;
			constexpr uintptr_t HighestMuNewPlayersCanHave = 0x00BC;
		}

		namespace RegionConfig_X {
			constexpr uintptr_t SuperRegions = 0x0078;
			constexpr uintptr_t Regions = 0x0088;
		}

		namespace RegionPingData_X {
			constexpr uintptr_t Address = 0x0060;
			constexpr uintptr_t PingsSent = 0x0068;
			constexpr uintptr_t PingsReceived = 0x006C;
			constexpr uintptr_t LowestPing = 0x0070;
			constexpr uintptr_t LastSendTime = 0x0074;
		}

		namespace RegionPingMessage_X {
			constexpr uintptr_t bIsResponse = 0x0060;
		}

		namespace RegionPing_X {
			constexpr uintptr_t Region = 0x0060;
			constexpr uintptr_t RegionID = 0x0068;
			constexpr uintptr_t Address = 0x0078;
			constexpr uintptr_t Connection = 0x0080;
			constexpr uintptr_t PingSendTime = 0x0088;
			constexpr uintptr_t Ping = 0x008C;
			constexpr uintptr_t AvgPing = 0x0090;
			constexpr uintptr_t PingCount = 0x0094;
			constexpr uintptr_t PingResult = 0x0098;
		}

		namespace RegionPinger_X {
			constexpr uintptr_t MaxPing = 0x0070;
			constexpr uintptr_t PingsPerRegion = 0x0074;
			constexpr uintptr_t DelayBetweenPings = 0x0078;
			constexpr uintptr_t ActivePings = 0x0080;
			constexpr uintptr_t PingBeacon = 0x0090;
			constexpr uintptr_t TickIndex = 0x0098;
			constexpr uintptr_t PingResults = 0x00A0;
		}

		namespace Region_X {
			constexpr uintptr_t SuperRegionID = 0x0060;
			constexpr uintptr_t Id = 0x0070;
			constexpr uintptr_t Label = 0x0080;
			constexpr uintptr_t Secret = 0x0090;
		}

		namespace RemoteAvatarPermissionsRequestBatch_X {
			constexpr uintptr_t Requested = 0x0060;
			constexpr uintptr_t Allowed = 0x0070;
			constexpr uintptr_t Disallowed = 0x0080;
		}

		namespace RemoteAvatarPermissionsRequest_X {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace RemoteAvatarPermissions_X {
			constexpr uintptr_t OnlineGame = 0x0060;
			constexpr uintptr_t EpicConfig = 0x0068;
			constexpr uintptr_t UnsentRequests = 0x0070;
			constexpr uintptr_t AllRequests = 0x0080;
			constexpr uintptr_t PermissionCache = 0x0090;
		}

		namespace RenderProfiler_X {
			constexpr uintptr_t TimePerPrimitive = 0x0268;
			constexpr uintptr_t PrimitiveProfiles = 0x0270;
			constexpr uintptr_t CurrentIndex = 0x0280;
			constexpr uintptr_t bInclusive = 0x0284;
			constexpr uintptr_t PrimitiveTime = 0x0288;
		}

		namespace ReservationBeacon_X {
			constexpr uintptr_t MessageHandlers = 0x0070;
			constexpr uintptr_t PsyNetBeacon = 0x0080;
		}

		namespace ReservationsMaxPlayersMessage_X {
			constexpr uintptr_t MaxPlayerCount = 0x0060;
		}

		namespace ReservationsPasswordMessage_X {
			constexpr uintptr_t Reason = 0x0060;
		}

		namespace ReservationsReadyMessage_X {
			constexpr uintptr_t ServerAddress = 0x0060;
			constexpr uintptr_t PingAddress = 0x0070;
			constexpr uintptr_t ProductIDs = 0x0080;
			constexpr uintptr_t Keys = 0x0090;
		}

		namespace RetryDelay_X {
			constexpr uintptr_t Id = 0x0060;
			constexpr uintptr_t DelaySeconds = 0x0068;
		}

		namespace RetryDelayer_X {
			constexpr uintptr_t RetryDelays = 0x0070;
			constexpr uintptr_t ReattemptsAtMaxBackoff = 0x0080;
			constexpr uintptr_t bRepeatUntilSuccess = 0x0084;
			constexpr uintptr_t FailedAttempts = 0x0088;
		}

		namespace RetryPolicy_X {
			constexpr uintptr_t Errors = 0x0060;
			constexpr uintptr_t RetryDelay = 0x0070;
			constexpr uintptr_t Services = 0x0078;
		}

		namespace RuntimeParameterBase_X {
			constexpr uintptr_t ParameterName = 0x0060;
		}

		namespace SaveLock_X {
			constexpr uintptr_t GFxEngine = 0x0060;
		}

		namespace SeqAct_SpawnArchetype_X {
			constexpr uintptr_t ActorArchetype = 0x0160;
			constexpr uintptr_t Velocity = 0x0168;
			constexpr uintptr_t Speed = 0x0174;
			constexpr uintptr_t SpawnOwners = 0x0178;
			constexpr uintptr_t SpawnPoints = 0x0188;
			constexpr uintptr_t Spawned = 0x0198;
		}

		namespace SeqAct_TriggerFXActor_X {
			constexpr uintptr_t Event = 0x0160;
			constexpr uintptr_t AttachTo = 0x0168;
		}

		namespace SeqEvent_Spawned_X {
			constexpr uintptr_t Spawned = 0x0180;
		}

		namespace ServerConfig_X {
			constexpr uintptr_t HeartbeatSeconds = 0x0078;
			constexpr uintptr_t HeartbeatRetrySeconds = 0x007C;
			constexpr uintptr_t Bitfields_0x0080 = 0x0080;  // Multiple: bUploadLogFiles, bUploadReplays, bFlatbufferRecordInput, bPrivateMatchCreatorAdmin
			constexpr uintptr_t MaxUploadLogFileSize = 0x0084;
			constexpr uintptr_t NetServerMaxTickRate = 0x0088;
			constexpr uintptr_t IdleNetServerMaxTickRate = 0x008C;
			constexpr uintptr_t FlatbufferChance = 0x0090;
			constexpr uintptr_t FlatbufferMaxRecordSizeMB = 0x0094;
			constexpr uintptr_t FlatbufferPacketSendRate = 0x0098;
			constexpr uintptr_t MinSecondsForUnstableConnection = 0x009C;
			constexpr uintptr_t MinSecondsUntilConnectionCheck = 0x00A0;
		}

		namespace ServerExploitManager_X {
			constexpr uintptr_t DedicatedServer = 0x0060;
			constexpr uintptr_t SubmittedReports = 0x0068;
		}

		namespace ServerPlayerTracker_X {
			constexpr uintptr_t Players = 0x0070;
			constexpr uintptr_t Messages = 0x0080;
			constexpr uintptr_t Reservations = 0x0090;
		}

		namespace ServerToServerMessage_X {
			constexpr uintptr_t ServerId = 0x0060;
		}

		namespace SetPlayerStorageResult_X {
			constexpr uintptr_t Items = 0x0060;
		}

		namespace ShakeComponent_X {
			constexpr uintptr_t InnerRadius = 0x00A8;
			constexpr uintptr_t OuterRadius = 0x00AC;
			constexpr uintptr_t Falloff = 0x00B0;
			constexpr uintptr_t Bitfields_0x00B4 = 0x00B4;  // Multiple: bAutoPlay, bAutoDetach, bOnlyAffectPlayersWithPawns, bAttenuate, bPlaying, bStopping
			constexpr uintptr_t Receiver = 0x00B8;
			constexpr uintptr_t RadiusScale = 0x00BC;
			constexpr uintptr_t BlendInTime = 0x00C0;
			constexpr uintptr_t BlendOutTime = 0x00C4;
			constexpr uintptr_t ShakeParams = 0x00C8;
			constexpr uintptr_t AmplitudeScale = 0x00D0;
			constexpr uintptr_t FrequencyScale = 0x00F8;
			constexpr uintptr_t DurationScale = 0x0120;
			constexpr uintptr_t CurrentAmplitudeScale = 0x0148;
			constexpr uintptr_t CurrentFrequencyScale = 0x014C;
			constexpr uintptr_t ForceFeedbackWaveform = 0x0150;
			constexpr uintptr_t ForceFeedbackScale = 0x0158;
			constexpr uintptr_t ForceFeedbackBalance = 0x015C;
			constexpr uintptr_t InstanceParameters = 0x0160;
			constexpr uintptr_t PlayTime = 0x0170;
			constexpr uintptr_t StopTime = 0x0174;
			constexpr uintptr_t ShakeLocTimeOffset = 0x0178;
			constexpr uintptr_t ShakeRotTimeOffset = 0x0184;
			constexpr uintptr_t ShakeFOVTimeOffset = 0x0190;
			constexpr uintptr_t CameraShakeDuration = 0x0194;
			constexpr uintptr_t ForceFeedbackDuration = 0x0198;
			constexpr uintptr_t ForceFeedbackSamplesTime = 0x019C;
			constexpr uintptr_t PrevOwner = 0x01A0;
			constexpr uintptr_t Receivers = 0x01A8;
		}

		namespace SkelControlBlendTargetComponent_X {
			constexpr uintptr_t SkelControlName = 0x00A8;
		}

		namespace SmoothDynamicValue_X {
			constexpr uintptr_t LerpUpSpeed = 0x0088;
			constexpr uintptr_t LerpDownSpeed = 0x008C;
			constexpr uintptr_t SmoothedCachedValue = 0x0090;
		}

		namespace SphereCollisionShape_X {
			constexpr uintptr_t StartRadius = 0x0088;
			constexpr uintptr_t EndRadius = 0x008C;
		}

		namespace StateObject_X {
			constexpr uintptr_t bDebug = 0x0060;
		}

		namespace StaticDataError_X {
			constexpr uintptr_t Error = 0x0060;
		}

		namespace StatusObserver_X {
			constexpr uintptr_t TriggerTypes = 0x0060;
			constexpr uintptr_t AcceptedTypes = 0x0070;
			constexpr uintptr_t bInitComplete = 0x0080;
		}

		namespace StatusTrigger_X {
			constexpr uintptr_t bTriggered = 0x0060;
		}

		namespace SuperRegion_X {
			constexpr uintptr_t Id = 0x0060;
			constexpr uintptr_t Label = 0x0070;
		}

		namespace SyncedSkillData_X {
			constexpr uintptr_t OnlineGameSkill = 0x0060;
		}

		namespace TAsyncResult__ClubDetails_X {
			constexpr uintptr_t Result = 0x00D0;
		}

		namespace TAsyncResult__PsyNetClientService_X {
			constexpr uintptr_t Result = 0x00D0;
		}

		namespace TAsyncResult__PsyNetMessage_X {
			constexpr uintptr_t Result = 0x00D0;
		}

		namespace TAsyncResult__Texture2DDynamic {
			constexpr uintptr_t Result = 0x00D0;
		}

		namespace TAsyncResult__array_ClubInvite_X {
			constexpr uintptr_t Result = 0x00D0;
		}

		namespace TAsyncResult__array_LanServerRecord_X {
			constexpr uintptr_t Result = 0x00D0;
		}

		namespace TcpConnection {
			constexpr uintptr_t VfTable_FTickableObject = 0x0060;
			constexpr uintptr_t VfTable_IIReservationConnection_X = 0x0068;
			constexpr uintptr_t InitialConnectionTimeout = 0x0070;
			constexpr uintptr_t ConnectionTimeout = 0x0074;
			constexpr uintptr_t Socket = 0x0078;
			constexpr uintptr_t ConnectionState = 0x0080;
			constexpr uintptr_t WebSocketState = 0x0081;
			constexpr uintptr_t LastReceiveTime = 0x0084;
			constexpr uintptr_t InBytes = 0x0088;
			constexpr uintptr_t OutBytes = 0x0098;
			constexpr uintptr_t OutMessageLengths = 0x00A8;
			constexpr uintptr_t QueuedWebSocketBytes = 0x00B8;
			constexpr uintptr_t QueuedWebSocketMessageLengths = 0x00C8;
			constexpr uintptr_t InBytesDecoded = 0x00D8;
			constexpr uintptr_t BunchBytes = 0x00E8;
		}

		namespace TickActorComponent_X {
			constexpr uintptr_t Timers = 0x00A0;
			constexpr uintptr_t bTick = 0x00B0;
		}

		namespace TickComponent_X {
			constexpr uintptr_t VfTable_FTickableObject = 0x0080;
			constexpr uintptr_t Bitfields_0x0088 = 0x0088;  // Multiple: bTickWhenGamePaused, bTick
		}

		namespace TickableStateObject_X {
			constexpr uintptr_t VfTable_FTickableObject = 0x0068;
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bTickWhenGamePaused, bAutoTick
			constexpr uintptr_t Timers = 0x0078;
			constexpr uintptr_t LatentFloat = 0x0088;
		}

		namespace TimeWindowOptional_X {
			constexpr uintptr_t StartTime = 0x0060;
			constexpr uintptr_t EndTime = 0x0068;
			constexpr uintptr_t Time_Object = 0x0070;
			constexpr uintptr_t Time_Interface = 0x0078;
		}

		namespace TimersComponent_X {
			constexpr uintptr_t Timers = 0x0070;
		}

		namespace Timers_X {
			constexpr uintptr_t TickComponent = 0x0060;
		}

		namespace TitleConfig_X {
			constexpr uintptr_t Categories = 0x0078;
			constexpr uintptr_t Titles = 0x0088;
			constexpr uintptr_t ClubTitles = 0x0098;
			constexpr uintptr_t DefaultColorHexCode = 0x00A8;
		}

		namespace TriggerInfo {
			constexpr uintptr_t AcceptedType = 0x0060;
			constexpr uintptr_t Triggers = 0x0068;
		}

		namespace UdpLanBrowser_X {
			constexpr uintptr_t SearchTimeout = 0x0060;
			constexpr uintptr_t LanBeacon = 0x0068;
			constexpr uintptr_t SearchTask = 0x0070;
			constexpr uintptr_t SearchResults = 0x0078;
			constexpr uintptr_t LocalServer = 0x0088;
		}

		namespace UdpLanServer_X {
			constexpr uintptr_t Beacon = 0x0060;
			constexpr uintptr_t MetaData = 0x0068;
		}

		namespace UdpPingBeaconBase_X {
			constexpr uintptr_t Beacon = 0x0070;
			constexpr uintptr_t Thread = 0x0078;
			constexpr uintptr_t Runnable = 0x0080;
			constexpr uintptr_t SocketErrorLogDelaySeconds = 0x0088;
			constexpr uintptr_t bThreaded = 0x008C;
			constexpr uintptr_t Config = 0x0090;
		}

		namespace UrlConfig_X {
			constexpr uintptr_t CDN = 0x0060;
			constexpr uintptr_t ESportsURL = 0x0070;
			constexpr uintptr_t CrossPlatformSupportURL = 0x0080;
			constexpr uintptr_t LegalTextWebFolder = 0x0090;
		}

		namespace VanityConfig_X {
			constexpr uintptr_t AvatarRequestDelaySeconds = 0x0078;
			constexpr uintptr_t AvatarRequestMaxBatchSize = 0x007C;
		}

		namespace WebCache_X {
			constexpr uintptr_t Requests = 0x0060;
		}

		namespace WebConfig_X {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bCacheWebImages, bZipPsyNetStaticData
			constexpr uintptr_t PsyNetStaticDataCacheMinutes = 0x007C;
		}

		namespace WebImageCache_X {
			constexpr uintptr_t Decoder = 0x0060;
			constexpr uintptr_t Downloads = 0x0068;
		}

		namespace WebImageDownload_X {
			constexpr uintptr_t URL = 0x0060;
			constexpr uintptr_t bSRGB = 0x0070;
			constexpr uintptr_t Texture = 0x0078;
			constexpr uintptr_t AsyncResult = 0x0080;
		}

		namespace WebRequest_X {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: bZipRequest, bZipResponse, bLogRequestContent, bLogResponseContent, bLogSendRecv, bConnectionReset, bCancelled
			constexpr uintptr_t RequestState = 0x0064;
			constexpr uintptr_t URL = 0x0068;
			constexpr uintptr_t HTTPRequest = 0x0078;
			constexpr uintptr_t HttpResponse = 0x0080;
			constexpr uintptr_t Content = 0x0088;
			constexpr uintptr_t StringContent = 0x0098;
			constexpr uintptr_t ResponseData = 0x00A8;
			constexpr uintptr_t Error = 0x00B8;
		}

		namespace WebSocketConnection_X {
			constexpr uintptr_t PingInterval = 0x0140;
			constexpr uintptr_t ClosedReason = 0x0148;
			constexpr uintptr_t ClosedCode = 0x0158;
		}

		namespace WordFilterConfig_X {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bSanitizeEntirePhrase, PsyNetFilterEnabled
			constexpr uintptr_t NameHistoryCacheLength = 0x007C;
			constexpr uintptr_t IgnoreFilterList = 0x0080;
			constexpr uintptr_t PlatformFilterList = 0x0090;
			constexpr uintptr_t PsyNetWordFilterBatchDelay = 0x00A0;
			constexpr uintptr_t PsyNetWordFilterBatchMaxSize = 0x00A4;
		}

		namespace __AdHocBrowser_X__CreateErrorDelegate_0x1 {
			constexpr uintptr_t Task = 0x0060;
		}

		namespace __AdHocBrowser_X__CreateServer_0x1 {
			constexpr uintptr_t MetaData = 0x0060;
			constexpr uintptr_t Task = 0x0070;
		}

		namespace __AdHocBrowser_X__JoinServer_0x1 {
			constexpr uintptr_t Task = 0x0060;
			constexpr uintptr_t ServerId = 0x0068;
			constexpr uintptr_t Options = 0x0078;
		}

		namespace __AdHocInterface_X__DisableAdHoc_0x1 {
			constexpr uintptr_t Task = 0x0060;
		}

		namespace __AdHocInterface_X__EnableAdHoc_0x1 {
			constexpr uintptr_t Task = 0x0060;
		}

		namespace __AvatarRequester_X__FindRequestFromArray_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t Size = 0x00A8;
		}

		namespace __AvatarRequester_X__GetPlayerAvatar_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t Size = 0x00A8;
		}

		namespace __AvatarRequester_X__GetPlayerAvatars_0x1 {
			constexpr uintptr_t Size = 0x0078;
		}

		namespace __AvatarRequester_X__RemoveRequestFromArray_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t Size = 0x00A8;
		}

		namespace __AvatarRequester_X__TimerReadAvatars_0x1 {
			constexpr uintptr_t BatchAvatarSize = 0x0060;
		}

		namespace __BlockStatusReporter_X__OnBlockListDownloadComplete_0x1 {
			constexpr uintptr_t BlockedPlayersArray = 0x0060;
		}

		namespace __BlockStatusReporter_X__TriggerPlayerCallback_0x1 {
			constexpr uintptr_t EpicId = 0x0060;
		}

		namespace __CheatManager_X__RandomSleep_0x1 {
			constexpr uintptr_t MinDelay = 0x0060;
			constexpr uintptr_t MaxDelay = 0x0064;
			constexpr uintptr_t MinSleep = 0x0068;
			constexpr uintptr_t MaxSleep = 0x006C;
		}

		namespace __ClubUtil_X__IsClubTeam_0x1 {
			constexpr uintptr_t TeamClubs = 0x0060;
		}

		namespace __CrossplayConfig_X__GetDisabledCrossplayGroup_0x1 {
			constexpr uintptr_t PlayerPlatform = 0x0060;
		}

		namespace __EOSHelpers_X__SendHTTPRequestEASAuth_0x1 {
			constexpr uintptr_t URL = 0x0060;
			constexpr uintptr_t Verb = 0x0088;
			constexpr uintptr_t bAddContentTypeHeader = 0x0098;
			constexpr uintptr_t ResponseClass = 0x00A0;
			constexpr uintptr_t EOS = 0x00C0;
			constexpr uintptr_t LocalPlayerNum = 0x00C8;
			constexpr uintptr_t BodyJson = 0x00D0;
			constexpr uintptr_t Continuation = 0x00E0;
		}

		namespace __EOSHelpers_X__SendHTTPRequestSelectAuth_0x1 {
			constexpr uintptr_t ResponseClass = 0x0090;
		}

		namespace __EOSHelpers_X__SendHTTPRequest_0x1 {
			constexpr uintptr_t URL = 0x0060;
			constexpr uintptr_t Verb = 0x0088;
			constexpr uintptr_t bAddContentTypeHeader = 0x0098;
			constexpr uintptr_t ResponseClass = 0x00A0;
			constexpr uintptr_t EOS = 0x00C0;
			constexpr uintptr_t LocalPlayerNum = 0x00C8;
			constexpr uintptr_t BodyJson = 0x00D0;
		}

		namespace __EpicFriendsPlugin_X__AcceptFriendRequest_0x1 {
			constexpr uintptr_t FriendId = 0x0060;
		}

		namespace __EpicFriendsPlugin_X__AddFriendWithCustomCallback_0x1 {
			constexpr uintptr_t FriendId = 0x0078;
		}

		namespace __EpicFriendsPlugin_X__RejectFriendRequest_0x1 {
			constexpr uintptr_t FriendId = 0x0060;
		}

		namespace __EpicFriendsPlugin_X__RemoveFriend_0x1 {
			constexpr uintptr_t FriendId = 0x0060;
		}

		namespace __EpicLogin_X__HandleLoginChanged_0x1 {
			constexpr uintptr_t InLocalPlayerNum = 0x0060;
		}

		namespace __EpicLogin_X__TriggerAuthTicketDelegate_0x1 {
			constexpr uintptr_t NetId = 0x0078;
		}

		namespace __LocalClubData_X__GetClubByID_0x1 {
			constexpr uintptr_t Id = 0x0060;
		}

		namespace __LocalClubData_X__GetClubForPlayer_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __MatchRecorder_X__GetPlayerData_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __OnlineClubCache_X__GetClubDetails_0x1 {
			constexpr uintptr_t ClubID = 0x0060;
		}

		namespace __OnlineClubCache_X__GetPlayerClubDetails_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __OnlineClubManager_X__AcceptClubInvite_0x1 {
			constexpr uintptr_t ClubID = 0x0060;
			constexpr uintptr_t SenderPlayerID = 0x0068;
		}

		namespace __OnlineClubManager_X__InviteToClub_0x1 {
			constexpr uintptr_t ClubID = 0x0060;
			constexpr uintptr_t InvitedPlayerID = 0x0068;
		}

		namespace __OnlineClubManager_X__LeaveClub_0x1 {
			constexpr uintptr_t ClubID = 0x0060;
		}

		namespace __OnlineClubManager_X__RejectClubInvite_0x1 {
			constexpr uintptr_t ClubID = 0x0060;
			constexpr uintptr_t SenderPlayerID = 0x0068;
		}

		namespace __OnlineClubManager_X__RemoveFromClub_0x1 {
			constexpr uintptr_t KickedPlayerID = 0x0060;
		}

		namespace __OnlineClubManager_X__SetNewRole_0x1 {
			constexpr uintptr_t MemberPlayerID = 0x0060;
			constexpr uintptr_t OriginalRole = 0x00A8;
			constexpr uintptr_t NewRole = 0x00A9;
		}

		namespace __OnlineClubProvider_X__HandleClubSynced_0x1 {
			constexpr uintptr_t RPC = 0x0060;
		}

		namespace __OnlineClubProvider_X__SyncClubDetailsArray_0x1 {
			constexpr uintptr_t RPC = 0x0060;
		}

		namespace __OnlineClubProvider_X__SyncClubDetails_0x1 {
			constexpr uintptr_t ClubID = 0x0060;
			constexpr uintptr_t RPC = 0x0068;
		}

		namespace __OnlineClubProvider_X__SyncPlayerClubDetails_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t RPC = 0x00A8;
		}

		namespace __OnlineGameMatchmaking_X__AddRecommendedServers_0x1 {
			constexpr uintptr_t AccPingThreshold = 0x0060;
		}

		namespace __OnlineGameMatchmaking_X__GetSubRegionPings_0x1 {
			constexpr uintptr_t SuperRegionID = 0x0060;
		}

		namespace __OnlineGameMatchmaking_X__OnReceiveGameServer_0x1 {
			constexpr uintptr_t Reservation = 0x0060;
		}

		namespace __OnlineGameMatchmaking_X__RecordStart_0x2 {
			constexpr uintptr_t RegionIds = 0x0060;
		}

		namespace __OnlineGameParty_X__BroadcastAllLocalPlayers_0x2 {
			constexpr uintptr_t Primary = 0x0060;
		}

		namespace __OnlineGameParty_X__CreatePartyInternal_0x1 {
			constexpr uintptr_t LobbyInterface_Object = 0x0060;
			constexpr uintptr_t LobbyInterface_Interface = 0x0068;
			constexpr uintptr_t LocalPlayerNum = 0x0070;
		}

		namespace __OnlineGameParty_X__GetPlayersWithPrimaryMemberID_0x1 {
			constexpr uintptr_t InPrimaryID = 0x0060;
		}

		namespace __OnlineGameParty_X__HandleClientReservationMessage_0x1 {
			constexpr uintptr_t Message = 0x0060;
			constexpr uintptr_t Settings = 0x0068;
		}

		namespace __OnlineGameParty_X__HandleConfirmJoinGame_0x1 {
			constexpr uintptr_t InSettings = 0x0060;
		}

		namespace __OnlineGameParty_X__HandleConfirmJoinGame_ConnectionValid_0x1 {
			constexpr uintptr_t Settings = 0x0060;
		}

		namespace __OnlineGameParty_X__HasMultiplePlatforms_0x1 {
			constexpr uintptr_t PartyLeaderCrossPlayGroup = 0x0060;
		}

		namespace __OnlineGameParty_X__JoinParty_0x1 {
			constexpr uintptr_t LocalPlayerNum = 0x0060;
			constexpr uintptr_t InPartyId = 0x0068;
		}

		namespace __OnlineGameParty_X__UpdatePartyInfo_0x1 {
			constexpr uintptr_t Lobby = 0x0060;
		}

		namespace __OnlineGameReservations_X__GetMigrationReservationData_0x1 {
			constexpr uintptr_t CurrentPlayers = 0x0060;
			constexpr uintptr_t GEngine = 0x0070;
		}

		namespace __OnlineGameReservations_X__RecordReservation_0x1 {
			constexpr uintptr_t Message = 0x0060;
		}

		namespace __OnlineGameReservations_X__SetPlayersWithMigrationData_0x1 {
			constexpr uintptr_t CurrentPlayers = 0x0060;
			constexpr uintptr_t GEngine = 0x0070;
		}

		namespace __OnlineGameSkill_X__ClearPartyMembersSkill_0x1 {
			constexpr uintptr_t PrimaryPlayerId = 0x0060;
			constexpr uintptr_t PartyObject = 0x00A8;
		}

		namespace __OnlineGameSkill_X__ClearSkill_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __OnlineGameSkill_X__HandleSyncedPlayerSkill_0x1 {
			constexpr uintptr_t PlayerSkillRatings = 0x0060;
			constexpr uintptr_t PlayerID = 0x0070;
		}

		namespace __OnlineGameSkill_X__OnSkillSynced_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __OnlineGameWordFilter_X__InternalSanitize_0x1 {
			constexpr uintptr_t Id = 0x0060;
		}

		namespace __OnlineGame_X__CheckPsyNetConnection_0x1 {
			constexpr uintptr_t Task = 0x0060;
		}

		namespace __OnlineGame_X__GetOnlinePlayerFromEpicId_0x1 {
			constexpr uintptr_t EpicAccountId = 0x0060;
		}

		namespace __OnlineLegalTextEOS_X__HandleEOSInitialized_0x1 {
			constexpr uintptr_t EOS = 0x0060;
		}

		namespace __OnlinePlayerFriends_X__AcceptEpicFriendInvite_0x1 {
			constexpr uintptr_t FriendId = 0x0060;
			constexpr uintptr_t InPin = 0x00A8;
		}

		namespace __OnlinePlayerFriends_X__BlockPlayer_0x1 {
			constexpr uintptr_t BlockedID = 0x0060;
			constexpr uintptr_t EpicAccountId = 0x00A8;
		}

		namespace __OnlinePlayerFriends_X__DeclineEpicFriendInvite_0x1 {
			constexpr uintptr_t FriendId = 0x0060;
		}

		namespace __OnlinePlayerFriends_X__InviteEpicFriend_0x1 {
			constexpr uintptr_t FriendPlayerId = 0x0060;
			constexpr uintptr_t InPin = 0x00A8;
		}

		namespace __OnlinePlayerFriends_X__RemoveEpicFriend_0x1 {
			constexpr uintptr_t FriendId = 0x0060;
		}

		namespace __OnlinePlayerFriends_X__TriggerSocialCallback_0x1 {
			constexpr uintptr_t InPlayerID = 0x0060;
		}

		namespace __OnlinePlayerFriends_X__UnblockPlayer_0x1 {
			constexpr uintptr_t UnblockID = 0x0060;
			constexpr uintptr_t EpicAccountId = 0x00A8;
		}

		namespace __OnlinePlayerStorageQueue_X__GetStorageMaxSizeBytes_0x1 {
			constexpr uintptr_t Category = 0x0060;
		}

		namespace __OnlinePlayerStorageQueue_X__HandleStorageSuccess_0x2 {
			constexpr uintptr_t OutOfSync = 0x0060;
			constexpr uintptr_t RPC = 0x0070;
		}

		namespace __OnlinePlayerStorageQueue_X__MapResultItem_0x1 {
			constexpr uintptr_t Item = 0x0060;
		}

		namespace __OnlinePlayerStorageSync_X__SyncObjects_0x1 {
			constexpr uintptr_t ResponseTask = 0x0060;
		}

		namespace __PRI_X__RegisterPlayerWithSession_0x1 {
			constexpr uintptr_t OnlineSub = 0x0060;
		}

		namespace __Parties_X__HandleIncomingPartyNotification_0x1 {
			constexpr uintptr_t Notification = 0x0060;
			constexpr uintptr_t PrimaryPlayer = 0x0068;
		}

		namespace __PartyMessageQueue_X__SendMessage_0x1 {
			constexpr uintptr_t Task = 0x0060;
		}

		namespace __PartySequence_CreateParty_X__CreateParty_0x1 {
			constexpr uintptr_t InitialSettings = 0x0060;
			constexpr uintptr_t LocalPlayerNum = 0x0070;
			constexpr uintptr_t MaxPlayers = 0x0074;
			constexpr uintptr_t Type = 0x0078;
		}

		namespace __PartySequence_InvitedToPlatformParty_X__HandlePlayerInvited_0x1 {
			constexpr uintptr_t InLobbyId = 0x0060;
			constexpr uintptr_t FriendId = 0x0070;
		}

		namespace __PartySequence_InvitedToPsyNetParty_X__HandlePlayerInvitedPrompt_0x1 {
			constexpr uintptr_t InLobbyId = 0x0060;
			constexpr uintptr_t InviterId = 0x0070;
		}

		namespace __PartySequence_InvitedToPsyNetParty_X__HandlePlayerInvitedSilent_0x1 {
			constexpr uintptr_t InLobbyId = 0x0060;
			constexpr uintptr_t InviterId = 0x0070;
		}

		namespace __PartySequence_JoinParty_X__HandleGetPlatformPartyMessage_0x1 {
			constexpr uintptr_t Message = 0x0060;
		}

		namespace __PsyNetBeacon_X__SendMessageToClients_0x1 {
			constexpr uintptr_t Connection = 0x0060;
		}

		namespace __PsyNetBeacon_X__SendMessageToServer_0x1 {
			constexpr uintptr_t RPC = 0x0060;
			constexpr uintptr_t Connection = 0x0068;
		}

		namespace __PsyNetConnection_X__ProcessServiceCall_0x1 {
			constexpr uintptr_t Response = 0x0060;
		}

		namespace __PsyNetMessengerHttp_X__SendMessage_0x1 {
			constexpr uintptr_t PsyRequestID = 0x0060;
			constexpr uintptr_t Task = 0x0070;
		}

		namespace __PsyNetRequestQue_X__SendRequest_0x1 {
			constexpr uintptr_t RequestID = 0x0060;
		}

		namespace __PsyNetServiceProvider_X__CreateChannel_0x1 {
			constexpr uintptr_t ChannelName = 0x0060;
		}

		namespace __PsyNetServiceProvider_X__ExecuteRequest_0x1 {
			constexpr uintptr_t Response = 0x0060;
		}

		namespace __PsyNetServiceProvider_X__ExecuteServiceMessage_0x1 {
			constexpr uintptr_t ServiceName = 0x0060;
			constexpr uintptr_t Service = 0x0070;
			constexpr uintptr_t Task = 0x0078;
		}

		namespace __PsyNetWordFilter_X__WordFilterSanitizeString_0x1 {
			constexpr uintptr_t Usage = 0x0060;
		}

		namespace __RPCQueue_X__CreateBatchSingleRPC_0x1 {
			constexpr uintptr_t Batch = 0x0060;
		}

		namespace __RPCQueue_X__CreateBatch_0x2 {
			constexpr uintptr_t Batch = 0x0060;
		}

		namespace __RegionConfig_X__GetSubRegions_0x1 {
			constexpr uintptr_t SuperRegionID = 0x0060;
		}

		namespace __RemoteAvatarPermissions_X__GetPermissions_0x1 {
			constexpr uintptr_t Batch = 0x0060;
		}

		namespace __RemoteAvatarPermissions_X__SetAvatarPermission_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __ServerPlayerTracker_X__AddPlayer_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __StatusObserver_X__FindByAcceptedType_0x1 {
			constexpr uintptr_t InType = 0x0060;
		}

		namespace __StatusObserver_X__ObservesTriggerType_0x1 {
			constexpr uintptr_t InTrigger = 0x0060;
		}

		namespace __TAsyncResult__ClubDetails_X__Copy_0x1 {
			constexpr uintptr_t Instance = 0x0060;
		}

		namespace __TAsyncResult__PsyNetClientService_X__Copy_0x1 {
			constexpr uintptr_t Instance = 0x0060;
		}

		namespace __TAsyncResult__PsyNetMessage_X__Copy_0x1 {
			constexpr uintptr_t Instance = 0x0060;
		}

		namespace __TAsyncResult__Texture2DDynamic__Copy_0x1 {
			constexpr uintptr_t Instance = 0x0060;
		}

		namespace __TAsyncResult__array_ClubInvite_X__Copy_0x1 {
			constexpr uintptr_t Instance = 0x0060;
		}

		namespace __TAsyncResult__array_LanServerRecord_X__Copy_0x1 {
			constexpr uintptr_t Instance = 0x0060;
		}

		namespace __TitleConfig_X__GetClubTitleData_0x1 {
			constexpr uintptr_t TitleId = 0x0060;
		}

		namespace __TitleConfig_X__GetTitleData_0x1 {
			constexpr uintptr_t TitleId = 0x0060;
		}

		namespace __WebCache_X__DownloadData_0x1 {
			constexpr uintptr_t WebRequest = 0x0060;
		}

		namespace __WebImageCache_X__HandleImageData_0x1 {
			constexpr uintptr_t Download = 0x0060;
		}

		namespace __WebImageCache_X__StartSync_0x1 {
			constexpr uintptr_t Download = 0x0060;
		}

		namespace __WebImageCache_X__SyncUncachedImage_0x1 {
			constexpr uintptr_t Task = 0x0060;
		}

		namespace ____OnlineGameParty_X__UpdatePartyInfo_0x1____OnlineGameParty_X__UpdatePartyInfo_0x1_0x1 {
			constexpr uintptr_t PM = 0x0060;
		}

		namespace ____OnlinePlayerStorageQueue_X__HandleStorageSuccess_0x2____OnlinePlayerStorageQueue_X__HandleStorageSuccess_0x4_0x1 {
			constexpr uintptr_t R = 0x0060;
		}

	}

	// ===== TAGAME MODULE =====
	namespace TAGame {

		namespace AIController_Breakout_TA {
			constexpr uintptr_t ClosestEnemyGoalLocation = 0x07C0;
			constexpr uintptr_t DefaultSoccarSize = 0x07CC;
		}

		namespace AIController_Soccar_TA {
			constexpr uintptr_t BallProxyType = 0x0708;
			constexpr uintptr_t BallLandingProxyType = 0x0710;
			constexpr uintptr_t BallTeamGoalLineProxyType = 0x0718;
			constexpr uintptr_t BallEnemyGoalLineProxyType = 0x0720;
			constexpr uintptr_t BallProjectedProxyType = 0x0728;
			constexpr uintptr_t TeamGoalProxyType = 0x0730;
			constexpr uintptr_t EnemyGoalProxyType = 0x0738;
			constexpr uintptr_t MidFieldProxyType = 0x0740;
			constexpr uintptr_t BallTarget = 0x0748;
			constexpr uintptr_t TeamGoalTarget = 0x0750;
			constexpr uintptr_t EnemyGoalTarget = 0x0758;
			constexpr uintptr_t SoccarGame = 0x0760;
			constexpr uintptr_t Ball = 0x0768;
			constexpr uintptr_t TeamGoalInfo = 0x0770;
			constexpr uintptr_t EnemyGoalInfo = 0x0788;
			constexpr uintptr_t LastBallHitTime = 0x07A0;
		}

		namespace AIController_TA {
			constexpr uintptr_t Car = 0x04A0;
			constexpr uintptr_t Vehicle = 0x04A8;
			constexpr uintptr_t BT = 0x04B0;
			constexpr uintptr_t SelfProxyType = 0x04B8;
			constexpr uintptr_t NoneProxyType = 0x04C0;
			constexpr uintptr_t DebugProxyType = 0x04C8;
			constexpr uintptr_t TeamCarsProxyType = 0x04D0;
			constexpr uintptr_t EnemyCarsProxyType = 0x04D8;
			constexpr uintptr_t PlayerControlledCarsProxyType = 0x04E0;
			constexpr uintptr_t OtherCarsProxyType = 0x04E8;
			constexpr uintptr_t BoostPillsProxyType = 0x04F0;
			constexpr uintptr_t SelectedProxyType = 0x04F8;
			constexpr uintptr_t SelfTarget = 0x0500;
			constexpr uintptr_t NoneTarget = 0x0508;
			constexpr uintptr_t IteratorTarget = 0x0510;
			constexpr uintptr_t TeamCarsTarget = 0x0518;
			constexpr uintptr_t SelectedTarget = 0x0520;
			constexpr uintptr_t ContextTarget = 0x0528;
			constexpr uintptr_t DebugBTNode = 0x0530;
			constexpr uintptr_t Locks = 0x0538;
			constexpr uintptr_t SkillSteerError = 0x0540;
			constexpr uintptr_t SkillSteerSpeed = 0x054C;
			constexpr uintptr_t SkillThrottleSpeed = 0x0558;
			constexpr uintptr_t GameEvent = 0x0568;
			constexpr uintptr_t AIManager = 0x0570;
			constexpr uintptr_t Input = 0x0578;
			constexpr uintptr_t ForwardDir = 0x0598;
			constexpr uintptr_t ForwardRotation = 0x05A4;
			constexpr uintptr_t GroundNormal = 0x05B0;
			constexpr uintptr_t CachedProxyDatas = 0x05C0;
			constexpr uintptr_t CachedTargetDatas = 0x05D0;
			constexpr uintptr_t TargetFilterMap = 0x05E0;
			constexpr uintptr_t CachedTargetFilters = 0x0630;
			constexpr uintptr_t DebugDriveDestination = 0x0640;
			constexpr uintptr_t CachedObstacles = 0x0650;
			constexpr uintptr_t TeamCars = 0x0678;
			constexpr uintptr_t EnemyCars = 0x0688;
			constexpr uintptr_t PlayerControlledCars = 0x0698;
			constexpr uintptr_t OtherCars = 0x06A8;
			constexpr uintptr_t Bitfields_0x06B8 = 0x06B8;  // Multiple: bForceUpdateConditions, bCanUseBoost, bBeingReplaced
			constexpr uintptr_t GameShare = 0x06C0;
			constexpr uintptr_t SelectedActor = 0x06C8;
			constexpr uintptr_t FieldScalar = 0x06D0;
			constexpr uintptr_t ForcedTeam = 0x06D4;
		}

		namespace AIManager_TA {
			constexpr uintptr_t Bitfields_0x0268 = 0x0268;  // Multiple: bFlushAILogEachLine, bOutputLogToWindow, bPauseForDirtyTrees
			constexpr uintptr_t Locks = 0x0270;
			constexpr uintptr_t GameEvent = 0x0278;
			constexpr uintptr_t Bots = 0x0280;
			constexpr uintptr_t CachedNavMeshLocations = 0x0290;
			constexpr uintptr_t AILogFile = 0x02A0;
		}

		namespace AIProxy_TA {
			constexpr uintptr_t Actor = 0x0060;
			constexpr uintptr_t Location = 0x0068;
			constexpr uintptr_t Velocity = 0x0074;
			constexpr uintptr_t Rotation = 0x0080;
			constexpr uintptr_t Forward = 0x008C;
			constexpr uintptr_t Right = 0x0098;
			constexpr uintptr_t Up = 0x00A4;
			constexpr uintptr_t Speed = 0x00B0;
			constexpr uintptr_t Speed2D = 0x00B4;
			constexpr uintptr_t ForwardSpeed = 0x00B8;
		}

		namespace AccountSettingsComponent_TA {
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bCrossPlatformEnabled, bPlatformAllowsCrossPlatform, bPlatformAllowsInvites
			constexpr uintptr_t CrossPlatformChatState = 0x0074;
			constexpr uintptr_t NetworkSave = 0x0078;
			constexpr uintptr_t PlatformSettings = 0x0080;
		}

		namespace AchievementClassCollection_TA {
			constexpr uintptr_t Classes = 0x0060;
		}

		namespace AchievementManager_TA {
			constexpr uintptr_t PC = 0x0090;
			constexpr uintptr_t UnlockedAchievements = 0x0098;
			constexpr uintptr_t DLC1Cars = 0x00A8;
			constexpr uintptr_t DLC2Cars = 0x00B8;
			constexpr uintptr_t ClassicCars = 0x00C8;
			constexpr uintptr_t RequiredDontLookBackProducts = 0x00D8;
			constexpr uintptr_t RequiredAnInchAnd62MilesProducts = 0x00E8;
			constexpr uintptr_t SARPBCArenas = 0x00F8;
			constexpr uintptr_t RequiredLevelsToPlay = 0x0108;
			constexpr uintptr_t RequiredRocketLabsArenas = 0x0118;
			constexpr uintptr_t RocketLabsArenaNames = 0x0120;
			constexpr uintptr_t BraveTheElementsBaseLevels = 0x0130;
			constexpr uintptr_t RequiredRumbleActivation = 0x0140;
			constexpr uintptr_t MaxBoostTime = 0x0150;
			constexpr uintptr_t MaxTimeOnWall = 0x0154;
			constexpr uintptr_t MaxDriveDistanceKM = 0x0158;
			constexpr uintptr_t MaxHandbrakeRadius = 0x015C;
			constexpr uintptr_t MinHandbrakeDotAngleForComplete = 0x0160;
			constexpr uintptr_t DunksScored = 0x0164;
			constexpr uintptr_t RocketBoostFills = 0x0168;
			constexpr uintptr_t TotalDLC0BoostTime = 0x016C;
			constexpr uintptr_t GoalsScoredInCurrentGame = 0x0170;
			constexpr uintptr_t SavesInCurrentGame = 0x0174;
			constexpr uintptr_t AssistsInCurrentGame = 0x0178;
			constexpr uintptr_t DLC2PsychoMasterExplodeCount = 0x017C;
			constexpr uintptr_t TotalBreakoutGoals = 0x0180;
			constexpr uintptr_t MaxRocketBoostFills = 0x0184;
			constexpr uintptr_t TotalBreakoutPlatformsToDamage = 0x0188;
			constexpr uintptr_t TotalDLC0WheelDriveDistanceKM = 0x018C;
			constexpr uintptr_t Winner_GameEventsWon = 0x0190;
			constexpr uintptr_t SuperVictorious_GameEventsWon = 0x0194;
			constexpr uintptr_t PitchVeteran_GameEventsPlayed = 0x0198;
			constexpr uintptr_t PickMeUp_RandomItemDrops = 0x019C;
			constexpr uintptr_t DropsInTheBucket_RandomItemDrops = 0x01A0;
			constexpr uintptr_t RidersBlock_GoalSaves = 0x01A4;
			constexpr uintptr_t Savage_Goals = 0x01A8;
			constexpr uintptr_t Spectacular_Goals = 0x01AC;
			constexpr uintptr_t Ruthless_Goals = 0x01B0;
			constexpr uintptr_t RocketGenocider_Goals = 0x01B4;
			constexpr uintptr_t MadScientist_Maps = 0x01B8;
			constexpr uintptr_t ComingOnStrong_GoalsOrAssists = 0x01BC;
			constexpr uintptr_t PeoplePerson_CompletedMatches = 0x01C0;
			constexpr uintptr_t MetaAchievementPointMax = 0x01C4;
			constexpr uintptr_t BattleCarCollector_CarsCollected = 0x01C8;
			constexpr uintptr_t Traveler_Maps = 0x01CC;
			constexpr uintptr_t Bitfields_0x01D0 = 0x01D0;  // Multiple: bBoostWasFull, bPlayerInited, bHandbrakePressed, bCheckMinuteToWinIt, bDidInitialCheckForMinuteToWinIt, bCheckBuzzerBeater, bDidInitialCheckForBuzzerBeater, bQualifiesForDLC1Throwback, bSSFuryCarInLoadout
			constexpr uintptr_t HandbrakeStartDir = 0x01D4;
			constexpr uintptr_t HandbrakeStartLocation = 0x01E0;
			constexpr uintptr_t WastelandMapName = 0x01F0;
			constexpr uintptr_t AquaticMapName = 0x0200;
			constexpr uintptr_t UtopiaMapName = 0x0210;
			constexpr uintptr_t ArcMapName = 0x0220;
			constexpr uintptr_t TrainStationMapName = 0x0230;
			constexpr uintptr_t ProductNames_Body_MuscleCar = 0x0240;
			constexpr uintptr_t ProductNames_Body_SSFury = 0x0250;
			constexpr uintptr_t ProductName_Body_GearsCar = 0x0260;
			constexpr uintptr_t ProductName_Body_Import = 0x0268;
			constexpr uintptr_t ProductName_Body_Interceptor = 0x0270;
			constexpr uintptr_t ProductName_Body_Warthog = 0x0278;
			constexpr uintptr_t ProductName_Body_WastelandTruck = 0x0280;
			constexpr uintptr_t ProductName_Boost_Bubble = 0x0288;
			constexpr uintptr_t ProductName_Boost_MusicalNotes = 0x0290;
			constexpr uintptr_t ProductName_Hat_Halo = 0x0298;
			constexpr uintptr_t ProductName_Body_Octane = 0x02A0;
			constexpr uintptr_t ProductName_Body_Backfire = 0x02A8;
			constexpr uintptr_t ProductName_Body_Force = 0x02B0;
			constexpr uintptr_t ProductName_Body_Vanquish = 0x02B8;
			constexpr uintptr_t ProductNames_Body_Savage = 0x02C0;
			constexpr uintptr_t ProductNames_Body_Spectacular = 0x02D0;
			constexpr uintptr_t ProductNames_Body_Ruthless = 0x02E0;
			constexpr uintptr_t ProductName_Boost_Standard = 0x02F0;
			constexpr uintptr_t ProductName_Boost_Ion = 0x02F8;
			constexpr uintptr_t ProductName_Boost_Flamethrower = 0x0300;
			constexpr uintptr_t ProductName_Boost_Thermal = 0x0308;
			constexpr uintptr_t StatName_BoostTimeMinutes = 0x0310;
			constexpr uintptr_t StatName_Certifiable = 0x0318;
			constexpr uintptr_t StatName_DistanceDrivenKm = 0x0320;
			constexpr uintptr_t StatName_ItemCollected = 0x0328;
			constexpr uintptr_t StatName_LeftWingRightWing = 0x0330;
			constexpr uintptr_t StatName_MadScientist = 0x0338;
			constexpr uintptr_t StatName_MatchComplete = 0x0340;
			constexpr uintptr_t StatName_WallTimeMinutes = 0x0348;
			constexpr uintptr_t StatName_RocketGenocider = 0x0350;
			constexpr uintptr_t StatName_BraveTheElements = 0x0358;
			constexpr uintptr_t StatName_FullCourse = 0x0360;
			constexpr uintptr_t StatName_BuckminsterX10 = 0x0368;
			constexpr uintptr_t StatName_ComingOnStrong = 0x0370;
			constexpr uintptr_t StatName_PeoplePerson = 0x0378;
			constexpr uintptr_t HockeyEventType = 0x0380;
			constexpr uintptr_t BaseSaveData = 0x0388;
			constexpr uintptr_t SaveData = 0x0390;
			constexpr uintptr_t LastPRI = 0x0398;
			constexpr uintptr_t LastGame = 0x03A0;
			constexpr uintptr_t LastGameEvent = 0x03A8;
			constexpr uintptr_t LastCar = 0x03B0;
			constexpr uintptr_t PendingTradeGuid = 0x03B8;
			constexpr uintptr_t LoadoutSave = 0x03C8;
			constexpr uintptr_t PlayerBannerSave = 0x03D0;
			constexpr uintptr_t PlayerAvatarBorderSave = 0x03D8;
		}

		namespace AchievementSave_TA {
			constexpr uintptr_t BotTeamsPlayed = 0x00C8;
			constexpr uintptr_t TrainingModesPlayed = 0x00D8;
			constexpr uintptr_t LevelsPlayed = 0x00E8;
			constexpr uintptr_t LabsMapsPlayed = 0x00F8;
			constexpr uintptr_t CarsPlayed = 0x0108;
			constexpr uintptr_t RumbleItemsActivated = 0x0118;
			constexpr uintptr_t BraveTheElementsLevelsPlayed = 0x0128;
			constexpr uintptr_t TotalBoostTime = 0x0138;
			constexpr uintptr_t TotalTimeOnWall = 0x013C;
			constexpr uintptr_t TotalDriveDistanceKM = 0x0140;
			constexpr uintptr_t GoalShotsAny = 0x0144;
			constexpr uintptr_t GoalShots = 0x0148;
			constexpr uintptr_t GoalSaves = 0x014C;
			constexpr uintptr_t SavageGoals = 0x0150;
			constexpr uintptr_t GameEventsWon = 0x0154;
			constexpr uintptr_t GamesWonInARow = 0x0158;
			constexpr uintptr_t GameEventsPlayed = 0x015C;
			constexpr uintptr_t SpectacularGoals = 0x0160;
			constexpr uintptr_t TotalScoredGoals = 0x0164;
			constexpr uintptr_t TotalShotsBlocked = 0x0168;
			constexpr uintptr_t RandomItemsDropped = 0x016C;
			constexpr uintptr_t HighestMVPScore = 0x0170;
			constexpr uintptr_t ChampionshipsWon = 0x0174;
			constexpr uintptr_t RegularSeasonsCompleted = 0x0178;
			constexpr uintptr_t HighestRecordedCertifiedRank = 0x017C;
			constexpr uintptr_t BreakoutGoals = 0x0180;
			constexpr uintptr_t BreakoutPlatformsDamaged = 0x0184;
			constexpr uintptr_t bResetWinningIsWinningSeasonList = 0x0188;
			constexpr uintptr_t CustomizedSlotNames = 0x0190;
			constexpr uintptr_t CheckDistancesDrivenKM = 0x01A0;
			constexpr uintptr_t CheckScoredGoals = 0x01B0;
			constexpr uintptr_t CheckShotsBlocked = 0x01C0;
			constexpr uintptr_t CheckGameEventsWon = 0x01D0;
			constexpr uintptr_t CheckRandomItemsDropped = 0x01E0;
			constexpr uintptr_t LeftWingRightWingTeamsPlayed = 0x01F0;
			constexpr uintptr_t WinningIsWinningPlayedWithDLC0Cars = 0x0200;
			constexpr uintptr_t CarsCollected = 0x0210;
			constexpr uintptr_t ExhibitionMatchesPlayed = 0x0220;
			constexpr uintptr_t RankedMatchesPlayed = 0x0224;
			constexpr uintptr_t UnrankedMatchesPlayed = 0x0228;
			constexpr uintptr_t PrivateMatchesPlayed = 0x022C;
			constexpr uintptr_t ReplayEditorOpened = 0x0230;
			constexpr uintptr_t CreditsViewed = 0x0234;
			constexpr uintptr_t GoalsOrAssists = 0x0238;
			constexpr uintptr_t CompletedMatchesWithClubmates = 0x023C;
			constexpr uintptr_t NewOfflineProductsUnlocked = 0x0240;
		}

		namespace AchievementUnlockedEvent_TA {
			constexpr uintptr_t Type = 0x0060;
			constexpr uintptr_t LocalId = 0x0064;
		}

		namespace Achievement_TA {
			constexpr uintptr_t Type = 0x0060;
			constexpr uintptr_t LocalId = 0x0064;
		}

		namespace ActorChannelMonitor_TA {
			constexpr uintptr_t OverflowEvents = 0x0060;
			constexpr uintptr_t Metrics = 0x0070;
			constexpr uintptr_t GRI = 0x0078;
			constexpr uintptr_t NetworkConfig = 0x0080;
		}

		namespace ActorTarget_TA {
			constexpr uintptr_t TargetClass = 0x0268;
		}

		namespace AdManagerConfig_TA {
			constexpr uintptr_t Ads = 0x0078;
		}

		namespace AdManager_TA {
			constexpr uintptr_t CacheDuration = 0x0060;
			constexpr uintptr_t CachedAdImages = 0x0068;
			constexpr uintptr_t BillboardZoneMapping = 0x0078;
			constexpr uintptr_t BillboardMeshUpdateRequests = 0x0088;
			constexpr uintptr_t ImageDownloader = 0x0098;
			constexpr uintptr_t CurrentAdIndex = 0x00A0;
			constexpr uintptr_t AdConfig = 0x00A8;
			constexpr uintptr_t Ads = 0x00B0;
		}

		namespace AnimNodeBlendBoost_TA {
			constexpr uintptr_t BlendTime = 0x0158;
		}

		namespace AnimNodeBlendSpeed_TA {
			constexpr uintptr_t BlendRate = 0x01A8;
			constexpr uintptr_t MaxSpeed = 0x01AC;
		}

		namespace AnimNodeBlend_TA {
			constexpr uintptr_t BlendSpeed = 0x0148;
			constexpr uintptr_t Position = 0x014C;
			constexpr uintptr_t DesiredPosition = 0x0150;
		}

		namespace AnimNotify_PlayAKSound_TA {
			constexpr uintptr_t SFX_SoundCue = 0x0068;
			constexpr uintptr_t bPlayInReverse = 0x0070;
		}

		namespace AnimNotify_SetBoneVisibility_TA {
			constexpr uintptr_t SetVisibleName = 0x0068;
			constexpr uintptr_t bSetVisible = 0x0070;
			constexpr uintptr_t SetVisibilityType = 0x0074;
			constexpr uintptr_t SKMComp = 0x0078;
		}

		namespace AnimNotify_SetFXState_TA {
			constexpr uintptr_t FXEvent = 0x0068;
		}

		namespace AnimNotify_TriggerTurntableEvent_TA {
			constexpr uintptr_t TurntableEventName = 0x0068;
			constexpr uintptr_t bPlayInReverse = 0x0070;
		}

		namespace AnimStateComponent_TA {
			constexpr uintptr_t OwnerSkeletalMeshComponent = 0x00A8;
			constexpr uintptr_t BlendNode = 0x00B0;
		}

		namespace AntennaComponent_TA {
			constexpr uintptr_t TopperSocket = 0x00E8;
			constexpr uintptr_t AntennaMesh = 0x00F0;
			constexpr uintptr_t AntennaSegmentExtension = 0x00F8;
			constexpr uintptr_t AntennaMaterial = 0x0100;
			constexpr uintptr_t AnimTreeTemplate = 0x0108;
			constexpr uintptr_t BendyBoneControllers = 0x0110;
			constexpr uintptr_t BendScale = 0x0120;
			constexpr uintptr_t PitchScale = 0x0124;
			constexpr uintptr_t RollScale = 0x0128;
			constexpr uintptr_t PitchZScale = 0x012C;
			constexpr uintptr_t RollZScale = 0x0130;
			constexpr uintptr_t TopperMaterial = 0x0138;
			constexpr uintptr_t LastTopperWindSpeedParamValue = 0x0140;
			constexpr uintptr_t AntennaSK = 0x0148;
			constexpr uintptr_t BendyControls = 0x0150;
		}

		namespace AntiAddiction_TA {
			constexpr uintptr_t Hours = 0x0060;
		}

		namespace ApplyVelocityHitHandler_TA {
			constexpr uintptr_t VelocityToApply = 0x0150;
		}

		namespace ArenaReflectionsManager_TA {
			constexpr uintptr_t SoccarGame = 0x0060;
			constexpr uintptr_t SlapbackSetups = 0x0068;
			constexpr uintptr_t ArenaReverbSetups = 0x0078;
			constexpr uintptr_t SlapBackActors = 0x0088;
			constexpr uintptr_t ArenaReverbEmitters = 0x0098;
			constexpr uintptr_t ImpactIntensityKey = 0x00A8;
			constexpr uintptr_t SlapbackDistanceKey = 0x00B0;
			constexpr uintptr_t ReverbBalanceKey = 0x00B8;
			constexpr uintptr_t BallListenerOffset = 0x00C0;
		}

		namespace ArenaSoundConfig_TA {
			constexpr uintptr_t Events = 0x0078;
		}

		namespace ArenaSoundEvent_TA {
			constexpr uintptr_t MapName = 0x0060;
			constexpr uintptr_t InGameMusicCue = 0x0068;
			constexpr uintptr_t StartTime = 0x0070;
			constexpr uintptr_t EndTime = 0x0078;
		}

		namespace ArenaSoundManager_TA {
			constexpr uintptr_t DefaultInGameMusicCue = 0x00A8;
			constexpr uintptr_t TrainingRoundEndCue = 0x00B0;
			constexpr uintptr_t ArenaMusicReplayStopCue = 0x00B8;
			constexpr uintptr_t Settings = 0x00C0;
			constexpr uintptr_t SoundPlayer = 0x00C8;
			constexpr uintptr_t bMatchBegan = 0x00D0;
			constexpr uintptr_t SoccarGame = 0x00D8;
			constexpr uintptr_t ReflectionsManager = 0x00E0;
			constexpr uintptr_t GoalScoreStinger = 0x00E8;
			constexpr uintptr_t ActiveStinger = 0x00F0;
			constexpr uintptr_t Config = 0x00F8;
			constexpr uintptr_t StreamerSafeConfig = 0x0100;
			constexpr uintptr_t NextTimedEvent = 0x0108;
			constexpr uintptr_t TimedEventPlayingID = 0x0110;
		}

		namespace ArenaSoundPlayer_TA {
			constexpr uintptr_t SoundSource = 0x0268;
		}

		namespace ArenaSoundSettings_TA {
			constexpr uintptr_t InGameMusicCue = 0x0060;
			constexpr uintptr_t Bitfields_0x0068 = 0x0068;  // Multiple: bDynamicMusic, UpdateStatSounds
			constexpr uintptr_t GoalScoreSound = 0x0070;
			constexpr uintptr_t GameStartStinger = 0x0078;
			constexpr uintptr_t GoalScoreStinger = 0x0080;
			constexpr uintptr_t EpicSaveStinger = 0x0088;
			constexpr uintptr_t OvertimeStinger = 0x0090;
			constexpr uintptr_t WinStinger = 0x0098;
			constexpr uintptr_t LoseStinger = 0x00A0;
			constexpr uintptr_t ForfeitStinger = 0x00A8;
			constexpr uintptr_t GoalScoreStingerDelay = 0x00B0;
			constexpr uintptr_t Win = 0x00B8;
			constexpr uintptr_t Lose = 0x00C0;
			constexpr uintptr_t CountdownStart = 0x00C8;
			constexpr uintptr_t CountdownEnd = 0x00D0;
			constexpr uintptr_t OneMinRemaining = 0x00D8;
			constexpr uintptr_t ThirtySecondsRemaining = 0x00E0;
			constexpr uintptr_t OvertimeStart = 0x00E8;
			constexpr uintptr_t StatSounds = 0x00F0;
			constexpr uintptr_t CountDownSoundList = 0x0100;
			constexpr uintptr_t RoundCountDownSoundList = 0x0110;
			constexpr uintptr_t GoalStingerEnvironment = 0x0120;
			constexpr uintptr_t LevelDefaultEnvironment = 0x0140;
			constexpr uintptr_t ArenaReverbShareset = 0x0160;
		}

		namespace AssetAttribute_ChangeProductDrawScale_TA {
			constexpr uintptr_t NewProductDrawScales = 0x0060;
		}

		namespace AssetAttribute_ForceWheelAxle_TA {
			constexpr uintptr_t AxleToForce = 0x0060;
			constexpr uintptr_t ForcedWheel = 0x0068;
		}

		namespace AssetAttribute_GoalCountChanging_TA {
			constexpr uintptr_t Assets = 0x0060;
			constexpr uintptr_t CurrentGoalCount = 0x0070;
			constexpr uintptr_t LastIndexUsed = 0x0074;
			constexpr uintptr_t bIsGaragePreview = 0x0078;
			constexpr uintptr_t CurrentObjectToUse = 0x0080;
			constexpr uintptr_t AssetBeingUsed = 0x0088;
		}

		namespace AssetAttribute_PostMatchCelebration_TA {
			constexpr uintptr_t PostMatchCelebrationMesh = 0x0060;
			constexpr uintptr_t MVPPostMatchCelebrationAnim = 0x0068;
			constexpr uintptr_t RegularPostMatchCelebrationAnims = 0x0070;
			constexpr uintptr_t SplitMeshComp = 0x0080;
			constexpr uintptr_t InstancedSplitMeshComp = 0x0088;
		}

		namespace AssetAttribute_SoundOverrides_TA {
			constexpr uintptr_t SoundOverrides = 0x0060;
		}

		namespace AssetAttribute_TeamEdition_TA {
			constexpr uintptr_t Template = 0x0060;
			constexpr uintptr_t TeamEditions = 0x0070;
			constexpr uintptr_t bAddAllAvailableTeams = 0x0080;
		}

		namespace AssetAttribute_TeamOverride_TA {
			constexpr uintptr_t Team = 0x0060;
			constexpr uintptr_t Materials = 0x0068;
			constexpr uintptr_t AssetName = 0x0078;
			constexpr uintptr_t Thumbnail = 0x0080;
		}

		namespace AssetAttribute_TeamParameterOverride_TA {
			constexpr uintptr_t Team = 0x0060;
			constexpr uintptr_t ParamOverrides = 0x0068;
		}

		namespace AttachmentAnim_TA {
			constexpr uintptr_t AnimSet = 0x0078;
			constexpr uintptr_t AnimName = 0x0080;
			constexpr uintptr_t bIgnoreAnimationForThumbnails = 0x0088;
		}

		namespace AttachmentBehavior_Steering_TA {
			constexpr uintptr_t BoneControlName = 0x0078;
			constexpr uintptr_t AnimTree = 0x0080;
			constexpr uintptr_t SteeringToDegreesCurve = 0x0088;
			constexpr uintptr_t SkelMeshComponent = 0x00A0;
			constexpr uintptr_t BoneController = 0x00A8;
			constexpr uintptr_t Vehicle = 0x00B0;
		}

		namespace AttachmentBehavior_TA {
			constexpr uintptr_t Asset = 0x0060;
			constexpr uintptr_t Component = 0x0068;
			constexpr uintptr_t bPreview = 0x0070;
		}

		namespace AudioFieldSideComponent_TA {
			constexpr uintptr_t FieldSideRTPC = 0x00A8;
			constexpr uintptr_t OneOverFieldLength = 0x00B0;
			constexpr uintptr_t GameEvent = 0x00B8;
			constexpr uintptr_t ArenaReflectionsManager = 0x00C0;
		}

		namespace AudioMixStateComponent_TA {
			constexpr uintptr_t CameraBallFocusStateGroup = 0x00A8;
			constexpr uintptr_t CameraBallFocus_On = 0x00B0;
			constexpr uintptr_t CameraBallFocus_Off = 0x00B8;
			constexpr uintptr_t GameState = 0x00C0;
			constexpr uintptr_t PlayerCountStateGroup = 0x00C8;
			constexpr uintptr_t PlayerCount_4s = 0x00D0;
			constexpr uintptr_t PlayerCount_3s = 0x00D8;
			constexpr uintptr_t PlayerCount_2s = 0x00E0;
			constexpr uintptr_t PlayerCount_1s = 0x00E8;
			constexpr uintptr_t PlayerCount_None = 0x00F0;
			constexpr uintptr_t MajorityFarStateGroup = 0x00F8;
			constexpr uintptr_t MajorityFar_True = 0x0100;
			constexpr uintptr_t MajorityFar_None = 0x0108;
			constexpr uintptr_t MajorityFarRTPC = 0x0110;
			constexpr uintptr_t IsTeamRTPC = 0x0118;
			constexpr uintptr_t FocusCarRTPC = 0x0120;
			constexpr uintptr_t LiveReplay_InCameraViewRTPC = 0x0128;
			constexpr uintptr_t NumLocalPlayers = 0x0130;
			constexpr uintptr_t Bitfields_0x0134 = 0x0134;  // Multiple: bPlayerUsingBallCam, bIsActiveState, bSpectating, bIsMajorityFar, bInLiveReplay
			constexpr uintptr_t MajorityFarMinDistanceSq = 0x0138;
			constexpr uintptr_t BallListenerOffset = 0x013C;
		}

		namespace AudioParamsSuperSonicComponent_TA {
			constexpr uintptr_t UnknownData00 = 0x00A4;
		}

		namespace AudioParamsSuperSonicReplayComponent_TA {
			constexpr uintptr_t ReplayFocus = 0x00A8;
		}

		namespace AudioPriorityComponent_TA {
			constexpr uintptr_t CarDistanceCurve = 0x00A8;
			constexpr uintptr_t BallDistanceCurve = 0x00C0;
			constexpr uintptr_t DrivingAtListenerDotThreshold = 0x00D8;
			constexpr uintptr_t DrivingAtPlayerBonus = 0x00DC;
			constexpr uintptr_t BoostingAtPlayerBonus = 0x00E0;
			constexpr uintptr_t DebugColors = 0x00E8;
			constexpr uintptr_t PriorityArray = 0x00F8;
			constexpr uintptr_t Ball = 0x0108;
		}

		namespace AudioSlomoReplayComponent_TA {
			constexpr uintptr_t ReplayPlaybackSpeedStateGroup = 0x00A8;
			constexpr uintptr_t ReplayPlaybackSpeed = 0x00B0;
			constexpr uintptr_t ReplayPlaybackSpeed01 = 0x00B8;
			constexpr uintptr_t ReplayPlaybackSpeed02 = 0x00C0;
			constexpr uintptr_t ReplayPlaybackSpeed03 = 0x00C8;
			constexpr uintptr_t ReplayPlaybackSpeed04 = 0x00D0;
			constexpr uintptr_t ReplayPlaybackSpeed_05 = 0x00D8;
		}

		namespace AudioSpectatorMixComponent_TA {
			constexpr uintptr_t SpectatorCameraModeStateGroup = 0x00A8;
			constexpr uintptr_t SpectatorCameraMode_Fly = 0x00B0;
			constexpr uintptr_t SpectatorCameraMode_Director_Base = 0x00B8;
			constexpr uintptr_t SpectatorCameraMode_Director_Countdown = 0x00C0;
			constexpr uintptr_t SpectatorCameraMode_None = 0x00C8;
			constexpr uintptr_t CurrentGameState = 0x00D0;
			constexpr uintptr_t CurrentCameraState = 0x00D8;
			constexpr uintptr_t ActorCameraFocusRTPC = 0x00E0;
			constexpr uintptr_t ActorInViewRTPC = 0x00E8;
			constexpr uintptr_t ReplayCarFocusRTPC = 0x00F0;
			constexpr uintptr_t ReplayCameraViewFocusRTPC = 0x00F8;
			constexpr uintptr_t IsLocalRPTC = 0x0100;
			constexpr uintptr_t TargetCar = 0x0108;
			constexpr uintptr_t Bitfields_0x0110 = 0x0110;  // Multiple: bShouldFocusCar, bShouldFocusCameraView, bShouldFocusCarBeLocal
			constexpr uintptr_t ReplayCamera = 0x0118;
			constexpr uintptr_t GameEvent = 0x0120;
		}

		namespace AudioStateComponent_TA {
			constexpr uintptr_t StateGroup = 0x0258;
			constexpr uintptr_t StateName = 0x0268;
		}

		namespace AutoTourConfig_TA {
			constexpr uintptr_t MaxTournamentsPerWeek = 0x0078;
			constexpr uintptr_t TourResultsTimeoutSeconds = 0x007C;
			constexpr uintptr_t MaxNumPlayers = 0x0080;
			constexpr uintptr_t bAutoPartyUpEnabled = 0x0084;
			constexpr uintptr_t ScheduleRegions = 0x0088;
		}

		namespace AutoTour_TA {
			constexpr uintptr_t Schedules = 0x0060;
			constexpr uintptr_t CycleResults = 0x0070;
			constexpr uintptr_t IneligibleScheduleID = 0x0080;
			constexpr uintptr_t RegionID = 0x0088;
			constexpr uintptr_t CycleID = 0x0098;
			constexpr uintptr_t CycleEndTime = 0x00A0;
			constexpr uintptr_t WeekID = 0x00A8;
			constexpr uintptr_t WeekEndTime = 0x00B0;
			constexpr uintptr_t WeeklyCurrencies = 0x00B8;
			constexpr uintptr_t MaxTierScores = 0x00C8;
			constexpr uintptr_t DataRefreshTime = 0x00D8;
			constexpr uintptr_t LastSyncTime = 0x00DC;
			constexpr uintptr_t SeasonCurrencyID = 0x00E0;
			constexpr uintptr_t Config = 0x00E8;
			constexpr uintptr_t OnlineGame = 0x00F0;
			constexpr uintptr_t Tournaments = 0x00F8;
			constexpr uintptr_t TourList = 0x0100;
			constexpr uintptr_t SyncCycleDataTask = 0x0108;
			constexpr uintptr_t SyncScheduleTask = 0x0110;
		}

		namespace BTAction {
			constexpr uintptr_t FinishTime = 0x00B0;
			constexpr uintptr_t AbortTime = 0x00B4;
			constexpr uintptr_t StartTime = 0x00B8;
		}

		namespace BTAction_BlockGoal {
			constexpr uintptr_t GoalRadius = 0x01C8;
		}

		namespace BTAction_CatchBall {
			constexpr uintptr_t FallTime = 0x01E8;
		}

		namespace BTAction_DodgeHit {
			constexpr uintptr_t FlipAmount = 0x0170;
			constexpr uintptr_t AimTarget = 0x0178;
			constexpr uintptr_t DodgeDirection = 0x0180;
			constexpr uintptr_t DodgeTime = 0x018C;
		}

		namespace BTAction_Face {
			constexpr uintptr_t ReachAngle = 0x0160;
			constexpr uintptr_t MaxSpeed = 0x0164;
			constexpr uintptr_t MaxTravel = 0x0168;
			constexpr uintptr_t bMovingForward = 0x016C;
			constexpr uintptr_t StartLocation = 0x0170;
		}

		namespace BTAction_HitBall {
			constexpr uintptr_t RandomTargetOffset = 0x01C8;
			constexpr uintptr_t AimOffsetScale = 0x01CC;
			constexpr uintptr_t CurrentRandomTargetOffset = 0x01D0;
			constexpr uintptr_t SoccarAI = 0x01E0;
		}

		namespace BTAction_Input {
			constexpr uintptr_t Input = 0x00C0;
		}

		namespace BTAction_Jump {
			constexpr uintptr_t MinJumpTime = 0x0160;
			constexpr uintptr_t TargetRadiusHeightScale = 0x0164;
			constexpr uintptr_t StateStartTime = 0x0168;
		}

		namespace BTAction_MoveTo {
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bReverse, bBoost, bAllowPointTurns, bPointTurn, bWasFacingDestination, bHasPath
			constexpr uintptr_t MinSpeed = 0x0164;
			constexpr uintptr_t MaxSpeed = 0x0168;
			constexpr uintptr_t RandomMaxSpeedModifier = 0x016C;
			constexpr uintptr_t MinBoostDistance = 0x0170;
			constexpr uintptr_t TeamSeparationDistance = 0x0174;
			constexpr uintptr_t ReachDistance = 0x0178;
			constexpr uintptr_t FaceLocation = 0x0180;
			constexpr uintptr_t FaceRotation = 0x0188;
			constexpr uintptr_t MaxTurnRadius = 0x0190;
			constexpr uintptr_t Modifiers = 0x0198;
			constexpr uintptr_t OldPathDestination = 0x01A8;
			constexpr uintptr_t OldPathCarLocation = 0x01B4;
			constexpr uintptr_t CachedMaxGravitySlope = 0x01C0;
			constexpr uintptr_t CurrentRandomMaxSpeedModifier = 0x01C4;
		}

		namespace BTAction_PowerSlide {
			constexpr uintptr_t bReverse = 0x0160;
			constexpr uintptr_t Delay = 0x0164;
			constexpr uintptr_t TurnTarget = 0x0168;
			constexpr uintptr_t Steer = 0x0170;
			constexpr uintptr_t startYaw = 0x0174;
		}

		namespace BTAction_Stop {
			constexpr uintptr_t bWasGoingForward = 0x00C0;
		}

		namespace BTAction_Target {
			constexpr uintptr_t Target = 0x00C0;
			constexpr uintptr_t TargetPredictionTime = 0x00C8;
			constexpr uintptr_t SelfData = 0x00D0;
			constexpr uintptr_t TargetData = 0x0118;
		}

		namespace BTAction_Test {
			constexpr uintptr_t TargetLocation = 0x01C8;
			constexpr uintptr_t AimLocation = 0x01D4;
		}

		namespace BTAction_WallBounce {
			constexpr uintptr_t UnknownData00 = 0x00BC;
		}

		namespace BTAction_WiggleTires {
			constexpr uintptr_t UnknownData00 = 0x00BC;
		}

		namespace BTC_AIPlayerIndex {
			constexpr uintptr_t IndexGreaterThan = 0x0090;
			constexpr uintptr_t IndexLessThan = 0x0094;
			constexpr uintptr_t IndexEqualTo = 0x0098;
		}

		namespace BTC_Any {
			constexpr uintptr_t Targets = 0x0090;
		}

		namespace BTC_AreaClear {
			constexpr uintptr_t Source = 0x01D0;
			constexpr uintptr_t SourcePredictionTime = 0x01D8;
			constexpr uintptr_t Radius = 0x01DC;
		}

		namespace BTC_BallWelded {
			constexpr uintptr_t UnknownData00 = 0x008C;
		}

		namespace BTC_Between {
			constexpr uintptr_t Start = 0x00E8;
			constexpr uintptr_t End = 0x00F0;
			constexpr uintptr_t AngleLessThan = 0x00F8;
			constexpr uintptr_t AngleGreaterThan = 0x00FC;
		}

		namespace BTC_Boost {
			constexpr uintptr_t BoostAmountLessThan = 0x00E8;
			constexpr uintptr_t BoostAmountGreaterThan = 0x00EC;
			constexpr uintptr_t Bitfields_0x00F0 = 0x00F0;  // Multiple: bFull, bNotFull
		}

		namespace BTC_BounceHeight {
			constexpr uintptr_t HeightLessThan = 0x01D0;
			constexpr uintptr_t HeightGreaterThan = 0x01D4;
		}

		namespace BTC_ClosestTime {
			constexpr uintptr_t TimeGreaterThan = 0x0218;
			constexpr uintptr_t TimeLessThan = 0x021C;
		}

		namespace BTC_ClosestTo {
			constexpr uintptr_t Targets = 0x01D0;
			constexpr uintptr_t ExtraDistance = 0x01D8;
		}

		namespace BTC_DodgeHit {
			constexpr uintptr_t FlipAmount = 0x01D8;
			constexpr uintptr_t JumpTime = 0x01DC;
		}

		namespace BTC_FieldDistance {
			constexpr uintptr_t Goal = 0x01D0;
			constexpr uintptr_t OtherGoal = 0x01D8;
			constexpr uintptr_t ForwardGreaterThan = 0x01E0;
			constexpr uintptr_t ForwardLessThan = 0x01E4;
			constexpr uintptr_t SideGreaterThan = 0x01E8;
			constexpr uintptr_t SideLessThan = 0x01EC;
			constexpr uintptr_t AbsSideGreaterThan = 0x01F0;
			constexpr uintptr_t AbsSideLessThan = 0x01F4;
			constexpr uintptr_t bUseGoalOrientation = 0x01F8;
			constexpr uintptr_t GoalData = 0x0200;
			constexpr uintptr_t OtherGoalData = 0x0248;
			constexpr uintptr_t MidFieldData = 0x0290;
		}

		namespace BTC_GameInfoType {
			constexpr uintptr_t ValidGameInfoClasses = 0x0090;
			constexpr uintptr_t CurrentGameInfo = 0x00A0;
		}

		namespace BTC_GameScore {
			constexpr uintptr_t ScoreDeltaGreaterThan = 0x0090;
			constexpr uintptr_t ScoreDeltaLessThan = 0x0094;
			constexpr uintptr_t ScoreDelta = 0x0098;
		}

		namespace BTC_GameState {
			constexpr uintptr_t StateName = 0x0090;
		}

		namespace BTC_HumanPlayerOnOpposingTeam {
			constexpr uintptr_t UnknownData00 = 0x008C;
		}

		namespace BTC_HumanPlayerOnTeam {
			constexpr uintptr_t UnknownData00 = 0x008C;
		}

		namespace BTC_Impact {
			constexpr uintptr_t TimeGreaterThan = 0x0218;
			constexpr uintptr_t TimeLessThan = 0x021C;
		}

		namespace BTC_InCone {
			constexpr uintptr_t Source = 0x00E8;
			constexpr uintptr_t Destination = 0x00F0;
			constexpr uintptr_t AngleLessThan = 0x00F8;
			constexpr uintptr_t AngleGreaterThan = 0x00FC;
		}

		namespace BTC_JumpHit {
			constexpr uintptr_t MinImpactTime = 0x01D0;
		}

		namespace BTC_Landing {
			constexpr uintptr_t LandTimeLessThan = 0x0218;
			constexpr uintptr_t LandTimeGreaterThan = 0x021C;
		}

		namespace BTC_Lock {
			constexpr uintptr_t LockName = 0x0090;
			constexpr uintptr_t NumLocks = 0x0098;
		}

		namespace BTC_NotAny {
			constexpr uintptr_t Targets = 0x0090;
		}

		namespace BTC_ProxyBase {
			constexpr uintptr_t Self = 0x0090;
			constexpr uintptr_t SelfPredictionTime = 0x0098;
			constexpr uintptr_t SelfData = 0x00A0;
		}

		namespace BTC_SegmentDistance {
			constexpr uintptr_t Start = 0x00E8;
			constexpr uintptr_t End = 0x00F0;
			constexpr uintptr_t StartGreaterThan = 0x00F8;
			constexpr uintptr_t StartLessThan = 0x00FC;
			constexpr uintptr_t EndGreaterThan = 0x0100;
			constexpr uintptr_t EndLessThan = 0x0104;
			constexpr uintptr_t AbsSideGreaterThan = 0x0108;
			constexpr uintptr_t AbsSideLessThan = 0x010C;
		}

		namespace BTC_SelectActor {
			constexpr uintptr_t Targets = 0x0090;
		}

		namespace BTC_Skill {
			constexpr uintptr_t SkillGreaterThan = 0x0090;
			constexpr uintptr_t SkillLessThan = 0x0094;
		}

		namespace BTC_SoccarState {
			constexpr uintptr_t bKickoff = 0x0098;
			constexpr uintptr_t SoccarGame = 0x00A0;
		}

		namespace BTC_Stuck {
			constexpr uintptr_t UnknownData00 = 0x008C;
		}

		namespace BTC_Target {
			constexpr uintptr_t DistanceGreaterThan = 0x01D0;
			constexpr uintptr_t DistanceLessThan = 0x01D4;
			constexpr uintptr_t HeightGreaterThan = 0x01D8;
			constexpr uintptr_t HeightLessThan = 0x01DC;
			constexpr uintptr_t SpeedGreaterThan = 0x01E0;
			constexpr uintptr_t SpeedLessThan = 0x01E4;
			constexpr uintptr_t SpeedTowardsGreaterThan = 0x01E8;
			constexpr uintptr_t SpeedTowardsLessThan = 0x01EC;
			constexpr uintptr_t SideSpeedGreaterThan = 0x01F0;
			constexpr uintptr_t SideSpeedLessThan = 0x01F4;
			constexpr uintptr_t RelativeSpeedGreaterThan = 0x01F8;
			constexpr uintptr_t RelativeSpeedLessThan = 0x01FC;
			constexpr uintptr_t RelativeSpeedTowardsGreaterThan = 0x0200;
			constexpr uintptr_t RelativeSpeedTowardsLessThan = 0x0204;
			constexpr uintptr_t RelativeSideSpeedGreaterThan = 0x0208;
			constexpr uintptr_t RelativeSideSpeedLessThan = 0x020C;
			constexpr uintptr_t AngleGreaterThan = 0x0210;
			constexpr uintptr_t AngleLessThan = 0x0214;
		}

		namespace BTC_TargetBase {
			constexpr uintptr_t Target = 0x00E8;
			constexpr uintptr_t TargetPredictionTime = 0x00F0;
			constexpr uintptr_t bFlattenToDrivePlane = 0x00F4;
			constexpr uintptr_t TargetData = 0x00F8;
			constexpr uintptr_t SelfData3D = 0x0140;
			constexpr uintptr_t TargetData3D = 0x0188;
		}

		namespace BTC_TargetNumberSatisfying {
			constexpr uintptr_t Targets = 0x0090;
			constexpr uintptr_t TargetsGreaterThan = 0x0098;
			constexpr uintptr_t TargetsLessThan = 0x009C;
		}

		namespace BTC_TeamSize {
			constexpr uintptr_t MinTeamSize = 0x0090;
			constexpr uintptr_t MaxTeamSize = 0x0094;
		}

		namespace BTC_TimeSinceBallHit {
			constexpr uintptr_t CheckTeam = 0x0090;
			constexpr uintptr_t TimeGreaterThan = 0x0094;
			constexpr uintptr_t TimeLessThan = 0x0098;
			constexpr uintptr_t Ball = 0x00A0;
			constexpr uintptr_t LastHitTime = 0x00A8;
		}

		namespace BTC_Traits {
			constexpr uintptr_t UnknownData00 = 0x008C;
		}

		namespace BTC_Vehicle {
			constexpr uintptr_t Bitfields_0x00E8 = 0x00E8;  // Multiple: bOnBack, bNotOnBack, bWheelsOnGround, bWheelsNotOnGround
			constexpr uintptr_t GroundNormalGreaterThan = 0x00EC;
			constexpr uintptr_t GroundNormalLessThan = 0x00F0;
			constexpr uintptr_t ForwardSpeedGreaterThan = 0x00F4;
			constexpr uintptr_t ForwardSpeedLessThan = 0x00F8;
		}

		namespace BTComponent {
			constexpr uintptr_t Root = 0x0070;
			constexpr uintptr_t RootStatus = 0x0078;
			constexpr uintptr_t AI = 0x0080;
			constexpr uintptr_t Bitfields_0x0088 = 0x0088;  // Multiple: bPrintStatusLogs, bDirtyStatusLogs, bEvaluatingConditions, bPauseNextTick
			constexpr uintptr_t StatusLogs = 0x0090;
			constexpr uintptr_t StatusLogsIndex = 0x00A0;
			constexpr uintptr_t StatusLogsStack = 0x00A8;
			constexpr uintptr_t CanvasDrawer = 0x00B8;
			constexpr uintptr_t DynamicLinks = 0x00C0;
		}

		namespace BTCondition {
			constexpr uintptr_t UpdateDelay = 0x0080;
			constexpr uintptr_t Bitfields_0x0084 = 0x0084;  // Multiple: bFlipResult, bDirty, CachedResult
			constexpr uintptr_t NextUpdateTime = 0x0088;
		}

		namespace BTConditionalNode {
			constexpr uintptr_t PreConditions = 0x0080;
			constexpr uintptr_t Conditions = 0x0090;
			constexpr uintptr_t SuccessConditions = 0x00A0;
		}

		namespace BTDeco_RandomSteer {
			constexpr uintptr_t MinDuration = 0x0088;
			constexpr uintptr_t MaxDuration = 0x008C;
			constexpr uintptr_t TimeRemaining = 0x0090;
			constexpr uintptr_t ExtraSteer = 0x0094;
		}

		namespace BTDecorator {
			constexpr uintptr_t Child = 0x0080;
		}

		namespace BTDynamicLink {
			constexpr uintptr_t LinkName = 0x0088;
			constexpr uintptr_t bUnlinkedSuccess = 0x0090;
			constexpr uintptr_t ChildArchetype = 0x0098;
		}

		namespace BTExecutor {
			constexpr uintptr_t UnknownData00 = 0x00C4;
		}

		namespace BTLock {
			constexpr uintptr_t LockScope = 0x0088;
			constexpr uintptr_t LockName = 0x008C;
			constexpr uintptr_t Time = 0x0094;
			constexpr uintptr_t RandomTime = 0x0098;
			constexpr uintptr_t Locks = 0x00A0;
			constexpr uintptr_t LockTime = 0x00A8;
		}

		namespace BTLockCollection {
			constexpr uintptr_t Locks = 0x0070;
		}

		namespace BTMoveModifier {
			constexpr uintptr_t bEnabled = 0x0070;
		}

		namespace BTMoveModifier_Boost {
			constexpr uintptr_t MinDistanceFromDestination = 0x0078;
			constexpr uintptr_t MaxAngleFromCar = 0x007C;
			constexpr uintptr_t MaxAngleFromDestination = 0x0080;
			constexpr uintptr_t BoostPickup = 0x0088;
			constexpr uintptr_t LastCheckTime = 0x0090;
		}

		namespace BTNode {
			constexpr uintptr_t Decorators = 0x0060;
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bDebugPause, bDebug
			constexpr uintptr_t AI = 0x0078;
		}

		namespace BTNodeParent {
			constexpr uintptr_t Children = 0x00B0;
			constexpr uintptr_t RunningChild = 0x00C0;
		}

		namespace BTProxyType {
			constexpr uintptr_t bStatic = 0x0060;
		}

		namespace BTRandomSelector {
			constexpr uintptr_t ChildWeights = 0x00C8;
			constexpr uintptr_t RemainingChildren = 0x00D8;
		}

		namespace BTSelector {
			constexpr uintptr_t UnknownData00 = 0x00C4;
		}

		namespace BTSequence {
			constexpr uintptr_t UnknownData00 = 0x00C4;
		}

		namespace BTTarget {
			constexpr uintptr_t Type = 0x0060;
			constexpr uintptr_t LocalOffset = 0x0068;
			constexpr uintptr_t WorldOffset = 0x0074;
			constexpr uintptr_t Filters = 0x0080;
		}

		namespace BTWeight {
			constexpr uintptr_t Weight = 0x0088;
		}

		namespace BackFillPolicy_TA {
			constexpr uintptr_t PolicyType = 0x0060;
			constexpr uintptr_t MinSecRemaining = 0x0064;
			constexpr uintptr_t MaxScoreDiff = 0x0068;
		}

		namespace BallCamTarget_TA {
			constexpr uintptr_t UnknownData00 = 0x00C4;
		}

		namespace BallLocationComponent_TA {
			constexpr uintptr_t MaterialToApplyBallLocationTo = 0x00A0;
		}

		namespace BallPossessionComponent_TA {
			constexpr uintptr_t BroadcastInterval = 0x00A8;
			constexpr uintptr_t Score = 0x00AC;
			constexpr uintptr_t TeamNum = 0x00B0;
			constexpr uintptr_t GameEvent = 0x00B8;
			constexpr uintptr_t CurrentPossessionSeconds = 0x00C0;
			constexpr uintptr_t PossessionStreak = 0x00C4;
			constexpr uintptr_t DistanceFromOtherTeamSq = 0x00C8;
			constexpr uintptr_t bCanAwardClear = 0x00CC;
			constexpr uintptr_t ClearDistance = 0x00D0;
			constexpr uintptr_t ClearResetDistance = 0x00D4;
			constexpr uintptr_t LastSecondsForDenial = 0x00D8;
		}

		namespace BallRadiusVolume_TA {
			constexpr uintptr_t Radius = 0x0268;
			constexpr uintptr_t PreviewRadius = 0x0270;
			constexpr uintptr_t InRadius = 0x0278;
		}

		namespace BallSlomoComponent_TA {
			constexpr uintptr_t BallSloMoRadius = 0x00A8;
			constexpr uintptr_t BallSloMoDuration = 0x00AC;
			constexpr uintptr_t BallSloMoDilation = 0x00B0;
			constexpr uintptr_t BallSloMoCooldown = 0x00B4;
			constexpr uintptr_t BallSloMoNext = 0x00B8;
			constexpr uintptr_t BallSloMoDiffSpeed = 0x00BC;
		}

		namespace BallStaleTimerComponent_TA {
			constexpr uintptr_t MaxTime = 0x00A8;
			constexpr uintptr_t NoTeamMaxTime = 0x00AC;
			constexpr uintptr_t CountdownThreshold = 0x00B0;
			constexpr uintptr_t NoTeamCountdownThreshold = 0x00B4;
			constexpr uintptr_t CurrentStaleTime = 0x00B8;
			constexpr uintptr_t Bitfields_0x00BC = 0x00BC;  // Multiple: bWasInRedSide, bNotifiedStaleBall
			constexpr uintptr_t Tolerance = 0x00C0;
			constexpr uintptr_t StaleBallYRespawnOffset = 0x00C4;
			constexpr uintptr_t HeatseekerResetForce = 0x00C8;
			constexpr uintptr_t SoccarGameEvent = 0x00D0;
		}

		namespace BallTrajectoryComponent_Beam_TA {
			constexpr uintptr_t TrajectoryFXs = 0x0118;
			constexpr uintptr_t ParticleBeamArchetype = 0x0128;
		}

		namespace BallTrajectoryComponent_Line_TA {
			constexpr uintptr_t bTrajectoryPointsNeedUpdated = 0x0110;
			constexpr uintptr_t LineColor = 0x0114;
		}

		namespace BallTrajectoryComponent_Mesh_TA {
			constexpr uintptr_t InterpMeshes = 0x0110;
			constexpr uintptr_t MIC = 0x0120;
			constexpr uintptr_t StaticMesh = 0x0128;
			constexpr uintptr_t BeamColor_Max = 0x0130;
			constexpr uintptr_t BeamColor_Mid = 0x0134;
			constexpr uintptr_t BeamColor_Min = 0x0138;
			constexpr uintptr_t MinInterpSpeed = 0x013C;
			constexpr uintptr_t MeshScale = 0x0140;
			constexpr uintptr_t MeshMoveSpeed = 0x0144;
			constexpr uintptr_t MeshRotateSpeed = 0x0148;
			constexpr uintptr_t TrajectoryPlayTestScale = 0x014C;
		}

		namespace BallTrajectoryComponent_Spline_TA {
			constexpr uintptr_t TrajectoryFXs = 0x0118;
			constexpr uintptr_t SplineArchetype = 0x0128;
			constexpr uintptr_t TangentMultiplier = 0x0130;
			constexpr uintptr_t PulseMultiplier = 0x0134;
			constexpr uintptr_t MinInterpSpeed = 0x0138;
		}

		namespace BallTrajectoryComponent_TA {
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bEnabled, bCalculatePoints
			constexpr uintptr_t TrajectoryPoints = 0x00B0;
			constexpr uintptr_t TrajectorySettings = 0x00C0;
			constexpr uintptr_t TotalPathDistance = 0x00D4;
			constexpr uintptr_t StartLocation = 0x00D8;
			constexpr uintptr_t StartVelocity = 0x00E4;
			constexpr uintptr_t TrajectoryUpdateTime = 0x00F0;
		}

		namespace Ball_Breakout_TA {
			constexpr uintptr_t DamageAtTime = 0x0AF0;
			constexpr uintptr_t DamageForceLevels = 0x0B00;
			constexpr uintptr_t Bitfields_0x0B10 = 0x0B10;  // Multiple: bClearTeamOnDamage, bCanDamageOwnTeam
			constexpr uintptr_t MinDamageVelocity = 0x0B14;
			constexpr uintptr_t MinDamageTime = 0x0B18;
			constexpr uintptr_t MinImpactSpeedForCharge = 0x0B1C;
			constexpr uintptr_t DoubleTapTime = 0x0B20;
			constexpr uintptr_t ForceAccumDecayPerSecond = 0x0B24;
			constexpr uintptr_t ForceAccumMax = 0x0B28;
			constexpr uintptr_t ForceAccumRecent = 0x0B2C;
			constexpr uintptr_t LastTeamTouch = 0x0B30;
			constexpr uintptr_t LastCarTouch = 0x0B38;
			constexpr uintptr_t LastDamage = 0x0B40;
			constexpr uintptr_t LastDamageTime = 0x0B44;
			constexpr uintptr_t DamageIndex = 0x0B48;
			constexpr uintptr_t LockedDamageIndex = 0x0B4C;
			constexpr uintptr_t DamageIndexPointsToAward = 0x0B50;
			constexpr uintptr_t AbsorbedForce = 0x0B60;
			constexpr uintptr_t AppliedDamage = 0x0B64;
			constexpr uintptr_t ClosestPlatformCollision = 0x0B80;
			constexpr uintptr_t WorldCollisions = 0x0C00;
		}

		namespace Ball_Fire_TA {
			constexpr uintptr_t SecondsToRampUp = 0x0B80;
			constexpr uintptr_t MinSpeedScalar = 0x0B84;
			constexpr uintptr_t MinRedirectScalar = 0x0B88;
			constexpr uintptr_t TeamNumChangeTimestamp = 0x0B8C;
			constexpr uintptr_t bUseTargetTeamIndex = 0x0B90;
			constexpr uintptr_t MaxDistanceForSave = 0x0B94;
			constexpr uintptr_t DotProductSaveThreshold = 0x0B98;
			constexpr uintptr_t TargetLowSpeedDistanceThreshold = 0x0B9C;
			constexpr uintptr_t TargetLowSpeedThreshold = 0x0BA0;
			constexpr uintptr_t TargetLowSpeedScalar = 0x0BA4;
		}

		namespace Ball_GameEditor_TA {
			constexpr uintptr_t StartLocation = 0x0AF0;
			constexpr uintptr_t StartRotation = 0x0AFC;
			constexpr uintptr_t VelocityStartSpeed = 0x0B08;
			constexpr uintptr_t VelocityStartRotation = 0x0B0C;
			constexpr uintptr_t BallResetTime = 0x0B18;
			constexpr uintptr_t FirstHitTime = 0x0B1C;
			constexpr uintptr_t CameraPositionOffset = 0x0B20;
			constexpr uintptr_t EditingFXActorArchetype = 0x0B30;
			constexpr uintptr_t EditingFXActor = 0x0B38;
			constexpr uintptr_t bUpdateTrajectory = 0x0B40;
			constexpr uintptr_t ToLocation = 0x0B44;
		}

		namespace Ball_God_TA {
			constexpr uintptr_t WallBounceSpeed = 0x0AF0;
			constexpr uintptr_t WallBounceBlend = 0x0AF4;
			constexpr uintptr_t WallBounceBackDistance = 0x0AF8;
			constexpr uintptr_t TargetBlendScaleXY = 0x0AFC;
			constexpr uintptr_t TargetBlendScaleZ = 0x0B00;
			constexpr uintptr_t TargetSpeed = 0x0B04;
			constexpr uintptr_t TargetSpeedIncrement = 0x0B08;
			constexpr uintptr_t TargetSpeedBlend = 0x0B0C;
			constexpr uintptr_t MaxVelocityPitch = 0x0B10;
			constexpr uintptr_t LastSpeedIncrementTime = 0x0B14;
			constexpr uintptr_t TargetSpeedIncrementTime = 0x0B18;
			constexpr uintptr_t MinGlowBrightness = 0x0B1C;
			constexpr uintptr_t MaxGlowBrightness = 0x0B20;
			constexpr uintptr_t PulseSpeedScale = 0x0B24;
			constexpr uintptr_t PulseBrightnessScale = 0x0B28;
			constexpr uintptr_t PulseMinBrightness = 0x0B2C;
			constexpr uintptr_t PulseLifetime = 0x0B30;
			constexpr uintptr_t GlowDefaultColor = 0x0B34;
			constexpr uintptr_t MaxSpeedColor = 0x0B44;
			constexpr uintptr_t AudioCurveName = 0x0B54;
			constexpr uintptr_t AudioIntensityName = 0x0B5C;
			constexpr uintptr_t FXEvent_TeamChanged = 0x0B68;
			constexpr uintptr_t FXEvent_IntensityChanged = 0x0B70;
			constexpr uintptr_t Bitfields_0x0B78 = 0x0B78;  // Multiple: bSwapTeamOnWorldHit, bBackwardsDirectionCheckEnabled
		}

		namespace Ball_Haunted_TA {
			constexpr uintptr_t SeekPositionRangeLength = 0x0AF0;
			constexpr uintptr_t SeekPositionRangeWidth = 0x0AF8;
			constexpr uintptr_t SeekPositionRangeHeight = 0x0B00;
			constexpr uintptr_t NextSeekTimeRange = 0x0B08;
			constexpr uintptr_t TrappedHoverHeight = 0x0B10;
			constexpr uintptr_t HorizontalSpeed = 0x0B14;
			constexpr uintptr_t VerticalSpeed = 0x0B18;
			constexpr uintptr_t ArrivalDistance = 0x0B1C;
			constexpr uintptr_t TrappedHorizontalSpeed = 0x0B20;
			constexpr uintptr_t TrappedVerticalSpeed = 0x0B24;
			constexpr uintptr_t TrappedCaptureTime = 0x0B28;
			constexpr uintptr_t HitPhysicsDuration = 0x0B2C;
			constexpr uintptr_t ReplicatedBeamBrokenValue = 0x0B30;
			constexpr uintptr_t LastTeamTouch = 0x0B31;
			constexpr uintptr_t DeactivatedGoalIndex = 0x0B32;
			constexpr uintptr_t TotalActiveBeams = 0x0B33;
			constexpr uintptr_t SeekTarget = 0x0B34;
			constexpr uintptr_t NextNeutralTime = 0x0B40;
			constexpr uintptr_t Bitfields_0x0B44 = 0x0B44;  // Multiple: bHitPhysicsActive, bIsBallBeamed, bIsTrapped
			constexpr uintptr_t CurrentCaptureTime = 0x0B48;
			constexpr uintptr_t CaptureTimePercentage = 0x0B4C;
			constexpr uintptr_t CaptureTimeAtExit = 0x0B50;
			constexpr uintptr_t ActiveGoal = 0x0B58;
			constexpr uintptr_t NumActiveBeamsByTeam = 0x0B60;
		}

		namespace Ball_TA {
			constexpr uintptr_t StaticMesh = 0x07A8;
			constexpr uintptr_t TranslucentStaticMesh = 0x07B0;
			constexpr uintptr_t MeshTranslucency = 0x07B8;
			constexpr uintptr_t TranslucentMaterials = 0x07C0;
			constexpr uintptr_t CarInteraction = 0x07D0;
			constexpr uintptr_t EndOfGameFXArchetype = 0x0808;
			constexpr uintptr_t WarnFXActorArchetype = 0x0810;
			constexpr uintptr_t WarnFXActor = 0x0818;
			constexpr uintptr_t ExplosionArchetype = 0x0820;
			constexpr uintptr_t NoGoalExplosionArchetype = 0x0828;
			constexpr uintptr_t Bitfields_0x0830 = 0x0830;  // Multiple: bAllowPlayerExplosionOverride, bNotifyGroundHit, bAwardDemolishCredit, bEndOfGameHidden, bFadeIn, bFadeOut, bPredictionOnGround, bCanBeAttached, bItemFreeze, bWarnBallReset, bCanBeScored, bPossessionEnabled
			constexpr uintptr_t MagnusCoefficient = 0x0834;
			constexpr uintptr_t MagnusMinSpeed = 0x0840;
			constexpr uintptr_t AngularVelocityDamping = 0x0844;
			constexpr uintptr_t BallHitSpinScale = 0x0848;
			constexpr uintptr_t BallCamTarget = 0x0850;
			constexpr uintptr_t Radius = 0x0858;
			constexpr uintptr_t SpawnWidth = 0x085C;
			constexpr uintptr_t VisualRadius = 0x0860;
			constexpr uintptr_t Touches = 0x0868;
			constexpr uintptr_t VehicleDemolishMode = 0x0878;
			constexpr uintptr_t HitTeamNum = 0x0879;
			constexpr uintptr_t LastCalculateCarHit = 0x087C;
			constexpr uintptr_t InitialLocation = 0x0880;
			constexpr uintptr_t InitialRotation = 0x088C;
			constexpr uintptr_t LastHitWorldTime = 0x0898;
			constexpr uintptr_t ReplicatedBallScale = 0x089C;
			constexpr uintptr_t ReplicatedBallMesh = 0x08A0;
			constexpr uintptr_t ReplicatedWorldBounceScale = 0x08A8;
			constexpr uintptr_t ReplicatedBallGravityScale = 0x08AC;
			constexpr uintptr_t ReplicatedBallMaxLinearSpeedScale = 0x08B0;
			constexpr uintptr_t ReplicatedAddedCarBounceScale = 0x08B4;
			constexpr uintptr_t AdditionalCarGroundBounceScaleZ = 0x08B8;
			constexpr uintptr_t AdditionalCarGroundBounceScaleXY = 0x08BC;
			constexpr uintptr_t ReplicatedPhysMatOverride = 0x08C0;
			constexpr uintptr_t GameBallIndex = 0x08C8;
			constexpr uintptr_t GameEvent = 0x08D0;
			constexpr uintptr_t ReplicatedExplosionData = 0x08D8;
			constexpr uintptr_t ReplicatedExplosionDataExtended = 0x08F0;
			constexpr uintptr_t Explosion = 0x0910;
			constexpr uintptr_t ExplosionTime = 0x0918;
			constexpr uintptr_t OldLocation = 0x091C;
			constexpr uintptr_t FadeMaterials = 0x0928;
			constexpr uintptr_t PredictionTimestep = 0x0938;
			constexpr uintptr_t PredictedPositions = 0x0940;
			constexpr uintptr_t LastPredictionTime = 0x0950;
			constexpr uintptr_t GoalPenetration = 0x0958;
			constexpr uintptr_t GroundForce = 0x0980;
			constexpr uintptr_t CurrentAffector = 0x0988;
			constexpr uintptr_t TrajectoryComponent = 0x0990;
			constexpr uintptr_t PitchTekComponent = 0x0998;
			constexpr uintptr_t GoalExplosionOrientation = 0x09A0;
			constexpr uintptr_t PossessionFXActorArchetype = 0x09A8;
			constexpr uintptr_t PossessionFXActor = 0x09B0;
		}

		namespace Ball_Trajectory_TA {
			constexpr uintptr_t AccurateTrajectoryPoints = 0x0AF0;
			constexpr uintptr_t AllPoints = 0x0B00;
			constexpr uintptr_t LastCalculateTime = 0x0B10;
			constexpr uintptr_t FixedDeltaTime = 0x0B14;
			constexpr uintptr_t TotalPathDistance = 0x0B18;
			constexpr uintptr_t FrameCount = 0x0B1C;
			constexpr uintptr_t TotalStepCount = 0x0B20;
			constexpr uintptr_t TotalFrameCount = 0x0B24;
			constexpr uintptr_t CurrentStepCount = 0x0B28;
			constexpr uintptr_t StepToPutAPointAt = 0x0B2C;
			constexpr uintptr_t LastLocation = 0x0B30;
			constexpr uintptr_t LastVelocity = 0x0B3C;
			constexpr uintptr_t LastAngularVelocity = 0x0B48;
			constexpr uintptr_t LastRotation = 0x0B54;
			constexpr uintptr_t TrajectorySettings = 0x0B60;
			constexpr uintptr_t TrajectoryComponentToUpdate = 0x0B78;
		}

		namespace BanSave_TA {
			constexpr uintptr_t bViewedLastChanceModal = 0x00C8;
		}

		namespace BanSync_TA {
			constexpr uintptr_t BanMessages = 0x0060;
		}

		namespace BeamTraceComponent_TA {
			constexpr uintptr_t BeamSystems = 0x00A8;
			constexpr uintptr_t TraceDistance = 0x00B8;
			constexpr uintptr_t MinRetraceRate = 0x00BC;
			constexpr uintptr_t MaxRetraceRate = 0x00C0;
			constexpr uintptr_t Beams = 0x00C8;
			constexpr uintptr_t FXOwner = 0x00D8;
		}

		namespace BinaryUploader_TA {
			constexpr uintptr_t Data = 0x0060;
			constexpr uintptr_t Headers = 0x0070;
		}

		namespace BlogTileCache_TA {
			constexpr uintptr_t UnreadTileIDs = 0x00C8;
			constexpr uintptr_t PreviouslyDisplayedTileIDs = 0x00D8;
		}

		namespace BlogTileConfig_X {
			constexpr uintptr_t LocalImage = 0x0060;
			constexpr uintptr_t Title = 0x0068;
			constexpr uintptr_t DescriptionHeader = 0x0078;
			constexpr uintptr_t Description = 0x0088;
		}

		namespace BlueprintErrors_TA {
			constexpr uintptr_t BlueprintNotEnoughCurrency = 0x0080;
			constexpr uintptr_t BlueprintPriceMismatch = 0x0088;
		}

		namespace BlueprintThumbnailLoadResult {
			constexpr uintptr_t ProductThumbnail = 0x0060;
			constexpr uintptr_t BlueprintThumbnail = 0x0068;
		}

		namespace BoostMesh_TA {
			constexpr uintptr_t FadeInTime = 0x0060;
			constexpr uintptr_t FadeOutTime = 0x0068;
			constexpr uintptr_t MaterialParams = 0x0070;
			constexpr uintptr_t MaxMaterialTime = 0x0080;
		}

		namespace BotConfig_TA {
			constexpr uintptr_t BotSkillByPlayerSkillCurve = 0x0078;
			constexpr uintptr_t BotSkillCurveForFTEMatches = 0x0090;
			constexpr uintptr_t BotBoostThreshold_vsAI = 0x00A8;
			constexpr uintptr_t Skills = 0x00AC;
			constexpr uintptr_t AvatarIDs = 0x00C0;
			constexpr uintptr_t BannerIDs = 0x00D0;
			constexpr uintptr_t UnselectedAvatarIDs = 0x00E0;
			constexpr uintptr_t UnselectedBannerIDs = 0x00F0;
			constexpr uintptr_t AllowedAvatarIDs = 0x0100;
			constexpr uintptr_t AllowedBannerIDs = 0x0110;
			constexpr uintptr_t IgnoredAvatarIDs = 0x0120;
			constexpr uintptr_t IgnoredBannerIDs = 0x0130;
		}

		namespace BotReplacement_TA {
			constexpr uintptr_t ReplacingBotPRI = 0x0060;
		}

		namespace BreakOutActor_Platform_TA {
			constexpr uintptr_t Bitfields_0x0268 = 0x0268;  // Multiple: bHalfSize, bPrimaryPlayerStart, bLockedDamageState
			constexpr uintptr_t TeamIndex = 0x026C;
			constexpr uintptr_t MaxDamage = 0x0270;
			constexpr uintptr_t StaticMeshComponent = 0x0278;
			constexpr uintptr_t LightEnvironment = 0x0280;
			constexpr uintptr_t FXArchetype = 0x0288;
			constexpr uintptr_t NeighborRadius = 0x0290;
			constexpr uintptr_t Neighbors = 0x0298;
			constexpr uintptr_t ConnectedCollisionMesh = 0x02A8;
			constexpr uintptr_t ConnectedCollisionMesh_HalfSize = 0x02B0;
			constexpr uintptr_t DisconnectedCollisionMesh = 0x02B8;
			constexpr uintptr_t DisconnectedCollisionMesh_HalfSize = 0x02C0;
			constexpr uintptr_t CollisionComponents = 0x02C8;
			constexpr uintptr_t LastHitTime = 0x02D8;
			constexpr uintptr_t DamageState = 0x02E0;
			constexpr uintptr_t DefaultDamageState = 0x0300;
			constexpr uintptr_t FXActor = 0x0308;
			constexpr uintptr_t PreReplayState = 0x0310;
			constexpr uintptr_t HalfSizeFirstTileScale = 0x0330;
		}

		namespace BuildInfo_TA {
			constexpr uintptr_t VersionString = 0x0060;
			constexpr uintptr_t Changelist = 0x0070;
			constexpr uintptr_t Branch = 0x0078;
			constexpr uintptr_t Label = 0x0088;
		}

		namespace CachedUnlockedProducts_TA {
			constexpr uintptr_t Products = 0x0060;
		}

		namespace CameraConfig_TA {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bFramerateIndependentInterp, bReplayFocusOnCarAfterGoal
		}

		namespace CameraSettingsActor_TA {
			constexpr uintptr_t UploadCameraDelay = 0x0268;
			constexpr uintptr_t PRI = 0x0270;
			constexpr uintptr_t ProfileSettings = 0x0278;
			constexpr uintptr_t Bitfields_0x0294 = 0x0294;  // Multiple: bUsingSecondaryCamera, bUsingBehindView, bUsingFreecam, bDirtySecondaryCamera, bDirtyBehindView
			constexpr uintptr_t CameraPitch = 0x0298;
			constexpr uintptr_t CameraYaw = 0x0299;
			constexpr uintptr_t MaxProximityDistance = 0x029C;
			constexpr uintptr_t LastRotationChangeTime = 0x02A0;
			constexpr uintptr_t LastReplicateRotationTime = 0x02A4;
		}

		namespace CameraStateSelector_Priority_TA {
			constexpr uintptr_t PriorityStates = 0x0088;
			constexpr uintptr_t bSelectFirst = 0x0098;
		}

		namespace CameraStateSelector_RandomSequence_TA {
			constexpr uintptr_t bReshuffleOnActive = 0x0090;
		}

		namespace CameraStateSelector_Sequence_TA {
			constexpr uintptr_t bResetIndexOnActive = 0x0088;
			constexpr uintptr_t StateIdx = 0x008C;
		}

		namespace CameraStateSelector_TA {
			constexpr uintptr_t States = 0x0070;
			constexpr uintptr_t Camera = 0x0080;
		}

		namespace CameraState_BallCamInverted_TA {
			constexpr uintptr_t StartBlendParams = 0x0278;
			constexpr uintptr_t bAllowBlendTimeOverride = 0x0288;
			constexpr uintptr_t DelayFromSpawn = 0x028C;
		}

		namespace CameraState_BallCam_TA {
			constexpr uintptr_t RotationRate = 0x01D8;
			constexpr uintptr_t PitchScale = 0x01DC;
			constexpr uintptr_t PitchFocusZFactor = 0x01E0;
			constexpr uintptr_t PitchExtentMin = 0x01E4;
			constexpr uintptr_t PitchExtentMax = 0x01E8;
			constexpr uintptr_t Target = 0x01F0;
			constexpr uintptr_t BasePOV = 0x01F8;
			constexpr uintptr_t OldTargetLocation = 0x0224;
			constexpr uintptr_t Bitfields_0x0230 = 0x0230;  // Multiple: bWasReverseCam, bActive
			constexpr uintptr_t TargetClasses = 0x0238;
			constexpr uintptr_t PlaneSelectSettings = 0x0248;
			constexpr uintptr_t AngleSelectSettings = 0x0258;
			constexpr uintptr_t AvailableTargets = 0x0268;
		}

		namespace CameraState_BasketballLiveReplay_TA {
			constexpr uintptr_t UnknownData00 = 0x012C;
		}

		namespace CameraState_BreakoutLiveReplay_TA {
			constexpr uintptr_t GoalVerticalOffset = 0x0130;
		}

		namespace CameraState_CameraTrack_TA {
			constexpr uintptr_t Replay = 0x00B8;
			constexpr uintptr_t FlyType = 0x00C0;
			constexpr uintptr_t bFlying = 0x00C4;
			constexpr uintptr_t LastReplayTime = 0x00C8;
			constexpr uintptr_t AccumulatedLook = 0x00CC;
			constexpr uintptr_t AccumulatedMove = 0x00D8;
			constexpr uintptr_t LastFOV = 0x00E4;
		}

		namespace CameraState_CarInverted_TA {
			constexpr uintptr_t StartBlendParams = 0x01D8;
			constexpr uintptr_t bAllowBlendTimeOverride = 0x01E8;
			constexpr uintptr_t DelayFromSpawn = 0x01EC;
		}

		namespace CameraState_CarPreview_TA {
			constexpr uintptr_t SideOffsets = 0x0090;
			constexpr uintptr_t ViewOffsets = 0x00A0;
			constexpr uintptr_t BlendRate = 0x00B0;
			constexpr uintptr_t MinPitch = 0x00B4;
			constexpr uintptr_t MaxPitch = 0x00B8;
			constexpr uintptr_t CurrentOrientation = 0x00BC;
			constexpr uintptr_t CurrentSideOffset = 0x00E8;
			constexpr uintptr_t RotationOffset = 0x00EC;
			constexpr uintptr_t PrevPremiumGarageState = 0x00F8;
			constexpr uintptr_t TargetsCache = 0x0100;
		}

		namespace CameraState_CarRef_TA {
			constexpr uintptr_t Car = 0x0098;
			constexpr uintptr_t CameraSettings = 0x00A0;
		}

		namespace CameraState_Car_KnockOut_TA {
			constexpr uintptr_t PotentialTarget = 0x0278;
		}

		namespace CameraState_Car_TA {
			constexpr uintptr_t InterpToAirRate = 0x00A8;
			constexpr uintptr_t InterpToGroundRate = 0x00AC;
			constexpr uintptr_t FocusInterp = 0x00B0;
			constexpr uintptr_t FocusOffsetInterp = 0x00D8;
			constexpr uintptr_t DistanceInterp = 0x0100;
			constexpr uintptr_t GroundRotationInterpRate = 0x0128;
			constexpr uintptr_t GroundRotationInterpRateWall = 0x012C;
			constexpr uintptr_t AirVelocityInfluence = 0x0130;
			constexpr uintptr_t AirVelocityInfluenceMaxSpeed = 0x0134;
			constexpr uintptr_t DistanceSpeedScale = 0x0138;
			constexpr uintptr_t DistanceOffsetMin = 0x013C;
			constexpr uintptr_t MaxSpeedFOV = 0x0140;
			constexpr uintptr_t FOVInterpSpeed = 0x0144;
			constexpr uintptr_t SupersonicFOV = 0x0148;
			constexpr uintptr_t SupersonicFOVInterpSpeed = 0x014C;
			constexpr uintptr_t BouncyChassisScale = 0x0150;
			constexpr uintptr_t RollScale = 0x0154;
			constexpr uintptr_t GroundNormalInterpRate = 0x0158;
			constexpr uintptr_t AirGroundBlend = 0x015C;
			constexpr uintptr_t ViewOffset = 0x0160;
			constexpr uintptr_t Bitfields_0x018C = 0x018C;  // Multiple: bFirstExecution, bOnGround
			constexpr uintptr_t GroundNormal = 0x0190;
			constexpr uintptr_t CameraStartDistance = 0x019C;
			constexpr uintptr_t Config = 0x01A0;
			constexpr uintptr_t ProximityDistance = 0x01A8;
			constexpr uintptr_t ProximityDetectionSpeedCap = 0x01AC;
			constexpr uintptr_t ProximityDistanceMultiplier = 0x01B0;
			constexpr uintptr_t ProximityDetectionMultiplier = 0x01B4;
			constexpr uintptr_t ProximityDistanceBlendInSpeed = 0x01B8;
			constexpr uintptr_t ProximityDistanceBlendOutSpeed = 0x01BC;
			constexpr uintptr_t ProximityTargetClass = 0x01C0;
			constexpr uintptr_t ProximityDistanceLimits = 0x01C8;
		}

		namespace CameraState_Countdown_TA {
			constexpr uintptr_t MaxCarsShown = 0x0180;
			constexpr uintptr_t TimePerCar = 0x0184;
			constexpr uintptr_t bSwitchTeamsEveryCar = 0x0188;
			constexpr uintptr_t ShownCars = 0x0190;
			constexpr uintptr_t CurrentCar = 0x01A0;
			constexpr uintptr_t NextCar = 0x01A8;
			constexpr uintptr_t LastTeam = 0x01B0;
			constexpr uintptr_t LastChangeCarTime = 0x01B4;
		}

		namespace CameraState_CustomFocus_TA {
			constexpr uintptr_t RotationRate = 0x01D8;
			constexpr uintptr_t PitchScale = 0x01DC;
			constexpr uintptr_t PitchFocusZFactor = 0x01E0;
			constexpr uintptr_t PitchExtentMin = 0x01E4;
			constexpr uintptr_t PitchExtentMax = 0x01E8;
			constexpr uintptr_t FocusTarget = 0x01F0;
		}

		namespace CameraState_Demolished_TA {
			constexpr uintptr_t RotationInterpRate = 0x0098;
			constexpr uintptr_t DemolishedPawn = 0x00A0;
			constexpr uintptr_t StateTime = 0x00A8;
			constexpr uintptr_t InitialFOV = 0x00AC;
			constexpr uintptr_t FOVBlendTime = 0x00B0;
			constexpr uintptr_t Bitfields_0x00B4 = 0x00B4;  // Multiple: bInterp, bTrackDemolisher
			constexpr uintptr_t MaxZoomInFOV = 0x00B8;
			constexpr uintptr_t MaxFOVBlendDistance = 0x00BC;
			constexpr uintptr_t Distance = 0x00C0;
		}

		namespace CameraState_DirectorBallCam_TA {
			constexpr uintptr_t ForcedCameraSettings = 0x0278;
		}

		namespace CameraState_DirectorCountdownRotate_TA {
			constexpr uintptr_t FOV = 0x01B8;
			constexpr uintptr_t Distance = 0x01BC;
			constexpr uintptr_t InitialRotation = 0x01C0;
			constexpr uintptr_t RotationSpeed = 0x01CC;
		}

		namespace CameraState_DirectorCountdownTailPass_TA {
			constexpr uintptr_t DistanceFromCar = 0x01B8;
			constexpr uintptr_t InitialRotation = 0x01BC;
			constexpr uintptr_t RotationSpeed = 0x01C8;
			constexpr uintptr_t FOV = 0x01D4;
		}

		namespace CameraState_DirectorGoalScorer_TA {
			constexpr uintptr_t Distance = 0x0180;
			constexpr uintptr_t FOV = 0x0184;
			constexpr uintptr_t FocusCar = 0x0188;
		}

		namespace CameraState_DirectorKickoff_TA {
			constexpr uintptr_t Distance = 0x0180;
			constexpr uintptr_t RotationOffset = 0x0184;
			constexpr uintptr_t FOV = 0x0190;
			constexpr uintptr_t BlendToParams = 0x0194;
		}

		namespace CameraState_DirectorMoving_TA {
			constexpr uintptr_t StartOffset = 0x0180;
			constexpr uintptr_t EndOffset = 0x018C;
			constexpr uintptr_t StartRotation = 0x0198;
			constexpr uintptr_t EndRotation = 0x01A4;
			constexpr uintptr_t PanBlend = 0x01B0;
			constexpr uintptr_t StartFOV = 0x01C0;
			constexpr uintptr_t EndFOV = 0x01C4;
			constexpr uintptr_t LoopType = 0x01C8;
			constexpr uintptr_t CachedStart = 0x01CC;
			constexpr uintptr_t CachedEnd = 0x01D8;
		}

		namespace CameraState_DirectorPlayerView_TA {
			constexpr uintptr_t BallCameraState = 0x0180;
			constexpr uintptr_t MinimumHit = 0x0188;
			constexpr uintptr_t MinimumHitSeparation = 0x018C;
			constexpr uintptr_t StaleDistance = 0x0190;
			constexpr uintptr_t MinimumTimeToBall = 0x0194;
			constexpr uintptr_t CarChangeTimePadding = 0x0198;
			constexpr uintptr_t CarChangeBlendParams = 0x019C;
			constexpr uintptr_t CarChangeBlendTimeForDistance = 0x01B0;
			constexpr uintptr_t MinBlendContinuity = 0x01C8;
			constexpr uintptr_t MaxBlendDistance = 0x01CC;
			constexpr uintptr_t MaintainCurrentDistance = 0x01D0;
			constexpr uintptr_t MaintainCurrentHitBias = 0x01D4;
			constexpr uintptr_t MaintainBallScorability = 0x01D8;
			constexpr uintptr_t MaintainBallScorabilityViewRating = 0x01DC;
			constexpr uintptr_t ContinuityBias = 0x01E0;
			constexpr uintptr_t MinimumViewRating = 0x01F8;
			constexpr uintptr_t AttackerBias = 0x01FC;
			constexpr uintptr_t AttackingGoalDistance = 0x0200;
			constexpr uintptr_t BadFocusDistance = 0x0204;
			constexpr uintptr_t BadFocusViewRating = 0x0208;
			constexpr uintptr_t BadFocusViewRatingDuration = 0x020C;
			constexpr uintptr_t FocusCar = 0x0210;
			constexpr uintptr_t LastCarChangeTime = 0x0218;
			constexpr uintptr_t Bitfields_0x021C = 0x021C;  // Multiple: bIsRelevant, bBlending, bExceptionallyBadFocus, bBadViewRating
			constexpr uintptr_t BlendTime = 0x0220;
			constexpr uintptr_t SnapshotPOV = 0x0224;
			constexpr uintptr_t BadViewRatingStart = 0x0250;
		}

		namespace CameraState_DirectorProxy_TA {
			constexpr uintptr_t GameEvent = 0x00B8;
			constexpr uintptr_t GameObserver = 0x00C0;
			constexpr uintptr_t MinimumStateTime = 0x00C8;
			constexpr uintptr_t DistToBallWeight = 0x00D0;
			constexpr uintptr_t PlayersInViewWeight = 0x00E8;
			constexpr uintptr_t ViewPitchWeight = 0x0100;
			constexpr uintptr_t GoalInViewWeight = 0x0118;
			constexpr uintptr_t CanSeeNewViewContinuity = 0x011C;
			constexpr uintptr_t SimilarOrientationContinuity = 0x0120;
			constexpr uintptr_t SimilarCarVelocityContinuity = 0x0138;
			constexpr uintptr_t FieldForward = 0x0150;
			constexpr uintptr_t FieldSide = 0x015C;
			constexpr uintptr_t bActive = 0x0168;
			constexpr uintptr_t Director = 0x0170;
			constexpr uintptr_t CameraSave = 0x0178;
		}

		namespace CameraState_Director_TA {
			constexpr uintptr_t GameEvent = 0x00B8;
			constexpr uintptr_t IdleSelector = 0x00C0;
			constexpr uintptr_t CountdownSelector = 0x00C8;
			constexpr uintptr_t KickoffSelector = 0x00D0;
			constexpr uintptr_t DefaultSelector = 0x00D8;
			constexpr uintptr_t MinTransitionTimeLimits = 0x00E0;
			constexpr uintptr_t CurrentSelector = 0x00F0;
			constexpr uintptr_t CurrentState = 0x00F8;
			constexpr uintptr_t bInitialized = 0x0100;
		}

		namespace CameraState_Edit_TA {
			constexpr uintptr_t bLocalMovement = 0x0098;
		}

		namespace CameraState_Freecam_TA {
			constexpr uintptr_t ViewOffset_Near = 0x00A8;
			constexpr uintptr_t ViewOffset_Far = 0x00D4;
			constexpr uintptr_t ViewOffset = 0x0100;
		}

		namespace CameraState_IntroMenu_TA {
			constexpr uintptr_t FOV = 0x0090;
			constexpr uintptr_t Offset = 0x0094;
			constexpr uintptr_t BlendRate = 0x00A0;
			constexpr uintptr_t Focus = 0x00A8;
			constexpr uintptr_t FocusActors = 0x00B0;
		}

		namespace CameraState_LiveReplay_TA {
			constexpr uintptr_t LocationOffset = 0x0090;
			constexpr uintptr_t FocusSpeedOverTime = 0x00A0;
			constexpr uintptr_t CarBallFocusBlendDistance = 0x00B8;
			constexpr uintptr_t Distance = 0x00BC;
			constexpr uintptr_t FOV = 0x00C0;
			constexpr uintptr_t SlomoInterpTime = 0x00C4;
			constexpr uintptr_t SlomoDistance = 0x00C8;
			constexpr uintptr_t SlomoFOV = 0x00CC;
			constexpr uintptr_t VelocityPrediction = 0x00D0;
			constexpr uintptr_t InterpToFieldCenterRate = 0x00DC;
			constexpr uintptr_t InterpToFieldCenterOffset = 0x00E0;
			constexpr uintptr_t ExplosionFocusDelay = 0x00E4;
			constexpr uintptr_t ScorerOffsetInterpSpeed = 0x00E8;
			constexpr uintptr_t SoccarGame = 0x00F0;
			constexpr uintptr_t FocusCar = 0x00F8;
			constexpr uintptr_t FocusBall = 0x0100;
			constexpr uintptr_t Bitfields_0x0108 = 0x0108;  // Multiple: bHasDoneFirstUpdate, bCanUpdate, bSetGoalScorerFocusOffset
			constexpr uintptr_t LastFocusChangeTime = 0x010C;
			constexpr uintptr_t SlomoTime = 0x0110;
			constexpr uintptr_t Goal = 0x0118;
			constexpr uintptr_t GoalScorerFocusOffset = 0x0120;
		}

		namespace CameraState_LobbyFocus_TA {
			constexpr uintptr_t XOffsetDistance = 0x0090;
			constexpr uintptr_t CameraOffsetPitch = 0x0094;
			constexpr uintptr_t AngleOffsets = 0x0098;
			constexpr uintptr_t TargetCar = 0x00A8;
			constexpr uintptr_t TargetCamera = 0x00B0;
		}

		namespace CameraState_Lobby_TA {
			constexpr uintptr_t bInitDefaultPOV = 0x0090;
			constexpr uintptr_t TeamSettings = 0x0098;
			constexpr uintptr_t FadeInDuration = 0x00A8;
			constexpr uintptr_t DefaultCamera = 0x00AC;
		}

		namespace CameraState_MenuCamActor_TA {
			constexpr uintptr_t CameraTag = 0x0210;
		}

		namespace CameraState_PodiumSpotlight_TA {
			constexpr uintptr_t CameraDistance = 0x0090;
			constexpr uintptr_t CameraOffsetYawDeg = 0x0094;
			constexpr uintptr_t CameraOffsetPitchDeg = 0x0098;
			constexpr uintptr_t XOffsetDistanceStart = 0x009C;
			constexpr uintptr_t XOffsetDistanceEnd = 0x00A0;
			constexpr uintptr_t XOffsetDollySpeed = 0x00A4;
			constexpr uintptr_t DefaultFOV = 0x00A8;
			constexpr uintptr_t FadeInDuration = 0x00AC;
			constexpr uintptr_t CameraZOffset = 0x00B0;
			constexpr uintptr_t AnimDistanceOffset = 0x00B4;
			constexpr uintptr_t AnimPitchOffset = 0x00B8;
			constexpr uintptr_t AnimZOffset = 0x00BC;
			constexpr uintptr_t CachedCars = 0x00C0;
		}

		namespace CameraState_PrePodiumSpotlight_TA {
			constexpr uintptr_t ElapsedTime = 0x0090;
			constexpr uintptr_t bFadeOut = 0x0094;
			constexpr uintptr_t FadeOutDelay = 0x0098;
			constexpr uintptr_t FadeOutDuration = 0x009C;
		}

		namespace CameraState_PremiumGarage_TA {
			constexpr uintptr_t BetweenPremiumCameraBlend = 0x0110;
			constexpr uintptr_t FadeInFromBlackTime = 0x0120;
			constexpr uintptr_t FadeToBlackTime = 0x0124;
			constexpr uintptr_t PitchDeadzone = 0x0128;
			constexpr uintptr_t PitchSensitivity = 0x012C;
			constexpr uintptr_t PitchAutocorrectCurve = 0x0130;
			constexpr uintptr_t PitchMaxSpeed = 0x0148;
			constexpr uintptr_t PitchBlendbackModifier = 0x014C;
			constexpr uintptr_t PitchBlendbackMin = 0x0150;
			constexpr uintptr_t CameraReturnBlendCurve = 0x0158;
			constexpr uintptr_t LastAdjustTime = 0x0170;
			constexpr uintptr_t TurntableActor = 0x0178;
			constexpr uintptr_t Shell = 0x0180;
		}

		namespace CameraState_Prespawn_TA {
			constexpr uintptr_t CameraConfig = 0x0098;
			constexpr uintptr_t CameraSave = 0x00A0;
		}

		namespace CameraState_ReplayAutoCam_TA {
			constexpr uintptr_t FOVInterpSpeed = 0x00B8;
			constexpr uintptr_t StartViewFocusTime = 0x00BC;
			constexpr uintptr_t FocusPitchInterpSpeed = 0x00C0;
			constexpr uintptr_t FocusYawInterpSpeed = 0x00C4;
			constexpr uintptr_t AerialFOV = 0x00C8;
			constexpr uintptr_t CountDownFOV = 0x00CC;
			constexpr uintptr_t CountDownPanSpeed = 0x00D0;
			constexpr uintptr_t CountDownRotateSpeed = 0x00D4;
			constexpr uintptr_t CountDownPanBlendAmount = 0x00D8;
			constexpr uintptr_t CountDownFocusActorStartTime = 0x00DC;
			constexpr uintptr_t LocationBlendSpeed = 0x00E0;
			constexpr uintptr_t BallAerialZStartTime = 0x00E4;
			constexpr uintptr_t MinBallAerialZHeight = 0x00E8;
			constexpr uintptr_t MinPlayerAerialZHeight = 0x00EC;
			constexpr uintptr_t MinFocusActorViewTime = 0x00F0;
			constexpr uintptr_t BallFloorFocusPercent = 0x00F4;
			constexpr uintptr_t LocationAngleInterpSpeed = 0x00F8;
			constexpr uintptr_t LastLocationAngleUpdateTime = 0x00FC;
			constexpr uintptr_t MinStartRadiusForPlayerAerial = 0x0100;
			constexpr uintptr_t MaxStartRadiusForPlayerAerial = 0x0104;
			constexpr uintptr_t DesiredCameraDistance = 0x0108;
			constexpr uintptr_t ResetToMapDefaultTime = 0x010C;
			constexpr uintptr_t MaxWaitTimeTillBallHit = 0x0110;
			constexpr uintptr_t FocusActorZViewOffset = 0x0114;
			constexpr uintptr_t FloorTraceDistance = 0x0118;
			constexpr uintptr_t BackAwayFromWallDistance = 0x011C;
			constexpr uintptr_t NoCarsNearBallDistance = 0x0120;
			constexpr uintptr_t MinPlayerCameraFloorHeight = 0x0124;
			constexpr uintptr_t FocusPointInterpSpeed = 0x0128;
			constexpr uintptr_t MinMaxPitch = 0x012C;
			constexpr uintptr_t LastDesiredLocationBlendSpeed = 0x0130;
			constexpr uintptr_t AdditionalFocusZ = 0x0134;
			constexpr uintptr_t TimeSinceIgnoredGoalFocusExtent = 0x0138;
			constexpr uintptr_t LastTimeAPlayerWasNearBall = 0x013C;
			constexpr uintptr_t AdditionalBackAwayFromBallSpeed = 0x0140;
			constexpr uintptr_t GoalScorerFocusDistance = 0x0144;
			constexpr uintptr_t MapResetStartDistance = 0x0148;
			constexpr uintptr_t MapResetStartHeight = 0x014C;
			constexpr uintptr_t GoalScoredDistance = 0x0150;
			constexpr uintptr_t MaxGoalYZoomOutDistance = 0x0154;
			constexpr uintptr_t MaxGoalXZoomOutDistance = 0x0158;
			constexpr uintptr_t MinCameraDistanceToBall = 0x015C;
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bSnapFOV, bSnapToFocus, bBallHasBeenHit, bHasGoalScorerFocus, bHitWallLastFrame
			constexpr uintptr_t BallFloorLocation = 0x0164;
			constexpr uintptr_t BallFloorNormal = 0x0170;
			constexpr uintptr_t LastCarFocusOffset = 0x017C;
			constexpr uintptr_t CountDownPanDirection = 0x0188;
			constexpr uintptr_t CountDownPanStartOffset = 0x0194;
			constexpr uintptr_t CountDownRotateOffset = 0x01A0;
			constexpr uintptr_t LastFocusOffset = 0x01AC;
			constexpr uintptr_t LastFocusLocation = 0x01B8;
			constexpr uintptr_t LastDesiredLocation = 0x01C4;
			constexpr uintptr_t LocationAngle = 0x01D0;
			constexpr uintptr_t DesiredLocationAngle = 0x01DC;
			constexpr uintptr_t DesiredRotation = 0x01E8;
			constexpr uintptr_t MapResetStartRotation = 0x01F4;
			constexpr uintptr_t FocusActor = 0x0200;
			constexpr uintptr_t LastScorer = 0x0208;
			constexpr uintptr_t AerialPRIs = 0x0210;
			constexpr uintptr_t CountDownPRIs = 0x0220;
			constexpr uintptr_t GoalFocus = 0x0230;
			constexpr uintptr_t CountDownFocusType = 0x0238;
			constexpr uintptr_t Ball = 0x0240;
			constexpr uintptr_t SoccarGame = 0x0248;
			constexpr uintptr_t ReplayCameraState = 0x0250;
			constexpr uintptr_t CameraDistanceLimits = 0x0258;
			constexpr uintptr_t CameraZLimits = 0x0264;
			constexpr uintptr_t CameraMoveSpeedLimits = 0x0270;
			constexpr uintptr_t CameraMoveSpeedZLimits = 0x027C;
			constexpr uintptr_t PlayerCameraDistanceLimits = 0x0288;
			constexpr uintptr_t RotateSpeedLimits = 0x0294;
			constexpr uintptr_t PlayerFocusBlendSpeedLimits = 0x02A0;
			constexpr uintptr_t AerialPredictionLimits = 0x02AC;
			constexpr uintptr_t CameraSave = 0x02B8;
		}

		namespace CameraState_ReplayFly_TA {
			constexpr uintptr_t UnknownData00 = 0x00B4;
		}

		namespace CameraState_ReplayFollow_TA {
			constexpr uintptr_t FollowDistance = 0x00B8;
			constexpr uintptr_t MinFollowDistance = 0x00BC;
			constexpr uintptr_t MaxFollowDistance = 0x00C0;
			constexpr uintptr_t FollowRotationRateCurve = 0x00C8;
			constexpr uintptr_t bFirstExecution = 0x00E0;
		}

		namespace CameraState_ReplayHardAttach_TA {
			constexpr uintptr_t UnknownData00 = 0x00D4;
		}

		namespace CameraState_ReplayPlayerView_TA {
			constexpr uintptr_t CarCameraState = 0x00B8;
			constexpr uintptr_t BallCameraState = 0x00C0;
			constexpr uintptr_t CurrentCameraState = 0x00C8;
			constexpr uintptr_t CameraSave = 0x00D0;
		}

		namespace CameraState_ReplaySoftAttach_TA {
			constexpr uintptr_t AttachRotation = 0x00B8;
			constexpr uintptr_t AttachOffset = 0x00C4;
			constexpr uintptr_t MaxDistance = 0x00D0;
		}

		namespace CameraState_Replay_TA {
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bLocalMovement, bClipToField, bUIHighlightFocus
			constexpr uintptr_t OldFocusActor = 0x00A0;
			constexpr uintptr_t OldFocusActorLocation = 0x00A8;
		}

		namespace CameraState_SeasonIntro_TA {
			constexpr uintptr_t RotateSpeed = 0x0090;
			constexpr uintptr_t ZHeightPercent = 0x0094;
			constexpr uintptr_t XOffsetDistance = 0x0098;
			constexpr uintptr_t DefaultFOV = 0x009C;
		}

		namespace CameraState_StadiumSide_TA {
			constexpr uintptr_t TrackOffset = 0x0180;
			constexpr uintptr_t TrackSize = 0x018C;
			constexpr uintptr_t TrackProximityOffsetSide = 0x0198;
			constexpr uintptr_t TrackProximityOffsetLerp = 0x01B0;
			constexpr uintptr_t FocusLerp = 0x01B8;
			constexpr uintptr_t TrackLerpSide = 0x01D0;
			constexpr uintptr_t TrackLerpForward = 0x01E8;
			constexpr uintptr_t CarDistWeight = 0x0200;
			constexpr uintptr_t GoalDistWeight = 0x0218;
			constexpr uintptr_t BallPredictionTime = 0x0230;
			constexpr uintptr_t MinFOV = 0x0234;
			constexpr uintptr_t MaxFOV = 0x0238;
			constexpr uintptr_t SmoothFOVLerp = 0x023C;
			constexpr uintptr_t TrackCenter = 0x0240;
			constexpr uintptr_t TrackRight = 0x024C;
			constexpr uintptr_t TrackForward = 0x0258;
			constexpr uintptr_t TrackStart = 0x0264;
			constexpr uintptr_t TrackEnd = 0x0270;
			constexpr uintptr_t FieldStart = 0x027C;
			constexpr uintptr_t FieldEnd = 0x0288;
			constexpr uintptr_t SmoothedFocus = 0x0294;
			constexpr uintptr_t SmoothedFieldPct = 0x02A0;
			constexpr uintptr_t SmoothedFOV = 0x02AC;
			constexpr uintptr_t SmoothedProximityOffsetSide = 0x02B0;
			constexpr uintptr_t bCut = 0x02B4;
		}

		namespace CameraState_TA {
			constexpr uintptr_t Bitfields_0x0090 = 0x0090;  // Multiple: bShowCarHUD, bAllowRearCamera
			constexpr uintptr_t StateStartTime = 0x0094;
		}

		namespace CameraState_Waiting_TA {
			constexpr uintptr_t MinExecutionTime = 0x0210;
			constexpr uintptr_t ExecutionTime = 0x0214;
		}

		namespace CameraTrackPoint_TA {
			constexpr uintptr_t frame = 0x0060;
			constexpr uintptr_t Time = 0x0064;
			constexpr uintptr_t Location = 0x0068;
			constexpr uintptr_t Rotation = 0x0074;
			constexpr uintptr_t FOV = 0x0080;
		}

		namespace CameraTrack_TA {
			constexpr uintptr_t Points = 0x0060;
			constexpr uintptr_t LocationCurve = 0x0070;
			constexpr uintptr_t RotationCurve = 0x0088;
			constexpr uintptr_t FOVCurve = 0x00A0;
		}

		namespace CameraVolume_KnockOut_TA {
			constexpr uintptr_t UnknownData00 = 0x02A4;
		}

		namespace Camera_Edit_TA {
			constexpr uintptr_t CameraMode = 0x07C0;
			constexpr uintptr_t CurrentCameraState = 0x07C8;
		}

		namespace Camera_GameEditor_TA {
			constexpr uintptr_t CameraMode = 0x07C0;
			constexpr uintptr_t CurrentCameraState = 0x07C8;
		}

		namespace Camera_MainMenu_TA {
			constexpr uintptr_t HandheldCamFrequency = 0x06C8;
			constexpr uintptr_t HandheldCamAmplitude = 0x06D4;
			constexpr uintptr_t CurrentState = 0x06E0;
		}

		namespace Camera_Replay_TA {
			constexpr uintptr_t OverrideStates = 0x07C0;
			constexpr uintptr_t FocusActorString = 0x07D0;
			constexpr uintptr_t CameraMode = 0x07E0;
			constexpr uintptr_t DefaultCameraMode = 0x07E8;
			constexpr uintptr_t DOFDistanceLimits = 0x07F0;
			constexpr uintptr_t DOFInfLimits = 0x07FC;
			constexpr uintptr_t DOFKernelLimits = 0x0808;
			constexpr uintptr_t GreenScreenLimits = 0x0814;
			constexpr uintptr_t BloomScaleLimits = 0x0820;
			constexpr uintptr_t FilterOverlayLimits = 0x082C;
			constexpr uintptr_t Bitfields_0x0838 = 0x0838;  // Multiple: bReplayTranslucency, bGreenScreen
			constexpr uintptr_t GreenScreenColorIndex = 0x083C;
			constexpr uintptr_t CurrentCameraState = 0x0840;
			constexpr uintptr_t PreviousCameraProxyState = 0x0848;
		}

		namespace Camera_TA {
			constexpr uintptr_t SwivelExtentSlow = 0x06C8;
			constexpr uintptr_t SwivelExtentFast = 0x06D4;
			constexpr uintptr_t SwivelFastSpeed = 0x06E0;
			constexpr uintptr_t SwivelDieRate = 0x06E4;
			constexpr uintptr_t FOVLimits = 0x06E8;
			constexpr uintptr_t HeightLimits = 0x06F4;
			constexpr uintptr_t AngleLimits = 0x0700;
			constexpr uintptr_t DistanceLimits = 0x070C;
			constexpr uintptr_t StiffnessLimits = 0x0718;
			constexpr uintptr_t SwivelSpeedLimits = 0x0724;
			constexpr uintptr_t TransitionSpeedLimits = 0x0730;
			constexpr uintptr_t PrespawnLerpLimits = 0x073C;
			constexpr uintptr_t CameraPresetSettings = 0x0748;
			constexpr uintptr_t HorizontalSplitscreenHeightOffset = 0x0758;
			constexpr uintptr_t HorizontalSplitscreenFOVOffset = 0x075C;
			constexpr uintptr_t VerticalSplitscreenFOVOffset = 0x0760;
			constexpr uintptr_t ClipRate = 0x0764;
			constexpr uintptr_t CurrentSwivel = 0x0768;
			constexpr uintptr_t Demolisher = 0x0778;
			constexpr uintptr_t Bitfields_0x0780 = 0x0780;  // Multiple: bDemolished, bGroundClampTrace
			constexpr uintptr_t DemolishedPawn = 0x0788;
			constexpr uintptr_t CameraSettings = 0x0790;
			constexpr uintptr_t GroundClampZOffset = 0x0798;
			constexpr uintptr_t CameraConfig = 0x07A0;
		}

		namespace Cannon_TA {
			constexpr uintptr_t Mesh = 0x0268;
			constexpr uintptr_t CannonAnimTree = 0x0270;
			constexpr uintptr_t CannonAnimSet = 0x0278;
			constexpr uintptr_t FullBodyAnimSlot = 0x0280;
			constexpr uintptr_t PitchControl = 0x0288;
			constexpr uintptr_t Pitch = 0x0290;
			constexpr uintptr_t EngineThrusterParticle = 0x0298;
			constexpr uintptr_t CannonFireSound = 0x02A0;
			constexpr uintptr_t FireCount = 0x02A8;
		}

		namespace CarColorSet_TA {
			constexpr uintptr_t Grayscales = 0x0080;
			constexpr uintptr_t H = 0x0090;
			constexpr uintptr_t SV = 0x00A0;
			constexpr uintptr_t ColorBlindColor = 0x00B0;
			constexpr uintptr_t DebugColors = 0x00C0;
			constexpr uintptr_t MinStadiumBrightness = 0x00D0;
		}

		namespace CarComponent_AirActivate_TA {
			constexpr uintptr_t AirActivateCount = 0x02E0;
			constexpr uintptr_t MaxAirActivateCount = 0x02E4;
			constexpr uintptr_t LocalAirActivateCount = 0x02E8;
		}

		namespace CarComponent_AirControl_Robin_TA {
			constexpr uintptr_t RandomPitch = 0x0308;
			constexpr uintptr_t RandomYaw = 0x0310;
			constexpr uintptr_t RandomRoll = 0x0318;
		}

		namespace CarComponent_AirControl_TA {
			constexpr uintptr_t AirTorque = 0x02E0;
			constexpr uintptr_t AirDamping = 0x02EC;
			constexpr uintptr_t AirTorqueScalar = 0x02F8;
			constexpr uintptr_t AirDampingScalar = 0x02FC;
			constexpr uintptr_t ThrottleForce = 0x0300;
			constexpr uintptr_t AirControlSensitivity = 0x0304;
		}

		namespace CarComponent_Boost_KO_TA {
			constexpr uintptr_t LimitVelocityXYToForceScale = 0x0390;
			constexpr uintptr_t LimitVelocityZToForceScale = 0x0394;
		}

		namespace CarComponent_Boost_TA {
			constexpr uintptr_t BoostConsumptionRate = 0x0320;
			constexpr uintptr_t MaxBoostAmount = 0x0324;
			constexpr uintptr_t StartBoostAmount = 0x0328;
			constexpr uintptr_t BoostUsed = 0x032C;
			constexpr uintptr_t CurrentBoostAmount = 0x0330;
			constexpr uintptr_t BoostModifier = 0x0334;
			constexpr uintptr_t LastBoostAmountRequestTime = 0x0338;
			constexpr uintptr_t LastBoostAmount = 0x033C;
			constexpr uintptr_t Bitfields_0x0340 = 0x0340;  // Multiple: bPendingConfirmBoostAmount, bRechargeGroundOnly, bNoBoost
			constexpr uintptr_t BoostForce = 0x0344;
			constexpr uintptr_t MinBoostTime = 0x0348;
			constexpr uintptr_t RechargeRate = 0x034C;
			constexpr uintptr_t RechargeDelay = 0x0350;
			constexpr uintptr_t UnlimitedBoostRefCount = 0x0354;
			constexpr uintptr_t BoostRestriction = 0x0358;
			constexpr uintptr_t ReplicatedBoostAmount = 0x0359;
			constexpr uintptr_t ReplicatedBoost = 0x035C;
			constexpr uintptr_t BoostAsset = 0x0360;
			constexpr uintptr_t BoostShakeState = 0x0368;
			constexpr uintptr_t ControlsSave = 0x0370;
		}

		namespace CarComponent_Dodge_KO_TA {
			constexpr uintptr_t MaxForceToVelocityDegrees = 0x03C0;
			constexpr uintptr_t MaxForceToRotationDegrees = 0x03C4;
			constexpr uintptr_t MinVelocityTransferAlpha = 0x03C8;
			constexpr uintptr_t MaxVelocityTransferAlpha = 0x03CC;
			constexpr uintptr_t VelocityTransferBlend = 0x03D0;
			constexpr uintptr_t DodgeRotation = 0x03D4;
			constexpr uintptr_t DodgeRotationCompressed = 0x03E0;
		}

		namespace CarComponent_Dodge_TA {
			constexpr uintptr_t DodgeInputThreshold = 0x0320;
			constexpr uintptr_t SideDodgeImpulse = 0x0324;
			constexpr uintptr_t SideDodgeImpulseMaxSpeedScale = 0x0328;
			constexpr uintptr_t ForwardDodgeImpulse = 0x032C;
			constexpr uintptr_t ForwardDodgeImpulseMaxSpeedScale = 0x0330;
			constexpr uintptr_t BackwardDodgeImpulse = 0x0334;
			constexpr uintptr_t BackwardDodgeImpulseMaxSpeedScale = 0x0338;
			constexpr uintptr_t SideDodgeTorque = 0x033C;
			constexpr uintptr_t ForwardDodgeTorque = 0x0340;
			constexpr uintptr_t DodgeTorqueTime = 0x0344;
			constexpr uintptr_t MinDodgeTorqueTime = 0x0348;
			constexpr uintptr_t DodgeZDamping = 0x034C;
			constexpr uintptr_t DodgeZDampingDelay = 0x0350;
			constexpr uintptr_t DodgeZDampingUpTime = 0x0354;
			constexpr uintptr_t DodgeImpulseScale = 0x0358;
			constexpr uintptr_t DodgeTorqueScale = 0x035C;
			constexpr uintptr_t JumpEvent = 0x0360;
			constexpr uintptr_t DoubleJumpEvent = 0x0368;
			constexpr uintptr_t DodgeEvent = 0x0370;
			constexpr uintptr_t DodgeTorque = 0x0378;
			constexpr uintptr_t DodgeDirection = 0x0384;
			constexpr uintptr_t DodgeImpulse = 0x0390;
			constexpr uintptr_t DodgesCount = 0x039C;
			constexpr uintptr_t MaxDodgeStreak = 0x03A0;
		}

		namespace CarComponent_DoubleJump_KO_TA {
			constexpr uintptr_t LimitVelocityToForceScale = 0x0338;
		}

		namespace CarComponent_DoubleJump_Robin_TA {
			constexpr uintptr_t RandomPitch = 0x0338;
			constexpr uintptr_t RandomYaw = 0x0340;
			constexpr uintptr_t RandomRoll = 0x0348;
		}

		namespace CarComponent_DoubleJump_TA {
			constexpr uintptr_t JumpImpulse = 0x0320;
			constexpr uintptr_t ImpulseScale = 0x0324;
			constexpr uintptr_t DoubleJumpImpulse = 0x0328;
		}

		namespace CarComponent_FlipCar_TA {
			constexpr uintptr_t FlipCarImpulse = 0x02E0;
			constexpr uintptr_t FlipCarTorque = 0x02E4;
			constexpr uintptr_t FlipCarTime = 0x02E8;
			constexpr uintptr_t bFlipRight = 0x02EC;
		}

		namespace CarComponent_Jump_Robin_TA {
			constexpr uintptr_t RandomPitch = 0x0308;
			constexpr uintptr_t RandomYaw = 0x0310;
			constexpr uintptr_t RandomRoll = 0x0318;
		}

		namespace CarComponent_Jump_TA {
			constexpr uintptr_t MinJumpTime = 0x02E0;
			constexpr uintptr_t JumpImpulse = 0x02E4;
			constexpr uintptr_t JumpForce = 0x02E8;
			constexpr uintptr_t JumpForceTime = 0x02EC;
			constexpr uintptr_t PodiumJumpForceTime = 0x02F0;
			constexpr uintptr_t JumpImpulseSpeed = 0x02F4;
			constexpr uintptr_t JumpAccel = 0x02F8;
			constexpr uintptr_t MaxJumpHeight = 0x02FC;
			constexpr uintptr_t MaxJumpHeightTime = 0x0300;
			constexpr uintptr_t bDeactivate = 0x0304;
		}

		namespace CarComponent_TA {
			constexpr uintptr_t FXActorArchetype = 0x0268;
			constexpr uintptr_t FXEvent = 0x0270;
			constexpr uintptr_t Bitfields_0x0278 = 0x0278;  // Multiple: bDisabled, bAutoActivate, bSimulateComponent, bCreated, bActive, bRemovedFromCar
			constexpr uintptr_t ComponentData = 0x027C;
			constexpr uintptr_t ReplicatedActive = 0x027D;
			constexpr uintptr_t Activator = 0x0280;
			constexpr uintptr_t Vehicle = 0x0288;
			constexpr uintptr_t Car = 0x0290;
			constexpr uintptr_t ActivityTime = 0x0298;
			constexpr uintptr_t MinInactiveTime = 0x029C;
			constexpr uintptr_t ReplicatedActivityTime = 0x02A0;
			constexpr uintptr_t FXActor = 0x02A8;
		}

		namespace CarComponent_TerritoryDemolish_TA {
			constexpr uintptr_t Bitfields_0x02E0 = 0x02E0;  // Multiple: bSelfDestructCountdown, bBlueSide, bCrossWallSFX, bIsLocallyControlled
			constexpr uintptr_t AmbientMuffleRTCP = 0x02E4;
			constexpr uintptr_t EnterWallSFX = 0x02F0;
			constexpr uintptr_t ExitWallSFX = 0x02F8;
			constexpr uintptr_t DemoOverrideFXArchetype = 0x0300;
		}

		namespace CarComponent_Torque_TA {
			constexpr uintptr_t TorqueScale = 0x02E0;
			constexpr uintptr_t TorqueInput = 0x02E4;
			constexpr uintptr_t ReplicatedTorqueInput = 0x02F0;
			constexpr uintptr_t TorqueTimeScale = 0x02F4;
		}

		namespace CarDemoActor_TA {
			constexpr uintptr_t StaticMeshComponent = 0x0268;
		}

		namespace CarDistanceTracker_TA {
			constexpr uintptr_t LastCarLocation = 0x0090;
			constexpr uintptr_t TotalDriveDistanceKM = 0x009C;
			constexpr uintptr_t CurrentDriveDistanceKM = 0x00A0;
			constexpr uintptr_t LastAirBoostLocation = 0x00A4;
			constexpr uintptr_t TotalFlownDistanceM = 0x00B0;
		}

		namespace CarGrappleTracker_TA {
			constexpr uintptr_t Bitfields_0x0090 = 0x0090;  // Multiple: bGrappled, bDoubleGrappled
			constexpr uintptr_t DoubleGrappleCount = 0x0094;
			constexpr uintptr_t CachedBall = 0x0098;
		}

		namespace CarJointSpinner_TA {
			constexpr uintptr_t ControlName = 0x00A8;
			constexpr uintptr_t IdleSpeed = 0x00B0;
			constexpr uintptr_t DrivingSpeed = 0x00B4;
			constexpr uintptr_t BoostSpeed = 0x00B8;
			constexpr uintptr_t RotationAxis = 0x00BC;
			constexpr uintptr_t Car = 0x00C8;
			constexpr uintptr_t Control = 0x00D0;
			constexpr uintptr_t Speed = 0x00D8;
		}

		namespace CarMeshComponentBase_TA {
			constexpr uintptr_t BodyAsset = 0x07B8;
			constexpr uintptr_t SkinAsset = 0x07C0;
			constexpr uintptr_t WheelAsset = 0x07C8;
			constexpr uintptr_t TeamColorOverride = 0x07D0;
			constexpr uintptr_t CustomColorOverride = 0x07E0;
			constexpr uintptr_t Team = 0x07F0;
			constexpr uintptr_t TeamColorID = 0x07F4;
			constexpr uintptr_t CustomColorID = 0x07F8;
			constexpr uintptr_t Logo = 0x0800;
			constexpr uintptr_t Bitfields_0x0808 = 0x0808;  // Multiple: bSwapLogoColors, bBoosting, bLocalPlayer
			constexpr uintptr_t TeamFinish = 0x0810;
			constexpr uintptr_t CustomFinish = 0x0818;
			constexpr uintptr_t ClubColors = 0x0820;
			constexpr uintptr_t Antennas = 0x0828;
			constexpr uintptr_t WheelMeshes = 0x0838;
			constexpr uintptr_t BodyFX = 0x0848;
			constexpr uintptr_t FXActors = 0x0850;
			constexpr uintptr_t Behaviors = 0x0860;
			constexpr uintptr_t BodyFXActor = 0x0870;
			constexpr uintptr_t ProductAttributes = 0x0878;
			constexpr uintptr_t ProductAttachmentSockets = 0x0888;
			constexpr uintptr_t QueuedTeamFinishID = 0x0898;
			constexpr uintptr_t QueuedCustomFinishID = 0x089C;
			constexpr uintptr_t PMCSplitBodyMesh = 0x08A0;
			constexpr uintptr_t ObjectsWithInheritedSettings = 0x08A8;
		}

		namespace CarMeshComponent_TA {
			constexpr uintptr_t BoostBlendInTime = 0x08D0;
			constexpr uintptr_t BoostBlendOutTime = 0x08D4;
			constexpr uintptr_t BoostDriveFlapScale = 0x08D8;
			constexpr uintptr_t WheelSuspensionBlendRate = 0x08DC;
			constexpr uintptr_t WheelSteerBlendRate = 0x08E0;
			constexpr uintptr_t WheelControls = 0x08E8;
			constexpr uintptr_t BoostFlyHeight = 0x08F8;
			constexpr uintptr_t BoostFlyControls = 0x0900;
			constexpr uintptr_t ChassisSpringComponent = 0x0910;
			constexpr uintptr_t ChassisSpringControl = 0x0918;
			constexpr uintptr_t BoostControls = 0x0920;
			constexpr uintptr_t Bitfields_0x0930 = 0x0930;  // Multiple: bInAir, bBoostFlying, bPreviewSupersonic, bWantsBoostCameraAdjustment
			constexpr uintptr_t Throttle = 0x0934;
		}

		namespace CarPreviewActor_TA {
			constexpr uintptr_t ControllerId = 0x0268;
			constexpr uintptr_t ProductLoader = 0x0270;
			constexpr uintptr_t CarMesh = 0x0278;
			constexpr uintptr_t LightEnvironment = 0x0280;
			constexpr uintptr_t AttachmentPreviewAnims = 0x0288;
			constexpr uintptr_t WheelAnims = 0x0298;
			constexpr uintptr_t BodyAnim = 0x02A8;
			constexpr uintptr_t EngineAudioAnim = 0x02B0;
			constexpr uintptr_t EngineAudioAnimInstance = 0x02B8;
			constexpr uintptr_t SupersonicFakeSpeed = 0x02C0;
			constexpr uintptr_t TurntableActor = 0x02C8;
			constexpr uintptr_t Loadout = 0x02D0;
			constexpr uintptr_t OldLoadout = 0x0310;
			constexpr uintptr_t PreviewProducts = 0x0350;
			constexpr uintptr_t BoostFX = 0x0360;
			constexpr uintptr_t PreviewSlot = 0x0368;
			constexpr uintptr_t TeamArchetype = 0x0370;
			constexpr uintptr_t PlayerName = 0x0378;
			constexpr uintptr_t BodyFX = 0x0388;
			constexpr uintptr_t BoostAsset = 0x0390;
			constexpr uintptr_t SupersonicAsset = 0x0398;
			constexpr uintptr_t Bitfields_0x03A0 = 0x03A0;  // Multiple: bLockLoadout, bSpinWheelsFromBoost, bAddToCarPreviewList
			constexpr uintptr_t SupersonicFX = 0x03A8;
			constexpr uintptr_t EngineAudioAsset = 0x03B8;
			constexpr uintptr_t EngineAudioPreview = 0x03C0;
			constexpr uintptr_t WheelSpinAttribute = 0x03C8;
			constexpr uintptr_t GameShaderParamAttribute = 0x03D0;
			constexpr uintptr_t PreviewTeam = 0x03D8;
			constexpr uintptr_t LinkedControllerId = 0x03DC;
			constexpr uintptr_t RootFXActor = 0x03E0;
			constexpr uintptr_t Ak = 0x03E8;
		}

		namespace CarPreviewAnim_TA {
			constexpr uintptr_t Slot = 0x00A8;
			constexpr uintptr_t KeyFrames = 0x00B0;
			constexpr uintptr_t Delay = 0x00C0;
			constexpr uintptr_t Bitfields_0x00C4 = 0x00C4;  // Multiple: bDelayHidden, bLoop, bComponentWasAttached
			constexpr uintptr_t SkelControlName = 0x00C8;
			constexpr uintptr_t PreviewActor = 0x00D0;
			constexpr uintptr_t Component = 0x00D8;
			constexpr uintptr_t FinalKeyframe = 0x00E0;
			constexpr uintptr_t KeyframeTime = 0x0118;
			constexpr uintptr_t KeyframeIndex = 0x011C;
			constexpr uintptr_t SkelControl = 0x0120;
		}

		namespace CarPreviewMeshComponent_TA {
			constexpr uintptr_t BoostAsset = 0x08D0;
			constexpr uintptr_t BoostFX = 0x08D8;
			constexpr uintptr_t AntennaAsset = 0x08E0;
			constexpr uintptr_t HatAsset = 0x08E8;
		}

		namespace CarPreviewSet_TA {
			constexpr uintptr_t CarPreviewActors = 0x0060;
			constexpr uintptr_t OnlineParty = 0x0070;
			constexpr uintptr_t bRemotePlayersHidden = 0x0078;
			constexpr uintptr_t MaxCars = 0x007C;
		}

		namespace CarThumbnailActor_TA {
			constexpr uintptr_t Mesh = 0x0268;
		}

		namespace CarTrajectoryComponent_TA {
			constexpr uintptr_t bEnabled = 0x00A8;
			constexpr uintptr_t Points = 0x00B0;
			constexpr uintptr_t TotalDrawPoints = 0x00C0;
			constexpr uintptr_t FramesBetweenPoints = 0x00C4;
			constexpr uintptr_t LastAngle = 0x00C8;
			constexpr uintptr_t VelocityRot = 0x00CC;
			constexpr uintptr_t CurrentVelocity = 0x00D8;
			constexpr uintptr_t LastRotateAxis = 0x00E4;
			constexpr uintptr_t LastVelocity = 0x00F0;
		}

		namespace Car_Freeplay_TA {
			constexpr uintptr_t CarColors = 0x0BF0;
		}

		namespace Car_KnockOut_TA {
			constexpr uintptr_t PRI_KO = 0x0BF0;
			constexpr uintptr_t ReplicatedStateName = 0x0BF8;
			constexpr uintptr_t ReplicatedStateChanged = 0x0C00;
			constexpr uintptr_t ReplicatedImpulse = 0x0C04;
			constexpr uintptr_t HitImpulse = 0x0C0C;
			constexpr uintptr_t RespawnImmunityTime = 0x0C18;
			constexpr uintptr_t StunTimeHitScale = 0x0C1C;
			constexpr uintptr_t AttackRadius = 0x0C20;
			constexpr uintptr_t AttackYExtent = 0x0C24;
			constexpr uintptr_t AttackZExtent = 0x0C28;
			constexpr uintptr_t MaxAttackDegrees = 0x0C2C;
			constexpr uintptr_t DefaultAttackDamage = 0x0C30;
			constexpr uintptr_t AttackLingerTime = 0x0C34;
			constexpr uintptr_t GrabbingLingerTime = 0x0C38;
			constexpr uintptr_t MinGrabTimeBeforeThrow = 0x0C3C;
			constexpr uintptr_t BlockTime = 0x0C40;
			constexpr uintptr_t GrabThrowTime = 0x0C44;
			constexpr uintptr_t GrabStunTime = 0x0C48;
			constexpr uintptr_t DodgeThrowImpulse = 0x0C4C;
			constexpr uintptr_t DoubleJumpThrowImpulse = 0x0C50;
			constexpr uintptr_t LightGrabTime = 0x0C54;
			constexpr uintptr_t HeavyGrabTime = 0x0C58;
			constexpr uintptr_t AttackHitKnockbackScale = 0x0C5C;
			constexpr uintptr_t MinHitImpulseSpeed = 0x0C60;
			constexpr uintptr_t LightHitImpulseScale = 0x0C64;
			constexpr uintptr_t HeavyHitImpulseScale = 0x0C68;
			constexpr uintptr_t SuddenKOImpulse = 0x0C6C;
			constexpr uintptr_t SuddenKOThrowTime = 0x0C70;
			constexpr uintptr_t LightHitPitchDegrees = 0x0C74;
			constexpr uintptr_t HeavyHitPitchDegrees = 0x0C78;
			constexpr uintptr_t SuddenKOHitPitchDegrees = 0x0C7C;
			constexpr uintptr_t AttackBeginDelay = 0x0C80;
			constexpr uintptr_t HitTime = 0x0C84;
			constexpr uintptr_t AttackStunTorqueScale = 0x0C88;
			constexpr uintptr_t TradeStunTorqueScale = 0x0C8C;
			constexpr uintptr_t TradeStunTime = 0x0C90;
			constexpr uintptr_t TradeStunImpulseScale = 0x0C94;
			constexpr uintptr_t TradeStunPitchDegrees = 0x0C98;
			constexpr uintptr_t ThrowPitchOffset = 0x0C9C;
			constexpr uintptr_t GrabAttachOffset = 0x0CA0;
			constexpr uintptr_t ThrowBackwardVelocityScale = 0x0CAC;
			constexpr uintptr_t TradeImpulseSpeed = 0x0CB0;
			constexpr uintptr_t TorqueStunBeginDelay = 0x0CB4;
			constexpr uintptr_t DamagePointsPerImpulseSpeed = 0x0CB8;
			constexpr uintptr_t ThrowVelocityTransferScale = 0x0CBC;
			constexpr uintptr_t GrabFixJumpVelocity = 0x0CC0;
			constexpr uintptr_t AttachedTarget = 0x0CC8;
			constexpr uintptr_t AttackComponents = 0x0CD0;
			constexpr uintptr_t TorqueComponent = 0x0CE0;
			constexpr uintptr_t TakenHits = 0x0CE8;
			constexpr uintptr_t PendingGrabber = 0x0CF8;
			constexpr uintptr_t UsedAttackComponent = 0x0D00;
			constexpr uintptr_t SuperSonicStartTime = 0x0D08;
			constexpr uintptr_t SuperSonicTimeForHeavyAttack = 0x0D0C;
			constexpr uintptr_t ReturnToSafezoneTime = 0x0D10;
			constexpr uintptr_t ThrowMashAlpha = 0x0D14;
			constexpr uintptr_t AttackerPRIs = 0x0D18;
			constexpr uintptr_t ResetAttackPRIDelay = 0x0D28;
			constexpr uintptr_t FX_AttackArchetype = 0x0D30;
			constexpr uintptr_t FX_GrabAttackArchetype = 0x0D38;
			constexpr uintptr_t FX_HitAttackLightArchetype = 0x0D40;
			constexpr uintptr_t FX_HitAttackHeavyArchetype = 0x0D48;
			constexpr uintptr_t FX_HitBlockArchetype = 0x0D50;
			constexpr uintptr_t FX_GrabHitArchetype = 0x0D58;
			constexpr uintptr_t DemoSoundAttachmentName = 0x0D60;
			constexpr uintptr_t DemoSoundOverride = 0x0D68;
			constexpr uintptr_t StunlockArchetype = 0x0D70;
			constexpr uintptr_t Stunlock = 0x0D78;
			constexpr uintptr_t bDrawDebug = 0x0D80;
			constexpr uintptr_t FX_Attack = 0x0D88;
			constexpr uintptr_t PendingCarToGrab = 0x0D90;
			constexpr uintptr_t CarPendingThrow = 0x0D98;
		}

		namespace Car_TA {
			constexpr uintptr_t DefaultCarComponents = 0x08A8;
			constexpr uintptr_t EngineAudio = 0x08B8;
			constexpr uintptr_t EngineAudioRev = 0x08C0;
			constexpr uintptr_t ThrottleShake = 0x08C8;
			constexpr uintptr_t FlipComponent = 0x08D0;
			constexpr uintptr_t DemolishTarget = 0x08D8;
			constexpr uintptr_t DemolishSpeed = 0x08D9;
			constexpr uintptr_t DemolishSource = 0x08DA;
			constexpr uintptr_t Loadout = 0x08E0;
			constexpr uintptr_t Bitfields_0x08E8 = 0x08E8;  // Multiple: bLoadoutSet, bUnlimitedTimeForDodge, bUnlimitedJumps, bDemolishOnOpposingGround, bWasOnOpposingGround, bDemolishOnGoalZone, bWasInGoalZone, bOverrideHandbrakeOn, bTeamBumpsUseCarForceMultiplier, bOverrideBoostOn, bUseDefaultLoadout
			constexpr uintptr_t ExitFXArchetype = 0x08F0;
			constexpr uintptr_t DemolishExplosionArchetype = 0x08F8;
			constexpr uintptr_t DemolishExplosion = 0x0900;
			constexpr uintptr_t TargetClass = 0x0908;
			constexpr uintptr_t TargetIndicatorArchetype = 0x0910;
			constexpr uintptr_t TargetIndicators = 0x0918;
			constexpr uintptr_t MaxTimeForDodge = 0x0928;
			constexpr uintptr_t MaxNumJumps = 0x092C;
			constexpr uintptr_t GroundedJumpFailedSFX = 0x0930;
			constexpr uintptr_t LastWheelsHitBallTime = 0x0938;
			constexpr uintptr_t TeamPaint = 0x093C;
			constexpr uintptr_t ClubColors = 0x094C;
			constexpr uintptr_t ReplicatedCarScale = 0x0954;
			constexpr uintptr_t ReplicatedDemolishExtended = 0x0958;
			constexpr uintptr_t ReplicatedDemolish = 0x09A0;
			constexpr uintptr_t ReplicatedDemolish_CustomFX = 0x09C8;
			constexpr uintptr_t ReplicatedDemolishGoalExplosion = 0x09F8;
			constexpr uintptr_t BodyFXActor = 0x0A28;
			constexpr uintptr_t AttackerPRI = 0x0A30;
			constexpr uintptr_t MouseAccel = 0x0A38;
			constexpr uintptr_t MouseAirAccel = 0x0A44;
			constexpr uintptr_t AttachedPickup = 0x0A50;
			constexpr uintptr_t RumblePickups = 0x0A58;
			constexpr uintptr_t ReplayFocusOffset = 0x0A60;
			constexpr uintptr_t AddedBallForceMultiplier = 0x0A6C;
			constexpr uintptr_t AddedCarForceMultiplier = 0x0A70;
			constexpr uintptr_t CarTrajectoryComponent = 0x0A78;
			constexpr uintptr_t GameEvent = 0x0A80;
			constexpr uintptr_t NameplateComponentCar = 0x0A88;
			constexpr uintptr_t ExplosionHitHandler = 0x0A90;
			constexpr uintptr_t ReplicatedCarMaxLinearSpeedScale = 0x0A98;
			constexpr uintptr_t PostMatchAnim = 0x0A9C;
			constexpr uintptr_t DoubleJumps = 0x0AA4;
			constexpr uintptr_t DoubleJumpKey = 0x0AA8;
			constexpr uintptr_t ViralItemFXComponent = 0x0AB0;
		}

		namespace CertifiedStatDatabase_TA {
			constexpr uintptr_t Stats = 0x0060;
			constexpr uintptr_t StatNameToStatID = 0x0070;
			constexpr uintptr_t bClickToRebuild = 0x00C0;
		}

		namespace CertifiedStat_TA {
			constexpr uintptr_t StatClass = 0x0060;
			constexpr uintptr_t RankThresholds = 0x0068;
		}

		namespace ChallengeAvailableNotification_TA {
			constexpr uintptr_t UnknownData00 = 0x0184;
		}

		namespace ChallengeCompleteNotification_TA {
			constexpr uintptr_t UnknownData00 = 0x0184;
		}

		namespace ChallengeConfig_TA {
			constexpr uintptr_t MinSecondsDelayNewNotification = 0x0078;
			constexpr uintptr_t MaxSecondsDelayNewNotification = 0x007C;
			constexpr uintptr_t SecondsDelayNewNotification = 0x0080;
			constexpr uintptr_t TrainingFolderName = 0x0088;
			constexpr uintptr_t WeeklyFolderName = 0x0098;
			constexpr uintptr_t SeasonFolderName = 0x00A8;
			constexpr uintptr_t bHideChallengeUI = 0x00B8;
		}

		namespace ChallengeCurrency_TA {
			constexpr uintptr_t CurrencyID = 0x0080;
			constexpr uintptr_t Amount = 0x0084;
		}

		namespace ChallengeDefaultManager_TA {
			constexpr uintptr_t DefaultChallenges = 0x0060;
			constexpr uintptr_t Folders = 0x0070;
			constexpr uintptr_t ChallengeConfig = 0x0080;
			constexpr uintptr_t NewChallengesNotifications = 0x0088;
		}

		namespace ChallengeDefault_TA {
			constexpr uintptr_t Title = 0x0080;
			constexpr uintptr_t Description = 0x0090;
			constexpr uintptr_t GroupId = 0x00A0;
			constexpr uintptr_t Points = 0x00A4;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bIsAchievement, bIsRepeatable, bIsPremium, bAutoClaimRewards
			constexpr uintptr_t XPUnlockLevel = 0x00AC;
			constexpr uintptr_t RepeatLimit = 0x00B0;
			constexpr uintptr_t IconURL = 0x00B8;
			constexpr uintptr_t BackgroundURL = 0x00C8;
			constexpr uintptr_t Rewards = 0x00D8;
			constexpr uintptr_t Requirements = 0x00E0;
			constexpr uintptr_t NotifyAvailableTitle = 0x00F0;
			constexpr uintptr_t NotifyAvailableDescription = 0x0100;
			constexpr uintptr_t NotifyAvailableImageURL = 0x0110;
			constexpr uintptr_t NotifyCompleteTitle = 0x0120;
			constexpr uintptr_t NotifyCompleteDescription = 0x0130;
			constexpr uintptr_t NotifyCompleteImageURL = 0x0140;
			constexpr uintptr_t Icon = 0x0150;
			constexpr uintptr_t Background = 0x0158;
			constexpr uintptr_t NotifyAvailableImage = 0x0160;
			constexpr uintptr_t NotifyCompleteImage = 0x0168;
			constexpr uintptr_t BackgroundColor = 0x0170;
			constexpr uintptr_t UnlockChallengeIDs = 0x0178;
		}

		namespace ChallengeDropGroup_TA {
			constexpr uintptr_t bPremium = 0x00E0;
		}

		namespace ChallengeFolder_TA {
			constexpr uintptr_t CodeName = 0x0060;
			constexpr uintptr_t DisplayName = 0x0070;
			constexpr uintptr_t ChallengeID = 0x0080;
			constexpr uintptr_t DefaultActiveIndex = 0x0084;
			constexpr uintptr_t StartTime = 0x0088;
			constexpr uintptr_t EndTime = 0x0090;
			constexpr uintptr_t ChallengeFolderSort = 0x0098;
			constexpr uintptr_t ChallengeIDs = 0x00A0;
			constexpr uintptr_t SubFolders = 0x00B0;
			constexpr uintptr_t SubFolderNames = 0x00C0;
			constexpr uintptr_t LinkedFolderCodeName = 0x00D0;
			constexpr uintptr_t ActiveSubFolderStartTime = 0x00E0;
			constexpr uintptr_t ActiveSubFolderEndTime = 0x00E8;
			constexpr uintptr_t ChallengeCache = 0x00F0;
		}

		namespace ChallengeManager_TA {
			constexpr uintptr_t Challenges = 0x0060;
			constexpr uintptr_t ChallengeProgressSyncIDs = 0x0070;
			constexpr uintptr_t ClearNewInfoChallengeIDQueue = 0x0080;
			constexpr uintptr_t RemovedChallenges = 0x0090;
			constexpr uintptr_t PendingNewChallengeIDs = 0x00A0;
			constexpr uintptr_t PendingRemovedChallengeIDs = 0x00B0;
			constexpr uintptr_t NewChallengesTitle = 0x00C0;
			constexpr uintptr_t NewChallengesDesc = 0x00D0;
			constexpr uintptr_t ExpiredChallengesTitle = 0x00E0;
			constexpr uintptr_t ExpiredChallengesDesc = 0x00F0;
			constexpr uintptr_t MixedChallengesDesc = 0x0100;
		}

		namespace ChallengeNotification_TA {
			constexpr uintptr_t Icon = 0x0170;
			constexpr uintptr_t NotifyImage = 0x0178;
			constexpr uintptr_t ChallengeID = 0x0180;
		}

		namespace ChallengeRequirement_TA {
			constexpr uintptr_t DisplayName = 0x0080;
			constexpr uintptr_t RequiredCount = 0x0090;
			constexpr uintptr_t ProgressCount = 0x0094;
			constexpr uintptr_t ProgressChange = 0x0098;
		}

		namespace ChallengeReward_TA {
			constexpr uintptr_t XP = 0x0080;
			constexpr uintptr_t Currency = 0x0088;
			constexpr uintptr_t Products = 0x0098;
			constexpr uintptr_t ProductHashIDs = 0x00A8;
			constexpr uintptr_t OnlineProductStoreSet = 0x00B8;
		}

		namespace Challenge_TA {
			constexpr uintptr_t Bitfields_0x01E8 = 0x01E8;  // Multiple: bIsHidden, bRewardsAvailable, bNotifyNewInfo, bComplete, bLocked
			constexpr uintptr_t CompleteCount = 0x01EC;
			constexpr uintptr_t ProgressResetTimeUTC = 0x01F0;
			constexpr uintptr_t RequirementProgress = 0x01F8;
			constexpr uintptr_t UnlockChallengeRewards = 0x0208;
		}

		namespace ChampionshipTrophy_TA {
			constexpr uintptr_t ChampionshipTrophyArchetype = 0x0060;
			constexpr uintptr_t ChampionshipTrophySound = 0x0068;
		}

		namespace ChatConfig_TA {
			constexpr uintptr_t MaxMessagesPerChannel = 0x0078;
		}

		namespace ChatFilterManager_TA {
			constexpr uintptr_t MatchChatFilter = 0x0060;
			constexpr uintptr_t PartyChatFilter = 0x0061;
			constexpr uintptr_t VoiceChatFilter = 0x0062;
		}

		namespace ChatHistory_TA {
			constexpr uintptr_t StoredChat = 0x0060;
			constexpr uintptr_t MaxNumHistories = 0x0070;
		}

		namespace CheatManagerBase_TA {
			constexpr uintptr_t LastEquippedProductID = 0x0098;
			constexpr uintptr_t LastEquippedInstanceID = 0x00A0;
		}

		namespace CheatManager_TA {
			constexpr uintptr_t InputRecorder = 0x00B0;
			constexpr uintptr_t DebugColor = 0x00B8;
			constexpr uintptr_t TestClubColor = 0x00BC;
			constexpr uintptr_t BodyHandlingTestTime = 0x00C0;
			constexpr uintptr_t BodyHandlingTestIndex = 0x00C4;
			constexpr uintptr_t TickNotifier = 0x00C8;
		}

		namespace CheckoutErrors_TA {
			constexpr uintptr_t MtxConfigDisabled = 0x0080;
			constexpr uintptr_t SystemOverlayDisabled = 0x0088;
			constexpr uintptr_t TransactionInProgress = 0x0090;
			constexpr uintptr_t InvalidNumberOfItemsInCart = 0x0098;
			constexpr uintptr_t InvalidItemsInCart = 0x00A0;
		}

		namespace CinematicIntroSequence_TA {
			constexpr uintptr_t SequenceIndex = 0x0060;
			constexpr uintptr_t MessageModal = 0x0068;
			constexpr uintptr_t ActionNames = 0x0070;
			constexpr uintptr_t PressedKeys = 0x0080;
			constexpr uintptr_t PressedAxes = 0x0090;
			constexpr uintptr_t LocalizationFile = 0x00A0;
			constexpr uintptr_t LocalizationGroup = 0x00B0;
			constexpr uintptr_t LocalizationKeyPrefix = 0x00C0;
			constexpr uintptr_t AxisDeadzone = 0x00D0;
			constexpr uintptr_t AxisPressTime = 0x00D4;
			constexpr uintptr_t AutoFinishTime = 0x00D8;
			constexpr uintptr_t TrackedBindingsPC = 0x00E0;
			constexpr uintptr_t TrackedBindingsGamepad = 0x00F0;
			constexpr uintptr_t InputInteraction = 0x0100;
		}

		namespace ClientConnectionTracker_TA {
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bDisconnectedFromServer, bShowConnectionQualityIndicators
			constexpr uintptr_t LatencyStatus = 0x00AC;
			constexpr uintptr_t JitterStatus = 0x00AD;
			constexpr uintptr_t PacketStatus = 0x00AE;
			constexpr uintptr_t LatencyLastUpdateTime = 0x00B0;
			constexpr uintptr_t JitterRollingAverage = 0x00B4;
			constexpr uintptr_t JitterLastUpdateTime = 0x00B8;
			constexpr uintptr_t PacketLastUpdateTime = 0x00BC;
			constexpr uintptr_t NewPacketsRollingAverage = 0x00C0;
			constexpr uintptr_t PacketsLostRollingAverage = 0x00C4;
			constexpr uintptr_t RollingPercentLost = 0x00C8;
			constexpr uintptr_t PriorTotalPacketsInOut = 0x00CC;
			constexpr uintptr_t PriorTotalPacketsLost = 0x00D0;
			constexpr uintptr_t RollingBadPingTime = 0x00D4;
			constexpr uintptr_t RollingBadJitterTime = 0x00D8;
			constexpr uintptr_t RollingBadPacketLossTime = 0x00DC;
			constexpr uintptr_t ConnectionQualityConfig = 0x00E0;
			constexpr uintptr_t TrackedPRI = 0x00E8;
			constexpr uintptr_t ConnectionQualitySave = 0x00F0;
		}

		namespace ClientInputData_TA {
			constexpr uintptr_t PC = 0x0060;
			constexpr uintptr_t InputFrames = 0x0068;
			constexpr uintptr_t LastPacketTimestamp = 0x0078;
			constexpr uintptr_t LastProcessedFrame = 0x007C;
			constexpr uintptr_t LastProcessedReceivedFrame = 0x0080;
		}

		namespace ClientJitterBuffer_STS_TA {
			constexpr uintptr_t PrevBufferTime = 0x0080;
		}

		namespace ClientJitterBuffer_TA {
			constexpr uintptr_t JitterSettings = 0x0060;
			constexpr uintptr_t LastPacketTime = 0x0068;
			constexpr uintptr_t PacketTimeMu = 0x006C;
			constexpr uintptr_t PacketTimeVariance = 0x0070;
			constexpr uintptr_t BufferTime = 0x0074;
			constexpr uintptr_t BufferSize = 0x0078;
		}

		namespace ClientXPSave_TA {
			constexpr uintptr_t TotalXP = 0x00C8;
			constexpr uintptr_t Level = 0x00CC;
			constexpr uintptr_t CurrentLevelXPThreshold = 0x00D0;
			constexpr uintptr_t NextLevelXPThreshold = 0x00D4;
		}

		namespace ClubBadgeDropGroup_TA {
			constexpr uintptr_t SeasonBadgeTier = 0x00C8;
			constexpr uintptr_t Stat = 0x00CC;
		}

		namespace ClubDropGroup_TA {
			constexpr uintptr_t ClubID = 0x00C0;
		}

		namespace ClubInviteNotification_TA {
			constexpr uintptr_t PlayerID = 0x0170;
			constexpr uintptr_t ClubID = 0x01B8;
			constexpr uintptr_t ClubName = 0x01C0;
			constexpr uintptr_t ClubTag = 0x01D0;
		}

		namespace ClubPersonas_TA {
			constexpr uintptr_t ClubCache = 0x0060;
			constexpr uintptr_t WordFilter = 0x0068;
			constexpr uintptr_t PersonaClubs = 0x0070;
			constexpr uintptr_t ActionQueue = 0x0080;
		}

		namespace ClubSave_TA {
			constexpr uintptr_t ClubID = 0x00C8;
			constexpr uintptr_t Role = 0x00D0;
			constexpr uintptr_t ClubTitleIDs = 0x00D8;
			constexpr uintptr_t bNewTitlesNotificationChecked = 0x00E8;
		}

		namespace ClubTitleDropGroup_TA {
			constexpr uintptr_t ClubTitleID = 0x00C8;
		}

		namespace ClubsConfig_TA {
			constexpr uintptr_t TagLengthMin = 0x0078;
			constexpr uintptr_t TagLengthMax = 0x007C;
			constexpr uintptr_t NameLengthMin = 0x0080;
			constexpr uintptr_t NameLengthMax = 0x0084;
			constexpr uintptr_t MilestoneDataCacheDurationSeconds = 0x0088;
			constexpr uintptr_t Bitfields_0x008C = 0x008C;  // Multiple: bEnforceFriendsOnlyParty, bAllowSeverClubInfoReplication
			constexpr uintptr_t MilestoneStatNames = 0x0090;
		}

		namespace CollisionTestComponent_TA {
			constexpr uintptr_t LineStart = 0x00A0;
			constexpr uintptr_t LineEnd = 0x00A8;
			constexpr uintptr_t ArchetypeToSpawn = 0x00B0;
			constexpr uintptr_t CachedCenter = 0x00B8;
			constexpr uintptr_t CachedStart = 0x00C4;
			constexpr uintptr_t CachedEnd = 0x00D0;
			constexpr uintptr_t Speed = 0x00DC;
			constexpr uintptr_t Step = 0x00E0;
			constexpr uintptr_t Time = 0x00E4;
			constexpr uintptr_t bEnabled = 0x00E8;
		}

		namespace CollisionTestTrack_TA {
			constexpr uintptr_t CollisionTestComponent = 0x0268;
		}

		namespace CompleteTaskDropGroup_TA {
			constexpr uintptr_t Icon = 0x00C0;
			constexpr uintptr_t Title = 0x00C8;
			constexpr uintptr_t Points = 0x00D8;
		}

		namespace ConnectionQualityConfig_TA {
			constexpr uintptr_t ClientPollRate = 0x0078;
			constexpr uintptr_t ClientDelayBeforePolling = 0x007C;
			constexpr uintptr_t ClientUpdateDelay = 0x0080;
			constexpr uintptr_t MediocrePing = 0x0084;
			constexpr uintptr_t BadPing = 0x0088;
			constexpr uintptr_t RecentBadPingFlagPercent = 0x008C;
			constexpr uintptr_t BadAckTime = 0x0090;
			constexpr uintptr_t BadReceiveTime = 0x0094;
			constexpr uintptr_t MediocreJitter = 0x0098;
			constexpr uintptr_t BadJitter = 0x009C;
			constexpr uintptr_t JitterRollingAverageTimespan = 0x00A0;
			constexpr uintptr_t RecentBadJitterFlagPercent = 0x00A4;
			constexpr uintptr_t MediocrePacketLossPercent = 0x00A8;
			constexpr uintptr_t BadPacketLossPercent = 0x00AC;
			constexpr uintptr_t PacketLossRollingAverageTimespan = 0x00B0;
			constexpr uintptr_t RecentBadPacketLossFlagPercent = 0x00B4;
			constexpr uintptr_t RecentPoorConnectionRollingTimespan = 0x00B8;
			constexpr uintptr_t NotificationDelayInDays = 0x00BC;
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: bJoinGameConnectionCheckEnabled, bShouldProvidePoorConnectionHelp
			constexpr uintptr_t BadPRIReadyTime = 0x00C4;
			constexpr uintptr_t PoorConnectionHelpNotificationURL = 0x00C8;
		}

		namespace ConnectionQualitySave_TA {
			constexpr uintptr_t RollingBadPingTime = 0x00C8;
			constexpr uintptr_t RollingBadJitterTime = 0x00CC;
			constexpr uintptr_t RollingBadPacketLossTime = 0x00D0;
			constexpr uintptr_t LastNotificationEpochSeconds = 0x00D8;
			constexpr uintptr_t bShowConnectionQualityIndicators = 0x00E0;
		}

		namespace ConsecutiveMatchTracker_TA {
			constexpr uintptr_t PlayerMatchData = 0x0060;
		}

		namespace ContentSave_TA {
			constexpr uintptr_t Config = 0x00C8;
			constexpr uintptr_t ContentMap2 = 0x00D0;
		}

		namespace CountdownObject_TA {
			constexpr uintptr_t CountTime = 0x0090;
		}

		namespace CreateAccountResponse {
			constexpr uintptr_t Continuation = 0x0060;
		}

		namespace CrewDropGroup_TA {
			constexpr uintptr_t Icon = 0x00C0;
		}

		namespace CrossEntitlementManager_TA {
			constexpr uintptr_t CrossEntitiedProducts = 0x0060;
			constexpr uintptr_t LockedProducts = 0x0070;
			constexpr uintptr_t ContentConfig = 0x0080;
		}

		namespace CrowdActorManager_TA {
			constexpr uintptr_t CrowdActors = 0x0268;
			constexpr uintptr_t Sounds = 0x0278;
		}

		namespace CrowdActorSettings_TA {
			constexpr uintptr_t NoiseRiseRate = 0x0060;
			constexpr uintptr_t NoiseFallRate = 0x0064;
			constexpr uintptr_t IdleNoise = 0x0068;
			constexpr uintptr_t IdleNoiseDuration = 0x0070;
			constexpr uintptr_t CountdownStartNoise = 0x0078;
			constexpr uintptr_t CountdownEndNoise = 0x0080;
			constexpr uintptr_t OvertimeStartNoise = 0x0088;
			constexpr uintptr_t TimeAlmostOutNoise = 0x0090;
			constexpr uintptr_t StatNoises = 0x0098;
			constexpr uintptr_t RandomChantsSound = 0x00A8;
			constexpr uintptr_t RandomChantsDelay = 0x00B0;
			constexpr uintptr_t UpdateStatNoises = 0x00B8;
			constexpr uintptr_t BallGoalDistanceNoiseCurve = 0x00C0;
			constexpr uintptr_t GoalDotDirection = 0x00D8;
			constexpr uintptr_t MinGoalDotAngle = 0x00E4;
			constexpr uintptr_t BallHitNoises = 0x00E8;
			constexpr uintptr_t BallHitNoiseDelay = 0x00F8;
			constexpr uintptr_t CountDownSoundList = 0x0100;
			constexpr uintptr_t RoundCountDownSoundList = 0x0110;
			constexpr uintptr_t OneMinRemaining = 0x0120;
			constexpr uintptr_t ThirtySecondsRemaining = 0x0128;
			constexpr uintptr_t CrowdStingerWin = 0x0130;
			constexpr uintptr_t CrowdStingerLose = 0x0138;
			constexpr uintptr_t CrowdStingerForfeit = 0x0140;
			constexpr uintptr_t CrowdStartOverTimeSound = 0x0148;
			constexpr uintptr_t MatchEndedEncore = 0x0150;
			constexpr uintptr_t MatchEndedEncoreDelay = 0x0158;
			constexpr uintptr_t DefenseChant = 0x0160;
		}

		namespace CrowdActor_TA {
			constexpr uintptr_t CrowdSound = 0x0268;
			constexpr uintptr_t Settings = 0x0270;
			constexpr uintptr_t GameEvent = 0x0278;
			constexpr uintptr_t TargetIdleNoise = 0x0280;
			constexpr uintptr_t TargetIdleNoiseRate = 0x0284;
			constexpr uintptr_t CurrentIdleNoise = 0x0288;
			constexpr uintptr_t ModifiedNoise = 0x028C;
			constexpr uintptr_t CurrentNoise = 0x0290;
			constexpr uintptr_t NoiseModifiers = 0x0298;
			constexpr uintptr_t TimeAlmostOutNoiseInstance = 0x02A8;
			constexpr uintptr_t CurrentBallGoalDistanceNoise = 0x02B0;
			constexpr uintptr_t ReplicatedOneShotSound = 0x02B8;
			constexpr uintptr_t ReplicatedCountDownNumber = 0x02C0;
			constexpr uintptr_t ReplicatedRoundCountDownNumber = 0x02C4;
			constexpr uintptr_t LastBallHitNoiseTime = 0x02C8;
			constexpr uintptr_t LastBallHitNoiseLevel = 0x02CC;
			constexpr uintptr_t Sounds = 0x02D0;
		}

		namespace CrowdManager_TA {
			constexpr uintptr_t CrowdActors = 0x0268;
			constexpr uintptr_t Settings = 0x0278;
			constexpr uintptr_t bInitialized = 0x0280;
			constexpr uintptr_t RandomChantCrowdActors = 0x0288;
			constexpr uintptr_t ReplicatedGlobalOneShotSound = 0x0298;
			constexpr uintptr_t DefenseZoneTime = 0x02A0;
			constexpr uintptr_t GameEvent = 0x02A8;
		}

		namespace CrowdNoiseModifier_TA {
			constexpr uintptr_t ValueMin = 0x0060;
			constexpr uintptr_t ValueMax = 0x0064;
			constexpr uintptr_t DurationMin = 0x0068;
			constexpr uintptr_t DurationMax = 0x006C;
			constexpr uintptr_t OneShotSound = 0x0070;
		}

		namespace CrowdSoundManagerBase_TA {
			constexpr uintptr_t BaseSettings = 0x00A8;
			constexpr uintptr_t CrowdActorManager = 0x00B0;
			constexpr uintptr_t Sounds = 0x00B8;
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: bInitializedMods, bIn0Seconds, bLowEnergy
			constexpr uintptr_t DebugLastExcitementSoundValue = 0x00C8;
			constexpr uintptr_t DebugLastExcitementSoundTime = 0x00D8;
			constexpr uintptr_t TimeSince0Seconds = 0x00DC;
			constexpr uintptr_t Mod0Seconds = 0x00E0;
			constexpr uintptr_t CurrentLowEnergyDuration = 0x00E8;
			constexpr uintptr_t ChantLowEnergyDuration = 0x00EC;
			constexpr uintptr_t LastExcitementState = 0x00F0;
			constexpr uintptr_t LastTensionState = 0x00F8;
			constexpr uintptr_t AprilCrowdOverridePath = 0x0100;
			constexpr uintptr_t AprilCrowdLocation = 0x0110;
		}

		namespace CrowdSoundManager_Knockout_TA {
			constexpr uintptr_t Settings = 0x0138;
		}

		namespace CrowdSoundManager_TA {
			constexpr uintptr_t Settings = 0x0138;
			constexpr uintptr_t DefenseZoneTime = 0x0140;
			constexpr uintptr_t LastBallHitNoiseTime = 0x0144;
			constexpr uintptr_t LastBallHitNoiseLevel = 0x0148;
			constexpr uintptr_t TimeSinceLastGoal = 0x014C;
			constexpr uintptr_t LeadChanges = 0x0150;
			constexpr uintptr_t OpenGoalTime = 0x0154;
			constexpr uintptr_t NearGoalTime = 0x0158;
			constexpr uintptr_t FastBreakTime = 0x015C;
			constexpr uintptr_t Bitfields_0x0160 = 0x0160;  // Multiple: bFastBreakInProgress, bShotInProgress, bAerialInProgress, bWaitingForKickoffTouch, bWaitingForTenseClear
			constexpr uintptr_t ShotGoal = 0x0168;
			constexpr uintptr_t ShotMaxScorability = 0x0170;
			constexpr uintptr_t LastShotTime = 0x0174;
			constexpr uintptr_t AerialDuration = 0x0178;
			constexpr uintptr_t LastAerialTime = 0x017C;
			constexpr uintptr_t TenseNearGoalTime = 0x0180;
			constexpr uintptr_t LastScoreSeparation = 0x0184;
			constexpr uintptr_t ScoreSeparationTrend = 0x0188;
			constexpr uintptr_t LastScoreState = 0x018C;
		}

		namespace CrowdSoundSettingsBase_TA {
			constexpr uintptr_t Tension = 0x0060;
			constexpr uintptr_t Excitement = 0x0068;
			constexpr uintptr_t Upset = 0x0070;
			constexpr uintptr_t Anticipation = 0x0078;
			constexpr uintptr_t ExcitementGameStart = 0x0080;
			constexpr uintptr_t ExcitementRoundStart = 0x0088;
			constexpr uintptr_t ExcitementOvertimeStart = 0x0090;
			constexpr uintptr_t ExcitementTimeRemaining = 0x0098;
			constexpr uintptr_t Excitement0Seconds = 0x00A0;
			constexpr uintptr_t Anticipation0Seconds = 0x00A8;
			constexpr uintptr_t AnticipationExcitementMultiplier = 0x00B0;
			constexpr uintptr_t DefenseChantSettings = 0x00B8;
			constexpr uintptr_t LowEnergyMaxExcitement = 0x00C4;
			constexpr uintptr_t LowEnergyMaxTension = 0x00C8;
			constexpr uintptr_t ChantLowEnergyDuration = 0x00CC;
			constexpr uintptr_t ChantLowEnergyRandomDuration = 0x00D0;
			constexpr uintptr_t KickoffTimeRemaining = 0x00D4;
			constexpr uintptr_t PostGameExcitement = 0x00D8;
			constexpr uintptr_t ExcitementStates = 0x00E0;
			constexpr uintptr_t TensionStates = 0x00F0;
		}

		namespace CrowdSoundSettings_Knockout_TA {
			constexpr uintptr_t ExcitementHeavyHit = 0x0100;
			constexpr uintptr_t ExcitementLightHit = 0x0108;
			constexpr uintptr_t ExcitementAerialHeavyHit = 0x0110;
			constexpr uintptr_t ExcitementAerialLightHit = 0x0118;
			constexpr uintptr_t ExcitementHeavyBlock = 0x0120;
			constexpr uintptr_t ExcitementLightBlock = 0x0128;
			constexpr uintptr_t ExcitementKnockout = 0x0130;
			constexpr uintptr_t ExcitementDeath = 0x0138;
			constexpr uintptr_t ExcitementThrow = 0x0140;
			constexpr uintptr_t ExcitementGrab = 0x0148;
		}

		namespace CrowdSoundSettings_TA {
			constexpr uintptr_t TensionScorability = 0x0100;
			constexpr uintptr_t TensionOpenGoal = 0x0108;
			constexpr uintptr_t TensionSpeedTowardsGoal = 0x0110;
			constexpr uintptr_t TensionCloseToGoal = 0x0118;
			constexpr uintptr_t TensionDistanceFromGoal = 0x0120;
			constexpr uintptr_t TensionAerial = 0x0128;
			constexpr uintptr_t TensionFastBreak = 0x0130;
			constexpr uintptr_t TensionTimeSinceLastGoal = 0x0138;
			constexpr uintptr_t TensionScoreSeparation = 0x0140;
			constexpr uintptr_t TensionTimeNearGoal = 0x0148;
			constexpr uintptr_t TensionLeadChanges = 0x0150;
			constexpr uintptr_t TensionGoalScored = 0x0158;
			constexpr uintptr_t ExcitementKickoffTouch = 0x0160;
			constexpr uintptr_t ExcitementScorability = 0x0168;
			constexpr uintptr_t ExcitementFastBreak = 0x0170;
			constexpr uintptr_t ExcitementGoal = 0x0178;
			constexpr uintptr_t ExcitementAerial = 0x0180;
			constexpr uintptr_t ExcitementTenseClear = 0x0188;
			constexpr uintptr_t ExcitementLeadChanges = 0x0190;
			constexpr uintptr_t ExcitementScoreSeparation = 0x0198;
			constexpr uintptr_t ExcitementTimeSinceLastGoal = 0x01A0;
			constexpr uintptr_t UpsetAnyDemo = 0x01A8;
			constexpr uintptr_t UpsetRelevantDemo = 0x01B0;
			constexpr uintptr_t UpsetGoal = 0x01B8;
			constexpr uintptr_t AnticipationScorability = 0x01C0;
			constexpr uintptr_t AnticipationFastBreak = 0x01C8;
			constexpr uintptr_t AnticipationOpenGoal = 0x01D0;
			constexpr uintptr_t OpenGoalMinDuration = 0x01D8;
			constexpr uintptr_t OpenGoalMaxDistance = 0x01DC;
			constexpr uintptr_t OpenGoalMaxDefense = 0x01E0;
			constexpr uintptr_t LongTimeNearGoalDuration = 0x01E4;
			constexpr uintptr_t LongTimeNearGoalMaxDistance = 0x01E8;
			constexpr uintptr_t ShotMaxDistanceToGoal = 0x01EC;
			constexpr uintptr_t ShotScorability = 0x01F0;
			constexpr uintptr_t ShotSpeedTowardsGoal = 0x01F4;
			constexpr uintptr_t SaveScorability = 0x01F8;
			constexpr uintptr_t SaveDistanceToGoal = 0x01FC;
			constexpr uintptr_t SaveHitMaxTime = 0x0200;
			constexpr uintptr_t SaveShotMaxTime = 0x0204;
			constexpr uintptr_t FastBreakMinDistanceToGoal = 0x0208;
			constexpr uintptr_t FastBreakMaxDistanceToGoal = 0x020C;
			constexpr uintptr_t FastBreakSpeedTowardsGoal = 0x0210;
			constexpr uintptr_t FastBreakDuration = 0x0214;
			constexpr uintptr_t MissedShotMinScorability = 0x0218;
			constexpr uintptr_t MissedShotMinTension = 0x021C;
			constexpr uintptr_t MissedShotMinLastHitTime = 0x0220;
			constexpr uintptr_t RelevantDemoMaxDistanceToBall = 0x0224;
			constexpr uintptr_t RelevantDemoMaxBallDistanceToGoal = 0x0228;
			constexpr uintptr_t AerialMinValue = 0x022C;
			constexpr uintptr_t AerialMinDuration = 0x0230;
			constexpr uintptr_t AerialMinCarInAirDuration = 0x0234;
			constexpr uintptr_t AerialCooldown = 0x0238;
			constexpr uintptr_t KickoffScoreSeparation = 0x023C;
			constexpr uintptr_t TenseNearGoalMinTension = 0x0240;
			constexpr uintptr_t TenseNearGoalDuration = 0x0244;
			constexpr uintptr_t TenseNearGoalDistance = 0x0248;
			constexpr uintptr_t TenseClearDistance = 0x024C;
			constexpr uintptr_t MinCrossbarImpactForce = 0x0250;
			constexpr uintptr_t ScoreStates = 0x0258;
		}

		namespace CrowdSoundsBase_TA {
			constexpr uintptr_t Sound = 0x0060;
			constexpr uintptr_t GameStart = 0x0068;
			constexpr uintptr_t RoundStart = 0x0090;
			constexpr uintptr_t MatchEndCountDown = 0x00B8;
			constexpr uintptr_t LowEnergyChant = 0x00C8;
			constexpr uintptr_t OvertimeStart = 0x00D0;
			constexpr uintptr_t Win = 0x00D8;
			constexpr uintptr_t Lose = 0x00E0;
			constexpr uintptr_t Forfeit = 0x00E8;
			constexpr uintptr_t MatchEndedEncore = 0x00F0;
			constexpr uintptr_t MatchEndedEncoreDelay = 0x00F8;
		}

		namespace CrowdSounds_Knockout_TA {
			constexpr uintptr_t HeavyHit = 0x0100;
			constexpr uintptr_t LightHit = 0x0128;
			constexpr uintptr_t AerialHeavyHit = 0x0150;
			constexpr uintptr_t AerialLightHit = 0x0178;
			constexpr uintptr_t HeavyBlock = 0x01A0;
			constexpr uintptr_t LightBlock = 0x01C8;
			constexpr uintptr_t KnockOut = 0x01F0;
			constexpr uintptr_t Death = 0x0218;
			constexpr uintptr_t Throw = 0x0240;
			constexpr uintptr_t Grab = 0x0268;
		}

		namespace CrowdSounds_TA {
			constexpr uintptr_t GoalScored = 0x0100;
			constexpr uintptr_t ShotAttempt = 0x0128;
			constexpr uintptr_t OpenGoal = 0x0150;
			constexpr uintptr_t Save = 0x0178;
			constexpr uintptr_t Aerial = 0x01A0;
			constexpr uintptr_t LongTimeNearGoal = 0x01C8;
			constexpr uintptr_t FastBreak = 0x01F0;
			constexpr uintptr_t Hit0Second = 0x0218;
			constexpr uintptr_t AnyDemolition = 0x0240;
			constexpr uintptr_t RelevantDemolition = 0x0268;
			constexpr uintptr_t KickoffTouch = 0x0290;
			constexpr uintptr_t TenseClear = 0x02B8;
			constexpr uintptr_t CrossbarHit = 0x02E0;
		}

		namespace CrumbTrailRedefinition_TA {
			constexpr uintptr_t CrumbRedefInfo = 0x0060;
		}

		namespace CrumbTrailSave_TA {
			constexpr uintptr_t CompletedTrails = 0x00C8;
			constexpr uintptr_t ActiveTrails = 0x00D8;
		}

		namespace CrumbTrails_TA {
			constexpr uintptr_t CrumbTrails = 0x0060;
			constexpr uintptr_t CrumbRedefine = 0x0070;
			constexpr uintptr_t CrumbSave = 0x0078;
			constexpr uintptr_t bTrailSetup = 0x0080;
		}

		namespace CurrencyProductSet_TA {
			constexpr uintptr_t PlayerWallet = 0x0060;
			constexpr uintptr_t CurrencyProducts = 0x0068;
		}

		namespace CustomMatchSettingsSave_TA {
			constexpr uintptr_t Settings = 0x00C8;
			constexpr uintptr_t GameTags = 0x0150;
		}

		namespace DLCPack_TA {
			constexpr uintptr_t UnlockedPlatforms = 0x0060;
			constexpr uintptr_t DiscUnlockedPlatforms = 0x0070;
			constexpr uintptr_t LabelSlot = 0x0080;
			constexpr uintptr_t SteamID = 0x0088;
			constexpr uintptr_t PS4ID = 0x0090;
			constexpr uintptr_t XboxOneID = 0x00A0;
			constexpr uintptr_t SwitchID = 0x00B0;
			constexpr uintptr_t EpicId = 0x00C0;
			constexpr uintptr_t Products = 0x00D0;
		}

		namespace DataAssetDatabase_ESportsTeam_TA {
			constexpr uintptr_t UnknownData00 = 0x00CC;
		}

		namespace DataAssetDatabase_TA {
			constexpr uintptr_t DataAssetClass = 0x0060;
			constexpr uintptr_t DataAssets = 0x0068;
			constexpr uintptr_t NameToId = 0x0078;
			constexpr uintptr_t bClickToRebuild = 0x00C8;
		}

		namespace DataAsset_ESportsTeam_TA {
			constexpr uintptr_t TeamID = 0x0060;
			constexpr uintptr_t ESportsTeamReference = 0x0068;
		}

		namespace DataProductCache_TA {
			constexpr uintptr_t ViralItemConfig = 0x0060;
			constexpr uintptr_t DataProducts = 0x0068;
		}

		namespace DebugHelpMenu_TA {
			constexpr uintptr_t CategoryTextScale = 0x00D0;
			constexpr uintptr_t ItemTextScale = 0x00D4;
			constexpr uintptr_t KeyTextScale = 0x00D8;
			constexpr uintptr_t HelpCategories = 0x00E0;
			constexpr uintptr_t SelectedCategoryIdx = 0x00F0;
			constexpr uintptr_t SelectedItemIdx = 0x00F4;
			constexpr uintptr_t ItemsWidth = 0x00F8;
			constexpr uintptr_t ItemsHeight = 0x00FC;
			constexpr uintptr_t Fade = 0x0100;
			constexpr uintptr_t bClosing = 0x0104;
		}

		namespace DecalComponent_Constrained_TA {
			constexpr uintptr_t WorldZ = 0x03E0;
			constexpr uintptr_t bAttachedRotation = 0x03E4;
		}

		namespace DefaultHitHandler_TA {
			constexpr uintptr_t ImpulseVelocityMultiplier = 0x0150;
		}

		namespace DemoExplosionHandler_TA {
			constexpr uintptr_t DemoFXToApply = 0x0150;
		}

		namespace DemolishedCar_TA {
			constexpr uintptr_t Data = 0x0060;
		}

		namespace DisplayNameResponse {
			constexpr uintptr_t DisplayName = 0x0060;
		}

		namespace DistributionFloatSpeed_TA {
			constexpr uintptr_t VelocityScale = 0x00A8;
			constexpr uintptr_t VelocitySpace = 0x00B4;
		}

		namespace DistributionFloatSteer_TA {
			constexpr uintptr_t UnknownData00 = 0x00A1;
		}

		namespace DynamicLogosConfig_TA {
			constexpr uintptr_t bUseDynamicLogos = 0x0078;
			constexpr uintptr_t LogoURL = 0x0080;
			constexpr uintptr_t FallbackLogoAssetPath = 0x0090;
			constexpr uintptr_t FallbackLogoAssetPathJPN = 0x00A0;
			constexpr uintptr_t LogoImage = 0x00B0;
			constexpr uintptr_t LogoLanguage = 0x00B8;
			constexpr uintptr_t MaxWaitLogoLoadTime = 0x00C8;
		}

		namespace DynamicMapEventsConfig_TA {
			constexpr uintptr_t bEnabled = 0x0078;
			constexpr uintptr_t ActiveDynamicMapEvents = 0x0080;
		}

		namespace DynamicMeshActor_TA {
			constexpr uintptr_t StaticMeshComponent = 0x0268;
		}

		namespace EOSGameClipsConfig_TA {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bFeatureEnabled, bCabinedModeClippingEnabled, bGameplayClippingEnabled, bGoalReplayClippingEnabled, bLinkAccountPopupEnabled, bSettingsMenuButtonEnabled, bStaticDataDebugEnabled
			constexpr uintptr_t ClipDurationSeconds = 0x0080;
			constexpr uintptr_t MinClipLengthSeconds = 0x0088;
			constexpr uintptr_t MinClipCooldownSeconds = 0x008C;
			constexpr uintptr_t MinClipCooldownAfterRecordingStartedSeconds = 0x0090;
			constexpr uintptr_t MaxClipUploadsPerMinute = 0x0094;
		}

		namespace EOSGameClipsController_TA {
			constexpr uintptr_t GameClipsInterface_Object = 0x0060;
			constexpr uintptr_t GameClipsInterface_Interface = 0x0068;
			constexpr uintptr_t GameClipsManager = 0x0070;
			constexpr uintptr_t GameClipsConfig = 0x0078;
			constexpr uintptr_t ClipCaptured_SFX = 0x0080;
			constexpr uintptr_t ClipFailed_SFX = 0x0088;
			constexpr uintptr_t ClipSucceeded_SFX = 0x0090;
			constexpr uintptr_t bGoalReplayClipInitiated = 0x0098;
			constexpr uintptr_t LastClipTimeSeconds = 0x009C;
		}

		namespace EOSGameClipsManager_TA {
			constexpr uintptr_t GameClipsInterface_Object = 0x0060;
			constexpr uintptr_t GameClipsInterface_Interface = 0x0068;
			constexpr uintptr_t GameClipsConfig = 0x0070;
			constexpr uintptr_t CurrentGameEvent = 0x0078;
			constexpr uintptr_t ClipType_Gameplay = 0x0080;
			constexpr uintptr_t ClipType_GoalReplay = 0x0090;
			constexpr uintptr_t ClipType_None = 0x00A0;
			constexpr uintptr_t CurrentClipType = 0x00B0;
			constexpr uintptr_t PreviousClipType = 0x00C0;
			constexpr uintptr_t Bitfields_0x00D0 = 0x00D0;  // Multiple: bClippingAvailable, bEnableDebug
			constexpr uintptr_t linkedAccounts = 0x00D8;
			constexpr uintptr_t InactiveAccounts = 0x00E8;
			constexpr uintptr_t MostRecentRecordingStartTime = 0x00F8;
		}

		namespace EOSGameClipsMetrics_TA {
			constexpr uintptr_t GameClipsManager = 0x0080;
			constexpr uintptr_t GameClipsInterface_Object = 0x0088;
			constexpr uintptr_t GameClipsInterface_Interface = 0x0090;
			constexpr uintptr_t ClipsUploading = 0x0098;
			constexpr uintptr_t GeneralErrors = 0x00A8;
		}

		namespace EOSGameClipsSettingsSave_TA {
			constexpr uintptr_t bLinkAccountPopupSeen = 0x00C8;
		}

		namespace EOSOnlineStorageSync_TA {
			constexpr uintptr_t SyncTask = 0x0060;
			constexpr uintptr_t EOS_FILE_CORRUPTED = 0x0068;
		}

		namespace EOSOnlineStorageUploader_TA {
			constexpr uintptr_t Config = 0x0060;
			constexpr uintptr_t Bitfields_0x0068 = 0x0068;  // Multiple: bSaveDataDirty, bUploadInFlight
			constexpr uintptr_t LastSuccessfulUploadTime = 0x0070;
		}

		namespace EOSPermissions_TA {
			constexpr uintptr_t EpicConfig = 0x0060;
			constexpr uintptr_t RetryConfig = 0x0068;
			constexpr uintptr_t Permissions = 0x0070;
			constexpr uintptr_t GameplaySettingsSave = 0x0080;
			constexpr uintptr_t NotificationSave = 0x0088;
			constexpr uintptr_t DownloadedPermissions = 0x0090;
			constexpr uintptr_t ServiceName = 0x0098;
			constexpr uintptr_t RetryDelays = 0x00A8;
			constexpr uintptr_t PermissionRetryAttempts = 0x00B8;
			constexpr uintptr_t ActivePermissionsRequest = 0x00C0;
			constexpr uintptr_t EnhancedVoiceReportingString = 0x00C8;
			constexpr uintptr_t VoiceReportingOnString = 0x00D8;
		}

		namespace EOSShopPurchaseEvent_X {
			constexpr uintptr_t CurrencyType = 0x0068;
			constexpr uintptr_t CurrencyAmount = 0x0078;
			constexpr uintptr_t Products = 0x0080;
		}

		namespace EOSUserPermissionsError_TA {
			constexpr uintptr_t ErrorCode = 0x0060;
			constexpr uintptr_t Message = 0x0070;
		}

		namespace EOSUserPermissions_TA {
			constexpr uintptr_t Data = 0x0060;
		}

		namespace EOSVoiceConfig_TA {
			constexpr uintptr_t bEnabled = 0x0078;
			constexpr uintptr_t MatchRequestDelay = 0x007C;
			constexpr uintptr_t TextNotificationCooldown = 0x0080;
			constexpr uintptr_t BanEnforcementTypes = 0x0088;
			constexpr uintptr_t VoiceReportURL = 0x0098;
		}

		namespace EOSVoiceErrors_TA {
			constexpr uintptr_t VoiceError = 0x0080;
			constexpr uintptr_t VoiceChatBanned = 0x0088;
			constexpr uintptr_t VoiceNotPrimaryPlayer = 0x0090;
			constexpr uintptr_t VoiceNoPlatformPermissions = 0x0098;
			constexpr uintptr_t VoiceNoEpicPermissions = 0x00A0;
			constexpr uintptr_t VoiceNoSpectatorPermissions = 0x00A8;
			constexpr uintptr_t VoiceParentalPermissionRestriction = 0x00B0;
			constexpr uintptr_t VoiceTokenRequestDenied = 0x00B8;
			constexpr uintptr_t VoiceDisabled = 0x00C0;
			constexpr uintptr_t VoiceSettingDisabled = 0x00C8;
			constexpr uintptr_t VoiceInvalidPartyToken = 0x00D0;
			constexpr uintptr_t VoiceAlreadyJoiningRoom = 0x00D8;
			constexpr uintptr_t VoiceAlreadyInRoom = 0x00E0;
			constexpr uintptr_t VoiceRoomNotValid = 0x00E8;
			constexpr uintptr_t VoiceLeaveFailed = 0x00F0;
			constexpr uintptr_t VoiceRemoteUserNotAllowed = 0x00F8;
			constexpr uintptr_t VoiceRemoteUserJoined = 0x0100;
			constexpr uintptr_t VoiceNoConnection = 0x0108;
			constexpr uintptr_t VoiceJoinFailedTooManyParticipants = 0x0110;
			constexpr uintptr_t VoiceJoinFailedInvalidCredentials = 0x0118;
			constexpr uintptr_t VoiceJoinFailed = 0x0120;
			constexpr uintptr_t VoiceUnexpectedError = 0x0128;
			constexpr uintptr_t VoiceAlreadyRequestingToken = 0x0130;
			constexpr uintptr_t VoiceDisabledForTeam = 0x0138;
			constexpr uintptr_t VoiceCrossplatformChatNotEnabled = 0x0140;
			constexpr uintptr_t VoicePlayerPlatformMuted = 0x0148;
			constexpr uintptr_t VoiceCredentialsNotValid = 0x0150;
			constexpr uintptr_t VoiceRoomNotFound = 0x0158;
			constexpr uintptr_t VoiceRemovedDueToSettingChange = 0x0160;
			constexpr uintptr_t VoiceModerationEULANotAccepted = 0x0168;
		}

		namespace EOSVoiceManager_TA {
			constexpr uintptr_t VoiceInterface = 0x0060;
			constexpr uintptr_t VoiceRooms = 0x0068;
			constexpr uintptr_t PendingRoomJoins = 0x0078;
			constexpr uintptr_t VoiceConfig = 0x0088;
			constexpr uintptr_t OnlineGame = 0x0090;
			constexpr uintptr_t OnlineGameParty = 0x0098;
			constexpr uintptr_t Personas = 0x00A0;
			constexpr uintptr_t NoTeamNum = 0x00A8;
			constexpr uintptr_t SpectatorTeamNum = 0x00AC;
			constexpr uintptr_t VoiceReportReasonId = 0x00B0;
			constexpr uintptr_t CurrentRoomTypeBringRecorded = 0x00B1;
			constexpr uintptr_t PrimaryPlayerId = 0x00B8;
			constexpr uintptr_t PlayersRequestingPartyTokens = 0x0100;
			constexpr uintptr_t VoiceRecordingData = 0x0110;
			constexpr uintptr_t MaxRecordingBufferSeconds = 0x0120;
		}

		namespace EOSVoiceSettingsSave_TA {
			constexpr uintptr_t Bitfields_0x00C8 = 0x00C8;  // Multiple: bEnabled, bPushToTalk, bLocalMuted, bMainMenuNotifications, bMatchNotifications, bTextNotifications
			constexpr uintptr_t VoiceChatFilter = 0x00CC;
			constexpr uintptr_t VoiceInputMode = 0x00CD;
			constexpr uintptr_t PreferredRoomType = 0x00CE;
			constexpr uintptr_t NotificationLevel = 0x00CF;
			constexpr uintptr_t VoiceReportingLevel = 0x00D0;
			constexpr uintptr_t OutputVolume = 0x00D4;
			constexpr uintptr_t PreferredAudioDevices = 0x00D8;
			constexpr uintptr_t MutedPlayers = 0x00E8;
			constexpr uintptr_t TextNotificationValue = 0x00F8;
			constexpr uintptr_t MatchNotificationValue = 0x00FC;
			constexpr uintptr_t MainMenuNotificationValue = 0x0100;
			constexpr uintptr_t InputDeviceId = 0x0108;
			constexpr uintptr_t OutputDeviceId = 0x0118;
			constexpr uintptr_t DefaultAudioId = 0x0128;
		}

		namespace EOSVoiceTokenCache_TA {
			constexpr uintptr_t CachedVoiceCredentials = 0x0060;
			constexpr uintptr_t StagedVoiceCredentials = 0x0070;
			constexpr uintptr_t PendingTokenRequests = 0x0080;
			constexpr uintptr_t VoiceConfig = 0x0090;
		}

		namespace ESportConfig_TA {
			constexpr uintptr_t Events = 0x0078;
		}

		namespace EndRoundComponent_TA {
			constexpr uintptr_t SoccarGame = 0x00A8;
		}

		namespace EnforceMaxTeamSizeConfig_TA {
			constexpr uintptr_t bMaxTeamSizeNotEnforced = 0x0078;
		}

		namespace EngagementEventNotification_TA {
			constexpr uintptr_t UIEngagementEventTypeAnim = 0x0170;
		}

		namespace EngagementEventsConfig_TA {
			constexpr uintptr_t bEngagementEventIconsEnabled = 0x0078;
			constexpr uintptr_t Events = 0x0080;
			constexpr uintptr_t EventStatuses = 0x0090;
			constexpr uintptr_t CurrentEventStatus = 0x00A0;
			constexpr uintptr_t PopUpDuration = 0x00D0;
			constexpr uintptr_t SoonInSeconds = 0x00D8;
		}

		namespace EngineAudioBaseComponent_TA {
			constexpr uintptr_t EngineAudio = 0x00A8;
			constexpr uintptr_t ExhaustAudio = 0x00B0;
			constexpr uintptr_t BlowoffComponent = 0x00B8;
			constexpr uintptr_t WheelSpeed = 0x00C0;
			constexpr uintptr_t ThrottleComponent = 0x00C8;
			constexpr uintptr_t GearChangeSound = 0x00D0;
			constexpr uintptr_t MaxActorsGroup = 0x00D8;
			constexpr uintptr_t Car = 0x00E0;
		}

		namespace EngineAudioBlowoffComponent_TA {
			constexpr uintptr_t BlowoffSound = 0x00A8;
			constexpr uintptr_t BlowoffThrottleTime = 0x00B0;
			constexpr uintptr_t Car = 0x00B8;
			constexpr uintptr_t FullThrottleTime = 0x00C0;
		}

		namespace EngineAudioComponent_TA {
			constexpr uintptr_t Profile = 0x0100;
			constexpr uintptr_t OldCarState = 0x0108;
			constexpr uintptr_t NativeState = 0x0118;
		}

		namespace EngineAudioPreviewBase_TA {
			constexpr uintptr_t StartDelay = 0x0060;
			constexpr uintptr_t AccelerateDelay = 0x0064;
			constexpr uintptr_t AccelerateLength = 0x0068;
			constexpr uintptr_t IdleLength = 0x006C;
			constexpr uintptr_t EngineAsset = 0x0070;
			constexpr uintptr_t Ak = 0x0078;
			constexpr uintptr_t Throttle = 0x0080;
		}

		namespace EngineAudioPreviewRev_TA {
			constexpr uintptr_t Profile = 0x0088;
			constexpr uintptr_t PhysicsSim = 0x0090;
			constexpr uintptr_t SimFrame = 0x0098;
		}

		namespace EngineAudioPreview_TA {
			constexpr uintptr_t Profile = 0x0088;
			constexpr uintptr_t NativeState = 0x0090;
			constexpr uintptr_t GearToWheelSpeedAccel = 0x0098;
			constexpr uintptr_t PreviewSpeed = 0x00B0;
			constexpr uintptr_t MaxPreviewSpeed = 0x00B4;
			constexpr uintptr_t WheelSpeedToPreviewSpeed = 0x00B8;
			constexpr uintptr_t BrakeFactor = 0x00BC;
			constexpr uintptr_t IsLocalRTPC = 0x00C0;
		}

		namespace EngineAudioProfileBase_TA {
			constexpr uintptr_t BlowoffThrottleTime = 0x0060;
			constexpr uintptr_t WheelForwardSpeedInterpRate = 0x0064;
			constexpr uintptr_t WheelSideSpeedInterpRate = 0x0068;
			constexpr uintptr_t MaxWheelSpeed = 0x006C;
		}

		namespace EngineAudioProfileREV_TA {
			constexpr uintptr_t Controls = 0x0070;
			constexpr uintptr_t PhysicsSim = 0x0090;
			constexpr uintptr_t RevLimiter = 0x0098;
		}

		namespace EngineAudioProfile_TA {
			constexpr uintptr_t Gears = 0x0070;
			constexpr uintptr_t GearSwitchTime = 0x0080;
			constexpr uintptr_t RPMAccelStart = 0x0084;
			constexpr uintptr_t RPMAccelEnd = 0x0088;
			constexpr uintptr_t RPMAccelClutched = 0x008C;
			constexpr uintptr_t RPMDecelClutched = 0x0090;
			constexpr uintptr_t RPMMaxClutched = 0x0094;
			constexpr uintptr_t RPMAccelFactor = 0x0098;
			constexpr uintptr_t RPMDecelFactor = 0x009C;
			constexpr uintptr_t RPMAccelBoostStart = 0x00A0;
			constexpr uintptr_t RPMAccelBoostEnd = 0x00A4;
			constexpr uintptr_t RPMShiftUpBoost = 0x00A8;
			constexpr uintptr_t RPMMaxLoad = 0x00AC;
			constexpr uintptr_t EngineLoadSmoothFactor = 0x00B0;
			constexpr uintptr_t AirMaxThrottleTime = 0x00B4;
			constexpr uintptr_t RevLimitRPM = 0x00B8;
			constexpr uintptr_t RevLimitRPMDecel = 0x00BC;
		}

		namespace EngineAudioREVComponent_TA {
			constexpr uintptr_t Profile = 0x0100;
			constexpr uintptr_t PhysicsSim = 0x0108;
			constexpr uintptr_t RevLimiter = 0x0110;
			constexpr uintptr_t Reverse = 0x0118;
			constexpr uintptr_t VelocitySync = 0x0120;
			constexpr uintptr_t Boost = 0x0128;
			constexpr uintptr_t BoostLevel = 0x0130;
			constexpr uintptr_t Resistance = 0x0138;
			constexpr uintptr_t GearManager = 0x0140;
			constexpr uintptr_t SimFrame = 0x0148;
			constexpr uintptr_t CachedUpdateParams = 0x0158;
		}

		namespace EngineAudioRevSimBoostLevel_TA {
			constexpr uintptr_t ActivatedInterpTime = 0x0070;
			constexpr uintptr_t InactiveInterpTime = 0x0074;
			constexpr uintptr_t InterpExp = 0x0078;
			constexpr uintptr_t ActivatedSpeedSq = 0x007C;
			constexpr uintptr_t InterpTime = 0x0080;
			constexpr uintptr_t InterpValue = 0x0084;
			constexpr uintptr_t InterpTimeElapsed = 0x0088;
			constexpr uintptr_t TargetValue = 0x008C;
		}

		namespace EngineAudioRevSimBoost_TA {
			constexpr uintptr_t InterpTime = 0x0070;
			constexpr uintptr_t InterpScale = 0x0074;
			constexpr uintptr_t InterpExp = 0x0078;
			constexpr uintptr_t ActiveTime = 0x007C;
		}

		namespace EngineAudioRevSimGearManager_TA {
			constexpr uintptr_t RealGear = 0x0070;
			constexpr uintptr_t FakeGear = 0x0074;
			constexpr uintptr_t bPendingSilentDownShift = 0x0078;
			constexpr uintptr_t TimeRemaining = 0x007C;
			constexpr uintptr_t SilentDownShiftDelay = 0x0080;
		}

		namespace EngineAudioRevSimLimiter_TA {
			constexpr uintptr_t LimitTime = 0x0070;
			constexpr uintptr_t SideSpeedThresh = 0x0074;
			constexpr uintptr_t DecelScale = 0x0078;
			constexpr uintptr_t AirMaxThrottleTime = 0x007C;
			constexpr uintptr_t TimeRemaining = 0x0080;
			constexpr uintptr_t TimeActiveInAir = 0x0084;
		}

		namespace EngineAudioRevSimResistance_TA {
			constexpr uintptr_t Clutched = 0x0070;
			constexpr uintptr_t ZScale = 0x0074;
			constexpr uintptr_t SideSpeedCurve = 0x0078;
			constexpr uintptr_t SideFriction = 0x0090;
			constexpr uintptr_t ZFriction = 0x0094;
			constexpr uintptr_t SideAngle = 0x0098;
		}

		namespace EngineAudioRevSimReverse_TA {
			constexpr uintptr_t ReverseGearScale = 0x0070;
		}

		namespace EngineAudioRevSimVelocitySync_TA {
			constexpr uintptr_t NoThrottleTime = 0x0070;
			constexpr uintptr_t NoThrottleTimeElapsed = 0x0074;
			constexpr uintptr_t RealToSimScale = 0x0078;
			constexpr uintptr_t InterpSpeed = 0x007C;
			constexpr uintptr_t InterpTime = 0x0080;
			constexpr uintptr_t InterpTimeLeft = 0x0084;
			constexpr uintptr_t FirstGearThrottleThreshold = 0x0088;
		}

		namespace EngineShare_TA {
			constexpr uintptr_t Bitfields_0x0170 = 0x0170;  // Multiple: bEnableClientPrediction, bClientPhysicsUpdate, bDisableClientCorrections, bRunningPhysicsFrame, bDebugClientCorrections, bForceClientCorrection
			constexpr uintptr_t ReplayManager = 0x0178;
			constexpr uintptr_t AdManager = 0x0180;
			constexpr uintptr_t OnlineProductStore = 0x0188;
			constexpr uintptr_t PhysicsFramerate = 0x0190;
			constexpr uintptr_t MaxPhysicsSubsteps = 0x0194;
			constexpr uintptr_t MaxUploadedClientFrames = 0x0198;
			constexpr uintptr_t MaxClientReplayFrames = 0x019C;
			constexpr uintptr_t PhysicsFrame = 0x01A0;
			constexpr uintptr_t RenderAlpha = 0x01A4;
			constexpr uintptr_t ReplicatedPhysicsFrame = 0x01A8;
			constexpr uintptr_t DirtyPhysicsFrame = 0x01AC;
			constexpr uintptr_t ForceCorrectionFrames = 0x01B0;
			constexpr uintptr_t TickNotifies = 0x01B8;
			constexpr uintptr_t TickNotifyIndex = 0x01C8;
			constexpr uintptr_t ShellArchetypePath = 0x01D0;
			constexpr uintptr_t SystemSettingsManager = 0x01E0;
			constexpr uintptr_t DebugClientCorrectionStartTime = 0x01E8;
			constexpr uintptr_t DebugClientCorrectionCount = 0x01EC;
			constexpr uintptr_t StatGraphs = 0x01F0;
			constexpr uintptr_t PhysicsConfig = 0x01F8;
			constexpr uintptr_t InputBuffers = 0x0200;
			constexpr uintptr_t LastPhysicsDeltaTimeScale = 0x0210;
		}

		namespace EpicAccountSave_TA {
			constexpr uintptr_t LinkedPlatforms = 0x00C8;
			constexpr uintptr_t ConvertFriendsData = 0x00D8;
			constexpr uintptr_t SentEOSFriendInvites = 0x00E8;
		}

		namespace EpicFriendsConverterConfig_TA {
			constexpr uintptr_t SecondsBetweenInvites = 0x0078;
			constexpr uintptr_t MaxNumberOfAttemptsPerUser = 0x007C;
		}

		namespace EpicFriendsConverter_TA {
			constexpr uintptr_t bCheckedToConvert = 0x0060;
			constexpr uintptr_t EpicSave = 0x0068;
			constexpr uintptr_t InvitesToSend = 0x0070;
			constexpr uintptr_t LocalPlayerId = 0x0080;
			constexpr uintptr_t EpicFriendsConverterConfig = 0x0088;
			constexpr uintptr_t EOSSubsystem = 0x0090;
			constexpr uintptr_t FriendsPlugin = 0x0098;
			constexpr uintptr_t SecondsBetweenInvites = 0x00A0;
			constexpr uintptr_t NumFailedAttempts = 0x00A4;
		}

		namespace Errors_TA {
			constexpr uintptr_t ReplayImport = 0x0080;
			constexpr uintptr_t ReplayExport = 0x0088;
			constexpr uintptr_t ReplayNoReplay = 0x0090;
			constexpr uintptr_t ReplayExportNoSpace = 0x0098;
			constexpr uintptr_t UpdateRequired = 0x00A0;
			constexpr uintptr_t TradeInMaxed = 0x00A8;
			constexpr uintptr_t OrderNotFound = 0x00B0;
			constexpr uintptr_t InventoryOutOfSync = 0x00B8;
			constexpr uintptr_t TimedOut = 0x00C0;
			constexpr uintptr_t TrainingModeNotFound = 0x00C8;
			constexpr uintptr_t TrainingModeDownloadFailed = 0x00D0;
			constexpr uintptr_t TrainingModeInvalidFavoritedCodes = 0x00D8;
			constexpr uintptr_t TrainingModeListPlayerTrainingFailed = 0x00E0;
			constexpr uintptr_t TrainingModeAddFailed = 0x00E8;
			constexpr uintptr_t TrainingModeUpdateFailed = 0x00F0;
			constexpr uintptr_t TrainingNameInvalid = 0x00F8;
			constexpr uintptr_t CodeIsNotValid = 0x0100;
			constexpr uintptr_t CodeHasBeenRedeemed = 0x0108;
			constexpr uintptr_t CodeMaxIncorrectAttempts = 0x0110;
			constexpr uintptr_t PlayerAlreadyLinked = 0x0118;
			constexpr uintptr_t InvalidPlayerPlatformAuth = 0x0120;
			constexpr uintptr_t OnlineAchievementsSaveDataNotFound = 0x0128;
			constexpr uintptr_t ShopItemPlayerPurchaseMax = 0x0130;
			constexpr uintptr_t MicrotransactionProductPurchaseLimitReached = 0x0138;
			constexpr uintptr_t TwoFactorAuthenticationRequired = 0x0140;
			constexpr uintptr_t MatchHasConcluded = 0x0148;
			constexpr uintptr_t InvalidRocketPassPurchase = 0x0150;
		}

		namespace EulaConfig_TA {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bRequiresAcceptance, bAllowEulaReset
			constexpr uintptr_t ExcludedPlatforms = 0x0080;
			constexpr uintptr_t IgnoredHashIds = 0x0090;
		}

		namespace EulaSave_TA {
			constexpr uintptr_t AcceptedEulas = 0x00C8;
			constexpr uintptr_t ResetCounter = 0x00D8;
			constexpr uintptr_t LatestCDNEula = 0x00E0;
			constexpr uintptr_t LatestLanguage = 0x00F0;
		}

		namespace Eula_TA {
			constexpr uintptr_t EulaConfig = 0x0090;
			constexpr uintptr_t bShowingOfflineEULA = 0x0098;
		}

		namespace EventsPageConfig_TA {
			constexpr uintptr_t bEnabled = 0x0078;
			constexpr uintptr_t URL = 0x0080;
			constexpr uintptr_t ButtonTextureURL_Default = 0x0090;
			constexpr uintptr_t ButtonTextureURL_Hover = 0x00A0;
			constexpr uintptr_t ButtonTextureURL_Click = 0x00B0;
			constexpr uintptr_t ButtonTexture_Default = 0x00C0;
			constexpr uintptr_t ButtonTexture_Hover = 0x00C8;
			constexpr uintptr_t ButtonTexture_Click = 0x00D0;
		}

		namespace ExclusiveInteraction_TA {
			constexpr uintptr_t ControllersWithExclusiveInputEnabled = 0x00D0;
		}

		namespace ExplosionHitHandler_TA {
			constexpr uintptr_t Bitfields_0x00F8 = 0x00F8;  // Multiple: bApplyToAllCars, bIsActive
			constexpr uintptr_t VehicleToContactInfo = 0x0100;
		}

		namespace ExplosionPreviewer_TA {
			constexpr uintptr_t ProductLoader = 0x0070;
			constexpr uintptr_t ExplosionId = 0x0078;
			constexpr uintptr_t ExplosionProduct = 0x0088;
			constexpr uintptr_t ExplosionInstance = 0x0090;
			constexpr uintptr_t bPreviewing = 0x0098;
			constexpr uintptr_t PC = 0x00A0;
		}

		namespace FXActor_BallBreakout_TA {
			constexpr uintptr_t MaxChargeSFX = 0x03D8;
			constexpr uintptr_t SwitchTeamSFX = 0x03E0;
			constexpr uintptr_t IdleSFX = 0x03E8;
			constexpr uintptr_t ResetSFX = 0x03F0;
			constexpr uintptr_t ChargeSFX = 0x03F8;
			constexpr uintptr_t DamageSFX = 0x0408;
			constexpr uintptr_t DamageEvents = 0x0418;
			constexpr uintptr_t BallBreakout = 0x0428;
			constexpr uintptr_t LastDamage = 0x0430;
			constexpr uintptr_t LastNoDamageHit = 0x0434;
		}

		namespace FXActor_BallHaunted_TA {
			constexpr uintptr_t SwitchTeamSFX = 0x03D8;
			constexpr uintptr_t IdleSFX = 0x03E0;
			constexpr uintptr_t BeamBreakSFX = 0x03E8;
			constexpr uintptr_t BallEnterTrapSFX = 0x03F0;
			constexpr uintptr_t BallExitTrapSFX = 0x03F8;
			constexpr uintptr_t BallCountdownSFX = 0x0400;
			constexpr uintptr_t DamageEvents = 0x0408;
			constexpr uintptr_t PulsePSArchetype = 0x0418;
			constexpr uintptr_t PulsePSParam = 0x0420;
			constexpr uintptr_t BallPulseTimeModifier = 0x0428;
			constexpr uintptr_t BrokenBeamResetTime = 0x042C;
			constexpr uintptr_t MaxTimePercentageToPerformPulse = 0x0430;
			constexpr uintptr_t BallHaunted = 0x0438;
			constexpr uintptr_t DamageIndex = 0x0440;
			constexpr uintptr_t Bitfields_0x0444 = 0x0444;  // Multiple: bBallExploded, bBeamIsBroken
			constexpr uintptr_t CurrentBrokenTime = 0x0448;
			constexpr uintptr_t NextPulseTime = 0x044C;
			constexpr uintptr_t PulsePSC = 0x0450;
		}

		namespace FXActor_BallPossession_TA {
			constexpr uintptr_t PossessionStaticMesh = 0x0378;
			constexpr uintptr_t MeshMaterialInstance = 0x0380;
			constexpr uintptr_t PossessionNeutralParam = 0x0388;
			constexpr uintptr_t PossessionTeamColorParam = 0x0390;
			constexpr uintptr_t BallFreezeScale = 0x0398;
			constexpr uintptr_t PossessionMesh = 0x03A0;
			constexpr uintptr_t TeamOwnerInstance = 0x03A8;
		}

		namespace FXActor_BallResetWarn_TA {
			constexpr uintptr_t BallPulseTimeModifier = 0x0378;
			constexpr uintptr_t StartingPulseTime = 0x037C;
			constexpr uintptr_t TimeMultiplier = 0x0380;
			constexpr uintptr_t BallCountdownSFX = 0x0388;
			constexpr uintptr_t BallTeleportSFX = 0x0390;
			constexpr uintptr_t PulsePSArchetype = 0x0398;
			constexpr uintptr_t PulseTimeParam = 0x03A0;
			constexpr uintptr_t PulsePSC = 0x03A8;
			constexpr uintptr_t Ball = 0x03B0;
			constexpr uintptr_t ElapsedTime = 0x03B8;
			constexpr uintptr_t NextPulseTime = 0x03BC;
		}

		namespace FXActor_Ball_TA {
			constexpr uintptr_t SuperSonicSpeed = 0x0378;
			constexpr uintptr_t MaxGoalProximityDistance = 0x037C;
			constexpr uintptr_t BallFadeInSpeed = 0x0380;
			constexpr uintptr_t BallFadeOutSpeed = 0x0384;
			constexpr uintptr_t TrailOpacityLerpSpeed = 0x0388;
			constexpr uintptr_t CurrentTrailOpacity = 0x038C;
			constexpr uintptr_t BallFadeSpeed = 0x0390;
			constexpr uintptr_t BallFadeOpacity = 0x0394;
			constexpr uintptr_t ShockwaveParamMin = 0x0398;
			constexpr uintptr_t ShockwaveParamMax = 0x039C;
			constexpr uintptr_t ShockwaveParamTime = 0x03A0;
			constexpr uintptr_t InAirState = 0x03A8;
			constexpr uintptr_t SuperSonicState = 0x03B0;
			constexpr uintptr_t Ball = 0x03B8;
			constexpr uintptr_t TouchingWorldTime = 0x03C0;
			constexpr uintptr_t Bitfields_0x03C4 = 0x03C4;  // Multiple: bInAir, bSuperSonic
			constexpr uintptr_t CurrentTrailDilation = 0x03C8;
			constexpr uintptr_t MaxTrailDilation = 0x03CC;
			constexpr uintptr_t TrailIntensityName = 0x03D0;
		}

		namespace FXActor_Boost_TA {
			constexpr uintptr_t ParametersPerExtraBoostSockets = 0x0378;
			constexpr uintptr_t BodyParticleParameters = 0x0388;
			constexpr uintptr_t DryFireSound = 0x0398;
			constexpr uintptr_t CarBoostGlowColor = 0x03A0;
			constexpr uintptr_t BoostMeshMaterialParams = 0x03B0;
			constexpr uintptr_t BoostMeshMaterialOverrides = 0x03C0;
			constexpr uintptr_t BoostMeshArchetype = 0x03D0;
			constexpr uintptr_t BoostMesh = 0x03D8;
			constexpr uintptr_t BoostMeshFadeInTime = 0x03E0;
			constexpr uintptr_t BoostMeshFadeOutTime = 0x03E8;
			constexpr uintptr_t MultipleBoostsOverride = 0x03F0;
			constexpr uintptr_t BoostEmitterSocketBehavior = 0x0400;
			constexpr uintptr_t PreviewParticleOverrides = 0x0408;
			constexpr uintptr_t Bitfields_0x0418 = 0x0418;  // Multiple: bWasBoosting, bWasInputBoosting
			constexpr uintptr_t MaxBoostMeshMaterialTime = 0x041C;
			constexpr uintptr_t Vehicle = 0x0420;
			constexpr uintptr_t CarPreview = 0x0428;
			constexpr uintptr_t CarMesh = 0x0430;
		}

		namespace FXActor_BreakoutPlatform_TA {
			constexpr uintptr_t PlatformMaterial = 0x0378;
			constexpr uintptr_t RaysMaterial = 0x0380;
			constexpr uintptr_t LocationParam = 0x0388;
			constexpr uintptr_t DamagedParams = 0x0390;
			constexpr uintptr_t BrokenParams = 0x03A0;
			constexpr uintptr_t DamageSFX = 0x03B0;
			constexpr uintptr_t DirectBreakSFX = 0x03B8;
			constexpr uintptr_t IndirectBreakSFX = 0x03C0;
			constexpr uintptr_t DamageDistanceSpeed = 0x03C8;
			constexpr uintptr_t DamagedState = 0x03D0;
			constexpr uintptr_t BrokenState = 0x03D8;
			constexpr uintptr_t BreakoutPlatform = 0x03E0;
			constexpr uintptr_t MIC = 0x03E8;
			constexpr uintptr_t RaysMIC = 0x03F0;
			constexpr uintptr_t DamageState = 0x03F8;
			constexpr uintptr_t DamageTime = 0x03FC;
			constexpr uintptr_t BrokenTime = 0x0400;
			constexpr uintptr_t RemainingTime = 0x0404;
		}

		namespace FXActor_Car_Knockout_TA {
			constexpr uintptr_t StateEvents = 0x0498;
			constexpr uintptr_t MVPEvent = 0x04A8;
		}

		namespace FXActor_Car_TA {
			constexpr uintptr_t WheelEffectsMap = 0x0378;
			constexpr uintptr_t AkWheelImpactSound = 0x0380;
			constexpr uintptr_t AkWheelDriveSound = 0x0388;
			constexpr uintptr_t AkEnterSupersonicSound = 0x0390;
			constexpr uintptr_t AkLoopSupersonicSound = 0x0398;
			constexpr uintptr_t MinImpactMomentum = 0x03A0;
			constexpr uintptr_t AkImpactTypeKey = 0x03A4;
			constexpr uintptr_t AkImpactIntensityKey = 0x03AC;
			constexpr uintptr_t WheelImpactShake = 0x03B8;
			constexpr uintptr_t WheelImpactForceFeedback = 0x03C0;
			constexpr uintptr_t ShakeScaleCurve = 0x03C8;
			constexpr uintptr_t SupersonicWheelTemplate = 0x03E0;
			constexpr uintptr_t BoostGlowRate = 0x03E8;
			constexpr uintptr_t ShakeComponent = 0x03F0;
			constexpr uintptr_t Vehicle = 0x03F8;
			constexpr uintptr_t Bitfields_0x0400 = 0x0400;  // Multiple: bThrottle, bInAir, bBrake, bWasBoosting, bWasBoostFlying, bWasSuperSonic, bWasOnWall, bEnabled, bPreferSimulatedState
			constexpr uintptr_t ThrottleState = 0x0408;
			constexpr uintptr_t SuperSonicState = 0x0410;
			constexpr uintptr_t InAirState = 0x0418;
			constexpr uintptr_t BoostState = 0x0420;
			constexpr uintptr_t BoostPreviewState = 0x0428;
			constexpr uintptr_t BoostFlyState = 0x0430;
			constexpr uintptr_t OnWallState = 0x0438;
			constexpr uintptr_t SuperSonicEndState = 0x0440;
			constexpr uintptr_t PMCAnimBeginState = 0x0448;
			constexpr uintptr_t PMCAnimEndState = 0x0450;
			constexpr uintptr_t ContactPhysMat = 0x0458;
			constexpr uintptr_t ContactPhysMatProp = 0x0460;
			constexpr uintptr_t WheelEffects = 0x0468;
			constexpr uintptr_t WheelEffectsParticle = 0x0478;
			constexpr uintptr_t CarMesh = 0x0480;
			constexpr uintptr_t MaxActorsGroup = 0x0488;
			constexpr uintptr_t BoostGlow = 0x0490;
		}

		namespace FXActor_GameEditorActor_TA {
			constexpr uintptr_t SpeedMultiplier = 0x0328;
			constexpr uintptr_t EditingState = 0x0330;
			constexpr uintptr_t PrevLocation = 0x0338;
		}

		namespace FXActor_Knockout_Attack_TA {
			constexpr uintptr_t AttackType = 0x0378;
			constexpr uintptr_t AttackEvents = 0x0380;
		}

		namespace FXActor_SafeZone_Knockout_TA {
			constexpr uintptr_t SafeZones = 0x0378;
			constexpr uintptr_t EliminationSafeZones = 0x0388;
			constexpr uintptr_t NonEliminationSafeZones = 0x0398;
			constexpr uintptr_t GameEvent = 0x03A8;
			constexpr uintptr_t LastZoneIndex = 0x03B0;
			constexpr uintptr_t StateEvents = 0x03B8;
		}

		namespace FXActor_TA {
			constexpr uintptr_t HideWorldUIState = 0x0328;
			constexpr uintptr_t PreviewState = 0x0330;
			constexpr uintptr_t PaintedState = 0x0338;
			constexpr uintptr_t BoostEndEvent = 0x0340;
			constexpr uintptr_t StartOfReplayEvent = 0x0348;
			constexpr uintptr_t TeamStates = 0x0350;
			constexpr uintptr_t MyTeamState = 0x0360;
			constexpr uintptr_t OpposingTeamState = 0x0368;
			constexpr uintptr_t LocalPlayerAudioParamsComponent = 0x0370;
		}

		namespace FXActor_TrainingEditor_TA {
			constexpr uintptr_t AdjustSpeedStateRemoveDelay = 0x0328;
			constexpr uintptr_t AkBallSpeedDirectionChange = 0x0330;
			constexpr uintptr_t SimulatingBallState = 0x0338;
			constexpr uintptr_t AdjustingSpeedState = 0x0340;
			constexpr uintptr_t PlaytestingState = 0x0348;
			constexpr uintptr_t GameEvent = 0x0350;
			constexpr uintptr_t PrevLaunchSpeed = 0x0358;
			constexpr uintptr_t PrevLaunchSpeedSign = 0x035C;
		}

		namespace FXExplosionHandler_TA {
			constexpr uintptr_t FXToApply = 0x0150;
		}

		namespace FXTrait_BoostParticle_TA {
			constexpr uintptr_t ParticlePreview = 0x0060;
			constexpr uintptr_t DuplicateParticle = 0x0068;
			constexpr uintptr_t DuplicateParticlePreview = 0x0070;
			constexpr uintptr_t SharedParameters = 0x0078;
			constexpr uintptr_t DuplicateParameters = 0x0088;
			constexpr uintptr_t PreviewOverrideParameters = 0x0098;
			constexpr uintptr_t bConvertedDuplicateParametersToSharedParameters = 0x00A8;
		}

		namespace FXTrait_PreviewParticle_TA {
			constexpr uintptr_t ParticlePreview = 0x0060;
			constexpr uintptr_t OldParticle = 0x0068;
		}

		namespace FaceItClientReservationMessage_X {
			constexpr uintptr_t Reservation = 0x0060;
			constexpr uintptr_t MatchInfo = 0x00D0;
			constexpr uintptr_t Expiration = 0x0150;
			constexpr uintptr_t OfflineTimeToLiveSeconds = 0x0158;
		}

		namespace FaceItConfig_TA {
			constexpr uintptr_t bEnabled = 0x0078;
			constexpr uintptr_t PartnerNames = 0x0080;
			constexpr uintptr_t DefaultPartnerName = 0x0090;
		}

		namespace FaceItErrors_TA {
			constexpr uintptr_t MatchHasBeenCancelled = 0x0080;
			constexpr uintptr_t CannotJoinCrossPlatformMatch = 0x0088;
			constexpr uintptr_t CannotJoinWhileInParty = 0x0090;
			constexpr uintptr_t CannotJoinWhilePlayingSplitscreen = 0x0098;
			constexpr uintptr_t CannotJoinWhileOnline = 0x00A0;
			constexpr uintptr_t ReturnToMainMenuToJoin = 0x00A8;
			constexpr uintptr_t JoinGameFailed = 0x00B0;
			constexpr uintptr_t NoFaceItMatchFound = 0x00B8;
			constexpr uintptr_t FaceItGameServerPending = 0x00C0;
			constexpr uintptr_t ExternalMatchServerNotFound = 0x00C8;
			constexpr uintptr_t ReservationSentToIncorrectPlayer = 0x00D0;
		}

		namespace FaceItFindServerTask_TA {
			constexpr uintptr_t SearchTimeout = 0x00D0;
			constexpr uintptr_t RPC = 0x00D8;
		}

		namespace FaceItMatchNotification_TA {
			constexpr uintptr_t ReservationData = 0x0170;
			constexpr uintptr_t MatchInfo = 0x01E0;
		}

		namespace FaceIt_TA {
			constexpr uintptr_t MatchInfo = 0x0060;
			constexpr uintptr_t ReservationData = 0x00E0;
			constexpr uintptr_t JoinTask = 0x0150;
			constexpr uintptr_t Config = 0x0158;
			constexpr uintptr_t OnlineGame = 0x0160;
			constexpr uintptr_t OnlineGameParty = 0x0168;
			constexpr uintptr_t PendingFindMatchTask = 0x0170;
		}

		namespace FirstTimeExperienceManager_TA {
			constexpr uintptr_t Versioning = 0x0060;
			constexpr uintptr_t FTEGroups = 0x0068;
			constexpr uintptr_t FTELevelInfo = 0x0078;
			constexpr uintptr_t FTERedefine = 0x0088;
			constexpr uintptr_t CurrentActiveGroup = 0x0090;
			constexpr uintptr_t CurrentCheckpointIndex = 0x00D8;
			constexpr uintptr_t CurrentCheckpoint = 0x00DC;
			constexpr uintptr_t FTESave = 0x00E8;
			constexpr uintptr_t LegacySave = 0x00F0;
			constexpr uintptr_t ChallengeCompleteInfo = 0x00F8;
			constexpr uintptr_t ActiveTriggers = 0x0108;
			constexpr uintptr_t bEnabled = 0x0118;
		}

		namespace FirstTimeExperienceRedefinition_TA {
			constexpr uintptr_t FTERedefinedInfo = 0x0060;
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bFTEManagerEnabled, bClearActiveFTE
		}

		namespace FirstTimeExperienceSave_TA {
			constexpr uintptr_t CompletedFTEs = 0x00C8;
			constexpr uintptr_t Versioning = 0x00D8;
			constexpr uintptr_t LegacyGroupType = 0x00D9;
			constexpr uintptr_t ActiveGroup = 0x00DC;
			constexpr uintptr_t ActiveCheckpoint = 0x00E4;
			constexpr uintptr_t bTentativelyComplete = 0x00EC;
		}

		namespace FlockActor_TA {
			constexpr uintptr_t AgentMesh = 0x0268;
			constexpr uintptr_t FlockInstancedMesh = 0x0270;
			constexpr uintptr_t FlockSize = 0x0278;
			constexpr uintptr_t SeperationWeight = 0x027C;
			constexpr uintptr_t FlockRadius = 0x0280;
			constexpr uintptr_t AgentSpeed = 0x028C;
			constexpr uintptr_t SeperationIdealDistance = 0x0290;
			constexpr uintptr_t Spline = 0x0298;
			constexpr uintptr_t SpawnSpreadDistanceAlongSpline = 0x02A0;
			constexpr uintptr_t Bitfields_0x02A4 = 0x02A4;  // Multiple: bRestartTimerEnabled, UpdateFlockMovement, ResetFlockOnToggleUpdateMovement
			constexpr uintptr_t WaitTimeInSeconds = 0x02A8;
			constexpr uintptr_t MinAgentScale = 0x02AC;
			constexpr uintptr_t MaxAgentScale = 0x02B0;
			constexpr uintptr_t CurrentRestartTime = 0x02B4;
			constexpr uintptr_t Agents = 0x02B8;
			constexpr uintptr_t AverageAgentPosition = 0x02C8;
		}

		namespace FloppyBits_TA {
			constexpr uintptr_t PhysAsset = 0x0078;
			constexpr uintptr_t CollisionChannels = 0x0080;
			constexpr uintptr_t SkelMesh = 0x0088;
		}

		namespace ForceVolume_TA {
			constexpr uintptr_t VfTable_IITickNotify_TA = 0x02A8;
			constexpr uintptr_t ForceDirection = 0x02B0;
			constexpr uintptr_t ConstantForceMode = 0x02B1;
			constexpr uintptr_t EnterForceMode = 0x02B2;
			constexpr uintptr_t ConstantForce = 0x02B4;
			constexpr uintptr_t EnterForce = 0x02B8;
			constexpr uintptr_t CustomForceDirection = 0x02C0;
		}

		namespace FpsBucketRecorder_TA {
			constexpr uintptr_t Buckets = 0x00A0;
			constexpr uintptr_t MinFPS = 0x00B0;
			constexpr uintptr_t MaxFPS = 0x00B4;
		}

		namespace FreeToPlayConfig_TA {
			constexpr uintptr_t bRequireOnlineSubscription = 0x0078;
		}

		namespace FreeplayCommandsConfig_TA {
			constexpr uintptr_t BallSpinSpeedMultiplier = 0x0078;
			constexpr uintptr_t BallInFrontDistance = 0x007C;
			constexpr uintptr_t BallOnCarDistance = 0x0080;
			constexpr uintptr_t BallOnCarBaseForwardOffset = 0x0084;
			constexpr uintptr_t BallOnCarForwardOffsetFromTurn = 0x0088;
			constexpr uintptr_t BallOnCarAccelerationEffect = 0x008C;
			constexpr uintptr_t BallOnCarMaxRightOffset = 0x0090;
			constexpr uintptr_t BallOnCarSlowRightOffsetPerc = 0x0094;
			constexpr uintptr_t BallOnCarMinUpOffsetPerc = 0x0098;
			constexpr uintptr_t PopBallUpZVelocity = 0x009C;
			constexpr uintptr_t MaxVerticalLaunchSpeedRatio = 0x00A0;
			constexpr uintptr_t MaxVerticalLaunchSpeedRatioHoops = 0x00A4;
			constexpr uintptr_t DefendShotLaunchSpeed = 0x00A8;
			constexpr uintptr_t DefendShotLaunchSpeedHoops = 0x00AC;
			constexpr uintptr_t DefendShotLaunchSpeedBreakout = 0x00B0;
			constexpr uintptr_t DefendShotHoopsRecommendedReboundRange = 0x00B4;
			constexpr uintptr_t DefendShotHoopsSpeedDropoffRange = 0x00B8;
			constexpr uintptr_t DefendShotBreakoutSpeedDropoffRange = 0x00BC;
			constexpr uintptr_t DefendShotBreakoutSpeedDropoffRangeHeight = 0x00C0;
			constexpr uintptr_t DefendShotHoopsMinSpeedReductionAngle = 0x00C4;
			constexpr uintptr_t DefendShotHoopsAboveNetSpeedReduction = 0x00C8;
			constexpr uintptr_t DefendShotBreakoutMaxTileDistance = 0x00CC;
			constexpr uintptr_t RedirectPassLaunchSpeed = 0x00D0;
			constexpr uintptr_t RedirectPassVelocityWeight = 0x00D4;
			constexpr uintptr_t RedirectPassVelocityZWeight = 0x00D8;
			constexpr uintptr_t RedirectPassGoalWeight = 0x00DC;
			constexpr uintptr_t RedirectPassMaxGoalLeading = 0x00E0;
			constexpr uintptr_t RedirectPassAdditionalHeight = 0x00E4;
			constexpr uintptr_t RedirectPassSpeedDropoffRange = 0x00E8;
			constexpr uintptr_t RedirectPassIterations = 0x00EC;
			constexpr uintptr_t DefendShotHoopsMaxSamples = 0x00F0;
			constexpr uintptr_t DefendShotHoopsReboundDenominator = 0x00F4;
			constexpr uintptr_t TeleportSucceededSFX = 0x00F8;
			constexpr uintptr_t TeleportFailedSFX = 0x0100;
			constexpr uintptr_t LaunchBallSFX = 0x0108;
		}

		namespace FreeplayCommands_TA {
			constexpr uintptr_t SoccarGame = 0x0268;
			constexpr uintptr_t PlayerController = 0x0270;
			constexpr uintptr_t FreeplayConfig = 0x0278;
			constexpr uintptr_t ActivatedCommandsMaxLength = 0x0280;
			constexpr uintptr_t ActivatedCommands = 0x0288;
			constexpr uintptr_t LastResetTime = 0x0298;
			constexpr uintptr_t ResetCooldown = 0x029C;
		}

		namespace FreeplayConfig_TA {
			constexpr uintptr_t DefaultBoostRechargeDelay = 0x0078;
			constexpr uintptr_t BoostRechargeRate = 0x007C;
			constexpr uintptr_t bBoostRechargeGroundOnly = 0x0080;
		}

		namespace FreeplayErrors_TA {
			constexpr uintptr_t NoCar = 0x0080;
			constexpr uintptr_t NoBall = 0x0088;
			constexpr uintptr_t NoClosestGoal = 0x0090;
			constexpr uintptr_t TeleportFailed = 0x0098;
			constexpr uintptr_t InvalidHoopsGoal = 0x00A0;
			constexpr uintptr_t InvalidBreakoutGame = 0x00A8;
			constexpr uintptr_t StillInResetCooldown = 0x00B0;
		}

		namespace FreeplaySessionManager_TA {
			constexpr uintptr_t FreeplayCommands = 0x0268;
			constexpr uintptr_t SoccarEvent = 0x0270;
			constexpr uintptr_t Bitfields_0x0278 = 0x0278;  // Multiple: bCanDisableGoalReset, bDefaultBoostRechargeGroundOnly
			constexpr uintptr_t Settings = 0x027C;
			constexpr uintptr_t DefaultBoostRechargeRate = 0x0280;
			constexpr uintptr_t DefaultBoostRechargeDelay = 0x0284;
			constexpr uintptr_t OnlineFreeplaySettings = 0x0288;
		}

		namespace FriendRequestNotification_TA {
			constexpr uintptr_t PlayerID = 0x0170;
		}

		namespace FriendsListBuilder_TA {
			constexpr uintptr_t PlatformFriends = 0x0060;
			constexpr uintptr_t EpicFriends = 0x0070;
			constexpr uintptr_t AllFriends = 0x0080;
		}

		namespace GFxClubAction_TA {
			constexpr uintptr_t Task = 0x0060;
			constexpr uintptr_t ErrorMessage = 0x0068;
			constexpr uintptr_t GFxClubsOwner = 0x0078;
		}

		namespace GFxData_AdHoc_TA {
			constexpr uintptr_t AdHocDesiredState = 0x0098;
			constexpr uintptr_t AdHocState = 0x0099;
		}

		namespace GFxData_AutoTour_CompletedResults_TA {
			constexpr uintptr_t PsyNet = 0x0098;
			constexpr uintptr_t Tournaments = 0x00A0;
			constexpr uintptr_t Config = 0x00A8;
			constexpr uintptr_t AutoTour = 0x00B0;
			constexpr uintptr_t CycleID = 0x00B8;
			constexpr uintptr_t WeekIndex = 0x00C0;
			constexpr uintptr_t Bitfields_0x00C4 = 0x00C4;  // Multiple: bEliminatedFirstRound, bWeeksResultsChanged, bReceivedResults, bFailedToRetrieveResults
			constexpr uintptr_t NewTournamentResult = 0x00C8;
			constexpr uintptr_t OldWeeklyResults = 0x00D8;
			constexpr uintptr_t NewWeeklyResults = 0x00E8;
			constexpr uintptr_t CurrencyRewards = 0x00F8;
			constexpr uintptr_t OldWeeklyCurrencies = 0x0108;
			constexpr uintptr_t WeeklyCurrencies = 0x0118;
			constexpr uintptr_t FinalCurrencies = 0x0128;
			constexpr uintptr_t TournamentID = 0x0138;
			constexpr uintptr_t ScheduleID = 0x0140;
			constexpr uintptr_t RejoinTournamentTime = 0x0148;
		}

		namespace GFxData_AutoTour_TA {
			constexpr uintptr_t Config = 0x0098;
			constexpr uintptr_t ScheduleRegionLabel = 0x00A0;
			constexpr uintptr_t NumWeeksInCycle = 0x00B0;
			constexpr uintptr_t CycleScore = 0x00B4;
			constexpr uintptr_t CurrencyID = 0x00B8;
			constexpr uintptr_t bDisplayCompletedTourResults = 0x00BC;
			constexpr uintptr_t TourCards = 0x00C0;
			constexpr uintptr_t Weeks = 0x00D0;
			constexpr uintptr_t EndOfTournamentResults = 0x00E0;
			constexpr uintptr_t TournamentBanMessage = 0x00E8;
			constexpr uintptr_t PartyMembersTournamentBanned = 0x00F8;
			constexpr uintptr_t PsyNet = 0x0108;
			constexpr uintptr_t Tournaments = 0x0110;
			constexpr uintptr_t AutoTour = 0x0118;
		}

		namespace GFxData_AutoTour_TourCard_TA {
			constexpr uintptr_t OnlineGameTournaments = 0x0098;
			constexpr uintptr_t Settings = 0x00A0;
			constexpr uintptr_t StartTime = 0x00B0;
			constexpr uintptr_t LastTournamentTime = 0x00B8;
			constexpr uintptr_t Title = 0x00C0;
			constexpr uintptr_t Description = 0x00D0;
			constexpr uintptr_t ScheduleID = 0x00E0;
			constexpr uintptr_t TeamSize = 0x00E8;
			constexpr uintptr_t GameMode = 0x00EC;
			constexpr uintptr_t GameModesDisplayNames = 0x00F0;
			constexpr uintptr_t Bitfields_0x0100 = 0x0100;  // Multiple: bIsIneligible, bCanCheckIn, bRegistered, bUpdateSkill, bIsInitialized
		}

		namespace GFxData_AutoTour_Week_TA {
			constexpr uintptr_t Score = 0x0098;
			constexpr uintptr_t Results = 0x00A0;
		}

		namespace GFxData_BanMessage_TA {
			constexpr uintptr_t UnknownData00 = 0x0094;
		}

		namespace GFxData_BlogTile_TA {
			constexpr uintptr_t ImageTexture = 0x0098;
			constexpr uintptr_t TextureSizeX = 0x00A0;
			constexpr uintptr_t TextureSizeY = 0x00A4;
			constexpr uintptr_t bNewInfo = 0x00A8;
		}

		namespace GFxData_BlueprintGarage_TA {
			constexpr uintptr_t BlueprintGarageSet = 0x0098;
			constexpr uintptr_t BlueprintPreviewProducts = 0x00A0;
			constexpr uintptr_t PendingBlueprintProduct = 0x00B0;
			constexpr uintptr_t SaveData = 0x00B8;
		}

		namespace GFxData_CarColors_TA {
			constexpr uintptr_t Custom = 0x0098;
			constexpr uintptr_t Team0 = 0x00A8;
			constexpr uintptr_t Team1 = 0x00B8;
			constexpr uintptr_t Clubs = 0x00C8;
			constexpr uintptr_t PlayerBanners = 0x00D8;
			constexpr uintptr_t PlayerVanity = 0x00E8;
		}

		namespace GFxData_CarKnockOut_TA {
			constexpr uintptr_t LivesRemaining = 0x0098;
			constexpr uintptr_t DodgesRemaining = 0x009C;
			constexpr uintptr_t JumpsRemaining = 0x00A0;
			constexpr uintptr_t StunlockAlpha = 0x00A4;
			constexpr uintptr_t StunlockType = 0x00A8;
			constexpr uintptr_t GrabbingAlpha = 0x00AC;
			constexpr uintptr_t ActiveGrabbedCar = 0x00B0;
		}

		namespace GFxData_CarRumble_TA {
			constexpr uintptr_t Items = 0x0098;
			constexpr uintptr_t SelectedItem = 0x00A8;
			constexpr uintptr_t bHasItems = 0x00AC;
			constexpr uintptr_t ItemCount = 0x00B0;
			constexpr uintptr_t PreviewTimeSeconds = 0x00B4;
			constexpr uintptr_t Pickups = 0x00B8;
		}

		namespace GFxData_ChallengeBase_TA {
			constexpr uintptr_t GFxReward = 0x0098;
			constexpr uintptr_t GFxCurrency = 0x00A0;
			constexpr uintptr_t GFxRequirement = 0x00B0;
			constexpr uintptr_t GFxUnlockChallengesRewards = 0x00C0;
			constexpr uintptr_t ModalProcessing = 0x00D0;
		}

		namespace GFxData_ChallengeFolder_TA {
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bSelected, bNotifyNewInfo, bNormalRewardsAvailable, bPremiumRewardsAvailable
			constexpr uintptr_t GFxParentFolder = 0x00A0;
			constexpr uintptr_t GFxSubFolders = 0x00A8;
			constexpr uintptr_t SubFolderClass = 0x00B8;
		}

		namespace GFxData_ChallengeManager_TA {
			constexpr uintptr_t ActiveFolderCodeName = 0x0098;
			constexpr uintptr_t ActiveChallengeFilter = 0x00A8;
			constexpr uintptr_t ChallengeManager = 0x00B0;
			constexpr uintptr_t GFxChallengePages = 0x00B8;
			constexpr uintptr_t ChallengeFilters = 0x00C8;
		}

		namespace GFxData_ChallengeObject_TA {
			constexpr uintptr_t UnknownData00 = 0x0094;
		}

		namespace GFxData_ChallengePage_TA {
			constexpr uintptr_t ChallengeFilter = 0x00F0;
		}

		namespace GFxData_ChallengeTab_TA {
			constexpr uintptr_t ChallengeManager = 0x00F0;
			constexpr uintptr_t TotalNormalChallenges = 0x00F8;
			constexpr uintptr_t CompletedNormalChallenges = 0x00FC;
			constexpr uintptr_t TotalPremiumChallenges = 0x0100;
			constexpr uintptr_t CompletedPremiumChallenges = 0x0104;
			constexpr uintptr_t bHasVisibleChallenges = 0x0108;
		}

		namespace GFxData_Chat_TA {
			constexpr uintptr_t MaxMessages = 0x0098;
			constexpr uintptr_t PresetGroups = 0x00A0;
			constexpr uintptr_t PresetMessages = 0x00B0;
			constexpr uintptr_t Messages = 0x00C0;
			constexpr uintptr_t bPreMatchLobby = 0x00D0;
			constexpr uintptr_t LastMessagedCrossPlatformChatState = 0x00D4;
			constexpr uintptr_t ChatHistory = 0x00D8;
			constexpr uintptr_t MaxNumGroups = 0x00E0;
			constexpr uintptr_t MaxNumMessagesPerGroup = 0x00E4;
			constexpr uintptr_t PostGameGroupOverride = 0x00E8;
			constexpr uintptr_t PreGameGroupOverride = 0x0108;
			constexpr uintptr_t AprilConfig = 0x0128;
		}

		namespace GFxData_ClientPerformanceStats_TA {
			constexpr uintptr_t bIsGameRecordingEnabled = 0x0098;
		}

		namespace GFxData_ClubDetails_TA {
			constexpr uintptr_t ClubID = 0x0098;
			constexpr uintptr_t ClubName = 0x00A0;
			constexpr uintptr_t ClubTag = 0x00B0;
			constexpr uintptr_t PrimaryColorID = 0x00C0;
			constexpr uintptr_t AccentColorID = 0x00C4;
			constexpr uintptr_t OwnerId = 0x00C8;
			constexpr uintptr_t Bitfields_0x0110 = 0x0110;  // Multiple: bVerified, bCrossPlatformFiltered
			constexpr uintptr_t ClubTitleID = 0x0114;
			constexpr uintptr_t ClubTitleText = 0x0120;
			constexpr uintptr_t ClubTitleColor = 0x0130;
			constexpr uintptr_t ClubTitleGlowColor = 0x0134;
			constexpr uintptr_t AssistBadgeSeasonTier = 0x0138;
			constexpr uintptr_t GoalBadgeSeasonTier = 0x0139;
			constexpr uintptr_t SaveBadgeSeasonTier = 0x013A;
			constexpr uintptr_t ClubDetails = 0x0140;
			constexpr uintptr_t ClubMembers = 0x0148;
			constexpr uintptr_t WordFilter = 0x0158;
			constexpr uintptr_t CrossplayConfig = 0x0160;
			constexpr uintptr_t Personas = 0x0168;
		}

		namespace GFxData_ClubInvite_TA {
			constexpr uintptr_t ClubName = 0x0128;
			constexpr uintptr_t ClubTag = 0x0138;
			constexpr uintptr_t Invite = 0x0148;
		}

		namespace GFxData_ClubMember_TA {
			constexpr uintptr_t ClubID = 0x0098;
			constexpr uintptr_t MemberId = 0x00A0;
			constexpr uintptr_t MemberName = 0x00E8;
			constexpr uintptr_t Avatar = 0x00F8;
			constexpr uintptr_t UnsanitizedName = 0x0100;
			constexpr uintptr_t OnlineSubsytem = 0x0110;
			constexpr uintptr_t WordFilter = 0x0118;
			constexpr uintptr_t OnlineGame = 0x0120;
		}

		namespace GFxData_ClubServerBrowser_TA {
			constexpr uintptr_t ServerList = 0x0098;
			constexpr uintptr_t Servers = 0x00A0;
			constexpr uintptr_t bRefreshing = 0x00B0;
		}

		namespace GFxData_Clubs_TA {
			constexpr uintptr_t LocalClubID = 0x0098;
			constexpr uintptr_t Bitfields_0x00A0 = 0x00A0;  // Multiple: bClubOwner, bSyncedLocalClub, bCrossPlatformFiltered, bHasSyncedClubInvites, bNeedsStatMilestoneDataRequest, bOnlineStorageSyncCompleted, bOmitRoleChangeNotification
			constexpr uintptr_t LocalPlayerClubRole = 0x00A4;
			constexpr uintptr_t LocalClubSyncError = 0x00A8;
			constexpr uintptr_t ExecutingClubAction = 0x00B8;
			constexpr uintptr_t LocalAvailableClubTitles = 0x00C8;
			constexpr uintptr_t LocalClubMembers = 0x00D8;
			constexpr uintptr_t PsyNet = 0x00E8;
			constexpr uintptr_t ClubProvider = 0x00F0;
			constexpr uintptr_t ClubsConfig = 0x00F8;
			constexpr uintptr_t TitleConfig = 0x0100;
			constexpr uintptr_t Party = 0x0108;
			constexpr uintptr_t PersonasData = 0x0110;
			constexpr uintptr_t ClubManager = 0x0118;
			constexpr uintptr_t AllClubDetails = 0x0120;
			constexpr uintptr_t LocalClubDetails = 0x0130;
			constexpr uintptr_t CurrentClubAction = 0x0138;
			constexpr uintptr_t TagTooShort = 0x0140;
			constexpr uintptr_t TagTooLong = 0x0150;
			constexpr uintptr_t TagHasInvalidCharacters = 0x0160;
			constexpr uintptr_t NameTooShort = 0x0170;
			constexpr uintptr_t NameTooLong = 0x0180;
			constexpr uintptr_t NameHasInvalidCharacters = 0x0190;
			constexpr uintptr_t RoleMember = 0x01A0;
			constexpr uintptr_t RoleManager = 0x01B0;
			constexpr uintptr_t RoleOwner = 0x01C0;
			constexpr uintptr_t RoleNone = 0x01D0;
			constexpr uintptr_t RoleChangeNotificationTitle = 0x01E0;
			constexpr uintptr_t RoleChangeNotificationBody = 0x01F0;
			constexpr uintptr_t NoClubNotificationBody = 0x0200;
			constexpr uintptr_t ClubMilestoneDataRPC = 0x0210;
			constexpr uintptr_t ClubAvailableTitlesRPC = 0x0218;
			constexpr uintptr_t LastMilestoneDataRequestTime = 0x0220;
			constexpr uintptr_t MatchesPlayed = 0x0228;
			constexpr uintptr_t WinPercent = 0x022C;
			constexpr uintptr_t TimePlayed = 0x0230;
			constexpr uintptr_t PreviousSeasonBadges = 0x0240;
			constexpr uintptr_t MilestoneStatDisplayNames = 0x0250;
			constexpr uintptr_t SeasonMilestoneData = 0x0260;
			constexpr uintptr_t Stats = 0x0270;
			constexpr uintptr_t AssistStat = 0x0280;
			constexpr uintptr_t GoalStat = 0x0284;
			constexpr uintptr_t SaveStat = 0x0288;
			constexpr uintptr_t WinStatEvent = 0x0290;
			constexpr uintptr_t TimePlayedStatEvent = 0x0298;
			constexpr uintptr_t GoalStatEvent = 0x02A0;
			constexpr uintptr_t AerialGoalStatEvent = 0x02A8;
			constexpr uintptr_t LongGoalStatEvent = 0x02B0;
			constexpr uintptr_t BackwardsGoalStatEvent = 0x02B8;
			constexpr uintptr_t OvertimeGoalStatEvent = 0x02C0;
			constexpr uintptr_t TurtleGoalStatEvent = 0x02C8;
			constexpr uintptr_t AssistStatEvent = 0x02D0;
			constexpr uintptr_t PlaymakerStatEvent = 0x02D8;
			constexpr uintptr_t SaveStatEvent = 0x02E0;
			constexpr uintptr_t EpicSaveStatEvent = 0x02E8;
			constexpr uintptr_t SaviorStatEvent = 0x02F0;
			constexpr uintptr_t ShotStatEvent = 0x02F8;
			constexpr uintptr_t CenterStatEvent = 0x0300;
			constexpr uintptr_t ClearStatEvent = 0x0308;
			constexpr uintptr_t AerialHitStatEvent = 0x0310;
			constexpr uintptr_t BicycleHitStatEvent = 0x0318;
			constexpr uintptr_t JuggleHitStatEvent = 0x0320;
			constexpr uintptr_t DemolishStatEvent = 0x0328;
			constexpr uintptr_t DemolitionStatEvent = 0x0330;
			constexpr uintptr_t FirstTouchStatEvent = 0x0338;
			constexpr uintptr_t PoolShotStatEvent = 0x0340;
			constexpr uintptr_t LowFiveStatEvent = 0x0348;
			constexpr uintptr_t HighFiveStatEvent = 0x0350;
			constexpr uintptr_t BreakoutDamageStatEvent = 0x0358;
			constexpr uintptr_t BreakoutDamageLargeStatEvent = 0x0360;
			constexpr uintptr_t HoopsSwishGoalStatEvent = 0x0368;
			constexpr uintptr_t RemoveMemberLoc = 0x0370;
			constexpr uintptr_t SetClubOwnerLoc = 0x0380;
			constexpr uintptr_t SetClubManagerLoc = 0x0390;
			constexpr uintptr_t RemoveClubManagerLoc = 0x03A0;
			constexpr uintptr_t InvitePartyLoc = 0x03B0;
			constexpr uintptr_t RequestJoinPartyLoc = 0x03C0;
			constexpr uintptr_t ViewProfileLoc = 0x03D0;
			constexpr uintptr_t BlockMemberLoc = 0x03E0;
			constexpr uintptr_t UnblockMemberLoc = 0x03F0;
			constexpr uintptr_t AddEpicFriendLoc = 0x0400;
			constexpr uintptr_t RemoveEpicFriendLoc = 0x0410;
			constexpr uintptr_t ReportMemberLoc = 0x0420;
			constexpr uintptr_t ActionsOwnerToManager = 0x0430;
			constexpr uintptr_t ActionsOwnerToMember = 0x0440;
			constexpr uintptr_t ActionsManagerToOwner = 0x0450;
			constexpr uintptr_t ActionsManagerToManager = 0x0460;
			constexpr uintptr_t ActionsManagerToMember = 0x0470;
			constexpr uintptr_t ActionsMember = 0x0480;
		}

		namespace GFxData_Community_TA {
			constexpr uintptr_t GFxBlogTiles = 0x0098;
			constexpr uintptr_t Config = 0x00A8;
			constexpr uintptr_t MotD = 0x00B0;
			constexpr uintptr_t Cache = 0x00C0;
			constexpr uintptr_t ShopNotificationsManager = 0x00C8;
			constexpr uintptr_t Bitfields_0x00D0 = 0x00D0;  // Multiple: bIsNewsPanelExpanded, bInitialLoadCompleted
		}

		namespace GFxData_ConnectionStats_TA {
			constexpr uintptr_t ConnectionQualityConfig = 0x0098;
		}

		namespace GFxData_ContainerDrops_TA {
			constexpr uintptr_t ContainerDropList = 0x0098;
			constexpr uintptr_t ContainerDropsSet = 0x00A8;
			constexpr uintptr_t GetDropTableTask = 0x00B0;
		}

		namespace GFxData_Controls_TA {
			constexpr uintptr_t Categories = 0x0098;
			constexpr uintptr_t Actions = 0x00A8;
			constexpr uintptr_t PCBindings = 0x00B8;
			constexpr uintptr_t GamepadBindings = 0x00C8;
			constexpr uintptr_t Profile = 0x00D8;
			constexpr uintptr_t GamepadSave = 0x00E0;
			constexpr uintptr_t BindingActions = 0x00E8;
			constexpr uintptr_t PendingRecordBindingAction = 0x00F8;
			constexpr uintptr_t PendingRecordBindingAxis = 0x0100;
			constexpr uintptr_t Interaction = 0x0108;
			constexpr uintptr_t ProfilePCSave = 0x0110;
			constexpr uintptr_t CustomPresetOverwriteWarning = 0x0118;
			constexpr uintptr_t ClearButtonBindingTitle = 0x0128;
			constexpr uintptr_t ClearKeybindTitle = 0x0138;
			constexpr uintptr_t ClearButtonBindingDesc = 0x0148;
			constexpr uintptr_t ClearKeybindDesc = 0x0158;
		}

		namespace GFxData_Credits_TA {
			constexpr uintptr_t LocalizedDepartmentGroups = 0x0098;
			constexpr uintptr_t LocalizedCopyrightGroups = 0x00A8;
			constexpr uintptr_t LocalizedMusicGroups = 0x00B8;
			constexpr uintptr_t DepartmentGroups = 0x00C8;
			constexpr uintptr_t CopyrightGroups = 0x00D8;
			constexpr uintptr_t MusicGroups = 0x00E8;
		}

		namespace GFxData_CrumbTrails_TA {
			constexpr uintptr_t TrailNames = 0x0098;
			constexpr uintptr_t CrumbsMgr = 0x00A8;
		}

		namespace GFxData_CustomTeams_TA {
			constexpr uintptr_t Settings = 0x0098;
			constexpr uintptr_t SettingsType = 0x00A8;
			constexpr uintptr_t TeamColors = 0x00B0;
			constexpr uintptr_t CustomColors = 0x00C0;
			constexpr uintptr_t TAPlayer = 0x00D0;
			constexpr uintptr_t PreviewTeam = 0x00D8;
			constexpr uintptr_t PreviewSet = 0x00E0;
			constexpr uintptr_t PreviewColors = 0x00E8;
		}

		namespace GFxData_DLC_TA {
			constexpr uintptr_t Packs = 0x0098;
			constexpr uintptr_t bReturningFromStore = 0x00A8;
			constexpr uintptr_t MtxConfig = 0x00B0;
			constexpr uintptr_t OnlineSub = 0x00B8;
			constexpr uintptr_t MTX = 0x00C0;
			constexpr uintptr_t TimeWhenClientLostFocus = 0x00C8;
		}

		namespace GFxData_DynamicLogos_TA {
			constexpr uintptr_t DynamicLogosConfig = 0x0098;
		}

		namespace GFxData_EOSGameClipsConfig_TA {
			constexpr uintptr_t GameClipsConfig = 0x0098;
		}

		namespace GFxData_EOSGameClipsController_TA {
			constexpr uintptr_t GameClipsManager = 0x0098;
			constexpr uintptr_t GameClipsController = 0x00A0;
			constexpr uintptr_t StartClippingMessage = 0x00A8;
			constexpr uintptr_t ClipUploadedMessage = 0x00B8;
			constexpr uintptr_t ClipFailedMessage = 0x00C8;
			constexpr uintptr_t ClipsUploadingMessage = 0x00D8;
			constexpr uintptr_t ClipAfterReplayMessage = 0x00E8;
		}

		namespace GFxData_EOSGameClipsLocalPlayer_TA {
			constexpr uintptr_t GameClipsManager = 0x0098;
			constexpr uintptr_t GameClipsConfig = 0x00A0;
			constexpr uintptr_t CurrentGameEvent = 0x00A8;
		}

		namespace GFxData_EOSGameClipsMaskArea_TA {
			constexpr uintptr_t GameClipsManager = 0x0098;
			constexpr uintptr_t ActiveMaskAreas = 0x00A0;
			constexpr uintptr_t DrawableCanvas = 0x00B0;
			constexpr uintptr_t DebugDrawColor = 0x00B8;
		}

		namespace GFxData_EOSVoiceManager_TA {
			constexpr uintptr_t TrackedRooms = 0x0098;
			constexpr uintptr_t VoiceSettingsSave = 0x00A8;
			constexpr uintptr_t SoundSettingsSave = 0x00B0;
			constexpr uintptr_t UISavedValues = 0x00B8;
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: bPushToTalkActive, bInMapTransition, bMainMenuNotifications, bMatchNotifications, bVoiceSettingEnabled, bDisplayVoiceTab, bVoiceFeatureEnabled
			constexpr uintptr_t VoiceReportURL = 0x00C8;
			constexpr uintptr_t InactivePTTVolume = 0x00D8;
			constexpr uintptr_t ActivePTTVolume = 0x00DC;
			constexpr uintptr_t ViewportClient = 0x00E0;
			constexpr uintptr_t VoiceManager = 0x00E8;
			constexpr uintptr_t VoiceConfig = 0x00F0;
		}

		namespace GFxData_EOSVoiceRoomMember_TA {
			constexpr uintptr_t EpicAccountId = 0x0098;
			constexpr uintptr_t PlayerID = 0x00A8;
			constexpr uintptr_t RoomName = 0x00F0;
			constexpr uintptr_t Bitfields_0x0100 = 0x0100;  // Multiple: bLocal, bSpeaking, bSelfMuted, bLocalMuted, bAdminMuted, bBlocked
			constexpr uintptr_t Persona = 0x0108;
			constexpr uintptr_t PlayerActivity = 0x0110;
		}

		namespace GFxData_EOSVoiceRoom_TA {
			constexpr uintptr_t RoomName = 0x0098;
			constexpr uintptr_t RoomType = 0x00A8;
			constexpr uintptr_t VoiceChatFilter = 0x00A9;
			constexpr uintptr_t RoomTitle = 0x00B0;
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: bVoiceReportingEnabled, bRecordingActive, bJoinable, bPlayersAllowVoiceReporting, bRecordingDataAvailable, bManuallyJoined
			constexpr uintptr_t PartyRoomTitle = 0x00C8;
			constexpr uintptr_t MatchRoomTitle = 0x00D8;
			constexpr uintptr_t SettingDisabledTitle = 0x00E8;
			constexpr uintptr_t SettingDisabledDesc = 0x00F8;
			constexpr uintptr_t MatchTypeTitle = 0x0108;
			constexpr uintptr_t PartyTypeTitle = 0x0118;
			constexpr uintptr_t SpectatorRoomTitle = 0x0128;
			constexpr uintptr_t SpectatorTypeTitle = 0x0138;
			constexpr uintptr_t RemotePlayerJoinedRoom = 0x0148;
			constexpr uintptr_t PlayerJoinedRoom = 0x0158;
			constexpr uintptr_t EnableVoiceReportingModalTitle = 0x0168;
			constexpr uintptr_t RoomTypeString = 0x0178;
			constexpr uintptr_t RoomMembers = 0x0188;
			constexpr uintptr_t VoiceSettingsSave = 0x0198;
			constexpr uintptr_t NotificationCooldowns = 0x01A0;
			constexpr uintptr_t CreatedTimestamp = 0x01B0;
			constexpr uintptr_t PlayerActivity = 0x01B8;
			constexpr uintptr_t MinPlayersForVoiceRecording = 0x01D8;
			constexpr uintptr_t VoiceManager = 0x01E0;
			constexpr uintptr_t Personas = 0x01E8;
			constexpr uintptr_t VoiceConfig = 0x01F0;
			constexpr uintptr_t ChatFilterManager = 0x01F8;
		}

		namespace GFxData_EOSVoiceUser_TA {
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bVoiceAgreementAccepted, bVoiceAgeRestricted, bHasVoiceChatPermissions, bDropsFinished, bInMainMenu
			constexpr uintptr_t NewUserLastFTEGroupName = 0x009C;
			constexpr uintptr_t LegacyUserLastFTEGroupName = 0x00A4;
			constexpr uintptr_t LegacySave = 0x00B0;
			constexpr uintptr_t VoiceManager = 0x00B8;
			constexpr uintptr_t VoiceConfig = 0x00C0;
		}

		namespace GFxData_ESportConfig_TA {
			constexpr uintptr_t ESportEvents = 0x0098;
		}

		namespace GFxData_EngagementEventsConfig_TA {
			constexpr uintptr_t EngagementEvents = 0x0098;
			constexpr uintptr_t NotificationSave = 0x00A0;
			constexpr uintptr_t ValidMenus = 0x00A8;
			constexpr uintptr_t bEndNotificationShownThisSession = 0x00B8;
			constexpr uintptr_t CurrentNotification = 0x00C0;
		}

		namespace GFxData_EpicLogin_TA {
			constexpr uintptr_t EpicAccountSave = 0x0098;
			constexpr uintptr_t EpicDisplayName = 0x00A0;
			constexpr uintptr_t AccountLinkURL = 0x00B0;
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: bEnforceCabinedMode, bInCabinedMode, bConnectionLost
			constexpr uintptr_t SetDOBErrorMessage = 0x00C8;
			constexpr uintptr_t SetParentEmailErrorMessage = 0x00D8;
			constexpr uintptr_t ConfirmDisplayNameErrorMessage = 0x00E8;
			constexpr uintptr_t UnsupportedCorrectiveActionURL = 0x00F8;
			constexpr uintptr_t EpicPlayerName = 0x0108;
			constexpr uintptr_t ParentalControlsURL = 0x0118;
			constexpr uintptr_t ActivateURL = 0x0128;
			constexpr uintptr_t AccountURL = 0x0138;
			constexpr uintptr_t TOSURL = 0x0148;
			constexpr uintptr_t PrivacyPolicyURL = 0x0158;
			constexpr uintptr_t EpicConfig = 0x0168;
		}

		namespace GFxData_ErrorModals_TA {
			constexpr uintptr_t GameEvent = 0x0098;
			constexpr uintptr_t PendingErrors = 0x00A0;
		}

		namespace GFxData_EventsPageBrowser_TA {
			constexpr uintptr_t bShowButton = 0x0098;
			constexpr uintptr_t UIConfig = 0x00A0;
			constexpr uintptr_t EventsConfig = 0x00A8;
		}

		namespace GFxData_FaceIt_TA {
			constexpr uintptr_t bEnabled = 0x0098;
			constexpr uintptr_t FaceIt = 0x00A0;
			constexpr uintptr_t Config = 0x00A8;
			constexpr uintptr_t PsyNet = 0x00B0;
			constexpr uintptr_t LastSpectatorPopupTime = 0x00B8;
			constexpr uintptr_t SpectatorPopupDelaySeconds = 0x00C0;
		}

		namespace GFxData_Features_TA {
			constexpr uintptr_t DeprecatedPermanentFeatures = 0x0098;
		}

		namespace GFxData_FirstTimeExperience_TA {
			constexpr uintptr_t CurrentCheckpoint = 0x0098;
			constexpr uintptr_t CurrentGroup = 0x00A0;
			constexpr uintptr_t bActive = 0x00A8;
			constexpr uintptr_t FTEManager = 0x00B0;
		}

		namespace GFxData_FreeToPlayRewards_TA {
			constexpr uintptr_t LegacyStatus = 0x0098;
			constexpr uintptr_t CompensationItems = 0x00A0;
			constexpr uintptr_t bIsLegacySet = 0x00B0;
		}

		namespace GFxData_FriendsHiddenManager_TA {
			constexpr uintptr_t HiddenPresenceGroup = 0x0060;
			constexpr uintptr_t HiddenFriends = 0x0068;
		}

		namespace GFxData_Friends_TA {
			constexpr uintptr_t Friends = 0x0098;
			constexpr uintptr_t PlatformFriends = 0x00A8;
			constexpr uintptr_t EpicFriends = 0x00B8;
			constexpr uintptr_t bLocked = 0x00C8;
			constexpr uintptr_t RecentPlayers = 0x00D8;
			constexpr uintptr_t RecentPlayersToBeAdded = 0x00E0;
			constexpr uintptr_t Recent = 0x00F0;
			constexpr uintptr_t Pending = 0x0100;
			constexpr uintptr_t NumOnlineFriendsPlatform = 0x0110;
			constexpr uintptr_t NumInGameFriendsPlatform = 0x0114;
			constexpr uintptr_t NumOnlineFriendsEpic = 0x0118;
			constexpr uintptr_t NumInGameFriendsEpic = 0x011C;
			constexpr uintptr_t Bitfields_0x0120 = 0x0120;  // Multiple: bPlatformFriendsDownloadFailed, bEpicFriendsDownloadFailed, bPromptForPin, bRequirePinForFriends, bUsePresenceGroups, bCrossplayEnabled, bPermissionsInitialized
			constexpr uintptr_t ForgotPinURL = 0x0128;
			constexpr uintptr_t HiddenManager = 0x0138;
			constexpr uintptr_t PersonasData = 0x0140;
			constexpr uintptr_t OnlineGame = 0x0148;
			constexpr uintptr_t AccountSettings = 0x0150;
			constexpr uintptr_t DefaultPlatformFriendGroups = 0x0158;
			constexpr uintptr_t DefaultEpicFriendGroups = 0x0168;
			constexpr uintptr_t DefaultAllFriendGroups = 0x0178;
			constexpr uintptr_t Party = 0x0188;
			constexpr uintptr_t PartyMemberPersonas = 0x0190;
			constexpr uintptr_t PlatformPartyPresenceGroup = 0x01A0;
			constexpr uintptr_t EpicPartyPresenceGroup = 0x01A8;
			constexpr uintptr_t ObservedProfile = 0x01B0;
			constexpr uintptr_t PinGrantPlatformName = 0x01B8;
			constexpr uintptr_t PinGrantPlatform = 0x01C8;
			constexpr uintptr_t ModalProcessing = 0x01D0;
		}

		namespace GFxData_GameEvent_TA {
			constexpr uintptr_t TimeRemaining = 0x0098;
			constexpr uintptr_t TimeToNextMatch = 0x009C;
			constexpr uintptr_t TimeWaitingForPlayersRemaining = 0x00A0;
			constexpr uintptr_t Bitfields_0x00A4 = 0x00A4;  // Multiple: bOverTime, bOnline, bUnfairTeams, bForfeit, bNoContest, bServerTraveling, bRankedMatch, bSolo, bIsBotMatch, bForfeitVoteAllowed, bHasLeaveMatchPenalty, bCanVoteToForfeit, bViewingEndGameReplay, bShowIntroScene, bReadyToStartGame, bClubMatch, bDisableTeamSelectScreen, bStayAsPartyButtonVisible, bStayAsPartyButtonEnabled, bServerShutdown, bAlwaysShowMatchTypeLabel, bShowMutatorInfo
			constexpr uintptr_t MatchState = 0x00A8;
			constexpr uintptr_t GameState = 0x00B8;
			constexpr uintptr_t MatchType = 0x00C0;
			constexpr uintptr_t EventType = 0x00C8;
			constexpr uintptr_t ReplayScoredBy = 0x00D0;
			constexpr uintptr_t ReplayAssistedBy = 0x00D4;
			constexpr uintptr_t ReplaySpeed = 0x00D8;
			constexpr uintptr_t ReplayTime = 0x00DC;
			constexpr uintptr_t WinningTeam = 0x00E0;
			constexpr uintptr_t TieBreakDecision = 0x00E4;
			constexpr uintptr_t MaxPlayers = 0x00E8;
			constexpr uintptr_t MaxScore = 0x00EC;
			constexpr uintptr_t PlaylistName = 0x00F0;
			constexpr uintptr_t PlaylistId = 0x0100;
			constexpr uintptr_t ServerName = 0x0108;
			constexpr uintptr_t GamemodeName = 0x0118;
			constexpr uintptr_t PartyPlaylistName = 0x0128;
			constexpr uintptr_t MutatorsString = 0x0138;
			constexpr uintptr_t SeriesGames = 0x0148;
		}

		namespace GFxData_GarageProductSlot_TA {
			constexpr uintptr_t SavedLoadoutSet = 0x0118;
		}

		namespace GFxData_Garage_TA {
			constexpr uintptr_t LoadoutSlots = 0x0098;
			constexpr uintptr_t PreviewActor = 0x00A8;
			constexpr uintptr_t GarageProductSlots = 0x00B0;
			constexpr uintptr_t TabIndex = 0x00C0;
			constexpr uintptr_t Teams = 0x00C8;
			constexpr uintptr_t PaintFinishSlotIndex = 0x00D8;
			constexpr uintptr_t PreviewTeam = 0x00DC;
			constexpr uintptr_t CustomColors = 0x00E0;
			constexpr uintptr_t Team0Colors = 0x00F0;
			constexpr uintptr_t Team1Colors = 0x0100;
			constexpr uintptr_t Bitfields_0x0110 = 0x0110;  // Multiple: bTeam0FinishDisabled, bTeam1FinishDisabled, bCustom0FinishDisabled, bCustom1FinishDisabled, bTeam0ColorForced, bTeam1ColorForced, bCustom0ColorForced, bCustom1ColorForced
			constexpr uintptr_t ForcedTeam0FinishName = 0x0118;
			constexpr uintptr_t ForcedTeam1FinishName = 0x0128;
			constexpr uintptr_t ForcedTeam0Color = 0x0138;
			constexpr uintptr_t ForcedTeam1Color = 0x013C;
			constexpr uintptr_t ForcedCustom0Color = 0x0140;
			constexpr uintptr_t ForcedCustom1Color = 0x0144;
			constexpr uintptr_t Profile = 0x0148;
			constexpr uintptr_t Loadouts = 0x0150;
			constexpr uintptr_t LastUnforcedLoadout = 0x01D0;
			constexpr uintptr_t LoadoutSet = 0x0250;
			constexpr uintptr_t CarPreviewSet = 0x0258;
			constexpr uintptr_t ExplosionPreview = 0x0260;
			constexpr uintptr_t GoalExplosionSeqName = 0x0268;
			constexpr uintptr_t CurrentSlot = 0x0270;
		}

		namespace GFxData_IntroCarSelect_TA {
			constexpr uintptr_t ModalProcessing = 0x0098;
			constexpr uintptr_t CarBodyName = 0x00A0;
			constexpr uintptr_t FTE = 0x00B0;
		}

		namespace GFxData_ItemShopNotificationsConfig_TA {
			constexpr uintptr_t ItemShopNotificationsConfig = 0x0098;
		}

		namespace GFxData_LanBrowser_TA {
			constexpr uintptr_t LanBrowser = 0x0098;
			constexpr uintptr_t GetServerListTask = 0x00A0;
		}

		namespace GFxData_LanMatch_TA {
			constexpr uintptr_t ServerName = 0x0098;
			constexpr uintptr_t Password = 0x00A8;
			constexpr uintptr_t SelectedMaxPlayerCount = 0x00B8;
			constexpr uintptr_t SettingsType = 0x00BC;
		}

		namespace GFxData_LanServer_TA {
			constexpr uintptr_t SanitizedOwnerName = 0x0098;
			constexpr uintptr_t OwnerAvatar = 0x00A8;
			constexpr uintptr_t OwnerPlatform = 0x00B0;
			constexpr uintptr_t LocalizedMapName = 0x00C0;
			constexpr uintptr_t SanitizedServerName = 0x00D0;
			constexpr uintptr_t ServerId = 0x00E0;
			constexpr uintptr_t ServerBuildID = 0x00F0;
			constexpr uintptr_t OnlineGame = 0x00F8;
			constexpr uintptr_t OnlineSubsystem = 0x0100;
			constexpr uintptr_t WorldFilter = 0x0108;
			constexpr uintptr_t LanBrowser = 0x0110;
		}

		namespace GFxData_Leaderboards_TA {
			constexpr uintptr_t LeaderboardDataSet = 0x0098;
			constexpr uintptr_t PlayerLeaderboardValue = 0x00A8;
			constexpr uintptr_t PlayerLeaderboardDivision = 0x00AC;
			constexpr uintptr_t PlayerLeaderboardMMR = 0x00B0;
			constexpr uintptr_t PlayerLeaderboardName = 0x00B8;
			constexpr uintptr_t Bitfields_0x00C8 = 0x00C8;  // Multiple: bShowGlobalLeaderboards, bWordFilterError
			constexpr uintptr_t Leaderboards = 0x00D0;
			constexpr uintptr_t PendingLeaderboardRequestID = 0x00D8;
			constexpr uintptr_t VanityManager = 0x00E0;
		}

		namespace GFxData_LegacyStatus_TA {
			constexpr uintptr_t LegacyStatus = 0x0098;
			constexpr uintptr_t LegacySetState = 0x0099;
		}

		namespace GFxData_LegalText_TA {
			constexpr uintptr_t LegacyLegalPlatforms = 0x0098;
			constexpr uintptr_t bTriggeredSync = 0x00A8;
		}

		namespace GFxData_LoadoutSets_TA {
			constexpr uintptr_t LoadoutSets = 0x0098;
			constexpr uintptr_t Profile = 0x00A8;
			constexpr uintptr_t RandomLoadouts = 0x00B0;
			constexpr uintptr_t RandomLoadoutLoader = 0x0130;
			constexpr uintptr_t PreviousLoadoutSetLoader = 0x0138;
			constexpr uintptr_t NextLoadoutSetLoader = 0x0140;
			constexpr uintptr_t LoadoutSequencer = 0x0148;
			constexpr uintptr_t PreviousBodyProductID = 0x0150;
			constexpr uintptr_t LoadoutSave = 0x0158;
		}

		namespace GFxData_LocalCar_TA {
			constexpr uintptr_t Boost = 0x0098;
			constexpr uintptr_t Bitfields_0x009C = 0x009C;  // Multiple: bOnBack, bViewingCarCam, bShowItemsDisplay, bShowTargetReticle, bItemActive
			constexpr uintptr_t TimeTillItem = 0x00A0;
			constexpr uintptr_t MaxTimeTillItem = 0x00A4;
			constexpr uintptr_t ItemName = 0x00A8;
			constexpr uintptr_t ItemIcon = 0x00B8;
			constexpr uintptr_t ItemTimeRemaining = 0x00C0;
			constexpr uintptr_t ItemTargetID = 0x00C4;
		}

		namespace GFxData_LocalPlayer_TA {
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bOpenedStartMenu, bCheckedStartupEvents, bSaveDataLoaded, bBallcam, bUseHoldBallCam, bUseBallCamIndicator, bAlternateNameplates, bMetric, bTeamColoredBoostMeter, bPrimaryPlayer, bPartyLeader, bIsInParty, bIsPlayerTrading, bDemoBuild, bForceSplitScreenUI, bPrivateMatchGameOwner, bAgeRestricted, bPendingIdleKick, bStartVoteToForfeitDisabled, bDisableCrossPlay, bReplacingBot, bDisableDivisions, bCheckedBootMessage, bUseSteamInput, bControllerConnected, bCompletedChallengesForCompetitive
			constexpr uintptr_t SaveDataError = 0x00A0;
			constexpr uintptr_t OnlineError = 0x00B0;
			constexpr uintptr_t PlayerName = 0x00C0;
			constexpr uintptr_t PlayerAvatarTexture = 0x00D0;
			constexpr uintptr_t XpLevel = 0x00D8;
			constexpr uintptr_t XPTitle = 0x00E0;
			constexpr uintptr_t XPTotal = 0x00F0;
			constexpr uintptr_t XPProgressInCurrentLevel = 0x00F4;
			constexpr uintptr_t XPRequiredForNextLevel = 0x00F8;
			constexpr uintptr_t Team = 0x00FC;
			constexpr uintptr_t CameraYaw = 0x0100;
			constexpr uintptr_t SplitScreenPosition = 0x0104;
			constexpr uintptr_t ControllerId = 0x0108;
			constexpr uintptr_t LocalPlayerIndex = 0x010C;
			constexpr uintptr_t LastMatchType = 0x0110;
			constexpr uintptr_t IdleKickSeconds = 0x0118;
			constexpr uintptr_t ContainerToOpenId = 0x011C;
			constexpr uintptr_t RankInfoDisplayType = 0x0120;
			constexpr uintptr_t InfectedStatus = 0x0121;
			constexpr uintptr_t OrphanedControllerId = 0x0122;
			constexpr uintptr_t PersonaSave = 0x0128;
			constexpr uintptr_t PlayerID = 0x0130;
			constexpr uintptr_t Player = 0x0178;
			constexpr uintptr_t ModalOrphaned = 0x0180;
		}

		namespace GFxData_MTXGarage_TA {
			constexpr uintptr_t CatalogItems = 0x0098;
			constexpr uintptr_t CatalogProducts = 0x00A8;
			constexpr uintptr_t CartItems = 0x00B8;
			constexpr uintptr_t CartTotal = 0x00C8;
			constexpr uintptr_t Currency = 0x00D8;
			constexpr uintptr_t Bitfields_0x00E8 = 0x00E8;  // Multiple: TransactionInProgress, bCatalogReady
			constexpr uintptr_t ModalProcessing = 0x00F0;
			constexpr uintptr_t BlackMarketSkinProductID = 0x00F8;
			constexpr uintptr_t CatalogExpirationTime = 0x00FC;
			constexpr uintptr_t CatalogCacheDuration = 0x0100;
			constexpr uintptr_t CatalogCategory = 0x0104;
			constexpr uintptr_t PurchaseTimeoutTime = 0x0108;
			constexpr uintptr_t GetPriceTimeoutTime = 0x010C;
			constexpr uintptr_t Menu = 0x0110;
			constexpr uintptr_t MtxConfig = 0x0118;
			constexpr uintptr_t SystemInterface_Object = 0x0120;
			constexpr uintptr_t SystemInterface_Interface = 0x0128;
			constexpr uintptr_t PurchaseInterface_Object = 0x0130;
			constexpr uintptr_t PurchaseInterface_Interface = 0x0138;
			constexpr uintptr_t PsyNetConnection = 0x0140;
			constexpr uintptr_t RegionRestrictedOpenCrate = 0x0148;
			constexpr uintptr_t OnlineProductStoreSet = 0x0158;
		}

		namespace GFxData_MainMenu_TA {
			constexpr uintptr_t PreviewCameraRotationScale = 0x0098;
			constexpr uintptr_t RequestedDLCName = 0x009C;
			constexpr uintptr_t RequestedSubIdx = 0x00A4;
			constexpr uintptr_t QueuedName = 0x00A8;
			constexpr uintptr_t QueuedSubIdx = 0x00B0;
			constexpr uintptr_t UISoundState_AudioPreview = 0x00B4;
			constexpr uintptr_t UISoundState_MusicPreview = 0x00BC;
			constexpr uintptr_t UISoundState_CurrentPreview = 0x00C4;
		}

		namespace GFxData_MapPrefs_TA {
			constexpr uintptr_t PlaylistTypes = 0x0098;
			constexpr uintptr_t MapTypes = 0x00A8;
			constexpr uintptr_t Playlists = 0x00B8;
			constexpr uintptr_t Maps = 0x00C8;
			constexpr uintptr_t MapPrefsConfig = 0x00D8;
			constexpr uintptr_t MapPrefsSave = 0x00E0;
			constexpr uintptr_t MapsConfig = 0x00E8;
		}

		namespace GFxData_MapSelection_TA {
			constexpr uintptr_t Selections = 0x0098;
		}

		namespace GFxData_Map_TA {
			constexpr uintptr_t RandomMapData = 0x0098;
			constexpr uintptr_t RandomStandardMapData = 0x00D0;
			constexpr uintptr_t RandomRocketLabsMedleyMapData = 0x0108;
			constexpr uintptr_t Data = 0x0140;
			constexpr uintptr_t ActiveMapIndex = 0x0150;
			constexpr uintptr_t LastLoadedMapImage = 0x0158;
			constexpr uintptr_t RandomMapName = 0x0160;
			constexpr uintptr_t RandomStandardMapName = 0x0168;
			constexpr uintptr_t RandomRocketLabsMedleyMapName = 0x0170;
			constexpr uintptr_t DefaultThumbnail = 0x0178;
		}

		namespace GFxData_MatchAdmin_TA {
			constexpr uintptr_t bMatchAdmin = 0x0098;
			constexpr uintptr_t PlayerPRI = 0x00A0;
		}

		namespace GFxData_MatchHistoryManager_TA {
			constexpr uintptr_t SyncStatus = 0x0098;
			constexpr uintptr_t SyncErrorMsg = 0x00A0;
			constexpr uintptr_t Bitfields_0x00B0 = 0x00B0;  // Multiple: bMatchHistorySyncFailed, bCached
			constexpr uintptr_t Matches = 0x00B8;
			constexpr uintptr_t SyncRPC = 0x00C8;
			constexpr uintptr_t Config = 0x00D0;
		}

		namespace GFxData_MatchHistoryPlayer_TA {
			constexpr uintptr_t Index = 0x0098;
			constexpr uintptr_t Player = 0x00A0;
		}

		namespace GFxData_MatchHistory_TA {
			constexpr uintptr_t Index = 0x0098;
			constexpr uintptr_t LocalPlayerTeam = 0x009C;
			constexpr uintptr_t ReplayURL = 0x00A0;
			constexpr uintptr_t Bitfields_0x00B0 = 0x00B0;  // Multiple: bHasSavedReplay, bIsLocalPlayerMvp, bLocalPlayerAbandoned, bIsPrivateMatch
			constexpr uintptr_t TeamSize = 0x00B4;
			constexpr uintptr_t MatchGameMode = 0x00B8;
			constexpr uintptr_t MatchPlaylist = 0x00C8;
			constexpr uintptr_t MatchStartEpoch = 0x00D8;
			constexpr uintptr_t MatchEndEpoch = 0x00E0;
			constexpr uintptr_t MatchStartDate = 0x00E8;
			constexpr uintptr_t MatchEndDate = 0x00F8;
			constexpr uintptr_t Match = 0x0108;
			constexpr uintptr_t PrimaryPlayerScore = 0x0110;
			constexpr uintptr_t PrimaryPlayerGoals = 0x0114;
			constexpr uintptr_t PrimaryPlayerAssists = 0x0118;
			constexpr uintptr_t PrimaryPlayerSaves = 0x011C;
			constexpr uintptr_t PrimaryPlayerShots = 0x0120;
		}

		namespace GFxData_Matchmaking_TA {
			constexpr uintptr_t NoPlaylistSelectedMessage = 0x0118;
			constexpr uintptr_t NoRegionSelectedMessage = 0x0128;
			constexpr uintptr_t PartyTooBigMessage = 0x0138;
			constexpr uintptr_t LeavePenaltyMessage = 0x0148;
			constexpr uintptr_t MatchmakingBanMessage = 0x0158;
			constexpr uintptr_t PartySkillTooDistant = 0x0168;
			constexpr uintptr_t PartyMemberNotOriginalAppOwner = 0x0178;
			constexpr uintptr_t PartyMemberNotLoggedIn = 0x0188;
			constexpr uintptr_t Regions = 0x0198;
			constexpr uintptr_t TotalPopulation = 0x01A8;
			constexpr uintptr_t MatchmakingViewTab = 0x01AC;
			constexpr uintptr_t Bitfields_0x01B0 = 0x01B0;  // Multiple: bRankedPlaylistsEnabled, bMultiSelectEnabled
			constexpr uintptr_t SeasonEndDays = 0x01B4;
			constexpr uintptr_t SeasonEndHours = 0x01B8;
			constexpr uintptr_t SeasonEndMinutes = 0x01BC;
			constexpr uintptr_t MatchmakingSave = 0x01C0;
			constexpr uintptr_t PlayMenuSave = 0x01C8;
			constexpr uintptr_t MessageUpdates = 0x01D0;
			constexpr uintptr_t CurrentMessageUpdateIndex = 0x01E0;
			constexpr uintptr_t RankedConfig = 0x01E8;
			constexpr uintptr_t TabFilters = 0x01F0;
		}

		namespace GFxData_MenuSequence_TA {
			constexpr uintptr_t bInMainMenu = 0x0098;
			constexpr uintptr_t MenuStack = 0x00A0;
		}

		namespace GFxData_MenuStack_TA {
			constexpr uintptr_t MenuNames = 0x0098;
			constexpr uintptr_t LastButtonTriggered = 0x00A8;
		}

		namespace GFxData_MenuTreeNode_Custom_TA {
			constexpr uintptr_t UnknownData00 = 0x00C9;
		}

		namespace GFxData_MenuTreeNode_ExternalScreen_TA {
			constexpr uintptr_t UnknownData00 = 0x00C9;
		}

		namespace GFxData_MenuTreeNode_GenericFolder_TA {
			constexpr uintptr_t bShowQuickMatchButton = 0x00D0;
		}

		namespace GFxData_MenuTreeNode_PlaylistFolder_TA {
			constexpr uintptr_t bUsingMultiselect = 0x00D8;
		}

		namespace GFxData_MenuTreeNode_Playlist_TA {
			constexpr uintptr_t Bitfields_0x00D0 = 0x00D0;  // Multiple: bSelected, bLocked, bIsViral
			constexpr uintptr_t LockReason = 0x00D8;
		}

		namespace GFxData_MenuTreeNode_TA {
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bEnabled, bDisplayCrumbTrail
			constexpr uintptr_t ThumbnailImage = 0x00A0;
			constexpr uintptr_t BannerTitle = 0x00A8;
			constexpr uintptr_t BannerBody = 0x00B8;
			constexpr uintptr_t BannerType = 0x00C8;
		}

		namespace GFxData_MenuTree_TA {
			constexpr uintptr_t MenuTreeConfig = 0x0098;
			constexpr uintptr_t MenuTreeBuilder = 0x00A0;
			constexpr uintptr_t RootNode = 0x00A8;
			constexpr uintptr_t CurrentNode = 0x00B0;
			constexpr uintptr_t NodesData = 0x00B8;
		}

		namespace GFxData_MicroEvent_TA {
			constexpr uintptr_t MicroEventConfig = 0x0098;
			constexpr uintptr_t MicroEvent = 0x00A0;
			constexpr uintptr_t bIsActive = 0x00A8;
		}

		namespace GFxData_MiniScoreboard_TA {
			constexpr uintptr_t Data = 0x0098;
			constexpr uintptr_t MiniScoreboardSlots = 0x00A8;
		}

		namespace GFxData_MultiItemDrops_TA {
			constexpr uintptr_t MultiItemDropConfig = 0x0098;
			constexpr uintptr_t ActiveGroup = 0x00A0;
			constexpr uintptr_t PendingGroups = 0x00A8;
			constexpr uintptr_t GroupsRemaining = 0x00B8;
			constexpr uintptr_t DropTableName = 0x00C0;
			constexpr uintptr_t Wallet = 0x00D0;
			constexpr uintptr_t RewardDrops = 0x00D8;
			constexpr uintptr_t DropGroupType_ALL = 0x00E8;
		}

		namespace GFxData_MusicPlayer_TA {
			constexpr uintptr_t UrlConfig = 0x0098;
			constexpr uintptr_t Bitfields_0x00A0 = 0x00A0;  // Multiple: bDebugMusicPlayer, bPlaylistsEnabled, bEnableMusicControls, bPlayerPopupDisplaying, bActivePlaylistsEnabled, bTitleTracksActive
			constexpr uintptr_t DefaultPlaylists = 0x00A8;
			constexpr uintptr_t Playlists = 0x00B8;
			constexpr uintptr_t TrackTitle = 0x00C8;
			constexpr uintptr_t TrackArtist = 0x00D8;
			constexpr uintptr_t TrackIcon = 0x00E8;
			constexpr uintptr_t TrackUrl = 0x00F0;
			constexpr uintptr_t StartupLogoDisplayDurationMS = 0x0100;
			constexpr uintptr_t CurrentTrackName = 0x0108;
			constexpr uintptr_t CurrentTrackPlayingID = 0x0118;
			constexpr uintptr_t CurrentTrack = 0x0120;
			constexpr uintptr_t MasterTracklist = 0x0128;
			constexpr uintptr_t ActiveTracklist_Object = 0x0138;
			constexpr uintptr_t ActiveTracklist_Interface = 0x0140;
			constexpr uintptr_t TracklistFactory = 0x0148;
			constexpr uintptr_t MainRotationTracklistBuilder = 0x0150;
			constexpr uintptr_t MusicTheme = 0x0158;
			constexpr uintptr_t MusicSave = 0x0160;
			constexpr uintptr_t GameMusicPlayer = 0x0168;
			constexpr uintptr_t StreamerSafeConfig = 0x0170;
		}

		namespace GFxData_Mutators_TA {
			constexpr uintptr_t SelectedMapName = 0x0098;
			constexpr uintptr_t SelectedGameMode = 0x00A0;
			constexpr uintptr_t SelectedBotDifficulty = 0x00A4;
			constexpr uintptr_t GameModes = 0x00A8;
			constexpr uintptr_t MaxNumRows = 0x00B8;
			constexpr uintptr_t MaxNumColumns = 0x00BC;
			constexpr uintptr_t MaxAllowedMutators = 0x00C0;
			constexpr uintptr_t MaxPreviewMutators = 0x00C4;
			constexpr uintptr_t NumSelectedMutators = 0x00C8;
			constexpr uintptr_t CustomGameSettings = 0x00D0;
			constexpr uintptr_t GameSettingCategories = 0x00E0;
			constexpr uintptr_t GameModeMutatorSettingPresets = 0x00F0;
			constexpr uintptr_t PresetCategoryIndex = 0x0100;
			constexpr uintptr_t MutatorGroupIDs = 0x0108;
			constexpr uintptr_t ModeMaps = 0x0118;
			constexpr uintptr_t SettingsType = 0x0128;
			constexpr uintptr_t Profile = 0x0130;
			constexpr uintptr_t GameModeObj = 0x0138;
			constexpr uintptr_t AllGoalResetOptions = 0x0140;
			constexpr uintptr_t bDisableGoalResetAllowed = 0x0150;
			constexpr uintptr_t GoalResetOptions = 0x0158;
			constexpr uintptr_t SelectedGoalResetOption = 0x0168;
			constexpr uintptr_t AllBoostOptions = 0x0170;
			constexpr uintptr_t BoostOptions = 0x0180;
			constexpr uintptr_t SelectedBoostOption = 0x0190;
			constexpr uintptr_t BoostOptionKey = 0x0198;
			constexpr uintptr_t GoalResetOptionKey = 0x01A8;
			constexpr uintptr_t GameTags = 0x01B8;
			constexpr uintptr_t OnlineFreeplaySave = 0x01C0;
			constexpr uintptr_t MutatorConfig = 0x01C8;
		}

		namespace GFxData_Nameplate_TA {
			constexpr uintptr_t HideFullNameplateDistance = 0x0098;
			constexpr uintptr_t LivesVisibilityFadeMinDistance = 0x009C;
			constexpr uintptr_t LivesVisibilityFadeMaxDistance = 0x00A0;
			constexpr uintptr_t PlayerName = 0x00A8;
			constexpr uintptr_t Team = 0x00B8;
			constexpr uintptr_t Bitfields_0x00BC = 0x00BC;  // Multiple: bHideFullNameplate, bIsTargetLocked, bInKnockoutGameMode, bIsDistracted, bLocalPlayer, bRenderBoostAmount, bShowShortcut
			constexpr uintptr_t LivesVisibility = 0x00C0;
			constexpr uintptr_t RemainingLives = 0x00C4;
			constexpr uintptr_t MaxLives = 0x00C8;
			constexpr uintptr_t BoostAmount = 0x00CC;
			constexpr uintptr_t InfectedStatus = 0x00D0;
			constexpr uintptr_t NameplateComponent = 0x00D8;
			constexpr uintptr_t GameplaySettings = 0x00E0;
			constexpr uintptr_t Persona = 0x00E8;
		}

		namespace GFxData_NotificationManager_TA {
			constexpr uintptr_t Notifications = 0x0098;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bShowInGameNotifications, bShowItemShopNotifications
			constexpr uintptr_t NotificationSave = 0x00B0;
			constexpr uintptr_t PendingNotifications = 0x00B8;
			constexpr uintptr_t ActiveNotifications = 0x00C8;
		}

		namespace GFxData_Notification_TA {
			constexpr uintptr_t UnknownData00 = 0x0094;
		}

		namespace GFxData_OnlineFreeplay_TA {
			constexpr uintptr_t bCanUseFreeplayCommands = 0x01A0;
			constexpr uintptr_t GameModes = 0x01A8;
			constexpr uintptr_t GoalResetOptions = 0x01B8;
			constexpr uintptr_t SelectedGameMode = 0x01C8;
			constexpr uintptr_t SelectedBoost = 0x01CC;
			constexpr uintptr_t SelectedGoalReset = 0x01CD;
			constexpr uintptr_t DefaultGameModeIndex = 0x01D0;
			constexpr uintptr_t DefaultMapName = 0x01D4;
			constexpr uintptr_t MaxPlayerCount = 0x01DC;
			constexpr uintptr_t BallResetRestrictedGameModes = 0x01E0;
			constexpr uintptr_t BallResetIndex = 0x01F0;
		}

		namespace GFxData_OnlineMatchStatus_TA {
			constexpr uintptr_t bSearching = 0x0098;
			constexpr uintptr_t SearchState = 0x009C;
			constexpr uintptr_t SavedSearchingString = 0x00A8;
			constexpr uintptr_t SavedSearchStrings = 0x00B8;
			constexpr uintptr_t StatusOwner = 0x00C8;
			constexpr uintptr_t OnlineParty = 0x00D0;
			constexpr uintptr_t PartyLeaderSearchingMessage = 0x00D8;
		}

		namespace GFxData_OnlineMatch_TA {
			constexpr uintptr_t TAPlayer = 0x0098;
			constexpr uintptr_t Profile = 0x00A0;
			constexpr uintptr_t NoRegionsMessage = 0x00A8;
			constexpr uintptr_t NotLoggedInPsynetMessage = 0x00B8;
			constexpr uintptr_t BannedMessage = 0x00C8;
			constexpr uintptr_t NotPartyLeaderMsg = 0x00D8;
			constexpr uintptr_t CountdownSeconds = 0x00E8;
			constexpr uintptr_t OnlineParty = 0x00F0;
			constexpr uintptr_t OnlineStatusError = 0x00F8;
			constexpr uintptr_t SearchStatusData = 0x0108;
			constexpr uintptr_t bSearching = 0x0110;
		}

		namespace GFxData_PRI_TA {
			constexpr uintptr_t PlayerName = 0x0098;
			constexpr uintptr_t PlayerIDString = 0x00A8;
			constexpr uintptr_t Platform = 0x00B8;
			constexpr uintptr_t Avatar = 0x00C8;
			constexpr uintptr_t Team = 0x00D0;
			constexpr uintptr_t Score = 0x00D4;
			constexpr uintptr_t Goals = 0x00D8;
			constexpr uintptr_t Assists = 0x00DC;
			constexpr uintptr_t Saves = 0x00E0;
			constexpr uintptr_t Shots = 0x00E4;
			constexpr uintptr_t Ping = 0x00E8;
			constexpr uintptr_t BreakoutDamage = 0x00EC;
			constexpr uintptr_t Bitfields_0x00F0 = 0x00F0;  // Multiple: bMvp, bSpeaking, bMuted, bBlocked, bReady, bBotPlayer, bLocalPlayer, bDisconnected, bStayAsPartyActive, bSpectator, bCompletedPlacementMatches, bSelected, bHighlighted, bGameEnded, bOnPodium, bWantsToHonorDuel, bChallengedToHonorDuel, bCanChallengeToHonorDuel
			constexpr uintptr_t ConnectionStatus = 0x00F8;
			constexpr uintptr_t PartyID = 0x0108;
			constexpr uintptr_t XPTitle = 0x0118;
			constexpr uintptr_t TitleColor = 0x0128;
			constexpr uintptr_t TitleGlowColor = 0x012C;
			constexpr uintptr_t SkillTier = 0x0130;
			constexpr uintptr_t Boost = 0x0134;
			constexpr uintptr_t PRI = 0x0138;
			constexpr uintptr_t PlayerID = 0x0140;
			constexpr uintptr_t PodiumSpotlightScreenPosX = 0x0188;
			constexpr uintptr_t PodiumSpotlightScreenPosY = 0x018C;
			constexpr uintptr_t PrimaryTitle = 0x0190;
			constexpr uintptr_t SecondaryTitle = 0x01A0;
			constexpr uintptr_t PrimaryTitleStat = 0x01B0;
			constexpr uintptr_t SecondaryTitleStat = 0x01C0;
			constexpr uintptr_t PrimaryStat = 0x01D0;
			constexpr uintptr_t SecondaryStat = 0x01D4;
			constexpr uintptr_t ClubID = 0x01D8;
			constexpr uintptr_t WorstConnectionQualityStateBeyondLatency = 0x01E0;
			constexpr uintptr_t QuitSeverity = 0x01E1;
			constexpr uintptr_t InfectedStatus = 0x01E2;
			constexpr uintptr_t SpectatorShortcut = 0x01E4;
			constexpr uintptr_t GFxPlayerBanner = 0x01E8;
			constexpr uintptr_t GFxPlayerAvatar = 0x01F0;
			constexpr uintptr_t GFxPlayerBorder = 0x01F8;
			constexpr uintptr_t Persona = 0x0200;
			constexpr uintptr_t PrimaryPersona = 0x0208;
			constexpr uintptr_t Personas = 0x0210;
			constexpr uintptr_t ScoreboardStats = 0x0218;
			constexpr uintptr_t SpectatorStats = 0x0220;
		}

		namespace GFxData_PartyInvite_TA {
			constexpr uintptr_t Invites = 0x0098;
			constexpr uintptr_t PendingInvites = 0x00A8;
			constexpr uintptr_t SilentSentInvites = 0x00B8;
			constexpr uintptr_t PsyNetParty = 0x00C8;
			constexpr uintptr_t OnlineGameParty = 0x00D0;
			constexpr uintptr_t CrossplayConfig = 0x00D8;
			constexpr uintptr_t PersonasData = 0x00E0;
		}

		namespace GFxData_PartyJoinRequest_TA {
			constexpr uintptr_t RequestTitle = 0x0098;
			constexpr uintptr_t RequestSendBody = 0x00A8;
			constexpr uintptr_t RequestAcceptBody = 0x00B8;
			constexpr uintptr_t ExpirationTimeSeconds = 0x00C8;
			constexpr uintptr_t OnlineGameParty = 0x00D0;
			constexpr uintptr_t PersonasData = 0x00D8;
			constexpr uintptr_t PsyNetParty = 0x00E0;
		}

		namespace GFxData_PartyMemberProfile_TA {
			constexpr uintptr_t PlayerID = 0x0098;
			constexpr uintptr_t Title = 0x00E0;
			constexpr uintptr_t TitleText = 0x00E8;
			constexpr uintptr_t TitleColor = 0x00F8;
			constexpr uintptr_t TitleGlowColor = 0x00FC;
			constexpr uintptr_t Profile = 0x0100;
			constexpr uintptr_t OnlineGameParty = 0x0108;
		}

		namespace GFxData_Party_TA {
			constexpr uintptr_t Members = 0x0098;
			constexpr uintptr_t MaxPartySize = 0x00A8;
			constexpr uintptr_t Processing = 0x00AC;
			constexpr uintptr_t OnlineParty = 0x00B8;
			constexpr uintptr_t PersonasData = 0x00C0;
			constexpr uintptr_t Clubs = 0x00C8;
			constexpr uintptr_t VanityManager = 0x00D0;
			constexpr uintptr_t PsyNetPartyStatus = 0x00D8;
			constexpr uintptr_t RegionRestrictedPlayerTrade = 0x00E0;
			constexpr uintptr_t PartyErrorModal = 0x00F0;
			constexpr uintptr_t bPendingAllowTrade = 0x00F8;
			constexpr uintptr_t CrossplayConfig = 0x0100;
		}

		namespace GFxData_PersonaGroup_TA {
			constexpr uintptr_t GroupTitle = 0x0098;
			constexpr uintptr_t GroupPresenceId = 0x00A8;
			constexpr uintptr_t GroupOrigin = 0x00AC;
		}

		namespace GFxData_Persona_TA {
			constexpr uintptr_t Persona = 0x0098;
			constexpr uintptr_t PlayerAvatar = 0x00A0;
		}

		namespace GFxData_Personas_TA {
			constexpr uintptr_t PersonaMap = 0x0098;
			constexpr uintptr_t PersonasData = 0x00E8;
		}

		namespace GFxData_PlatformAuth_TA {
			constexpr uintptr_t SuccessTitle = 0x0098;
			constexpr uintptr_t SuccessBody = 0x00A8;
		}

		namespace GFxData_PlayerAvatarBorderPreview_TA {
			constexpr uintptr_t AvatarBorderPreviews = 0x0098;
		}

		namespace GFxData_PlayerAvatarBorder_TA {
			constexpr uintptr_t PlayerBorder = 0x0098;
		}

		namespace GFxData_PlayerAvatarPreview_TA {
			constexpr uintptr_t AvatarPreviews = 0x0098;
		}

		namespace GFxData_PlayerAvatar_TA {
			constexpr uintptr_t PlayerAvatar = 0x0098;
		}

		namespace GFxData_PlayerBanner_TA {
			constexpr uintptr_t PlayerBanner = 0x0098;
		}

		namespace GFxData_PlayerBanners_TA {
			constexpr uintptr_t Banners = 0x0098;
			constexpr uintptr_t LastPreviewBanner = 0x00A8;
		}

		namespace GFxData_PlayerRecord_TA {
			constexpr uintptr_t PlayerIDString = 0x0098;
			constexpr uintptr_t bReported = 0x00A8;
			constexpr uintptr_t SanitizedPlayerName = 0x00B0;
			constexpr uintptr_t PlayerName = 0x00C0;
			constexpr uintptr_t PRI = 0x00D0;
			constexpr uintptr_t PlayerID = 0x00D8;
		}

		namespace GFxData_PlayerTitles_TA {
			constexpr uintptr_t SelectedTitle = 0x0098;
			constexpr uintptr_t PlayerTitles = 0x00A0;
			constexpr uintptr_t LoadoutSave = 0x00B0;
			constexpr uintptr_t TitleConfig = 0x00B8;
		}

		namespace GFxData_PlayerVanity_TA {
			constexpr uintptr_t VanityMgr = 0x0098;
			constexpr uintptr_t GFxPlayerAvatarBorder = 0x00A0;
			constexpr uintptr_t GFxPlayerBanner = 0x00A8;
		}

		namespace GFxData_Playlist_TA {
			constexpr uintptr_t Playlist = 0x0098;
			constexpr uintptr_t Id = 0x00A0;
			constexpr uintptr_t KeyName = 0x00A8;
			constexpr uintptr_t FriendlyName = 0x00B8;
			constexpr uintptr_t Description = 0x00C8;
			constexpr uintptr_t BadgeTitle = 0x00D8;
			constexpr uintptr_t TeamSize = 0x00E8;
			constexpr uintptr_t Bitfields_0x00EC = 0x00EC;  // Multiple: bStandardMatch, bRanked, bSolo, bSelected, bEnabled, bRestricted, bNew, bIsMicroEventPlaylist, bTournament, bCompletedPlacementMatches, bOpenDetailsOnFirstTimeClicked, bDisableSaveReplays, bPlaylistAllowsStayAsParty, bUndersizedPartyWithRankDisparity, bIsTimeRestricted, bForceDetailsPage
			constexpr uintptr_t PlaylistBackgroundTexture = 0x00F0;
			constexpr uintptr_t PlaylistIconActiveTexture = 0x00F8;
			constexpr uintptr_t PlaylistIconInactiveTexture = 0x0100;
			constexpr uintptr_t PlaylistNodeThumbnailTexture = 0x0108;
			constexpr uintptr_t PlayerCountBucket = 0x0110;
			constexpr uintptr_t SkillTier = 0x0114;
			constexpr uintptr_t SkillDivision = 0x0118;
			constexpr uintptr_t SkillMatchesPlayed = 0x011C;
			constexpr uintptr_t SkillPlacementMatchesPlayed = 0x0120;
			constexpr uintptr_t SkillMMR = 0x0124;
			constexpr uintptr_t PrevSkillTier = 0x0128;
			constexpr uintptr_t PrevSkillDivision = 0x012C;
			constexpr uintptr_t MaximumRankDisparity = 0x0130;
			constexpr uintptr_t StartTime = 0x0138;
			constexpr uintptr_t EndTime = 0x0140;
			constexpr uintptr_t DetailsGroup = 0x0148;
			constexpr uintptr_t MicroEventConfig = 0x0150;
		}

		namespace GFxData_PossibleTradeIn_TA {
			constexpr uintptr_t Filter = 0x0098;
			constexpr uintptr_t TradeInFilterID = 0x0208;
			constexpr uintptr_t Quality = 0x020C;
			constexpr uintptr_t NumberofTradeIns = 0x0210;
			constexpr uintptr_t RemainingItems = 0x0214;
			constexpr uintptr_t TradeInFilter = 0x0218;
			constexpr uintptr_t FilteredHashIDs = 0x0268;
		}

		namespace GFxData_PreMatchLobby_TA {
			constexpr uintptr_t PreMatchLobby = 0x0098;
		}

		namespace GFxData_PrivateMatch_TA {
			constexpr uintptr_t Regions = 0x0118;
			constexpr uintptr_t ServerName = 0x0128;
			constexpr uintptr_t Password = 0x0138;
			constexpr uintptr_t SelectedMaxPlayerCount = 0x0148;
			constexpr uintptr_t bPublicMatch = 0x014C;
			constexpr uintptr_t MinServerNameLength = 0x0150;
			constexpr uintptr_t AlreadySearchingMessage = 0x0158;
			constexpr uintptr_t AlreadySearchingForPublicMessage = 0x0168;
			constexpr uintptr_t ServerNameLengthError = 0x0178;
			constexpr uintptr_t DuplicateLanServerMessage = 0x0188;
			constexpr uintptr_t SearchStatusOwner = 0x0198;
			constexpr uintptr_t SettingsType = 0x0199;
		}

		namespace GFxData_Privileges_TA {
			constexpr uintptr_t bCheckingPrivileges = 0x0098;
			constexpr uintptr_t OnlineGame = 0x00A0;
		}

		namespace GFxData_ProductAttribute_Anthem_TA {
			constexpr uintptr_t MusicTitle = 0x00B0;
			constexpr uintptr_t ArtistTitle = 0x00C0;
		}

		namespace GFxData_ProductAttribute_Blueprint_TA {
			constexpr uintptr_t ProductThumbnail = 0x00B0;
			constexpr uintptr_t BlueprintThumbnail = 0x00B8;
			constexpr uintptr_t Cost = 0x00C0;
			constexpr uintptr_t bRevealed = 0x00C4;
			constexpr uintptr_t PreviewProductHashID = 0x00C8;
		}

		namespace GFxData_ProductAttribute_Certified_TA {
			constexpr uintptr_t CertifiedStatLabel = 0x00B0;
		}

		namespace GFxData_ProductAttribute_ContainerKey_TA {
			constexpr uintptr_t bMagicKey = 0x00B0;
		}

		namespace GFxData_ProductAttribute_Container_TA {
			constexpr uintptr_t Bitfields_0x00B0 = 0x00B0;  // Multiple: bUnlocked, bSkipRoulette, bGiftbox
		}

		namespace GFxData_ProductAttribute_CreatorDetails_TA {
			constexpr uintptr_t CreatorName = 0x00B0;
		}

		namespace GFxData_ProductAttribute_Currency_TA {
			constexpr uintptr_t CurrencyID = 0x00B0;
		}

		namespace GFxData_ProductAttribute_Expiration_TA {
			constexpr uintptr_t ExpirationTime = 0x00B0;
		}

		namespace GFxData_ProductAttribute_Indestructible_TA {
			constexpr uintptr_t bIndestructible = 0x00B0;
		}

		namespace GFxData_ProductAttribute_Level_TA {
			constexpr uintptr_t bProductUpgradable = 0x00B0;
		}

		namespace GFxData_ProductAttribute_Painted_TA {
			constexpr uintptr_t ProductPaintColor = 0x00B0;
			constexpr uintptr_t ProductPaintColorName = 0x00B8;
			constexpr uintptr_t ProductPaintMask = 0x00C8;
			constexpr uintptr_t ProductPaintDiffHue = 0x00D0;
			constexpr uintptr_t ProductPaintDiffSaturation = 0x00D4;
			constexpr uintptr_t ProductPaintDiffLightness = 0x00D8;
		}

		namespace GFxData_ProductAttribute_ProductLink_TA {
			constexpr uintptr_t ProductID = 0x00B0;
		}

		namespace GFxData_ProductAttribute_Reactive_TA {
			constexpr uintptr_t ReactiveLabelText = 0x00B0;
			constexpr uintptr_t ReactiveDescriptionText = 0x00C0;
			constexpr uintptr_t ReactiveBulletedDescriptionText = 0x00D0;
		}

		namespace GFxData_ProductAttribute_Rental_TA {
			constexpr uintptr_t RentalLength = 0x00B0;
		}

		namespace GFxData_ProductAttribute_ShopItem_TA {
			constexpr uintptr_t BackgroundImage = 0x00B0;
			constexpr uintptr_t ItemLogo = 0x00B8;
		}

		namespace GFxData_ProductAttribute_SpecialEdition_TA {
			constexpr uintptr_t EditionLabel = 0x00B0;
		}

		namespace GFxData_ProductAttribute_TA {
			constexpr uintptr_t AttributeClass = 0x0098;
			constexpr uintptr_t AttributeProvider_Object = 0x00A0;
			constexpr uintptr_t AttributeProvider_Interface = 0x00A8;
		}

		namespace GFxData_ProductAttribute_TeamEdition_TA {
			constexpr uintptr_t TeamName = 0x00B0;
			constexpr uintptr_t TeamLogo = 0x00C0;
			constexpr uintptr_t ItemShopLabel = 0x00C8;
		}

		namespace GFxData_ProductAttribute_Tiered_TA {
			constexpr uintptr_t ProductTier = 0x00B0;
		}

		namespace GFxData_ProductAttribute_Title_TA {
			constexpr uintptr_t TitleId = 0x00B0;
		}

		namespace GFxData_ProductFilter_TA {
			constexpr uintptr_t UIAttributes = 0x0098;
			constexpr uintptr_t AlwaysIgnoredSlots = 0x00A8;
			constexpr uintptr_t Label = 0x00B8;
			constexpr uintptr_t Slots = 0x00C8;
			constexpr uintptr_t Qualities = 0x00D8;
			constexpr uintptr_t Attributes = 0x00E8;
			constexpr uintptr_t ExtraAttributes = 0x00F8;
			constexpr uintptr_t Paints = 0x0108;
			constexpr uintptr_t SeriesIDs = 0x0118;
			constexpr uintptr_t SortingLabels = 0x0128;
			constexpr uintptr_t Bitfields_0x0138 = 0x0138;  // Multiple: bIgnoreEquipped, bTradeInScreenSelected, bAllowDefaultProducts
			constexpr uintptr_t BatchPreviewQuantityTimer = 0x013C;
			constexpr uintptr_t FilterStack = 0x0140;
			constexpr uintptr_t Filters = 0x0150;
			constexpr uintptr_t ProductQualitiesToIgnore = 0x0710;
			constexpr uintptr_t ProductSortingToIgnore = 0x0720;
			constexpr uintptr_t ProductAttributesToIgnore = 0x0730;
			constexpr uintptr_t DefaultSorting = 0x0740;
			constexpr uintptr_t GarageArchiveSlot = 0x0750;
			constexpr uintptr_t GarageFavoritedSlot = 0x0758;
			constexpr uintptr_t LoadoutSave = 0x0760;
			constexpr uintptr_t MtxConfig = 0x0768;
			constexpr uintptr_t ProductsConfig = 0x0770;
		}

		namespace GFxData_ProductSlot_TA {
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bEnabled, bCanUnequip, bDefaultEquipped0, bDefaultEquipped1
			constexpr uintptr_t SlotName = 0x009C;
			constexpr uintptr_t Label = 0x00A8;
			constexpr uintptr_t PluralLabel = 0x00B8;
			constexpr uintptr_t Icon = 0x00C8;
			constexpr uintptr_t SlotIndex = 0x00D0;
			constexpr uintptr_t EquippedHashID0 = 0x00D4;
			constexpr uintptr_t EquippedHashID1 = 0x00D8;
			constexpr uintptr_t EquippedPack = 0x00DC;
			constexpr uintptr_t DefaultProductID = 0x00E0;
			constexpr uintptr_t MatchesNeededToUnlock = 0x00E4;
		}

		namespace GFxData_ProductTradeIn_TA {
			constexpr uintptr_t TradeIns = 0x0098;
			constexpr uintptr_t ProductTransactions = 0x00A8;
			constexpr uintptr_t ModalProcessing = 0x00B0;
			constexpr uintptr_t InvalidProductString = 0x00B8;
			constexpr uintptr_t NotEnoughProductsSelected = 0x00C8;
			constexpr uintptr_t NumProductsRequiredForTradeIn = 0x00D8;
			constexpr uintptr_t TradeInFilters = 0x00E0;
		}

		namespace GFxData_Products_TA {
			constexpr uintptr_t LoadingProducts = 0x0098;
			constexpr uintptr_t Stats = 0x00A8;
			constexpr uintptr_t ProductLabel = 0x00B8;
			constexpr uintptr_t ProductLongLabel = 0x00C8;
			constexpr uintptr_t ProductIcon = 0x00D8;
			constexpr uintptr_t ProductDescription = 0x00E0;
			constexpr uintptr_t ProductID = 0x00F0;
			constexpr uintptr_t BaseProductID = 0x0100;
			constexpr uintptr_t HashID = 0x0104;
			constexpr uintptr_t ProductPackHashID = 0x0108;
			constexpr uintptr_t SchematicPointerID = 0x010C;
			constexpr uintptr_t ProductSlot = 0x0110;
			constexpr uintptr_t ProductSlotLabel = 0x0118;
			constexpr uintptr_t ProductSlotLongLabel = 0x0128;
			constexpr uintptr_t Bitfields_0x0138 = 0x0138;  // Multiple: bProductEquipped, bProductEquipped01, bProductUnlocked, bProductIsPack, bProductIsNew, bProductHasNewSkin, bProductCanBeTradedIn, bProductCanBePlayerTraded, bProductIsContainer, bProductIsContainerKey, bProductIsSchematic, bHasPostMatchCelebration, bIsReactive, bHasReactivePreview, bIsFavorited, bIsArchived, bCanArchive, bIsXETradeLocked, bDebugLoadingProducts
			constexpr uintptr_t ProductPaintColor = 0x013C;
			constexpr uintptr_t ProductPaintColorName = 0x0140;
			constexpr uintptr_t ProductQuality = 0x0150;
			constexpr uintptr_t XEStatus = 0x0151;
			constexpr uintptr_t ProductQuantity = 0x0154;
			constexpr uintptr_t TradeHold = 0x0158;
			constexpr uintptr_t SeriesID = 0x015C;
			constexpr uintptr_t SeriesDescription = 0x0160;
			constexpr uintptr_t XEShopDescriptionText = 0x0170;
			constexpr uintptr_t XEBlueprintDescriptionText = 0x0180;
			constexpr uintptr_t XEDescriptionText = 0x0190;
			constexpr uintptr_t ProductTradeInQuantity = 0x01A0;
			constexpr uintptr_t SchematicResources = 0x01A4;
			constexpr uintptr_t AttributeMap = 0x01A8;
			constexpr uintptr_t AttributeTables = 0x01B0;
			constexpr uintptr_t NewProducts = 0x01C0;
			constexpr uintptr_t FavoriteSave = 0x01D0;
			constexpr uintptr_t ArchiveSave = 0x01D8;
			constexpr uintptr_t LoadoutSave = 0x01E0;
			constexpr uintptr_t DynamicThumbnailsIgnorableOnlinePaintedProducts = 0x01E8;
			constexpr uintptr_t MtxConfig = 0x01F8;
			constexpr uintptr_t ProductsConfig = 0x0200;
		}

		namespace GFxData_QuickChatBindings_TA {
			constexpr uintptr_t AllQuickChats = 0x0098;
			constexpr uintptr_t Bindings = 0x00A8;
			constexpr uintptr_t QuickChats = 0x00B8;
			constexpr uintptr_t PostGameQuickChats = 0x00C8;
			constexpr uintptr_t PreGameQuickChats = 0x00D8;
			constexpr uintptr_t QuickChatSave = 0x00E8;
		}

		namespace GFxData_RedeemCodes_TA {
			constexpr uintptr_t RedeemTask = 0x0098;
			constexpr uintptr_t RedeemingTitleString = 0x00A0;
			constexpr uintptr_t RedeemingBodyString = 0x00B0;
		}

		namespace GFxData_Regions_TA {
			constexpr uintptr_t SuperRegions = 0x0098;
			constexpr uintptr_t Regions = 0x00A8;
		}

		namespace GFxData_ReplayManager_TA {
			constexpr uintptr_t ReplaySaveID = 0x0098;
			constexpr uintptr_t ReplaySaveError = 0x00A8;
			constexpr uintptr_t ReplayData = 0x00B8;
			constexpr uintptr_t ReplayLoadResults = 0x00C8;
			constexpr uintptr_t ModalProcessing = 0x00D8;
			constexpr uintptr_t PendingSaveName = 0x00E0;
			constexpr uintptr_t bDataMapUpdated = 0x00F0;
			constexpr uintptr_t MatchHistoryConfig = 0x00F8;
			constexpr uintptr_t CurrentLoadedIndex = 0x0100;
		}

		namespace GFxData_ReplayViewer_TA {
			constexpr uintptr_t CurrentFrame = 0x0098;
			constexpr uintptr_t CameraModes = 0x00A0;
			constexpr uintptr_t DefaultCameraMode = 0x00B0;
			constexpr uintptr_t CameraMode = 0x00B8;
			constexpr uintptr_t FocusActorString = 0x00C0;
			constexpr uintptr_t LastFocusActorString = 0x00D0;
			constexpr uintptr_t Bitfields_0x00E0 = 0x00E0;  // Multiple: bHighlightFocusActor, bShowReplayHUD, bShowMatchInfoHUD, bShowPlayerNames, bPausedForScrub, bChangesMade
			constexpr uintptr_t Slomo = 0x00E4;
			constexpr uintptr_t FOV = 0x00E8;
			constexpr uintptr_t ViewRoll = 0x00EC;
			constexpr uintptr_t Replay = 0x00F0;
			constexpr uintptr_t PendingSkipToFrame = 0x00F8;
			constexpr uintptr_t ModalProcessing = 0x0100;
		}

		namespace GFxData_Replay_TA {
			constexpr uintptr_t FriendlyMapName = 0x0098;
			constexpr uintptr_t PrimaryPlayerTeam = 0x00A8;
			constexpr uintptr_t PrimaryPlayerScore = 0x00AC;
			constexpr uintptr_t PrimaryPlayerGoals = 0x00B0;
			constexpr uintptr_t PrimaryPlayerAssists = 0x00B4;
			constexpr uintptr_t PrimaryPlayerSaves = 0x00B8;
			constexpr uintptr_t PrimaryPlayerShots = 0x00BC;
			constexpr uintptr_t MatchStartEpoch = 0x00C0;
			constexpr uintptr_t MatchEndEpoch = 0x00C8;
			constexpr uintptr_t MatchStartDate = 0x00D0;
			constexpr uintptr_t MatchEndDate = 0x00E0;
			constexpr uintptr_t TotalSecondsPlayed = 0x00F0;
			constexpr uintptr_t WinningTeam = 0x00F4;
			constexpr uintptr_t Bitfields_0x00F8 = 0x00F8;  // Multiple: bPrimaryPlayerInReplay, bLocalPlayerAbandoned
		}

		namespace GFxData_Restrictions_TA {
			constexpr uintptr_t RestrictedModal = 0x0098;
			constexpr uintptr_t EpicConfig = 0x00A0;
		}

		namespace GFxData_RewardDrop_TA {
			constexpr uintptr_t RewardDrops = 0x0098;
		}

		namespace GFxData_RewardDrop_XP_TA {
			constexpr uintptr_t bCanDropOnlineRewards = 0x00A0;
		}

		namespace GFxData_RewardDrops_TA {
			constexpr uintptr_t RewardName = 0x0098;
			constexpr uintptr_t Total = 0x00A0;
			constexpr uintptr_t Base = 0x00A4;
			constexpr uintptr_t BaseLevel = 0x00A8;
			constexpr uintptr_t Level = 0x00AC;
			constexpr uintptr_t LevelThresholds = 0x00B0;
			constexpr uintptr_t Modifiers = 0x00C0;
			constexpr uintptr_t RewardDrops = 0x00D0;
			constexpr uintptr_t PremiumModifierNames = 0x00D8;
			constexpr uintptr_t PenaltyModifierNames = 0x00E8;
			constexpr uintptr_t PromoModifierNames = 0x00F8;
			constexpr uintptr_t WeeklyCapReached = 0x0108;
			constexpr uintptr_t RewardModifiers_SectionName = 0x0110;
			constexpr uintptr_t RewardModifiers_PackageName = 0x0120;
			constexpr uintptr_t WeeklyCap = 0x0130;
			constexpr uintptr_t RestXP = 0x0138;
			constexpr uintptr_t bCanDropOnlineRewards = 0x0140;
		}

		namespace GFxData_RocketPass_TA {
			constexpr uintptr_t FreeRewards = 0x0098;
			constexpr uintptr_t PremiumRewards = 0x00A8;
			constexpr uintptr_t PrestigeRewards = 0x00B8;
			constexpr uintptr_t PremiumXPRewards = 0x00C8;
			constexpr uintptr_t PremiumCurrencyRewards = 0x00D8;
			constexpr uintptr_t StartTime = 0x00E8;
			constexpr uintptr_t EndTime = 0x00F0;
			constexpr uintptr_t RocketPassSet = 0x00F8;
			constexpr uintptr_t PendingMasterTask = 0x0100;
			constexpr uintptr_t RegionRestrictedPurchaseTiers = 0x0108;
			constexpr uintptr_t MainMenuName = 0x0118;
			constexpr uintptr_t RocketPassMenuName = 0x0120;
			constexpr uintptr_t bHideMainMenuButton = 0x0128;
			constexpr uintptr_t RocketPass = 0x0130;
			constexpr uintptr_t RocketPassConfig = 0x0138;
		}

		namespace GFxData_SaveData_TA {
			constexpr uintptr_t PersistentSavedValues = 0x0098;
			constexpr uintptr_t TransientSavedValues = 0x00A0;
		}

		namespace GFxData_SchematicTradeIn_TA {
			constexpr uintptr_t Schematics = 0x0098;
			constexpr uintptr_t ModalProcessing = 0x00A8;
			constexpr uintptr_t InvalidProductString = 0x00B0;
			constexpr uintptr_t MinResources = 0x00C0;
			constexpr uintptr_t MaxResources = 0x00C4;
		}

		namespace GFxData_ScoreboardStat_TA {
			constexpr uintptr_t PlayerIDString = 0x0098;
			constexpr uintptr_t Values = 0x00A8;
		}

		namespace GFxData_Scoreboard_TA {
			constexpr uintptr_t bSplitByTeams = 0x0098;
			constexpr uintptr_t StatNames = 0x00A0;
			constexpr uintptr_t SortedPlayerIDs = 0x00B0;
		}

		namespace GFxData_SeasonMode_TA {
			constexpr uintptr_t PlayerBots = 0x0098;
			constexpr uintptr_t NumSeasons = 0x00A8;
			constexpr uintptr_t Logos = 0x00B0;
			constexpr uintptr_t Bots = 0x00C0;
			constexpr uintptr_t TeamLogo = 0x00D0;
			constexpr uintptr_t SeasonSave = 0x00D8;
			constexpr uintptr_t PreviewSet = 0x00E0;
			constexpr uintptr_t bUseSeasonColors = 0x00E8;
			constexpr uintptr_t CurrentTeamSize = 0x00EC;
		}

		namespace GFxData_SeasonReward_TA {
			constexpr uintptr_t Level = 0x0098;
			constexpr uintptr_t Wins = 0x009C;
			constexpr uintptr_t WinsRequired = 0x00A0;
			constexpr uintptr_t bCanProgress = 0x00A4;
			constexpr uintptr_t RankedConfig = 0x00A8;
			constexpr uintptr_t Skill = 0x00B0;
		}

		namespace GFxData_Season_TA {
			constexpr uintptr_t TeamRankings = 0x0098;
			constexpr uintptr_t WeekMatches = 0x00A8;
			constexpr uintptr_t Weeks = 0x00B8;
			constexpr uintptr_t Profile = 0x00C8;
			constexpr uintptr_t Season = 0x00D0;
		}

		namespace GFxData_ServerBrowser_TA {
			constexpr uintptr_t TAPlayer = 0x0098;
			constexpr uintptr_t ServerName = 0x00A0;
			constexpr uintptr_t Password = 0x00B0;
			constexpr uintptr_t Results = 0x00C0;
			constexpr uintptr_t ProcessingModal = 0x00D0;
			constexpr uintptr_t JoiningServerName = 0x00D8;
			constexpr uintptr_t SaveData = 0x00E8;
		}

		namespace GFxData_ServerPerformanceStats_TA {
			constexpr uintptr_t ServerPerformanceStatus = 0x0098;
			constexpr uintptr_t bReportedServer = 0x009C;
		}

		namespace GFxData_Settings_TA {
			constexpr uintptr_t CrossNetworkTask = 0x0098;
			constexpr uintptr_t MouseSensitivityLimits = 0x00A0;
			constexpr uintptr_t ControllerDeadzoneLimits = 0x00AC;
			constexpr uintptr_t MouseDeadZoneLimits = 0x00B8;
			constexpr uintptr_t KeyboardAxisBlendLimits = 0x00C4;
			constexpr uintptr_t SteeringSensitivityLimits = 0x00D0;
			constexpr uintptr_t AirControlSensitivityLimits = 0x00DC;
			constexpr uintptr_t DodgeInputThresholdLimits = 0x00E8;
			constexpr uintptr_t SafeZoneLimits = 0x00F4;
			constexpr uintptr_t UIScaleLimits = 0x0100;
			constexpr uintptr_t NameplateScaleLimits = 0x010C;
			constexpr uintptr_t HDRBrightnessScaleLimits = 0x0118;
			constexpr uintptr_t HDRPaperWhiteScaleLimits = 0x0124;
			constexpr uintptr_t HDRGammaScaleLimits = 0x0130;
			constexpr uintptr_t ForceFeedbackScaleLimits = 0x013C;
			constexpr uintptr_t TrainingGameSpeedLimits = 0x0148;
			constexpr uintptr_t FreeplayBoostFillDelayLimits = 0x0154;
			constexpr uintptr_t PickupActivationBufferLimits = 0x0160;
			constexpr uintptr_t LoadingString = 0x0170;
			constexpr uintptr_t SettingsConfig = 0x0180;
			constexpr uintptr_t FreeplayConfig = 0x0188;
			constexpr uintptr_t ItemShopNotificationsConfig = 0x0190;
			constexpr uintptr_t ShowBindingsModal_ErrorMessage = 0x0198;
			constexpr uintptr_t CrossplaySetting = 0x01A8;
			constexpr uintptr_t UserSettings = 0x01B0;
			constexpr uintptr_t OldResolution = 0x01C0;
			constexpr uintptr_t OldWindowMode = 0x01D0;
			constexpr uintptr_t Bitfields_0x01E0 = 0x01E0;  // Multiple: OldVSync, bSettingRenderDetail, bSettingCameraPreset
			constexpr uintptr_t Profile = 0x01E8;
			constexpr uintptr_t SaveData = 0x01F0;
			constexpr uintptr_t Viewport = 0x01F8;
			constexpr uintptr_t SettingObserver = 0x0200;
			constexpr uintptr_t SoundSave = 0x0208;
			constexpr uintptr_t SoundSaveController = 0x0210;
			constexpr uintptr_t GameplaySave = 0x0218;
			constexpr uintptr_t ProfileGameplaySave = 0x0220;
			constexpr uintptr_t NetworkSave = 0x0228;
			constexpr uintptr_t ConnectionQualitySave = 0x0230;
			constexpr uintptr_t ProfileCameraSave = 0x0238;
			constexpr uintptr_t GamepadSave = 0x0240;
			constexpr uintptr_t VideoSave = 0x0248;
			constexpr uintptr_t MusicSave = 0x0250;
			constexpr uintptr_t ProfileControlsSave = 0x0258;
			constexpr uintptr_t NotificationSave = 0x0260;
			constexpr uintptr_t EpicAccountSave = 0x0268;
			constexpr uintptr_t VoiceSettingsSave = 0x0270;
			constexpr uintptr_t OnlineFreeplaySave = 0x0278;
			constexpr uintptr_t SteamInputSettings = 0x0280;
			constexpr uintptr_t ControllerCount = 0x0288;
			constexpr uintptr_t DefaultDeviceString = 0x0290;
			constexpr uintptr_t PermissionLevelNotHighEnoughError = 0x02A0;
			constexpr uintptr_t TradePermissionNotHighEnoughError = 0x02B0;
			constexpr uintptr_t WarnCrossPlatformTournament = 0x02C0;
			constexpr uintptr_t WarnCrossPlatformTournamentAndParty = 0x02D0;
			constexpr uintptr_t DisableAndLeave = 0x02E0;
			constexpr uintptr_t WarnChangingScheduleRegion = 0x02F0;
		}

		namespace GFxData_ShopAds_TA {
			constexpr uintptr_t Config = 0x0098;
		}

		namespace GFxData_ShopCatalogue_TA {
			constexpr uintptr_t ShopManager = 0x0098;
			constexpr uintptr_t ShopID = 0x00A0;
			constexpr uintptr_t ShopName = 0x00A8;
			constexpr uintptr_t Type = 0x00B8;
			constexpr uintptr_t Region = 0x00C8;
			constexpr uintptr_t StartDate = 0x00D8;
			constexpr uintptr_t EndDate = 0x00E0;
			constexpr uintptr_t ShopImage = 0x00E8;
			constexpr uintptr_t ShopImageURL = 0x00F0;
			constexpr uintptr_t Bitfields_0x0100 = 0x0100;  // Multiple: bLoaded, bNeedsUpdate, bRelatedCatalogueBatchRequestInProgress, bFailedToLoad, bShopItemExpired, bAutoReload, bNewCatalogue
			constexpr uintptr_t CachedItems = 0x0108;
			constexpr uintptr_t CacheDuration = 0x0118;
			constexpr uintptr_t LastCacheTime = 0x011C;
			constexpr uintptr_t LastOwnedCacheTime = 0x0120;
			constexpr uintptr_t LastOwnershipDesyncTime = 0x0124;
			constexpr uintptr_t ShopTask = 0x0128;
			constexpr uintptr_t CatalogueSet = 0x0130;
			constexpr uintptr_t ExpirationHelper = 0x0138;
			constexpr uintptr_t AutoLoadHelper = 0x0140;
			constexpr uintptr_t ShopsConfig = 0x0148;
		}

		namespace GFxData_Shops_TA {
			constexpr uintptr_t ShopManager = 0x0098;
			constexpr uintptr_t ImageDownloader = 0x00A0;
			constexpr uintptr_t Config = 0x00A8;
			constexpr uintptr_t Shops = 0x00B0;
			constexpr uintptr_t ShopsMap = 0x00C0;
			constexpr uintptr_t DebugShopID = 0x0110;
			constexpr uintptr_t Bitfields_0x0114 = 0x0114;  // Multiple: bHideMainMenuButton, bNewCatalogues, bHidePurchaseEsportToken
			constexpr uintptr_t CrateShopSet = 0x0118;
			constexpr uintptr_t CacheDuration = 0x0120;
			constexpr uintptr_t LastCacheTime = 0x0124;
			constexpr uintptr_t ShopTask = 0x0128;
			constexpr uintptr_t ShopMetrics = 0x0130;
			constexpr uintptr_t ShopTabs = 0x0138;
			constexpr uintptr_t ShopNotificationsManager = 0x0140;
			constexpr uintptr_t CatalogueCache = 0x0148;
		}

		namespace GFxData_SpecialEventStore_TA {
			constexpr uintptr_t EventID = 0x0098;
			constexpr uintptr_t Rewards = 0x00A0;
			constexpr uintptr_t SpecialEventsSet = 0x00B0;
		}

		namespace GFxData_SpecialEvents_TA {
			constexpr uintptr_t EventData = 0x0098;
			constexpr uintptr_t EventState = 0x00A0;
			constexpr uintptr_t Currency = 0x00A4;
			constexpr uintptr_t SecondsRemaining = 0x00A8;
			constexpr uintptr_t EventStores = 0x00B0;
			constexpr uintptr_t Wallet = 0x00C0;
			constexpr uintptr_t bSpecialEventButtonVisible = 0x00C8;
		}

		namespace GFxData_SpectatorStatNames_TA {
			constexpr uintptr_t StatNames = 0x0098;
		}

		namespace GFxData_SpectatorStat_TA {
			constexpr uintptr_t PlayerIDString = 0x0098;
			constexpr uintptr_t Values = 0x00A8;
		}

		namespace GFxData_SplitscreenMatch_TA {
			constexpr uintptr_t UnknownData00 = 0x019A;
		}

		namespace GFxData_StartMenu_TA {
			constexpr uintptr_t OnlineGame = 0x0098;
			constexpr uintptr_t SigningInText = 0x00A0;
			constexpr uintptr_t SignInModal = 0x00B0;
			constexpr uintptr_t ClickedControllerIndex = 0x00B8;
			constexpr uintptr_t PlayerInterfaceAwaiting_Object = 0x00C0;
			constexpr uintptr_t PlayerInterfaceAwaiting_Interface = 0x00C8;
		}

		namespace GFxData_Stats_TA {
			constexpr uintptr_t Events = 0x0098;
			constexpr uintptr_t StatEvents = 0x00A8;
		}

		namespace GFxData_SupportACreator_TA {
			constexpr uintptr_t CreatorCode = 0x0098;
			constexpr uintptr_t ExpirationDate = 0x00A8;
			constexpr uintptr_t SupportType = 0x00B0;
			constexpr uintptr_t ProcessingModal = 0x00B8;
			constexpr uintptr_t CreatorIcons = 0x00C0;
		}

		namespace GFxData_System_TA {
			constexpr uintptr_t Language = 0x0098;
			constexpr uintptr_t UIState = 0x00A8;
			constexpr uintptr_t SharedUIState = 0x00B8;
			constexpr uintptr_t LocalPlayerCount = 0x00C8;
			constexpr uintptr_t Bitfields_0x00CC = 0x00CC;  // Multiple: bSaveDataLoaded, bLoggedInPsyNet, bLoggedInPlatform, bOnline, bUndocked
			constexpr uintptr_t SplitScreenType = 0x00D0;
			constexpr uintptr_t AvailableGamepadType = 0x00D1;
			constexpr uintptr_t SafeZoneRatio = 0x00D4;
			constexpr uintptr_t UIScale = 0x00D8;
			constexpr uintptr_t Platform = 0x00E0;
			constexpr uintptr_t SharedUIState_Unlock = 0x00F0;
		}

		namespace GFxData_TeamInfo_TA {
			constexpr uintptr_t TeamName = 0x0098;
			constexpr uintptr_t TeamColor = 0x00A8;
			constexpr uintptr_t Score = 0x00AC;
			constexpr uintptr_t TeamLogo = 0x00B0;
			constexpr uintptr_t TeamClubID = 0x00B8;
			constexpr uintptr_t SeriesScore = 0x00C0;
			constexpr uintptr_t Team = 0x00C8;
			constexpr uintptr_t Difficulty = 0x00D0;
		}

		namespace GFxData_ThankYouMessageManager_TA {
			constexpr uintptr_t Config = 0x0098;
			constexpr uintptr_t Bitfields_0x00A0 = 0x00A0;  // Multiple: bDropsFinished, bInMainMenu
			constexpr uintptr_t NewUserLastFTEGroupName = 0x00A4;
			constexpr uintptr_t LegacyUserLastFTEGroupName = 0x00AC;
			constexpr uintptr_t UISavedValues = 0x00B8;
		}

		namespace GFxData_TourBracketGame_TA {
			constexpr uintptr_t MatchID = 0x0098;
			constexpr uintptr_t GameNum = 0x009C;
			constexpr uintptr_t TeamScore0 = 0x00A0;
			constexpr uintptr_t TeamScore1 = 0x00A4;
			constexpr uintptr_t GameTimeSeconds = 0x00A8;
			constexpr uintptr_t bOverTime = 0x00AC;
			constexpr uintptr_t WinnerTeam = 0x00B0;
		}

		namespace GFxData_TourBracketLeaderboard_TA {
			constexpr uintptr_t TeamGoals = 0x0098;
			constexpr uintptr_t PlayerGoals = 0x00A8;
			constexpr uintptr_t PlayerAssists = 0x00B8;
			constexpr uintptr_t PlayerSaves = 0x00C8;
		}

		namespace GFxData_TourBracketMatchDetails_TA {
			constexpr uintptr_t TournamentID = 0x0098;
			constexpr uintptr_t MatchID = 0x00A0;
			constexpr uintptr_t PollIntervalSeconds = 0x00A4;
			constexpr uintptr_t GetMatchDetailsTask = 0x00A8;
			constexpr uintptr_t Tournaments = 0x00B0;
		}

		namespace GFxData_TourBracketMatchTeamDetails_TA {
			constexpr uintptr_t TeamID = 0x0098;
			constexpr uintptr_t GameStats = 0x00A0;
			constexpr uintptr_t PlayerStats = 0x00B0;
		}

		namespace GFxData_TourBracketMatch_TA {
			constexpr uintptr_t MatchID = 0x0098;
			constexpr uintptr_t Round = 0x009C;
			constexpr uintptr_t Order = 0x00A0;
			constexpr uintptr_t NextMatch = 0x00A4;
			constexpr uintptr_t PrevMatchA = 0x00A8;
			constexpr uintptr_t PrevMatchB = 0x00AC;
			constexpr uintptr_t TeamA = 0x00B0;
			constexpr uintptr_t TeamB = 0x00B8;
			constexpr uintptr_t TeamAWins = 0x00C0;
			constexpr uintptr_t TeamBWins = 0x00C4;
			constexpr uintptr_t WinnerTeam = 0x00C8;
			constexpr uintptr_t Bitfields_0x00D0 = 0x00D0;  // Multiple: bInProgress, bCanSpectate
			constexpr uintptr_t GFxGameClass = 0x00D8;
		}

		namespace GFxData_TourBracketTeam_TA {
			constexpr uintptr_t TeamID = 0x0098;
			constexpr uintptr_t TeamName = 0x00A0;
			constexpr uintptr_t TeamColorID = 0x00B0;
			constexpr uintptr_t CustomColorID = 0x00B4;
		}

		namespace GFxData_TourBracket_TA {
			constexpr uintptr_t Tournaments = 0x0098;
			constexpr uintptr_t PlayerTeamID = 0x00A0;
			constexpr uintptr_t TotalRounds = 0x00A8;
			constexpr uintptr_t Id = 0x00B0;
			constexpr uintptr_t CurrentPayouts = 0x00B8;
			constexpr uintptr_t BracketSync = 0x00C8;
		}

		namespace GFxData_TourCheckInError_TA {
			constexpr uintptr_t Tournaments = 0x0098;
		}

		namespace GFxData_TourCheckIn_TA {
			constexpr uintptr_t Tournaments = 0x0098;
			constexpr uintptr_t TeamName = 0x00A0;
			constexpr uintptr_t TeamSettings = 0x00B0;
			constexpr uintptr_t SaveData = 0x00D0;
			constexpr uintptr_t TournamentJoinTitle = 0x00D8;
			constexpr uintptr_t MatchmakingCancelledOnCheckIn = 0x00E8;
		}

		namespace GFxData_TourConfig_TA {
			constexpr uintptr_t Config = 0x0098;
		}

		namespace GFxData_TourCreate_TA {
			constexpr uintptr_t PrivateNoPassword = 0x01A0;
			constexpr uintptr_t StartTimeTooSoon = 0x01B0;
			constexpr uintptr_t MaxBracketSize = 0x01C0;
			constexpr uintptr_t RankMin = 0x01C4;
			constexpr uintptr_t RankMax = 0x01C8;
			constexpr uintptr_t SeriesLength = 0x01CC;
			constexpr uintptr_t FinalSeriesLength = 0x01D0;
			constexpr uintptr_t Rewards = 0x01D8;
			constexpr uintptr_t SeedingType = 0x01E8;
			constexpr uintptr_t TieBreaker = 0x01E9;
			constexpr uintptr_t OnlineSub = 0x01F0;
			constexpr uintptr_t Tournaments = 0x01F8;
			constexpr uintptr_t Config = 0x0200;
			constexpr uintptr_t Settings = 0x0208;
			constexpr uintptr_t TournamentSave = 0x0210;
			constexpr uintptr_t DefaultMapSet = 0x0218;
		}

		namespace GFxData_TourDependentMatch_TA {
			constexpr uintptr_t Tournaments = 0x00E0;
		}

		namespace GFxData_TourDetails_TA {
			constexpr uintptr_t Settings = 0x0098;
			constexpr uintptr_t OnlineProductSet = 0x00A0;
			constexpr uintptr_t DetailsSync = 0x00A8;
			constexpr uintptr_t TourSettings = 0x00B0;
			constexpr uintptr_t Tournaments = 0x00B8;
			constexpr uintptr_t Rewards = 0x00C0;
			constexpr uintptr_t CreatorAvatar = 0x00D0;
			constexpr uintptr_t CreatorPlatform = 0x00D8;
			constexpr uintptr_t Bitfields_0x00E8 = 0x00E8;  // Multiple: bRegistered, bAdmin, bCanCheckIn
		}

		namespace GFxData_TourEvent_TA {
			constexpr uintptr_t Tournaments = 0x0098;
			constexpr uintptr_t TourMatchmaking = 0x00A0;
			constexpr uintptr_t TourConfig = 0x00A8;
			constexpr uintptr_t Title = 0x00B0;
			constexpr uintptr_t Id = 0x00C0;
			constexpr uintptr_t ScheduleID = 0x00C8;
			constexpr uintptr_t SecondsRemaining = 0x00D0;
			constexpr uintptr_t GenerateBracketTime = 0x00D8;
			constexpr uintptr_t Status = 0x00E0;
			constexpr uintptr_t LocalTeamID = 0x00E8;
			constexpr uintptr_t Round = 0x00F0;
			constexpr uintptr_t TotalRounds = 0x00F4;
			constexpr uintptr_t NextOpponent = 0x00F8;
			constexpr uintptr_t EndGameWarningEpochTime = 0x0108;
			constexpr uintptr_t EndGameEpochTime = 0x0110;
			constexpr uintptr_t bTroubleJoining = 0x0118;
			constexpr uintptr_t ActiveTournament = 0x0120;
			constexpr uintptr_t MatchID = 0x0128;
		}

		namespace GFxData_TourMatchmaking_TA {
			constexpr uintptr_t TourMatchmaking = 0x0098;
			constexpr uintptr_t GameVersion = 0x00A0;
		}

		namespace GFxData_TourPlatforms_TA {
			constexpr uintptr_t Groups = 0x0098;
			constexpr uintptr_t OnlineSub = 0x00A8;
		}

		namespace GFxData_TourRegistration_TA {
			constexpr uintptr_t Tournaments = 0x0098;
		}

		namespace GFxData_TourSearch_TA {
			constexpr uintptr_t Config = 0x0098;
			constexpr uintptr_t Text = 0x00A0;
			constexpr uintptr_t RankMin = 0x00B0;
			constexpr uintptr_t RankMax = 0x00B4;
			constexpr uintptr_t GameMode = 0x00B8;
			constexpr uintptr_t Regions = 0x00C0;
			constexpr uintptr_t TeamSize = 0x00D0;
			constexpr uintptr_t BracketSize = 0x00D4;
			constexpr uintptr_t bShowIneligibleRank = 0x00D8;
			constexpr uintptr_t GFxTourList = 0x00E0;
			constexpr uintptr_t TourList = 0x00E8;
			constexpr uintptr_t Profile = 0x00F0;
			constexpr uintptr_t SearchTask = 0x00F8;
			constexpr uintptr_t TournamentSave = 0x0100;
		}

		namespace GFxData_TourSpectate_TA {
			constexpr uintptr_t Tournaments = 0x0098;
			constexpr uintptr_t MatchNotAvailable = 0x00A0;
			constexpr uintptr_t SearchingTitle = 0x00B0;
			constexpr uintptr_t SearchingBody = 0x00C0;
			constexpr uintptr_t ActiveTask = 0x00D0;
			constexpr uintptr_t PendingTourID = 0x00D8;
		}

		namespace GFxData_TourStatus_TA {
			constexpr uintptr_t Status = 0x0098;
		}

		namespace GFxData_TourSubscription_TA {
			constexpr uintptr_t TourSettings = 0x0098;
			constexpr uintptr_t TourList = 0x00A0;
			constexpr uintptr_t Difficulty = 0x00A8;
			constexpr uintptr_t Placement = 0x00AC;
		}

		namespace GFxData_TourSubscriptions_TA {
			constexpr uintptr_t Tournaments = 0x0098;
			constexpr uintptr_t Subscriptions = 0x00A0;
			constexpr uintptr_t Created = 0x00A8;
			constexpr uintptr_t AdminOf = 0x00B8;
			constexpr uintptr_t RegisteredTo = 0x00C8;
		}

		namespace GFxData_TradeInFilter_TA {
			constexpr uintptr_t Id = 0x0098;
			constexpr uintptr_t Label = 0x00A0;
			constexpr uintptr_t PossibleTradeIns = 0x00B0;
			constexpr uintptr_t TradeInFilter = 0x00C0;
			constexpr uintptr_t SaveData = 0x0110;
		}

		namespace GFxData_TrainingModeBrowser_TA {
			constexpr uintptr_t TrainingBrowserConfig = 0x0098;
			constexpr uintptr_t CachedOnlineSearchResults = 0x00A0;
			constexpr uintptr_t PendingRPC = 0x00D0;
			constexpr uintptr_t CachedSearchDuration = 0x00D8;
			constexpr uintptr_t CachedFavoriteTimeoutTime = 0x00DC;
			constexpr uintptr_t FavoritedFilesMetaData = 0x00E0;
			constexpr uintptr_t Bitfields_0x00F0 = 0x00F0;  // Multiple: bFavoritesLoaded, bErrorModalOpen
			constexpr uintptr_t CachedFavoriteDuration = 0x00F4;
			constexpr uintptr_t CachedDownloadedFiles = 0x00F8;
			constexpr uintptr_t LoadingFiles = 0x0108;
			constexpr uintptr_t DownloadedFilename = 0x0118;
			constexpr uintptr_t MaxCachedDownloadedFiles = 0x0128;
			constexpr uintptr_t TrainingSaveData = 0x0130;
		}

		namespace GFxData_TrainingModeConstants_TA {
			constexpr uintptr_t Difficulties = 0x0098;
			constexpr uintptr_t Types = 0x00A8;
			constexpr uintptr_t Tags = 0x00B8;
			constexpr uintptr_t DefaultMap = 0x00C8;
		}

		namespace GFxData_TrainingModeEditor_TA {
			constexpr uintptr_t MyGameEvent = 0x0098;
			constexpr uintptr_t SanitizedTrainingModeName = 0x00A0;
			constexpr uintptr_t RoundData = 0x00B0;
			constexpr uintptr_t CurrentRound = 0x00C0;
			constexpr uintptr_t Tags = 0x00C8;
			constexpr uintptr_t Editing = 0x00D8;
			constexpr uintptr_t BallStartSpeed = 0x00DC;
			constexpr uintptr_t BallScreenPosX = 0x00E0;
			constexpr uintptr_t BallScreenPosY = 0x00E4;
			constexpr uintptr_t Bitfields_0x00E8 = 0x00E8;  // Multiple: bOwned, bNoEditor, bUnsavedChanges
			constexpr uintptr_t ModalProcessing = 0x00F0;
		}

		namespace GFxData_TrainingMode_TA {
			constexpr uintptr_t TrainingModeConfig = 0x0098;
			constexpr uintptr_t Status = 0x00A0;
			constexpr uintptr_t SanitizedTrainingModeName = 0x00A8;
			constexpr uintptr_t SanitizedCreatorName = 0x00B8;
			constexpr uintptr_t Tags = 0x00C8;
			constexpr uintptr_t Bitfields_0x00D8 = 0x00D8;  // Multiple: bOwned, bFavorited, bOutOfDate
			constexpr uintptr_t PublishedTime = 0x00E0;
			constexpr uintptr_t UpdatedAtTime = 0x00F0;
			constexpr uintptr_t ShotsCompleted = 0x0100;
			constexpr uintptr_t CreatorPlatform = 0x0108;
			constexpr uintptr_t CreatorAvatar = 0x0118;
			constexpr uintptr_t SaveDataFilename = 0x0120;
			constexpr uintptr_t SavingFilename = 0x0130;
			constexpr uintptr_t AutoplayName = 0x0140;
			constexpr uintptr_t SaveData = 0x0150;
			constexpr uintptr_t OpenTrainingMapBaseCmd = 0x0158;
			constexpr uintptr_t OutOfDateMessage = 0x0168;
			constexpr uintptr_t DownloadingTrainingModeTitleMessage = 0x0178;
			constexpr uintptr_t DownloadingTrainingModeBodyMessage = 0x0188;
			constexpr uintptr_t ModalProcessing = 0x0198;
		}

		namespace GFxData_Training_TA {
			constexpr uintptr_t TrainingType = 0x0098;
			constexpr uintptr_t CurrentScore = 0x00A0;
			constexpr uintptr_t CurrentRound = 0x00A4;
			constexpr uintptr_t TotalRounds = 0x00A8;
			constexpr uintptr_t Difficulty = 0x00B0;
			constexpr uintptr_t SelectedFreeplayMap = 0x00C0;
			constexpr uintptr_t Bitfields_0x00C8 = 0x00C8;  // Multiple: bShowBoostMeter, bShufflePlay, bIsCustomTraining
			constexpr uintptr_t UseActions = 0x00D0;
			constexpr uintptr_t TutorialTip = 0x00E0;
			constexpr uintptr_t ProgressPerShot = 0x00F0;
			constexpr uintptr_t CurrentPlaylistIndex = 0x0100;
			constexpr uintptr_t ControlsVisibility = 0x0104;
			constexpr uintptr_t TrainingEditor = 0x0108;
			constexpr uintptr_t ProgressTracker = 0x0110;
			constexpr uintptr_t TrainingConfig = 0x0118;
		}

		namespace GFxData_UIConfig_TA {
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bAprilFoolsRankedIcons, bAprilFoolsPlaylistImages
		}

		namespace GFxData_UserBugReport_TA {
			constexpr uintptr_t Config = 0x0098;
			constexpr uintptr_t bEnabled = 0x00A0;
			constexpr uintptr_t Categories = 0x00A8;
			constexpr uintptr_t SelectedCategories = 0x00B8;
			constexpr uintptr_t UserMessage = 0x00C8;
			constexpr uintptr_t Status = 0x00D8;
			constexpr uintptr_t SubmitError = 0x00E0;
			constexpr uintptr_t ConfirmationCode = 0x00F0;
			constexpr uintptr_t PendingData = 0x0100;
			constexpr uintptr_t UploadTask = 0x0108;
		}

		namespace GFxData_UserSetting_TA {
			constexpr uintptr_t Type = 0x0098;
			constexpr uintptr_t Group = 0x009C;
			constexpr uintptr_t Id = 0x00A4;
			constexpr uintptr_t Label = 0x00B0;
			constexpr uintptr_t Description = 0x00C0;
			constexpr uintptr_t Values = 0x00D0;
			constexpr uintptr_t ValuesArray = 0x00E0;
			constexpr uintptr_t Labels = 0x00F0;
			constexpr uintptr_t Value = 0x0100;
			constexpr uintptr_t Bitfields_0x0110 = 0x0110;  // Multiple: bUserSetting, bEnabled
			constexpr uintptr_t DefaultValue = 0x0118;
			constexpr uintptr_t Limits = 0x0128;
		}

		namespace GFxData_ViewMetrics_TA {
			constexpr uintptr_t bRecordingMetrics = 0x0098;
			constexpr uintptr_t ActiveViewID = 0x009C;
			constexpr uintptr_t Config = 0x00A0;
		}

		namespace GFxData_Vote_TA {
			constexpr uintptr_t Subject = 0x0098;
			constexpr uintptr_t VoteStatus = 0x0099;
			constexpr uintptr_t LocalVoteStatus = 0x009A;
			constexpr uintptr_t YesVotes = 0x009C;
			constexpr uintptr_t NoVotes = 0x00A0;
			constexpr uintptr_t RequiredVotes = 0x00A4;
			constexpr uintptr_t TimeRemaining = 0x00A8;
			constexpr uintptr_t VoteActor = 0x00B0;
		}

		namespace GFxData_WalletCurrency_TA {
			constexpr uintptr_t CurrencyID = 0x0098;
			constexpr uintptr_t Type = 0x009C;
			constexpr uintptr_t SmallImage = 0x00A0;
			constexpr uintptr_t LargeImage = 0x00A8;
			constexpr uintptr_t Amount = 0x00B0;
			constexpr uintptr_t LocalizedName = 0x00B8;
		}

		namespace GFxData_Wallet_TA {
			constexpr uintptr_t Wallet = 0x0098;
			constexpr uintptr_t Currencies = 0x00A0;
		}

		namespace GFxData_WebBrowser_TA {
			constexpr uintptr_t ActiveURL = 0x0098;
			constexpr uintptr_t ActivePageTitle = 0x00A8;
			constexpr uintptr_t UrlConfig = 0x00B8;
		}

		namespace GFxData_Workshop_TA {
			constexpr uintptr_t Items = 0x0098;
			constexpr uintptr_t RetrievedNetIds = 0x00A8;
			constexpr uintptr_t ItemRemoved = 0x00B8;
		}

		namespace GFxEngine_TA {
			constexpr uintptr_t UISoundStates = 0x01A0;
			constexpr uintptr_t bViewingOnlineScene = 0x01B0;
			constexpr uintptr_t LoadingScreen = 0x01B8;
			constexpr uintptr_t OnlineSubsystem = 0x01C0;
		}

		namespace GFxHUD_GameEditor_TA {
			constexpr uintptr_t EditorData = 0x0540;
			constexpr uintptr_t TrainingGameEvent = 0x0548;
		}

		namespace GFxHUD_KnockOut_TA {
			constexpr uintptr_t KnockOutGame = 0x0558;
			constexpr uintptr_t KnockOutCarData = 0x0560;
			constexpr uintptr_t ViewportClient = 0x0568;
			constexpr uintptr_t DefaultMinZOffsetValue = 0x0570;
			constexpr uintptr_t DefaultMaxZOffsetValue = 0x0574;
			constexpr uintptr_t LowMinZOffsetClampValue = 0x0578;
			constexpr uintptr_t HighMinZOffsetClampValue = 0x057C;
			constexpr uintptr_t LowMaxZOffsetClampValue = 0x0580;
			constexpr uintptr_t HighMaxZOffsetClampValue = 0x0584;
			constexpr uintptr_t MinSqDistance = 0x0588;
			constexpr uintptr_t MaxSqDistance = 0x058C;
		}

		namespace GFxHUD_Replay_TA {
			constexpr uintptr_t Game = 0x05A0;
			constexpr uintptr_t PrevKeyframeBufferTime = 0x05A8;
			constexpr uintptr_t Bitfields_0x05AC = 0x05AC;  // Multiple: bUserPaused, bPausedForEndOfReplay
			constexpr uintptr_t ReferencedProducts = 0x05B0;
		}

		namespace GFxHUD_Soccar_TA {
			constexpr uintptr_t SoccarGame = 0x0540;
			constexpr uintptr_t GFxServerPerformanceStats = 0x0548;
			constexpr uintptr_t PreMatchLobby = 0x0550;
		}

		namespace GFxHUD_Spectator_TA {
			constexpr uintptr_t ViewerData = 0x0540;
			constexpr uintptr_t ZoomSpeed = 0x0548;
			constexpr uintptr_t ZoomClickTime = 0x054C;
			constexpr uintptr_t GameHUD = 0x0550;
			constexpr uintptr_t TargetPlayerPRI = 0x0558;
			constexpr uintptr_t Bitfields_0x0560 = 0x0560;  // Multiple: bZoomIn, bZoomOut, bReplayTimeSkipped
			constexpr uintptr_t ZoomInTime = 0x0564;
			constexpr uintptr_t ZoomOutTime = 0x0568;
		}

		namespace GFxHUD_TA {
			constexpr uintptr_t UIState = 0x0390;
			constexpr uintptr_t GFxPRIClass = 0x03A0;
			constexpr uintptr_t MatchInfoMovieArchetype = 0x03A8;
			constexpr uintptr_t MatchInfoMovie = 0x03B0;
			constexpr uintptr_t NameplatesManager = 0x03B8;
			constexpr uintptr_t PlayerJoinString = 0x03C0;
			constexpr uintptr_t PlayerLeaveString = 0x03D0;
			constexpr uintptr_t PlayerTimedOutString = 0x03E0;
			constexpr uintptr_t ChatTitle = 0x03F0;
			constexpr uintptr_t TeamChatTitle = 0x0400;
			constexpr uintptr_t ChatDisabledMessage = 0x0410;
			constexpr uintptr_t ReplayQueSaveMessage = 0x0420;
			constexpr uintptr_t ChatBannedMessage = 0x0430;
			constexpr uintptr_t ChatBannedPermanentlyMessage = 0x0440;
			constexpr uintptr_t OwnerPRI = 0x0450;
			constexpr uintptr_t OwnerCar = 0x0458;
			constexpr uintptr_t GameEvent = 0x0460;
			constexpr uintptr_t TeamGameEvent = 0x0468;
			constexpr uintptr_t GameEventData = 0x0470;
			constexpr uintptr_t CarData = 0x0478;
			constexpr uintptr_t PRIData = 0x0480;
			constexpr uintptr_t MiniScoreboard = 0x0490;
			constexpr uintptr_t EOSGameClipsMaskHandler = 0x0498;
			constexpr uintptr_t PlayerRecordData = 0x04A0;
			constexpr uintptr_t Bitfields_0x04B0 = 0x04B0;  // Multiple: bAttackTargetActive, bShowedDisconnectMessage
			constexpr uintptr_t AttackTargetWorldPosition = 0x04B4;
			constexpr uintptr_t AttackTargetPositionOffset = 0x04C0;
			constexpr uintptr_t CloseScoreboardTime = 0x04CC;
			constexpr uintptr_t PendingShowAddMessagePlayers = 0x04D0;
			constexpr uintptr_t LastTarget = 0x04E0;
			constexpr uintptr_t TestLastLogTime = 0x04E8;
			constexpr uintptr_t CarDisplayingBoost = 0x04F0;
			constexpr uintptr_t AdHocBeacon = 0x04F8;
			constexpr uintptr_t ServerMigrationTitle = 0x0500;
			constexpr uintptr_t ServerMigrationBody = 0x0510;
			constexpr uintptr_t Scoreboard = 0x0520;
		}

		namespace GFxHUD_Training_TA {
			constexpr uintptr_t TrainingData = 0x0558;
		}

		namespace GFxModal_FriendJoin_TA {
			constexpr uintptr_t ConnectingTitleString = 0x00C8;
			constexpr uintptr_t ConnectingBodyString = 0x00D8;
			constexpr uintptr_t JoiningGameFailedString = 0x00E8;
		}

		namespace GFxModal_RankedReconnect_TA {
			constexpr uintptr_t ConnectingTitleString = 0x00C8;
			constexpr uintptr_t ConnectingBodyString = 0x00D8;
			constexpr uintptr_t Task = 0x00E8;
		}

		namespace GFxNameplatesManager_TA {
			constexpr uintptr_t MovieArchetype = 0x0070;
			constexpr uintptr_t NameplateMeshArchetype = 0x0078;
			constexpr uintptr_t Shell = 0x0080;
			constexpr uintptr_t Movie = 0x0088;
			constexpr uintptr_t Bitfields_0x0090 = 0x0090;  // Multiple: bHidden, bShowingShortcuts, bDebug
			constexpr uintptr_t ComponentSlots = 0x0098;
			constexpr uintptr_t PendingComponents = 0x00A8;
			constexpr uintptr_t NameplateRows = 0x00B8;
			constexpr uintptr_t Nameplates = 0x00C8;
		}

		namespace GFxProductAttributeMap_TA {
			constexpr uintptr_t GFxClasses = 0x0060;
		}

		namespace GFxShell_TA {
			constexpr uintptr_t ChampionshipTrophyArchetype = 0x0130;
			constexpr uintptr_t TAPlayer = 0x0138;
			constexpr uintptr_t SystemData = 0x0140;
			constexpr uintptr_t LocalPlayerData = 0x0148;
			constexpr uintptr_t Bitfields_0x0150 = 0x0150;  // Multiple: bEnableFocusDebugger, bDisableStartupMovies, bAllowOnlineStorageResyncModal
			constexpr uintptr_t EOSReconnectMessage = 0x0158;
			constexpr uintptr_t EOSNotConnectedMessage = 0x0168;
			constexpr uintptr_t EOSRestartLauncherMessage = 0x0178;
			constexpr uintptr_t SaveReplayMessage = 0x0188;
			constexpr uintptr_t DefaultDisconnectionTitle = 0x0198;
			constexpr uintptr_t PsyNetReconnectMessage = 0x01A8;
			constexpr uintptr_t PSPlusTipTitle = 0x01B8;
			constexpr uintptr_t PSPlusTipMessage = 0x01C8;
			constexpr uintptr_t RankedReconnectTitle = 0x01D8;
			constexpr uintptr_t RankedReconnectBody = 0x01E8;
			constexpr uintptr_t BannedTimeRemainingMessage = 0x01F8;
			constexpr uintptr_t PermaBannedMessage = 0x0208;
			constexpr uintptr_t VoiceChatDisabledTitle = 0x0218;
			constexpr uintptr_t ActiveModals = 0x0228;
			constexpr uintptr_t PendingMessageType = 0x0238;
			constexpr uintptr_t PendingErrorTitle = 0x0240;
			constexpr uintptr_t PendingErrorMessage = 0x0250;
			constexpr uintptr_t LastPsyNetReconnectTime = 0x0260;
			constexpr uintptr_t ModalKick = 0x0268;
			constexpr uintptr_t BuildEdition = 0x0270;
			constexpr uintptr_t MAX_CLIENT_OFFSET = 0x0280;
			constexpr uintptr_t VoiceManager = 0x0288;
		}

		namespace GFxTourList_TA {
			constexpr uintptr_t Shell = 0x0070;
			constexpr uintptr_t TourList = 0x0078;
			constexpr uintptr_t GFxDataClass = 0x0080;
		}

		namespace GRI_TA {
			constexpr uintptr_t bHasTalkers = 0x06A8;
			constexpr uintptr_t NewDedicatedServerIP = 0x06B0;
		}

		namespace GameData_TA {
			constexpr uintptr_t Products = 0x0060;
			constexpr uintptr_t XPManager = 0x0068;
			constexpr uintptr_t MaxTeamSize = 0x0070;
			constexpr uintptr_t ProductSlots = 0x0078;
			constexpr uintptr_t SlotLoadOrder = 0x0088;
			constexpr uintptr_t BodySlot = 0x0098;
			constexpr uintptr_t SkinSlot = 0x00A0;
			constexpr uintptr_t WheelSlot = 0x00A8;
			constexpr uintptr_t BoostSlot = 0x00B0;
			constexpr uintptr_t AntennaSlot = 0x00B8;
			constexpr uintptr_t HatSlot = 0x00C0;
			constexpr uintptr_t FrontSlot = 0x00C8;
			constexpr uintptr_t PaintFinishSlot = 0x00D0;
			constexpr uintptr_t BotSlot = 0x00D8;
			constexpr uintptr_t LogoSlot = 0x00E0;
			constexpr uintptr_t UnderGlowSlot = 0x00E8;
			constexpr uintptr_t PremiumInventorySlot = 0x00F0;
			constexpr uintptr_t CustomFinishSlot = 0x00F8;
			constexpr uintptr_t EngineAudioSlot = 0x0100;
			constexpr uintptr_t SupersonicTrailSlot = 0x0108;
			constexpr uintptr_t GoalExplosionSlot = 0x0110;
			constexpr uintptr_t PlayerBannerSlot = 0x0118;
			constexpr uintptr_t PlayerTitleSlot = 0x0120;
			constexpr uintptr_t ESportsTeamSlot = 0x0128;
			constexpr uintptr_t ArchiveSlot = 0x0130;
			constexpr uintptr_t AllSlot = 0x0138;
			constexpr uintptr_t ShopItemSlot = 0x0140;
			constexpr uintptr_t CurrencySlot = 0x0148;
			constexpr uintptr_t PlayerAvatarSlot = 0x0150;
			constexpr uintptr_t PlayerAvatarBorderSlot = 0x0158;
			constexpr uintptr_t GiftPackSlot = 0x0160;
			constexpr uintptr_t BlueprintSlot = 0x0168;
			constexpr uintptr_t MusicStingersSlot = 0x0170;
			constexpr uintptr_t AlwaysLoadedContentArchetype = 0x0178;
			constexpr uintptr_t TeamArchetypePaths = 0x0188;
			constexpr uintptr_t TeamArchetypes = 0x0198;
			constexpr uintptr_t GameModeListPath = 0x01A8;
			constexpr uintptr_t GameModeList = 0x01B8;
			constexpr uintptr_t DefaultLoadouts = 0x01C0;
			constexpr uintptr_t DefaultClientLoadout = 0x0240;
			constexpr uintptr_t CustomColorSet = 0x0250;
			constexpr uintptr_t ClubColorSet = 0x0258;
			constexpr uintptr_t ClubColorSet_v1 = 0x0260;
			constexpr uintptr_t PlayerBannerColorSet = 0x0268;
			constexpr uintptr_t PlayerVanityColorSet = 0x0270;
			constexpr uintptr_t MapList = 0x0278;
			constexpr uintptr_t GlobalLookupTexture = 0x0280;
			constexpr uintptr_t OnlineProductAttributes = 0x0288;
			constexpr uintptr_t PaintDB = 0x0298;
			constexpr uintptr_t CertifiedStatDB = 0x02A0;
			constexpr uintptr_t SpecialEditionDB = 0x02A8;
			constexpr uintptr_t ESportsTeamDB = 0x02B0;
		}

		namespace GameEditor_Actor_TA {
			constexpr uintptr_t Mesh = 0x0268;
			constexpr uintptr_t RotateCameraOffset = 0x0270;
			constexpr uintptr_t MaxRotatePitch = 0x027C;
			constexpr uintptr_t MaxInputRotatePitch = 0x0280;
			constexpr uintptr_t bModifiyPitchOnEditorSetRotation = 0x0284;
			constexpr uintptr_t FXActorArchetype = 0x0288;
			constexpr uintptr_t FXActor = 0x0290;
		}

		namespace GameEditor_Ring_TA {
			constexpr uintptr_t ActorTouchRecords = 0x02D0;
			constexpr uintptr_t MaxRadius = 0x02E0;
			constexpr uintptr_t DetectionType = 0x02E4;
		}

		namespace GameEditor_Trigger_TA {
			constexpr uintptr_t bEnabled = 0x02B0;
		}

		namespace GameEngine_TA {
			constexpr uintptr_t ServerConfig = 0x0B48;
		}

		namespace GameEventProductAssetCache_TA {
			constexpr uintptr_t AssetCache = 0x00A8;
			constexpr uintptr_t PriCache = 0x00B0;
		}

		namespace GameEvent_Breakout_TA {
			constexpr uintptr_t Bitfields_0x0D88 = 0x0D88;  // Multiple: bOnlyResetScoredOnTeam, bResetOvertime
			constexpr uintptr_t LastScoredOnTeam = 0x0D8C;
			constexpr uintptr_t Platforms = 0x0D90;
		}

		namespace GameEvent_FTE_TA {
			constexpr uintptr_t MaxTimeToShowInstructions = 0x0D88;
			constexpr uintptr_t InvalidTeamNum = 0x0D8C;
		}

		namespace GameEvent_Football_TA {
			constexpr uintptr_t LastScoredTeamIndex = 0x0D88;
			constexpr uintptr_t GoalPlayerSpawnOffset = 0x0D8C;
			constexpr uintptr_t BallKickOffDirection = 0x0D98;
			constexpr uintptr_t BallKickOffTorque = 0x0DA4;
			constexpr uintptr_t BallKickOffScale = 0x0DB0;
			constexpr uintptr_t SpawnRadiusCheck = 0x0DB4;
			constexpr uintptr_t KickoffDelay = 0x0DB8;
		}

		namespace GameEvent_GameEditor_TA {
			constexpr uintptr_t SaveDataClass = 0x0D88;
			constexpr uintptr_t SaveData = 0x0D90;
			constexpr uintptr_t ActiveRoundNumber = 0x0D98;
			constexpr uintptr_t SpawnableArchetypes = 0x0DA0;
			constexpr uintptr_t CarSpawnPoints = 0x0DB0;
			constexpr uintptr_t EditorPawnArchetype = 0x0DC0;
			constexpr uintptr_t MaxRounds = 0x0DC8;
			constexpr uintptr_t UndoHistory = 0x0DD0;
			constexpr uintptr_t HistoryPosition = 0x0DE0;
			constexpr uintptr_t MaxUndoHistory = 0x0DE4;
			constexpr uintptr_t FXActorArchetype = 0x0DE8;
			constexpr uintptr_t FXActor = 0x0DF0;
		}

		namespace GameEvent_GodBall_TA {
			constexpr uintptr_t LastScoredTeamIndex = 0x0D88;
			constexpr uintptr_t GoalBallSpawnOffset = 0x0D8C;
			constexpr uintptr_t GoalPlayerSpawnOffset = 0x0D98;
			constexpr uintptr_t BallKickOffDirection = 0x0DA4;
			constexpr uintptr_t BallKickOffScale = 0x0DB0;
			constexpr uintptr_t SpawnRadiusCheck = 0x0DB4;
		}

		namespace GameEvent_KnockOut_TA {
			constexpr uintptr_t bFreeForAll = 0x0D88;
			constexpr uintptr_t PlayerLives = 0x0D8C;
			constexpr uintptr_t PlayersEliminated = 0x0D90;
			constexpr uintptr_t PickupArchetypes = 0x0D98;
			constexpr uintptr_t PickupFXActor = 0x0DA8;
			constexpr uintptr_t PickupRespawnDelay = 0x0DB0;
			constexpr uintptr_t SafeZone = 0x0DB8;
			constexpr uintptr_t SafeZoneArchetype = 0x0DC0;
			constexpr uintptr_t ReturnToSafezoneMessage = 0x0DC8;
			constexpr uintptr_t ReturnedToSafezoneMessage = 0x0DD0;
			constexpr uintptr_t SafeZoneShrinkingMessage = 0x0DD8;
			constexpr uintptr_t SafeZoneFinalZoneMessage = 0x0DE0;
			constexpr uintptr_t OutOfWorldMessage = 0x0DE8;
			constexpr uintptr_t PodiumSpawnLocationZ = 0x0DF0;
		}

		namespace GameEvent_Lobby_TA {
			constexpr uintptr_t BallArchetype = 0x0740;
			constexpr uintptr_t Ball = 0x0748;
		}

		namespace GameEvent_Season_TA {
			constexpr uintptr_t PreMatchTime = 0x0D88;
			constexpr uintptr_t Season = 0x0D90;
			constexpr uintptr_t Match = 0x0D98;
			constexpr uintptr_t Profile = 0x0DB8;
			constexpr uintptr_t HumanTeam = 0x0DC0;
			constexpr uintptr_t BotTeam = 0x0DC8;
			constexpr uintptr_t HumanMatchTeam = 0x0DD0;
			constexpr uintptr_t BotMatchTeam = 0x0DD4;
			constexpr uintptr_t SeasonIntroTime = 0x0DD8;
			constexpr uintptr_t Bitfields_0x0DDC = 0x0DDC;  // Multiple: bIsChampionShipGame, bIsFirstGameOfSeason, bLastGameOfRegularSeason
			constexpr uintptr_t SimilarLogoGroups = 0x0DE0;
			constexpr uintptr_t TeamOverrides = 0x0DE8;
		}

		namespace GameEvent_Soccar_SubRules_Basketball_TA {
			constexpr uintptr_t LongDistanceScore = 0x0060;
			constexpr uintptr_t DefaultScore = 0x0064;
		}

		namespace GameEvent_Soccar_SubRules_Items_TA {
			constexpr uintptr_t DispenserArchetype = 0x0060;
			constexpr uintptr_t StaggerTime = 0x0068;
			constexpr uintptr_t CurrentStaggerByTeam = 0x006C;
			constexpr uintptr_t ItemDispensers = 0x0078;
		}

		namespace GameEvent_Soccar_TA {
			constexpr uintptr_t TestCarArchetype = 0x07D0;
			constexpr uintptr_t BallArchetype = 0x07D8;
			constexpr uintptr_t GoalIndicatorArchetype = 0x07E0;
			constexpr uintptr_t Bitfields_0x07E8 = 0x07E8;  // Multiple: bShouldSpawnGoalIndicators, bRandomBallSpawnPoint, bRoundActive, bPlayReplays, bBallHasBeenHit, bOverTime, bUnlimitedTime, bGoalsEnabled, bNoContest, bDisableGoalDelay, bShowNoScorerGoalMessage, bMatchEnded, bDisableCrowdSound, bShowIntroScene, bReadyToStartGame, bClubMatch, bFullClubMatch, bCanDropOnlineRewards, bAllowHonorDuels
			constexpr uintptr_t BallSpawnPoints = 0x07F0;
			constexpr uintptr_t BallSpawnPointIndex = 0x0800;
			constexpr uintptr_t StatFactoryArchetype = 0x0808;
			constexpr uintptr_t InitialEventState = 0x0810;
			constexpr uintptr_t SeriesLength = 0x0818;
			constexpr uintptr_t GameTime = 0x081C;
			constexpr uintptr_t WarmupTime = 0x0820;
			constexpr uintptr_t MaxScore = 0x0824;
			constexpr uintptr_t AutoBalanceDifference = 0x0828;
			constexpr uintptr_t OvertimeComponent = 0x0830;
			constexpr uintptr_t ScoreSlomoCurve = 0x0838;
			constexpr uintptr_t ScoreSlomoTime = 0x0850;
			constexpr uintptr_t GameTimeRemaining = 0x0854;
			constexpr uintptr_t SecondsRemaining = 0x0858;
			constexpr uintptr_t WaitTimeRemaining = 0x085C;
			constexpr uintptr_t TotalGameTimePlayed = 0x0860;
			constexpr uintptr_t OvertimeTimePlayed = 0x0864;
			constexpr uintptr_t GoalScoredMessage = 0x0868;
			constexpr uintptr_t OvertimeMessage = 0x0870;
			constexpr uintptr_t TwoMinRemainingMessage = 0x0878;
			constexpr uintptr_t OneMinRemainingMessage = 0x0880;
			constexpr uintptr_t ThirtySecondsRemainingMessage = 0x0888;
			constexpr uintptr_t StopMessage = 0x0890;
			constexpr uintptr_t GamePausedMessage = 0x0898;
			constexpr uintptr_t GameUnPausedMessage = 0x08A0;
			constexpr uintptr_t OutOfBoundsMessage = 0x08A8;
			constexpr uintptr_t NextSpawnIndex = 0x08B0;
			constexpr uintptr_t ReplayDirectorArchetype = 0x08B8;
			constexpr uintptr_t ReplayDirector = 0x08C0;
			constexpr uintptr_t GameBalls = 0x08C8;
			constexpr uintptr_t TotalGameBalls = 0x08D8;
			constexpr uintptr_t PostGoalTime = 0x08DC;
			constexpr uintptr_t StatFactory = 0x08E0;
			constexpr uintptr_t Goals = 0x08E8;
			constexpr uintptr_t SecondsRemainingCountdown = 0x08F8;
			constexpr uintptr_t SecondsRemainingMessage = 0x0900;
			constexpr uintptr_t FieldCenter = 0x0908;
			constexpr uintptr_t GameWinner = 0x0918;
			constexpr uintptr_t MatchWinner = 0x0920;
			constexpr uintptr_t TeamLastScored = 0x0928;
			constexpr uintptr_t TieBreakDecision = 0x0930;
			constexpr uintptr_t ReplicatedScoredOnTeam = 0x0931;
			constexpr uintptr_t ReplicatedServerPerformanceState = 0x0932;
			constexpr uintptr_t MVP = 0x0938;
			constexpr uintptr_t FastestGoalPlayer = 0x0940;
			constexpr uintptr_t SlowestGoalPlayer = 0x0948;
			constexpr uintptr_t FurthestGoalPlayer = 0x0950;
			constexpr uintptr_t FastestGoalSpeed = 0x0958;
			constexpr uintptr_t SlowestGoalSpeed = 0x095C;
			constexpr uintptr_t FurthestGoal = 0x0960;
			constexpr uintptr_t ScoringPlayer = 0x0968;
			constexpr uintptr_t RoundNum = 0x0970;
			constexpr uintptr_t AssistMaxTime = 0x0974;
			constexpr uintptr_t BallHasBeenHitStartDelay = 0x0978;
			constexpr uintptr_t BallRespawnTime = 0x097C;
			constexpr uintptr_t DefaultSubRules = 0x0980;
			constexpr uintptr_t SubRulesArchetype = 0x0988;
			constexpr uintptr_t SubRules = 0x0990;
			constexpr uintptr_t SpawnPointsPodiumAnim = 0x0998;
			constexpr uintptr_t SpawnPointsPodium = 0x09A0;
			constexpr uintptr_t PodiumDelay = 0x09A8;
			constexpr uintptr_t PodiumTime = 0x09AC;
			constexpr uintptr_t SpawnPointLobbyTeams = 0x09B0;
			constexpr uintptr_t StatCategories = 0x09C0;
			constexpr uintptr_t BallTrajectory = 0x09D0;
			constexpr uintptr_t BallTrajectoryArchetype = 0x09D8;
			constexpr uintptr_t UnpauseCountdown = 0x09E0;
			constexpr uintptr_t Pauser = 0x09E8;
			constexpr uintptr_t PlayerMatchData = 0x09F0;
			constexpr uintptr_t EndRoundComponentArchetype = 0x0A00;
			constexpr uintptr_t EndRoundComponent = 0x0A08;
			constexpr uintptr_t MatchBroadcast = 0x0A10;
			constexpr uintptr_t ReplicatedStatEvent = 0x0A18;
			constexpr uintptr_t ImportantStatEvents = 0x0A20;
			constexpr uintptr_t GameObserver = 0x0A30;
			constexpr uintptr_t ActiveFpsRecorder = 0x0A38;
			constexpr uintptr_t InactiveFpsRecorder = 0x0A40;
			constexpr uintptr_t ServerPerformanceTracker = 0x0A48;
			constexpr uintptr_t MatchSeries = 0x0A50;
			constexpr uintptr_t CrowdSound = 0x0A58;
			constexpr uintptr_t ClubInformation = 0x0A60;
			constexpr uintptr_t PendingClubStatRecords = 0x0A70;
			constexpr uintptr_t LobbyTagOffsetZ = 0x0A80;
			constexpr uintptr_t PodiumTagOffsetZ = 0x0A84;
			constexpr uintptr_t BallSpacing = 0x0A88;
			constexpr uintptr_t PreMatchPlayersReadyStartDelay = 0x0A8C;
			constexpr uintptr_t RemovedPRIs = 0x0A90;
		}

		namespace GameEvent_TA {
			constexpr uintptr_t RegistryGroup = 0x0268;
			constexpr uintptr_t MatchType = 0x0270;
			constexpr uintptr_t MatchTypeClass = 0x0278;
			constexpr uintptr_t EventType = 0x0280;
			constexpr uintptr_t AudioSoundMode = 0x0288;
			constexpr uintptr_t MatchTypeName = 0x0290;
			constexpr uintptr_t CarArchetype = 0x0298;
			constexpr uintptr_t CountdownTime = 0x02A0;
			constexpr uintptr_t FinishTime = 0x02A4;
			constexpr uintptr_t Bitfields_0x02A8 = 0x02A8;  // Multiple: bMultiplayer, bCountdownMessagesDisabled, bAllowPrespawn, bFillWithAI, bAllowQueueSaveReplay, bAllowReadyUp, bRestartingMatch, bHasLeaveMatchPenalty, bCanVoteToForfeit, bAwardAchievements, bIsBotMatch, bAllowTeamVoiceChat, bAllowSpectatorVoiceChat, bAlwaysShowMatchTypeLabel, bGameTearingDown
			constexpr uintptr_t MinPlayers = 0x02AC;
			constexpr uintptr_t MaxPlayers = 0x02B0;
			constexpr uintptr_t SpawnPoints = 0x02B8;
			constexpr uintptr_t AIManagerArchetype = 0x02C8;
			constexpr uintptr_t AIManager = 0x02D0;
			constexpr uintptr_t Pylon = 0x02D8;
			constexpr uintptr_t BotArchetype = 0x02E0;
			constexpr uintptr_t BotSkill = 0x02E8;
			constexpr uintptr_t DefaultMutators = 0x02F0;
			constexpr uintptr_t Mutators = 0x0300;
			constexpr uintptr_t MatchTimeDilation = 0x0310;
			constexpr uintptr_t HUDArchetype = 0x0318;
			constexpr uintptr_t Activator = 0x0320;
			constexpr uintptr_t ActivatorCar = 0x0328;
			constexpr uintptr_t Players = 0x0330;
			constexpr uintptr_t PRIs = 0x0340;
			constexpr uintptr_t Cars = 0x0350;
			constexpr uintptr_t LocalPlayers = 0x0360;
			constexpr uintptr_t StartPointIndex = 0x0370;
			constexpr uintptr_t ReplicatedStateIndex = 0x0374;
			constexpr uintptr_t DeprecatedIndexToState = 0x0378;
			constexpr uintptr_t ReplicatedStateName = 0x0388;
			constexpr uintptr_t GameFullMessage = 0x0390;
			constexpr uintptr_t OtherActiveMessage = 0x0398;
			constexpr uintptr_t NotEnoughPlayersMessage = 0x03A0;
			constexpr uintptr_t TooManyPlayersMessage = 0x03A8;
			constexpr uintptr_t NotPartyLeaderMessage = 0x03B0;
			constexpr uintptr_t CountdownMessages = 0x03B8;
			constexpr uintptr_t GoMessage = 0x03C8;
			constexpr uintptr_t ReplacingBotCountdownMessages = 0x03D0;
			constexpr uintptr_t ReplacingBotGoMessage = 0x03E0;
			constexpr uintptr_t SpawnDelayConfig = 0x03E8;
			constexpr uintptr_t ChatHistory = 0x03F0;
			constexpr uintptr_t GameStateTimeRemaining = 0x0400;
			constexpr uintptr_t ReplicatedGameStateTimeRemaining = 0x0404;
			constexpr uintptr_t BotConfig = 0x0408;
			constexpr uintptr_t ForfeitInitiatorIDs = 0x0410;
			constexpr uintptr_t BannedPlayers = 0x0420;
			constexpr uintptr_t GameOwner = 0x0430;
			constexpr uintptr_t MatchSettings = 0x0438;
			constexpr uintptr_t RichPresenceString = 0x04C0;
			constexpr uintptr_t MatchAdmin = 0x04D0;
			constexpr uintptr_t ListenServer = 0x04D8;
			constexpr uintptr_t ReplicatedRoundCountDownNumber = 0x04E0;
			constexpr uintptr_t MatchRecorder = 0x04E8;
			constexpr uintptr_t RandomizedBots = 0x04F0;
			constexpr uintptr_t GameStates = 0x0500;
			constexpr uintptr_t GameState = 0x0510;
			constexpr uintptr_t PauseInstance = 0x0518;
			constexpr uintptr_t MatchStartEpoch = 0x0520;
			constexpr uintptr_t MatchTotalSecondsPlayed = 0x0528;
		}

		namespace GameEvent_Team_TA {
			constexpr uintptr_t TeamArchetypes = 0x0740;
			constexpr uintptr_t Teams = 0x0750;
			constexpr uintptr_t MaxTeamSize = 0x0760;
			constexpr uintptr_t NumBots = 0x0764;
			constexpr uintptr_t Bitfields_0x0768 = 0x0768;  // Multiple: bMuteOppositeTeams, bDisableMutingOtherTeam, bForfeit, bUnfairTeams, bAlwaysAutoSelectTeam, bDisableQuickChat
			constexpr uintptr_t RematchVoteArchetype = 0x0770;
			constexpr uintptr_t RematchVote = 0x0778;
			constexpr uintptr_t PreloadedBotAssets = 0x0780;
			constexpr uintptr_t PlayersRemovedThisFrame = 0x0790;
		}

		namespace GameEvent_TrainingEditor_TA {
			constexpr uintptr_t MinRoundTime = 0x0DF8;
			constexpr uintptr_t MaxRoundTime = 0x0DFC;
			constexpr uintptr_t Bitfields_0x0E00 = 0x0E00;  // Multiple: bNoEditor, bDisplayedRedoPenaltyMessage, bUnsavedChanges, bShouldEndTraining
			constexpr uintptr_t PointsScoredThisRound = 0x0E04;
			constexpr uintptr_t ResetModal = 0x0E08;
			constexpr uintptr_t ShotAttempt = 0x0E10;
			constexpr uintptr_t RedoTotal = 0x0E14;
			constexpr uintptr_t GoalieScore = 0x0E18;
			constexpr uintptr_t PlayTestType = 0x0E1C;
			constexpr uintptr_t GoalMeshBlockers = 0x0E20;
			constexpr uintptr_t GoalMeshBlockerArchetype = 0x0E30;
			constexpr uintptr_t TrainingData = 0x0E38;
			constexpr uintptr_t PrePlaytestState = 0x0E40;
			constexpr uintptr_t SaveDelayTime = 0x0E48;
			constexpr uintptr_t SaveCooldown = 0x0E4C;
			constexpr uintptr_t TrainingFileName = 0x0E50;
			constexpr uintptr_t TrainingNavigationConfig = 0x0E60;
			constexpr uintptr_t TrainingManipulationConfig = 0x0E68;
			constexpr uintptr_t TrainingNavigator = 0x0E70;
			constexpr uintptr_t TrainingMirror = 0x0E78;
		}

		namespace GameEvent_Training_Goalie_TA {
			constexpr uintptr_t Score = 0x0FE0;
		}

		namespace GameEvent_Tutorial_Advanced_TA {
			constexpr uintptr_t UnknownData00 = 0x0FD4;
		}

		namespace GameEvent_Tutorial_Basic_TA {
			constexpr uintptr_t CurrentScore = 0x0FC8;
			constexpr uintptr_t TotalRounds = 0x0FCC;
			constexpr uintptr_t CurrentRounds = 0x0FD0;
		}

		namespace GameEvent_Tutorial_TA {
			constexpr uintptr_t TotalFieldExtent = 0x0D88;
			constexpr uintptr_t TeamNum = 0x0D94;
			constexpr uintptr_t BallGoalNum = 0x0D98;
			constexpr uintptr_t Bitfields_0x0D9C = 0x0D9C;  // Multiple: bOnlyScoreInBallGoalNum, bRedoRound, bAllowSuperBoost, bDisplayedRedoPenaltyMessage, bShowBoostMeter
			constexpr uintptr_t Difficulty = 0x0DA0;
			constexpr uintptr_t DebugRotationType = 0x0DA1;
			constexpr uintptr_t DifficultyList = 0x0DA8;
			constexpr uintptr_t WaveIndexesLeft = 0x0E20;
			constexpr uintptr_t GoalDepth = 0x0E30;
			constexpr uintptr_t GameEventRounds = 0x0E34;
			constexpr uintptr_t EventStartTime = 0x0E38;
			constexpr uintptr_t BallInitialVelocity = 0x0E3C;
			constexpr uintptr_t SpawnIndexTypeOverride = 0x0E48;
			constexpr uintptr_t Cannon = 0x0E50;
			constexpr uintptr_t WaveIndex = 0x0E58;
			constexpr uintptr_t WaveSpawnCount = 0x0E5C;
			constexpr uintptr_t RandomSpawnIndex = 0x0E60;
			constexpr uintptr_t Tutorial = 0x0E68;
			constexpr uintptr_t StartMessageArchetype = 0x0E70;
			constexpr uintptr_t BallSpawnLocation = 0x0E80;
			constexpr uintptr_t CarSpawns = 0x0E90;
			constexpr uintptr_t PointsScoredThisRound = 0x0EA0;
			constexpr uintptr_t BallSpawnCount = 0x0EA4;
			constexpr uintptr_t BallBounceScale = 0x0EA8;
			constexpr uintptr_t CannonArchetype = 0x0EB0;
			constexpr uintptr_t DynamicSpawnPoint = 0x0EB8;
			constexpr uintptr_t CurrentDebugStepX = 0x0EC0;
			constexpr uintptr_t CurrentDebugStepY = 0x0EC4;
			constexpr uintptr_t CurrentDebugStepZ = 0x0EC8;
			constexpr uintptr_t RedoCount = 0x0ECC;
			constexpr uintptr_t RedoTotal = 0x0ED0;
			constexpr uintptr_t ResetModal = 0x0ED8;
			constexpr uintptr_t BallSpawnInfo = 0x0EE0;
		}

		namespace GameInfoBase_TA {
			constexpr uintptr_t SoundPacks = 0x04E0;
		}

		namespace GameInfo_CollisionTest_TA {
			constexpr uintptr_t TestComponents = 0x04F0;
			constexpr uintptr_t CurrentTest = 0x0500;
			constexpr uintptr_t CurrentIndex = 0x0508;
			constexpr uintptr_t CurrentActor = 0x0510;
			constexpr uintptr_t bRepeat = 0x0518;
		}

		namespace GameInfo_GFxMenu_TA {
			constexpr uintptr_t CarPreviewSet = 0x04F0;
			constexpr uintptr_t PremiumPreviewSet = 0x04F8;
			constexpr uintptr_t ExplosionPreviewer = 0x0500;
			constexpr uintptr_t PostMatchPreviewer = 0x0508;
			constexpr uintptr_t MusicStingersPreviewer = 0x0510;
			constexpr uintptr_t MenuSequencer = 0x0518;
			constexpr uintptr_t UIStateNames = 0x0520;
			constexpr uintptr_t UISoundState_MainMenu = 0x0540;
			constexpr uintptr_t CinematicSequences = 0x0548;
			constexpr uintptr_t OnlineSaveEnable = 0x0558;
		}

		namespace GameInfo_Replay_TA {
			constexpr uintptr_t Replay = 0x04F0;
			constexpr uintptr_t ReplayPath = 0x04F8;
			constexpr uintptr_t GameEvent = 0x0508;
			constexpr uintptr_t PrevTime = 0x0510;
			constexpr uintptr_t ReplayStartTime = 0x0514;
			constexpr uintptr_t ReplayKismetLevelName = 0x0518;
		}

		namespace GameInfo_Season_TA {
			constexpr uintptr_t SoccarArchetype = 0x0558;
		}

		namespace GameInfo_Soccar_TA {
			constexpr uintptr_t GameEventArchetypes = 0x0558;
		}

		namespace GameInfo_TA {
			constexpr uintptr_t PostMatchCelebrations = 0x04F0;
			constexpr uintptr_t Bitfields_0x0500 = 0x0500;  // Multiple: bShutdownQueued, bShuttingDown
			constexpr uintptr_t CurrentGame = 0x0508;
			constexpr uintptr_t ReplacementServerInfo = 0x0510;
		}

		namespace GameInfo_TrainingEditor_TA {
			constexpr uintptr_t bCanExportMatinee = 0x0568;
		}

		namespace GameInfo_Tutorial_TA {
			constexpr uintptr_t bAutoEntered = 0x0568;
		}

		namespace GameModeList_TA {
			constexpr uintptr_t GameModes = 0x0060;
		}

		namespace GameMode_TA {
			constexpr uintptr_t GameArchetype = 0x0060;
			constexpr uintptr_t MapSet = 0x0068;
			constexpr uintptr_t FreeplayMapSet = 0x0070;
			constexpr uintptr_t StandardMapSet = 0x0078;
			constexpr uintptr_t RocketLabsMedleyMapSet = 0x0080;
			constexpr uintptr_t MutatorPresetName = 0x0088;
			constexpr uintptr_t DisallowedMutatorCategories = 0x0090;
			constexpr uintptr_t Bitfields_0x00A0 = 0x00A0;  // Multiple: bEnabled, bAllowPrivateMatchOnly, bIsEnabledForOnlineFreeplay, bMultiGameMode
			constexpr uintptr_t SortIdx = 0x00A4;
			constexpr uintptr_t GameInfoClass = 0x00A8;
			constexpr uintptr_t GameArchetypePath = 0x00B0;
			constexpr uintptr_t OverrideLocalizationKey = 0x00C0;
		}

		namespace GameModesConfig_TA {
			constexpr uintptr_t EnabledGameModes = 0x0078;
			constexpr uintptr_t ForcedDetailsGroups = 0x0088;
		}

		namespace GameObserver_TA {
			constexpr uintptr_t HitTimeToBallMin = 0x00A8;
			constexpr uintptr_t HitTimeToBallMax = 0x00AC;
			constexpr uintptr_t HitPredictDistMax = 0x00B0;
			constexpr uintptr_t HitPredictDistMin = 0x00B4;
			constexpr uintptr_t OffenseDotBetweenMin = 0x00B8;
			constexpr uintptr_t OffenseDotBetweenMax = 0x00BC;
			constexpr uintptr_t OffenseDistToGoalMin = 0x00C0;
			constexpr uintptr_t OffenseDistToGoalMax = 0x00C4;
			constexpr uintptr_t OffenseDistToBallMin = 0x00C8;
			constexpr uintptr_t OffenseDistToBallMax = 0x00CC;
			constexpr uintptr_t DefenseDotBetweenMin = 0x00D0;
			constexpr uintptr_t DefenseDotBetweenMax = 0x00D4;
			constexpr uintptr_t DefenseDistToGoalMin = 0x00D8;
			constexpr uintptr_t DefenseDistToGoalMax = 0x00DC;
			constexpr uintptr_t DefenseDistToBallMin = 0x00E0;
			constexpr uintptr_t DefenseDistToBallMax = 0x00E4;
			constexpr uintptr_t ScorabilityDistToBallMin = 0x00E8;
			constexpr uintptr_t ScorabilityDistToBallMax = 0x00EC;
			constexpr uintptr_t ScorabilityDistToBallWeight = 0x00F0;
			constexpr uintptr_t ScorabilityDotToBallMin = 0x00F4;
			constexpr uintptr_t ScorabilityDotToBallMax = 0x00F8;
			constexpr uintptr_t ScorabilityDotToBallWeight = 0x00FC;
			constexpr uintptr_t ScorabilityOffenseWeight = 0x0100;
			constexpr uintptr_t ScorabilityDefenseWeight = 0x0104;
			constexpr uintptr_t CarBallAerialBlend = 0x0108;
			constexpr uintptr_t MaxAerialHitProbability = 0x010C;
			constexpr uintptr_t Bitfields_0x0110 = 0x0110;  // Multiple: bDebugCarData, bDebugGoalData, bDebugBallData, bDebugPrediction
			constexpr uintptr_t RelevantCars = 0x0118;
			constexpr uintptr_t RelevantGoals = 0x0128;
			constexpr uintptr_t MinAerialAltitude = 0x0138;
			constexpr uintptr_t MaxAerialAltitude = 0x013C;
			constexpr uintptr_t AerialLikelyhood = 0x0140;
			constexpr uintptr_t MaxCalculatedTimeToBall = 0x0144;
			constexpr uintptr_t RelevantBall = 0x0148;
			constexpr uintptr_t Listeners = 0x0168;
			constexpr uintptr_t HighestScorability = 0x0178;
			constexpr uintptr_t ClosestBallToGoal = 0x017C;
			constexpr uintptr_t HighestAerialCar = 0x0180;
			constexpr uintptr_t ClosestGoalToBall = 0x01D8;
		}

		namespace GameSettingCategory_TA {
			constexpr uintptr_t AllowedMapSet = 0x00A8;
		}

		namespace GameSettingPlaylist_TA {
			constexpr uintptr_t MapSkillRequirements = 0x0160;
			constexpr uintptr_t TourServerInfoClass = 0x0170;
			constexpr uintptr_t Bitfields_0x0178 = 0x0178;  // Multiple: bAllowHonorDuelChallenges, bAllowVoiceChat, bAllowViralItems
			constexpr uintptr_t DetailsGroup = 0x017C;
			constexpr uintptr_t TeamColors = 0x0180;
			constexpr uintptr_t BallSuperSonicColor = 0x0190;
			constexpr uintptr_t TeamNames = 0x01A8;
			constexpr uintptr_t LoadoutOverrides = 0x01B8;
			constexpr uintptr_t BackFillPolicy = 0x01D8;
		}

		namespace GameShare_TA {
			constexpr uintptr_t CarEngineAudioGroup = 0x0060;
			constexpr uintptr_t BallPositionMaterialInstances = 0x0068;
			constexpr uintptr_t ActiveBoostPills = 0x0078;
			constexpr uintptr_t bHideWorldUI = 0x0088;
			constexpr uintptr_t Nameplates = 0x0090;
			constexpr uintptr_t CarPreviewActors = 0x00A0;
			constexpr uintptr_t TotalGameBalls = 0x00B0;
			constexpr uintptr_t SoundSourcePool = 0x00B8;
		}

		namespace GameState_TA {
			constexpr uintptr_t Components = 0x0060;
		}

		namespace GameTags_TA {
			constexpr uintptr_t Tags = 0x0060;
		}

		namespace GameViewportClient_TA {
			constexpr uintptr_t Bitfields_0x02C8 = 0x02C8;  // Multiple: bSplitScreenDisabled, bUpdateSplitscreenSizes, bDrawWorldFullScreen, bDrawBuildInfo
			constexpr uintptr_t LastSplitJoinTryTimes = 0x02D0;
			constexpr uintptr_t UIScaleModifier = 0x02E0;
			constexpr uintptr_t NameplateScaleModifier = 0x02E4;
			constexpr uintptr_t GameEvent = 0x02E8;
			constexpr uintptr_t OnlineGame = 0x02F0;
			constexpr uintptr_t SplitscreenPlayerLeftTournamentTitle = 0x02F8;
			constexpr uintptr_t SplitscreenPlayerLeftTournamentBody = 0x0308;
		}

		namespace GameplayMusicPlayer_TA {
			constexpr uintptr_t MusicSave = 0x0060;
			constexpr uintptr_t CurrentGameEvent = 0x0068;
			constexpr uintptr_t bMuted = 0x0070;
			constexpr uintptr_t LoadingScreenState = 0x0074;
			constexpr uintptr_t CurrentPlaylist = 0x007C;
			constexpr uintptr_t MusicPlayerState = 0x0084;
			constexpr uintptr_t LoadingScreenStateGroup = 0x0088;
			constexpr uintptr_t LoadingScreenState_MusicEnabled = 0x0090;
			constexpr uintptr_t LoadingScreenState_MusicDisabled = 0x0098;
			constexpr uintptr_t LoadingScreenState_None = 0x00A0;
			constexpr uintptr_t GameplayMusicStateGroup = 0x00A8;
			constexpr uintptr_t GameplayMusicState_Enabled = 0x00B0;
			constexpr uintptr_t GameplayMusicState_Disabled = 0x00B8;
			constexpr uintptr_t GameplayMusicState_None = 0x00C0;
		}

		namespace GameplaySettingsSave_TA {
			constexpr uintptr_t Bitfields_0x00C8 = 0x00C8;  // Multiple: bFilterNonTacticalQuickChat, bColorBlind, bForceDefaultColors, bEnableHorizontalSplitscreen, bEnableFreeplayUnlimitedBoost, bUseSteamInput, bDisableFreeplayGoals, bIsTradingEnabled, bFirstTimeDefaultVoice, bFirstTimeDefaultText, bFirstTimeDefaultTrade
			constexpr uintptr_t QuickChatFilter = 0x00CC;
			constexpr uintptr_t MatchChatFilter = 0x00CD;
			constexpr uintptr_t PartyChatFilter = 0x00CE;
			constexpr uintptr_t DeprecatedVoiceFilter = 0x00CF;
			constexpr uintptr_t ChatFilter = 0x00D0;
			constexpr uintptr_t EffectIntensity = 0x00D1;
			constexpr uintptr_t StatEventDisplayLevel = 0x00D2;
			constexpr uintptr_t FreeplayBoostFillType = 0x00D3;
			constexpr uintptr_t StatGraphLevel = 0x00D4;
			constexpr uintptr_t TrainingControlsVisibility = 0x00D5;
			constexpr uintptr_t SafeZoneRatio = 0x00D8;
			constexpr uintptr_t UIScale = 0x00DC;
			constexpr uintptr_t NameplateScale = 0x00E0;
			constexpr uintptr_t TrainingGameSpeed = 0x00E4;
			constexpr uintptr_t FreeplayBoostFillDelay = 0x00E8;
			constexpr uintptr_t PreviousDefaultVoice = 0x00F0;
			constexpr uintptr_t PreviousDefaultText = 0x0100;
			constexpr uintptr_t PickupActivationBuffer = 0x0110;
		}

		namespace GarageArchiveSlot_TA {
			constexpr uintptr_t ArchiveSave = 0x0060;
		}

		namespace GarageFavoritedSlot_TA {
			constexpr uintptr_t FavoriteSave = 0x0060;
		}

		namespace GarageSlotDropGroup_TA {
			constexpr uintptr_t Icon = 0x00C0;
			constexpr uintptr_t SlotIndex = 0x00C8;
		}

		namespace GetUploadUrlsMatch_TA {
			constexpr uintptr_t MatchGUID = 0x0060;
			constexpr uintptr_t RecordStartTimestamp = 0x0070;
			constexpr uintptr_t Playlist = 0x0078;
			constexpr uintptr_t Mutators = 0x0080;
			constexpr uintptr_t bIsBotMatch = 0x0090;
			constexpr uintptr_t Players = 0x0098;
		}

		namespace GetUploadUrlsPlayer_TA {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t ActorID = 0x00A8;
			constexpr uintptr_t Mu = 0x00AC;
		}

		namespace GlobalLookupTexture_TA {
			constexpr uintptr_t EnvironmentAPosition = 0x01B8;
			constexpr uintptr_t EnvironmentBPosition = 0x01C0;
			constexpr uintptr_t SunlightPosition = 0x01C8;
			constexpr uintptr_t WorldLightPosition = 0x01D0;
			constexpr uintptr_t TeamsPositionX = 0x01D8;
			constexpr uintptr_t PlayersPositionX = 0x01DC;
			constexpr uintptr_t TopTeamColors = 0x01E0;
			constexpr uintptr_t BottomTeamColors = 0x01F0;
			constexpr uintptr_t Players = 0x0200;
			constexpr uintptr_t TopPlayerColors = 0x0210;
			constexpr uintptr_t BottomPlayerColors = 0x0220;
			constexpr uintptr_t bDebug = 0x0230;
		}

		namespace GoalCrossbarVolumeManager_TA {
			constexpr uintptr_t HitModifier = 0x02A8;
		}

		namespace GoalCrossbarVolume_TA {
			constexpr uintptr_t CrossbarMaterial = 0x02A8;
		}

		namespace GoalIndicator_TA {
			constexpr uintptr_t Goal = 0x0268;
			constexpr uintptr_t PCOwner = 0x0270;
			constexpr uintptr_t PRI = 0x0278;
			constexpr uintptr_t LensFlareComponent = 0x0280;
			constexpr uintptr_t StaticMeshComponent = 0x0288;
			constexpr uintptr_t DefenseMesh = 0x0290;
			constexpr uintptr_t OffenseMesh = 0x0298;
			constexpr uintptr_t MaterialGoalDefense = 0x02A0;
			constexpr uintptr_t MaterialGoalOffense = 0x02A8;
			constexpr uintptr_t LensFlareTeamList = 0x02B0;
		}

		namespace GoalVolume_TA {
			constexpr uintptr_t Goal = 0x02A8;
		}

		namespace Goal_Hoops_TA {
			constexpr uintptr_t Backboard = 0x01C0;
			constexpr uintptr_t Radius = 0x01C8;
			constexpr uintptr_t BackboardLocation = 0x01CC;
			constexpr uintptr_t BackboardDirection = 0x01D8;
		}

		namespace Goal_TA {
			constexpr uintptr_t GoalOrientation = 0x00A8;
			constexpr uintptr_t ReplayOrientation = 0x00B0;
			constexpr uintptr_t OverrideGoalIndicatorOrientations = 0x00B8;
			constexpr uintptr_t SaveCheckDirectionOffset = 0x00C8;
			constexpr uintptr_t EpicSaveMinSpeed = 0x00D4;
			constexpr uintptr_t EpicSaveArriveTime = 0x00D8;
			constexpr uintptr_t TeamNum = 0x00DC;
			constexpr uintptr_t ScoreFX = 0x00E0;
			constexpr uintptr_t GoalIndicatorArchetype = 0x00E8;
			constexpr uintptr_t Bitfields_0x00F8 = 0x00F8;  // Multiple: bNoGoalIndicator, bOnlyGoalsFromDirection, bAllowPostMatchLobbyReset, bEnabled, bShowFocusExtent
			constexpr uintptr_t GoalDirection = 0x0100;
			constexpr uintptr_t PointsToAward = 0x0108;
			constexpr uintptr_t AutoCamFocusExtent = 0x010C;
			constexpr uintptr_t GoalFocusLocationOffset = 0x0118;
			constexpr uintptr_t MaxGoalScorerAttachRadius = 0x0124;
			constexpr uintptr_t GoalScoredDotDirection = 0x0128;
			constexpr uintptr_t MinAttachGoalToScorerDot = 0x0134;
			constexpr uintptr_t Location = 0x0138;
			constexpr uintptr_t Direction = 0x0144;
			constexpr uintptr_t Right = 0x0150;
			constexpr uintptr_t Up = 0x015C;
			constexpr uintptr_t Rotation = 0x0168;
			constexpr uintptr_t LocalExtent = 0x0174;
			constexpr uintptr_t WorldCenter = 0x0180;
			constexpr uintptr_t WorldExtent = 0x018C;
			constexpr uintptr_t WorldFrontCenter = 0x0198;
			constexpr uintptr_t WorldBox = 0x01A4;
		}

		namespace GreenScreenEffectHandler_TA {
			constexpr uintptr_t ColorToApply = 0x0150;
			constexpr uintptr_t FadeInDuration = 0x0154;
			constexpr uintptr_t FadeOutDuration = 0x0158;
			constexpr uintptr_t bUseSystemSettings = 0x015C;
			constexpr uintptr_t GreenScreenActor = 0x0160;
		}

		namespace GreenScreen_TA {
			constexpr uintptr_t HiddenPrimitives = 0x0288;
			constexpr uintptr_t bOn = 0x0298;
		}

		namespace GroundStaticMeshActor_TA {
			constexpr uintptr_t HideLocationOffset = 0x0288;
		}

		namespace HUDActor_TA {
			constexpr uintptr_t HUD = 0x0268;
		}

		namespace HUDBase_TA {
			constexpr uintptr_t Shell = 0x0320;
			constexpr uintptr_t DisconnectedString = 0x0328;
			constexpr uintptr_t ServerMaintString = 0x0338;
			constexpr uintptr_t PartyChatTitle = 0x0348;
			constexpr uintptr_t ChatData = 0x0358;
		}

		namespace HandlingPreset_TA {
			constexpr uintptr_t FrontAxle = 0x0060;
			constexpr uintptr_t BackAxle = 0x0074;
			constexpr uintptr_t PhysAsset = 0x0088;
			constexpr uintptr_t ChassisSpringDefaults = 0x0090;
		}

		namespace HauntedBallTrapTrigger_TA {
			constexpr uintptr_t LensFlare = 0x0270;
			constexpr uintptr_t TeamIndex = 0x0278;
			constexpr uintptr_t GoalVolume = 0x0280;
			constexpr uintptr_t TrapResetTime = 0x0288;
			constexpr uintptr_t MinLensFlareColorValue = 0x028C;
			constexpr uintptr_t MICParamName = 0x0290;
			constexpr uintptr_t MIC_TrapVolumeMat = 0x0298;
			constexpr uintptr_t MIC_TrapOutlineMat = 0x02A0;
			constexpr uintptr_t bIsActive = 0x02A8;
			constexpr uintptr_t HauntedBall = 0x02B0;
			constexpr uintptr_t SoccarEvent = 0x02B8;
			constexpr uintptr_t BeamPSC = 0x02C0;
			constexpr uintptr_t BeamPSArchetype = 0x02C8;
			constexpr uintptr_t BeamPSParam = 0x02D0;
		}

		namespace HideLevelAssetsBase_TA {
			constexpr uintptr_t ActorsInLevel = 0x0268;
			constexpr uintptr_t ActorClasses = 0x0278;
		}

		namespace IdenticalProductCache_TA {
			constexpr uintptr_t Products = 0x0070;
			constexpr uintptr_t ProductIDMap = 0x00C0;
			constexpr uintptr_t InstanceIDMap = 0x0110;
		}

		namespace IdleFeature_TA {
			constexpr uintptr_t IdleActionTime = 0x0060;
			constexpr uintptr_t IdleWarningTime = 0x0064;
		}

		namespace IdlePlayer_TA {
			constexpr uintptr_t StartTime = 0x0060;
		}

		namespace ImpactEffectsComponent_TA {
			constexpr uintptr_t SoundPriority = 0x00A8;
			constexpr uintptr_t ImpactEffectsMap = 0x00B0;
			constexpr uintptr_t AkImpactSound = 0x00B8;
			constexpr uintptr_t AkSlideSound = 0x00C0;
			constexpr uintptr_t AkSlideSoundDelay = 0x00C8;
			constexpr uintptr_t AkSlideMomentumMin = 0x00CC;
			constexpr uintptr_t AkImpactTypeKey = 0x00D0;
			constexpr uintptr_t AkImpactIntensityKey = 0x00D8;
			constexpr uintptr_t MinImpactMomentum = 0x00E0;
			constexpr uintptr_t MinImpactDelay = 0x00E4;
			constexpr uintptr_t ImpactCameraShake = 0x00E8;
			constexpr uintptr_t ImpactForceFeedback = 0x00F0;
			constexpr uintptr_t ShakeScaleCurve = 0x00F8;
			constexpr uintptr_t LastWorldImpactTime = 0x0110;
			constexpr uintptr_t LastActorImpactTime = 0x0114;
			constexpr uintptr_t SlideTime = 0x0118;
			constexpr uintptr_t SlideParticleComponent = 0x0120;
			constexpr uintptr_t SlideAudioComponent = 0x0128;
			constexpr uintptr_t ShakeComponent = 0x0130;
			constexpr uintptr_t LastCollisionEffectData = 0x0138;
			constexpr uintptr_t SlideCollisionEffectData = 0x0190;
			constexpr uintptr_t SlidePhysMatProp = 0x01E8;
			constexpr uintptr_t ImpactModifier = 0x01F0;
			constexpr uintptr_t SlapbackManager = 0x01F8;
		}

		namespace InMapDragonManager_TA {
			constexpr uintptr_t AimOffsets = 0x0090;
			constexpr uintptr_t MaxAims = 0x00A0;
			constexpr uintptr_t MinAims = 0x00B0;
			constexpr uintptr_t DragonData = 0x00C0;
			constexpr uintptr_t CachedGameEvent = 0x00D0;
			constexpr uintptr_t LastExitAnim = 0x00D8;
			constexpr uintptr_t LastScoredOnTeam = 0x00E0;
			constexpr uintptr_t bViewingReplayFile = 0x00E4;
		}

		namespace InMapScoreboard_TA {
			constexpr uintptr_t StaticMesh = 0x0268;
			constexpr uintptr_t MaterialInstance = 0x0270;
			constexpr uintptr_t MaterialIndex = 0x0278;
			constexpr uintptr_t TeamIndex = 0x027C;
			constexpr uintptr_t GoalAnimation = 0x0280;
			constexpr uintptr_t GoDuration = 0x0298;
			constexpr uintptr_t GoSwitch = 0x029C;
			constexpr uintptr_t GoalXPos = 0x02A4;
			constexpr uintptr_t CountdownSwitch = 0x02AC;
			constexpr uintptr_t CountdownToggle = 0x02B4;
			constexpr uintptr_t ScoreToggle = 0x02BC;
			constexpr uintptr_t ScoreParam = 0x02C4;
			constexpr uintptr_t CountdownValueParam = 0x02CC;
			constexpr uintptr_t ExtraScoreboardMICOverrides = 0x02D8;
			constexpr uintptr_t LastCountdownTime = 0x02E8;
			constexpr uintptr_t ReplayCountdownTime = 0x02EC;
			constexpr uintptr_t bHasReplayCountdownTime = 0x02F0;
			constexpr uintptr_t GameEvent = 0x02F8;
			constexpr uintptr_t LastState = 0x0300;
			constexpr uintptr_t MIC = 0x0308;
			constexpr uintptr_t GoalTime = 0x0310;
		}

		namespace InputBufferGraph_TA {
			constexpr uintptr_t Buffer = 0x0090;
			constexpr uintptr_t BufferTarget = 0x0098;
			constexpr uintptr_t OverUnderFrames = 0x00A0;
			constexpr uintptr_t PhysicsRate = 0x00A8;
			constexpr uintptr_t MaxPhysicsRate = 0x00B0;
			constexpr uintptr_t MinPhysicsRate = 0x00B4;
		}

		namespace InputRecorder_TA {
			constexpr uintptr_t VfTable_IITickNotify_TA = 0x0268;
			constexpr uintptr_t MaxRecordTime = 0x0270;
			constexpr uintptr_t Bitfields_0x0274 = 0x0274;  // Multiple: bRecording, bPlaying
			constexpr uintptr_t CarStates = 0x0278;
			constexpr uintptr_t BallStates = 0x0288;
			constexpr uintptr_t Inputs = 0x0298;
			constexpr uintptr_t InputIndex = 0x02A8;
		}

		namespace InterpTrackAnimControlWithSensibleDefault_TA {
			constexpr uintptr_t UnknownData00 = 0x0114;
		}

		namespace InterpTrackBoostGlow_TA {
			constexpr uintptr_t UnknownData00 = 0x00E4;
		}

		namespace InterpTrackBoostToggle_TA {
			constexpr uintptr_t OverrideBoost = 0x00E0;
			constexpr uintptr_t AttachedParticleSystems = 0x00E8;
			constexpr uintptr_t AttachedSocketNames = 0x00F8;
			constexpr uintptr_t CurrentActor = 0x0108;
			constexpr uintptr_t CurrentBoostFX = 0x0110;
			constexpr uintptr_t bIsBoostActive = 0x0118;
		}

		namespace InterpTrackCameraShake_TA {
			constexpr uintptr_t Shake = 0x00E0;
			constexpr uintptr_t ShakeScale = 0x00E8;
			constexpr uintptr_t PlaySpace = 0x00EC;
			constexpr uintptr_t PlaySpaceRotation = 0x00F0;
		}

		namespace InterpTrackCarScale_TA {
			constexpr uintptr_t UnknownData00 = 0x00E4;
		}

		namespace InterpTrackInstVehicleToggle_TA {
			constexpr uintptr_t TargetVehicle = 0x0070;
		}

		namespace InterpTrackInstVehicle_TA {
			constexpr uintptr_t TargetVehicle = 0x0060;
		}

		namespace InterpTrackPostProcess_TA {
			constexpr uintptr_t SettingsToApply = 0x00E0;
			constexpr uintptr_t PreviousCameraSettings = 0x0248;
		}

		namespace InterpTrackSkelControlRotation_TA {
			constexpr uintptr_t SkelControlName = 0x00E8;
			constexpr uintptr_t RotAxis = 0x00F0;
		}

		namespace InterpTrackToggleCarOnGround_TA {
			constexpr uintptr_t UnknownData00 = 0x00DC;
		}

		namespace InterpTrackToggleDumpMovie_TA {
			constexpr uintptr_t UnknownData00 = 0x00DC;
		}

		namespace InterpTrackToggleSupersonic_TA {
			constexpr uintptr_t UnknownData00 = 0x00DC;
		}

		namespace InterpTrackTriggerVehicleFX_TA {
			constexpr uintptr_t AttachmentName = 0x00E0;
			constexpr uintptr_t ParticleSystemInstance = 0x00E8;
		}

		namespace IntroCarTemplates_TA {
			constexpr uintptr_t IntroCars = 0x0060;
		}

		namespace ItemDropGroup_TA {
			constexpr uintptr_t Currency = 0x0060;
			constexpr uintptr_t Products = 0x0070;
			constexpr uintptr_t XP = 0x0080;
			constexpr uintptr_t Message = 0x0088;
			constexpr uintptr_t GFxDataClass = 0x0098;
			constexpr uintptr_t DisplayOrder = 0x00A0;
		}

		namespace ItemPoolCycle_TA {
			constexpr uintptr_t RemainingItems = 0x0070;
			constexpr uintptr_t LastDispensedItem = 0x0080;
			constexpr uintptr_t DemolishedItem = 0x0088;
		}

		namespace ItemPoolSelection_TA {
			constexpr uintptr_t ConcurrentItemCount = 0x0070;
			constexpr uintptr_t bPreviewItems = 0x0074;
			constexpr uintptr_t LastDispensedItems = 0x0078;
			constexpr uintptr_t DemolishedItems = 0x0088;
			constexpr uintptr_t OriginalPickupCooldownSeconds = 0x0098;
			constexpr uintptr_t CooldownSecondsAtPreviousGoal = 0x009C;
			constexpr uintptr_t ActivePickup = 0x00A0;
		}

		namespace ItemPoolWeightMultiplier_TA {
			constexpr uintptr_t PickWeightMultiplier = 0x0070;
			constexpr uintptr_t bResetWeightsOnGoal = 0x0074;
			constexpr uintptr_t LastDispensedItem = 0x0078;
			constexpr uintptr_t DemolishedItem = 0x0080;
		}

		namespace ItemPool_TA {
			constexpr uintptr_t Items = 0x0060;
		}

		namespace ItemShopNotification_TA {
			constexpr uintptr_t ItemShopNotificationsConfig = 0x0170;
			constexpr uintptr_t Icon = 0x0178;
			constexpr uintptr_t ShopNotificationID = 0x0180;
		}

		namespace ItemShopNotificationsConfig_TA {
			constexpr uintptr_t bItemShopNotificationsEnabled = 0x0078;
			constexpr uintptr_t PopUpDuration = 0x007C;
			constexpr uintptr_t MinRequiredLevel = 0x0080;
		}

		namespace JiggleHitHandler_TA {
			constexpr uintptr_t JiggleDistance = 0x0150;
			constexpr uintptr_t JiggleSpeed = 0x0154;
			constexpr uintptr_t JiggleSlowDownSpeed = 0x0158;
			constexpr uintptr_t BounceOffParticleSystem = 0x0160;
			constexpr uintptr_t JigglingCars = 0x0168;
			constexpr uintptr_t SpawnedParticleActors = 0x0178;
		}

		namespace JoinGameConnectionChecker_TA {
			constexpr uintptr_t ConnectionQualityConfig = 0x0060;
			constexpr uintptr_t GameEvent = 0x0068;
			constexpr uintptr_t OnlineGame = 0x0070;
		}

		namespace K3SUserPermissionsError_TA {
			constexpr uintptr_t ErrorCode = 0x0060;
			constexpr uintptr_t Message = 0x0070;
		}

		namespace K3SUserPermissions_TA {
			constexpr uintptr_t Response = 0x0060;
			constexpr uintptr_t Meta = 0x0070;
			constexpr uintptr_t FirstTimeDefaults = 0x0090;
		}

		namespace LanServerMetaData_TA {
			constexpr uintptr_t OwnerId = 0x0060;
			constexpr uintptr_t OwnerName = 0x00A8;
			constexpr uintptr_t ServerName = 0x00B8;
			constexpr uintptr_t ServerMap = 0x00C8;
			constexpr uintptr_t ServerGameMode = 0x00D0;
			constexpr uintptr_t bPassword = 0x00D4;
			constexpr uintptr_t NumPlayers = 0x00D8;
			constexpr uintptr_t MaxPlayers = 0x00DC;
			constexpr uintptr_t BuildID = 0x00E0;
		}

		namespace LeaderboardsConfig_TA {
			constexpr uintptr_t RankedLeaderboards = 0x0078;
		}

		namespace LegalText_TA {
			constexpr uintptr_t LegalHash = 0x0060;
			constexpr uintptr_t LegalText = 0x0068;
		}

		namespace LightBarComponent_TA {
			constexpr uintptr_t Team = 0x00A0;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bStrobeActive, bRandStrobeColor
			constexpr uintptr_t StrobeCount = 0x00AC;
			constexpr uintptr_t MaxStrobeCount = 0x00B0;
			constexpr uintptr_t StrobeTime = 0x00B4;
			constexpr uintptr_t StrobeColorList = 0x00B8;
			constexpr uintptr_t StrobeColorIndex = 0x00C8;
		}

		namespace LightCurveType_TA {
			constexpr uintptr_t ParameterValue = 0x0060;
		}

		namespace LightEnvironment_TA {
			constexpr uintptr_t UnknownData00 = 0x018C;
		}

		namespace ListenObject_TA {
			constexpr uintptr_t Id = 0x0060;
		}

		namespace ListenServer_TA {
			constexpr uintptr_t GRI = 0x0060;
			constexpr uintptr_t AdHocBeacon = 0x0068;
			constexpr uintptr_t GameEvent = 0x0070;
			constexpr uintptr_t LoadingPlayers = 0x0078;
			constexpr uintptr_t bRegistered = 0x0088;
		}

		namespace LoadedMtxCatalog_TA {
			constexpr uintptr_t ValidMtxShopTabs = 0x0070;
			constexpr uintptr_t Catalogs = 0x0080;
		}

		namespace LoadingProduct_TA {
			constexpr uintptr_t ProductID = 0x0060;
			constexpr uintptr_t HashID = 0x0064;
			constexpr uintptr_t ReferencedViews = 0x0068;
			constexpr uintptr_t OnlineProduct = 0x0078;
			constexpr uintptr_t ThumbnailSize = 0x0080;
			constexpr uintptr_t ThumbnailAsset = 0x0088;
			constexpr uintptr_t Asset = 0x0090;
			constexpr uintptr_t Thumbnail = 0x0098;
			constexpr uintptr_t Bitfields_0x00A0 = 0x00A0;  // Multiple: bUpdateProductData, bIgnoreEquipped
			constexpr uintptr_t AdditionalProductReferences = 0x00A8;
		}

		namespace LoadingScreen_TA {
			constexpr uintptr_t ProtipMessages = 0x0060;
			constexpr uintptr_t ProtipMessagesQueue = 0x0070;
			constexpr uintptr_t MaximumPlayerCounts = 0x0080;
			constexpr uintptr_t GFxEngineRef = 0x0090;
			constexpr uintptr_t OnlineGame = 0x0098;
			constexpr uintptr_t LoadingScreenInfo = 0x00A0;
			constexpr uintptr_t Bitfields_0x0140 = 0x0140;  // Multiple: bUnfairTeams, bComingFromEntry
		}

		namespace LoadoutRandomizer_TA {
			constexpr uintptr_t RandomizeSlots = 0x0060;
		}

		namespace LoadoutRenderer_TA {
			constexpr uintptr_t ThumbnailRenderer = 0x0060;
			constexpr uintptr_t Loader = 0x0068;
			constexpr uintptr_t TeamArchetype = 0x0070;
		}

		namespace LoadoutSequencer_TA {
			constexpr uintptr_t SlotSequence = 0x0060;
			constexpr uintptr_t bDebug = 0x0070;
			constexpr uintptr_t PreviewActor = 0x0078;
			constexpr uintptr_t FinalLoadout = 0x0080;
			constexpr uintptr_t CurrentLoadout = 0x00C0;
		}

		namespace LoadoutSet_TA {
			constexpr uintptr_t LoadoutSetName = 0x0060;
			constexpr uintptr_t Loadouts = 0x0070;
		}

		namespace Loadout_TA {
			constexpr uintptr_t Products = 0x0060;
			constexpr uintptr_t OnlineProducts = 0x0070;
			constexpr uintptr_t OnlineProducts128 = 0x0080;
			constexpr uintptr_t TeamPaint = 0x0090;
			constexpr uintptr_t TeamPaints = 0x00A0;
			constexpr uintptr_t PlayerTitle = 0x00C0;
			constexpr uintptr_t GaragePreviewTeam = 0x00C8;
			constexpr uintptr_t Profile = 0x00D0;
		}

		namespace LocalPlayerAudioParamsComponent_TA {
			constexpr uintptr_t ParameterInterface_Object = 0x0070;
			constexpr uintptr_t ParameterInterface_Interface = 0x0078;
			constexpr uintptr_t PC = 0x0080;
		}

		namespace LocalPlayerSkillSync_TA {
			constexpr uintptr_t OnlineGame = 0x0060;
			constexpr uintptr_t OnlineSkill = 0x0068;
			constexpr uintptr_t PsyNet = 0x0070;
		}

		namespace LocalPlayer_TA {
			constexpr uintptr_t VfTable_FCallbackEventDevice = 0x04E8;
			constexpr uintptr_t SaveGameManager = 0x04F0;
			constexpr uintptr_t Profile = 0x04F8;
			constexpr uintptr_t ProfileObjectProvider = 0x0500;
			constexpr uintptr_t SplitScreenPosition = 0x0508;
			constexpr uintptr_t SuspendingEventToken = 0x0510;
			constexpr uintptr_t SignoutStartedEventToken = 0x0518;
			constexpr uintptr_t Bitfields_0x0520 = 0x0520;  // Multiple: bOpenedStartMenu, bPendingBroadcastLoadout, bPendingBroadcastProfile
			constexpr uintptr_t ControllerLayouts = 0x0528;
			constexpr uintptr_t JoinGameConnectionChecker = 0x0530;
			constexpr uintptr_t ConnectionQualityConfig = 0x0538;
		}

		namespace MapDataLoader_TA {
			constexpr uintptr_t MapSelectors = 0x0060;
			constexpr uintptr_t MapImageLoadRequests = 0x0070;
		}

		namespace MapData_TA {
			constexpr uintptr_t Thumbnail = 0x0060;
			constexpr uintptr_t VariantOf = 0x0068;
			constexpr uintptr_t WeatherVariant = 0x0070;
			constexpr uintptr_t RandomWeight = 0x0074;
			constexpr uintptr_t AdditionalGameTags = 0x0078;
		}

		namespace MapInfo_TA {
			constexpr uintptr_t WorldColors = 0x0060;
			constexpr uintptr_t MirrorFieldType = 0x00A0;
			constexpr uintptr_t MirrorFieldXYRotation = 0x00A4;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bCanMirrorTraining, bMirrorTrainingSwapsGoals, bPlayGlobalCrowdSounds
			constexpr uintptr_t FieldCenter = 0x00AC;
			constexpr uintptr_t MinStadiumBrightness = 0x00B8;
			constexpr uintptr_t MapResetStartRotation = 0x00BC;
			constexpr uintptr_t MapResetStartHeight = 0x00C8;
			constexpr uintptr_t MapResetStartDistance = 0x00CC;
			constexpr uintptr_t MaxWaitTimeTillBallHit = 0x00D0;
			constexpr uintptr_t GoalScoredDistance = 0x00D4;
			constexpr uintptr_t MaxGoalYZoomOutDistance = 0x00D8;
			constexpr uintptr_t MaxGoalXZoomOutDistance = 0x00DC;
			constexpr uintptr_t CountDownFOV = 0x00E0;
			constexpr uintptr_t BackAwayFromWallDistance = 0x00E4;
			constexpr uintptr_t PylonExtentOverride = 0x00E8;
			constexpr uintptr_t ArenaSoundSettings = 0x00F8;
			constexpr uintptr_t CrowdSounds = 0x0100;
			constexpr uintptr_t CrowdActors = 0x0108;
		}

		namespace MapList_TA {
			constexpr uintptr_t AllMaps = 0x0060;
			constexpr uintptr_t AllMaps_Pristine = 0x0070;
			constexpr uintptr_t SortedMaps = 0x0080;
			constexpr uintptr_t SortedMaps_Pristine = 0x0090;
			constexpr uintptr_t AdditionalCookedMaps = 0x00A0;
			constexpr uintptr_t MapGroups = 0x00B0;
			constexpr uintptr_t GeneratedMapGroups = 0x00C0;
			constexpr uintptr_t GeneratedMapGroups_Pristine = 0x00D0;
			constexpr uintptr_t SelectableMaps = 0x00E0;
			constexpr uintptr_t SeasonMaps = 0x00E8;
			constexpr uintptr_t SeasonPlayoffsMaps = 0x00F0;
			constexpr uintptr_t AllMapSets = 0x00F8;
		}

		namespace MapPrefsSave_TA {
			constexpr uintptr_t MapPrefs = 0x00C8;
			constexpr uintptr_t SelectedFreeplayMap = 0x00D8;
		}

		namespace MapSelector_TA {
			constexpr uintptr_t bDebug = 0x0070;
			constexpr uintptr_t AllMaps = 0x0078;
			constexpr uintptr_t FilteredMaps = 0x0088;
			constexpr uintptr_t AllGroups = 0x0098;
			constexpr uintptr_t RemainingGroupMaps = 0x00A8;
			constexpr uintptr_t RemainingGroups = 0x00B8;
			constexpr uintptr_t PreviousGroups = 0x00C8;
			constexpr uintptr_t PreviousGroupMax = 0x00D8;
			constexpr uintptr_t LastPlayedMap = 0x00E0;
			constexpr uintptr_t Skill = 0x00E8;
			constexpr uintptr_t MapSkillRequirements = 0x00F0;
			constexpr uintptr_t MapSetName = 0x0100;
		}

		namespace MapSet_TA {
			constexpr uintptr_t IncludeSets = 0x0060;
			constexpr uintptr_t ExcludeSets = 0x0070;
			constexpr uintptr_t IncludeMaps = 0x0080;
			constexpr uintptr_t ExcludeMaps = 0x0090;
			constexpr uintptr_t Maps = 0x00A0;
			constexpr uintptr_t Maps_Pristine = 0x00B0;
		}

		namespace MapsConfig_TA {
			constexpr uintptr_t OnlineMapSets = 0x0078;
			constexpr uintptr_t ContentConfig = 0x0088;
		}

		namespace MatchAdminComponent_TA {
			constexpr uintptr_t GameEvent = 0x0060;
			constexpr uintptr_t PlayerPermissions = 0x0068;
			constexpr uintptr_t ServerConfig = 0x0070;
		}

		namespace MatchBroadcastComponent_TA {
			constexpr uintptr_t MatchLog = 0x0070;
			constexpr uintptr_t OnlineGame = 0x0078;
		}

		namespace MatchBroadcastLog_TA {
			constexpr uintptr_t Log = 0x0060;
		}

		namespace MatchBroadcast_TA {
			constexpr uintptr_t GameEvent = 0x0268;
			constexpr uintptr_t RecordedPlayers = 0x0270;
			constexpr uintptr_t bBroadcasting = 0x0280;
		}

		namespace MatchCompleteMetrics_TA {
			constexpr uintptr_t History = 0x0080;
		}

		namespace MatchHistoryConfig_TA {
			constexpr uintptr_t CacheRefreshSeconds = 0x0078;
			constexpr uintptr_t MaxConcurrentGFxReplaysLoaded = 0x007C;
		}

		namespace MatchHistoryErrors_TA {
			constexpr uintptr_t ReplayNotFound = 0x0080;
		}

		namespace MatchHistoryItem_TA {
			constexpr uintptr_t ReplayURL = 0x0060;
			constexpr uintptr_t Match = 0x0070;
		}

		namespace MatchHistoryMetrics_TA {
			constexpr uintptr_t ChangeTabsTimestamp = 0x0080;
			constexpr uintptr_t bMatchHistorySessionStarted = 0x0088;
			constexpr uintptr_t CurrentSessionTabChangeMetrics = 0x0090;
			constexpr uintptr_t CurrentMatchPreviews = 0x00A0;
			constexpr uintptr_t CurrentPlayerID = 0x00B0;
		}

		namespace MatchRecorder_TA {
			constexpr uintptr_t PRIs = 0x0078;
			constexpr uintptr_t SoccarGame = 0x0088;
		}

		namespace MatchSeries_TA {
			constexpr uintptr_t SeriesLength = 0x0060;
			constexpr uintptr_t Teams = 0x0068;
		}

		namespace MatchType_AutoTournament_TA {
			constexpr uintptr_t AutoTourConfig = 0x0168;
		}

		namespace MatchType_Custom_TA {
			constexpr uintptr_t EnforceTeamSizeConfig = 0x0138;
			constexpr uintptr_t bOnePlayerSelectedTeam = 0x0140;
			constexpr uintptr_t LargestMaxTeamSize = 0x0144;
		}

		namespace MatchType_FaceIt_TA {
			constexpr uintptr_t MinPlayersMetWaitTimeSeconds = 0x0168;
			constexpr uintptr_t WaitForPlayersExpirationTimeStamp = 0x0170;
		}

		namespace MatchType_Public_TA {
			constexpr uintptr_t Reservations = 0x0138;
		}

		namespace MatchType_TA {
			constexpr uintptr_t GameEvent = 0x0060;
			constexpr uintptr_t Components = 0x0068;
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bPreAssignedTeams, bAreMatchSettingsCached
			constexpr uintptr_t ForfeitVoteWaitGameTime = 0x007C;
			constexpr uintptr_t WaitForPlayersTime = 0x0080;
			constexpr uintptr_t WaitingForPlayersStartTime = 0x0084;
			constexpr uintptr_t MatchTypeName = 0x0088;
			constexpr uintptr_t LobbyTime = 0x0090;
			constexpr uintptr_t LobbyIntroTime = 0x0094;
			constexpr uintptr_t LobbyEndCountdown = 0x0098;
			constexpr uintptr_t CachedMatchSettings = 0x00A0;
			constexpr uintptr_t GameTags = 0x0128;
			constexpr uintptr_t Profile = 0x0130;
		}

		namespace MatchType_Tournament_TA {
			constexpr uintptr_t DedicatedServer = 0x0140;
			constexpr uintptr_t TourServer = 0x0148;
			constexpr uintptr_t TournamentServerConfig = 0x0150;
			constexpr uintptr_t MatchSeries = 0x0158;
			constexpr uintptr_t PlaylistName = 0x0160;
		}

		namespace MatchWinner_TA {
			constexpr uintptr_t WinningTeam = 0x0060;
		}

		namespace MatchmakingSettingsSave_TA {
			constexpr uintptr_t MatchmakingViewTab = 0x00C8;
			constexpr uintptr_t QuickMatchPlaylists = 0x00D0;
			constexpr uintptr_t QuickMatchRegions = 0x00E0;
			constexpr uintptr_t bMultiSelectEnabled = 0x00F0;
		}

		namespace MatchmakingViewFilter_Casual_TA {
			constexpr uintptr_t MicroEventConfig_Object = 0x0060;
			constexpr uintptr_t MicroEventConfig_Interface = 0x0068;
			constexpr uintptr_t Playlists_Object = 0x0070;
			constexpr uintptr_t Playlists_Interface = 0x0078;
		}

		namespace MatchmakingViewFilter_DebugMicroEvent_TA {
			constexpr uintptr_t SpecialEventConfig = 0x0060;
			constexpr uintptr_t Playlists_Object = 0x0068;
			constexpr uintptr_t Playlists_Interface = 0x0070;
		}

		namespace MatchmakingViewFilter_MenuTree_TA {
			constexpr uintptr_t Playlists_Object = 0x0060;
			constexpr uintptr_t Playlists_Interface = 0x0068;
			constexpr uintptr_t MenuTreeBuilder = 0x0070;
		}

		namespace MatchmakingViewFilter_RankedSports_TA {
			constexpr uintptr_t Playlists_Object = 0x0060;
			constexpr uintptr_t Playlists_Interface = 0x0068;
		}

		namespace MatchmakingViewFilter_Ranked_TA {
			constexpr uintptr_t Playlists_Object = 0x0060;
			constexpr uintptr_t Playlists_Interface = 0x0068;
		}

		namespace MatchmakingViewFilter_UnrankedSports_TA {
			constexpr uintptr_t Playlists_Object = 0x0060;
			constexpr uintptr_t Playlists_Interface = 0x0068;
		}

		namespace MatchmakingViewFilter_Unranked_TA {
			constexpr uintptr_t MicroEventConfig_Object = 0x0060;
			constexpr uintptr_t MicroEventConfig_Interface = 0x0068;
			constexpr uintptr_t Playlists_Object = 0x0070;
			constexpr uintptr_t Playlists_Interface = 0x0078;
		}

		namespace MatchmakingViewFilters_TA {
			constexpr uintptr_t Filters_Object = 0x0060;
			constexpr uintptr_t Filters_Interface = 0x0068;
		}

		namespace MaterialParamsSet_TA {
			constexpr uintptr_t TextureParameters = 0x0060;
			constexpr uintptr_t VectorParameters = 0x0070;
			constexpr uintptr_t ScalarParameters = 0x0080;
		}

		namespace MaxActorsGroup_TA {
			constexpr uintptr_t VfTable_FTickableObject = 0x0070;
			constexpr uintptr_t MaxActors = 0x0078;
			constexpr uintptr_t UpdateDelay = 0x007C;
			constexpr uintptr_t NextUpdateTime = 0x0080;
			constexpr uintptr_t Actors = 0x0088;
		}

		namespace MaxTimeComponent_TA {
			constexpr uintptr_t WarningTimeSeconds = 0x0060;
			constexpr uintptr_t TimeLimitSeconds = 0x0064;
		}

		namespace MaxTimeWarningData_TA {
			constexpr uintptr_t EndGameEpochTime = 0x0270;
			constexpr uintptr_t EndGameWarningEpochTime = 0x0278;
		}

		namespace MenuSequence_PremiumGarageReveal_TA {
			constexpr uintptr_t FinishCameraState = 0x00B8;
		}

		namespace MenuSequence_PremiumGarageSnap_TA {
			constexpr uintptr_t UnknownData00 = 0x00B4;
		}

		namespace MenuSequence_PremiumGarage_TA {
			constexpr uintptr_t FadeTime = 0x00A8;
			constexpr uintptr_t FadeOutDelay = 0x00AC;
			constexpr uintptr_t TurnTableYawOffset = 0x00B0;
		}

		namespace MenuSequence_TA {
			constexpr uintptr_t CameraState = 0x0060;
			constexpr uintptr_t Bitfields_0x0068 = 0x0068;  // Multiple: bRemotePlayersHidden, bLockPreviewActor, bImmediate
			constexpr uintptr_t MenuSequenceComp = 0x0070;
		}

		namespace MenuSequencer_TA {
			constexpr uintptr_t Sequences = 0x00A8;
			constexpr uintptr_t DefaultSequence = 0x00B8;
			constexpr uintptr_t CurrentSequence = 0x00C0;
			constexpr uintptr_t PendingSequence = 0x00C8;
			constexpr uintptr_t Status = 0x00D0;
			constexpr uintptr_t PendingSequenceQueue = 0x00D8;
		}

		namespace MenuTreeBranch_TA {
			constexpr uintptr_t ChildIDs = 0x0188;
			constexpr uintptr_t ChildNodes = 0x0198;
		}

		namespace MenuTreeBuilder_TA {
			constexpr uintptr_t PlaylistManager = 0x0060;
			constexpr uintptr_t AllNodes = 0x0068;
			constexpr uintptr_t PlaylistIconReferences = 0x0078;
		}

		namespace MenuTreeConfig_TA {
			constexpr uintptr_t PlaylistCacheDuration = 0x0078;
		}

		namespace MenuTreeNodeCrumbTrail_TA {
			constexpr uintptr_t bTrailEnabled = 0x0060;
		}

		namespace MenuTreeNode_ExternalScreen_TA {
			constexpr uintptr_t ScreenToOpen = 0x0188;
		}

		namespace MenuTreeNode_GenericFolder_TA {
			constexpr uintptr_t bCanShowQuickMatchButton = 0x01C0;
		}

		namespace MenuTreeNode_PlaylistFolder_TA {
			constexpr uintptr_t Bitfields_0x01C8 = 0x01C8;  // Multiple: bCompetitive, bShowArenasAndRegions, bCanUseMultiSelect
			constexpr uintptr_t HeaderType = 0x01CC;
			constexpr uintptr_t HeaderEndTime = 0x01D0;
			constexpr uintptr_t LTMPlaylistName = 0x01D8;
			constexpr uintptr_t DuelingPlaylistNameA = 0x01E8;
			constexpr uintptr_t DuelingPlaylistNameB = 0x01F8;
		}

		namespace MenuTreeNode_Playlist_TA {
			constexpr uintptr_t PlaylistId = 0x0188;
			constexpr uintptr_t PlaylistRowIndex = 0x018C;
			constexpr uintptr_t Playlist = 0x0190;
			constexpr uintptr_t MinCompetitiveXPLevelRequired = 0x0198;
			constexpr uintptr_t ChallengesRequired = 0x01A0;
			constexpr uintptr_t PlaylistQueue = 0x01B0;
			constexpr uintptr_t bSelected = 0x01B8;
			constexpr uintptr_t SpecialDisplayType = 0x01BC;
		}

		namespace MenuTreeNode_PrivateMatchJoin_TA {
			constexpr uintptr_t Party = 0x0188;
			constexpr uintptr_t PartyMatchKey = 0x0190;
		}

		namespace MenuTreeNode_TA {
			constexpr uintptr_t NodeID = 0x0060;
			constexpr uintptr_t Title = 0x0068;
			constexpr uintptr_t Description = 0x0078;
			constexpr uintptr_t GFxDataClass = 0x0088;
			constexpr uintptr_t GFxNode = 0x0090;
			constexpr uintptr_t ParentNode = 0x0098;
			constexpr uintptr_t ThumbnailImage = 0x00A0;
			constexpr uintptr_t CrumbTrail = 0x00A8;
			constexpr uintptr_t LocalizationCategory = 0x00B0;
			constexpr uintptr_t TitleKey = 0x00C0;
			constexpr uintptr_t DescriptionKey = 0x00D0;
			constexpr uintptr_t FeatureOn = 0x00E0;
			constexpr uintptr_t FeatureOff = 0x00E8;
			constexpr uintptr_t SecondaryTitle = 0x00F0;
			constexpr uintptr_t SecondaryTitleTimeAmount = 0x0100;
			constexpr uintptr_t bUppercaseSecondaryTitle = 0x0104;
			constexpr uintptr_t BadgeText = 0x0108;
			constexpr uintptr_t BadgeType = 0x0118;
			constexpr uintptr_t EnabledRequirements = 0x0120;
			constexpr uintptr_t SupportedEngagementEvents = 0x0130;
			constexpr uintptr_t PlatformAvailability = 0x0140;
		}

		namespace MenuTreeNode_Tournaments_TA {
			constexpr uintptr_t NextTournamentStartTime = 0x0188;
		}

		namespace MenuTreePlaylistManager_TA {
			constexpr uintptr_t MenuTreeBuilder = 0x0060;
			constexpr uintptr_t ActiveAndFuturePlaylists = 0x0068;
			constexpr uintptr_t MenuTreeConfig = 0x0078;
		}

		namespace MenuTreePlaylistQueue_TA {
			constexpr uintptr_t PlaylistData = 0x0060;
			constexpr uintptr_t Queue = 0x0070;
			constexpr uintptr_t DebugPlaylistData = 0x0080;
			constexpr uintptr_t TimeProvider_Object = 0x0090;
			constexpr uintptr_t TimeProvider_Interface = 0x0098;
		}

		namespace MergePartyEvent_TA {
			constexpr uintptr_t LeaderID = 0x0060;
			constexpr uintptr_t InviteeIDs = 0x00A8;
			constexpr uintptr_t ConfirmedInvitees = 0x00B8;
		}

		namespace Message_TA {
			constexpr uintptr_t Type = 0x0060;
			constexpr uintptr_t Sound = 0x0068;
			constexpr uintptr_t PrimaryPlayerSound = 0x0070;
			constexpr uintptr_t Key = 0x0078;
			constexpr uintptr_t Section = 0x0088;
			constexpr uintptr_t MessageLevel = 0x0098;
			constexpr uintptr_t LocalizedMessage = 0x00A0;
			constexpr uintptr_t ParamNames = 0x00B0;
			constexpr uintptr_t ParamTokens = 0x00C0;
			constexpr uintptr_t Packet = 0x00D0;
			constexpr uintptr_t DefaultPacket = 0x00E8;
		}

		namespace MicroEventConfig_TA {
			constexpr uintptr_t MicroEvents = 0x0078;
			constexpr uintptr_t Time_Object = 0x0088;
			constexpr uintptr_t Time_Interface = 0x0090;
		}

		namespace MicroEvent_TA {
			constexpr uintptr_t PlaylistId = 0x0060;
			constexpr uintptr_t StartTime = 0x0068;
			constexpr uintptr_t EndTime = 0x0070;
		}

		namespace MtxConfig_TA {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bAllowMicroTransactions, bAllowCurrencyTrading, bAllowCurrencyGifting, bAllowCurrencyForCurrencyTrades, bEnablePlatformStartPurchase
			constexpr uintptr_t MaxCurrencyWalletAmount = 0x007C;
			constexpr uintptr_t MaxCurrencyDailyAmount = 0x0080;
			constexpr uintptr_t FulfillmentRestrictedWalletMessage = 0x0088;
			constexpr uintptr_t FulfillmentRestrictedDailyMessage = 0x0098;
			constexpr uintptr_t FulfillmentRestrictedTitle = 0x00A8;
			constexpr uintptr_t CurrencyDelimeter = 0x00B8;
		}

		namespace MtxErrors_TA {
			constexpr uintptr_t MicrotransactionFulfillmentRestrictedWallet = 0x0080;
			constexpr uintptr_t MicrotransactionFulfillmentRestrictedDaily = 0x0088;
		}

		namespace MultiItemDropConfig_TA {
			constexpr uintptr_t bDropChallengeRewardsAsGroup = 0x0078;
			constexpr uintptr_t CrewRocketPassDropIcon = 0x0080;
		}

		namespace MultiItemDropsSave_TA {
			constexpr uintptr_t QueuedFTEDropGroups = 0x00C8;
		}

		namespace MusicMetrics_TA {
			constexpr uintptr_t TrackName = 0x0080;
			constexpr uintptr_t TrackStartTime = 0x0088;
			constexpr uintptr_t TrackSequence = 0x008C;
			constexpr uintptr_t PendingMusicVolume = 0x0090;
		}

		namespace MusicPlayerSave_TA {
			constexpr uintptr_t PlaylistsUpdate22 = 0x00C8;
			constexpr uintptr_t GameplayMusicSetting = 0x00D8;
			constexpr uintptr_t Bitfields_0x00DC = 0x00DC;  // Multiple: bPlayMusicInMenu, bPlayMusicInTraining, bPlayMusicInGame
		}

		namespace MusicPlaylist_TA {
			constexpr uintptr_t Tracks = 0x0060;
			constexpr uintptr_t Icon = 0x0070;
			constexpr uintptr_t bDefaultSelected = 0x0078;
		}

		namespace MusicStingersPreviewer_TA {
			constexpr uintptr_t ProductLoader = 0x0060;
			constexpr uintptr_t StingerPreviewFadeCue = 0x0068;
			constexpr uintptr_t PlayPreviewDelay = 0x0070;
			constexpr uintptr_t AnthemAsset = 0x0078;
			constexpr uintptr_t AnthemId = 0x0080;
			constexpr uintptr_t Bitfields_0x0090 = 0x0090;  // Multiple: bHoveringOverSlot, bPlaying
		}

		namespace MusicThemeConfig_TA {
			constexpr uintptr_t Theme = 0x0078;
		}

		namespace MusicTheme_TA {
			constexpr uintptr_t Playlists = 0x0060;
			constexpr uintptr_t TitleTracks = 0x0070;
			constexpr uintptr_t NeverPlayInFirstTracklist = 0x0080;
			constexpr uintptr_t Credits = 0x0088;
			constexpr uintptr_t KonamiCode = 0x0098;
			constexpr uintptr_t DefaultIcon = 0x00A8;
			constexpr uintptr_t AdditionalTracks = 0x00B0;
		}

		namespace MusicTrack_TA {
			constexpr uintptr_t Cue = 0x0060;
			constexpr uintptr_t Icon = 0x0068;
		}

		namespace MusicTracklistBuildStep_RemoveStreamerUnsafeTracks_TA {
			constexpr uintptr_t Source_Object = 0x0060;
			constexpr uintptr_t Source_Interface = 0x0068;
			constexpr uintptr_t Config = 0x0070;
		}

		namespace MusicTracklistBuildStep_RemoveTrack_TA {
			constexpr uintptr_t Source_Object = 0x0060;
			constexpr uintptr_t Source_Interface = 0x0068;
			constexpr uintptr_t TrackToRemove = 0x0070;
		}

		namespace MusicTracklistBuildStep_ShuffleTracks_TA {
			constexpr uintptr_t Source_Object = 0x0060;
			constexpr uintptr_t Source_Interface = 0x0068;
		}

		namespace MusicTracklistFactory_TA {
			constexpr uintptr_t TracklistNull = 0x0060;
			constexpr uintptr_t TracklistBuilder_Object = 0x0068;
			constexpr uintptr_t TracklistBuilder_Interface = 0x0070;
		}

		namespace MusicTracklist_TA {
			constexpr uintptr_t Tracks = 0x0060;
		}

		namespace MusicUrlConfig_TA {
			constexpr uintptr_t Tracks = 0x0078;
		}

		namespace MutatorConfig_TA {
			constexpr uintptr_t MaxNumRowsOverride = 0x0078;
			constexpr uintptr_t MaxNumColumnsOverride = 0x007C;
			constexpr uintptr_t VisibleGameSettingCategories = 0x0080;
			constexpr uintptr_t MaxAllowedMutators = 0x0090;
			constexpr uintptr_t MaxPreviewMutators = 0x0094;
		}

		namespace MutatorGameSettingPreset_TA {
			constexpr uintptr_t Presets = 0x0068;
		}

		namespace MutatorGameSetting_TA {
			constexpr uintptr_t RequiresMutators = 0x0068;
			constexpr uintptr_t DisallowedWithMutators = 0x0078;
			constexpr uintptr_t DisallowedWithGameModes = 0x0088;
			constexpr uintptr_t MutatorPackage = 0x0098;
			constexpr uintptr_t MutatorGroupID = 0x00A8;
		}

		namespace Mutator_Attachment_TA {
			constexpr uintptr_t AttachmentArchetype = 0x0078;
			constexpr uintptr_t Team1AttachmentArchetype = 0x0080;
		}

		namespace Mutator_Audio_TA {
			constexpr uintptr_t AudioSoundMode = 0x0078;
		}

		namespace Mutator_Ball_TA {
			constexpr uintptr_t SoccarGame = 0x0078;
			constexpr uintptr_t BallScale = 0x0080;
			constexpr uintptr_t BallBounciness = 0x0084;
			constexpr uintptr_t BallCarBounciness = 0x0088;
			constexpr uintptr_t TotalGameBalls = 0x008C;
			constexpr uintptr_t BallArchetype = 0x0090;
			constexpr uintptr_t BallGravityScale = 0x0098;
			constexpr uintptr_t BallSloMoDuration = 0x009C;
			constexpr uintptr_t BallSloMoDilation = 0x00A0;
			constexpr uintptr_t BallSloMoCooldown = 0x00A4;
			constexpr uintptr_t BallSloMoRadius = 0x00A8;
			constexpr uintptr_t BallSloMoDiffSpeed = 0x00AC;
			constexpr uintptr_t BallMaxLinearSpeedScale = 0x00B0;
			constexpr uintptr_t BallMaxAngularSpeed = 0x00B4;
			constexpr uintptr_t BallHitSpinScale = 0x00B8;
			constexpr uintptr_t BallMagnusCoefficient = 0x00BC;
			constexpr uintptr_t PhysMatOverride = 0x00C8;
			constexpr uintptr_t BallMagnusMinSpeed = 0x00D0;
			constexpr uintptr_t BallLiftImpulse = 0x00D4;
			constexpr uintptr_t BallLiftDelay = 0x00D8;
		}

		namespace Mutator_Booster_TA {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bNoBooster, bUnlimitedBoost, bBoostRechargeGroundOnly, bOverrideStartBoost, bIgnoreOnFreeplay, bIsOnlineFreeplay
			constexpr uintptr_t BoostStrength = 0x007C;
			constexpr uintptr_t BoostRechargeRate = 0x0080;
			constexpr uintptr_t BoostRechargeDelay = 0x0084;
			constexpr uintptr_t BoostStartAmount = 0x0088;
			constexpr uintptr_t BoostRestriction = 0x008C;
		}

		namespace Mutator_Breakout_TA {
			constexpr uintptr_t bLockedTileDamageState = 0x0078;
			constexpr uintptr_t LockedDamageIndex = 0x007C;
			constexpr uintptr_t StartingDamageState = 0x0080;
		}

		namespace Mutator_Car_TA {
			constexpr uintptr_t CarScale = 0x0078;
			constexpr uintptr_t JumpScale = 0x007C;
			constexpr uintptr_t CarMaxLinearSpeedScale = 0x0080;
			constexpr uintptr_t MaxTimeForDodge = 0x0084;
			constexpr uintptr_t Bitfields_0x0088 = 0x0088;  // Multiple: bUnlimitedTimeForDodge, bUnlimitedJumps
			constexpr uintptr_t MaxNumJumps = 0x008C;
		}

		namespace Mutator_Demolish_TA {
			constexpr uintptr_t DemolishTarget = 0x0078;
			constexpr uintptr_t DemolishSpeed = 0x0079;
			constexpr uintptr_t VehicleDemolishMode = 0x007A;
			constexpr uintptr_t bAwardDemolishCredit = 0x007C;
		}

		namespace Mutator_DisableScoring_TA {
			constexpr uintptr_t bDisableGoalScoring = 0x0078;
		}

		namespace Mutator_Freeplay_Base_TA {
			constexpr uintptr_t CarArchetype = 0x0078;
			constexpr uintptr_t TeamArchetypes = 0x0080;
			constexpr uintptr_t SoccarGame = 0x0090;
			constexpr uintptr_t MatchTypeClass = 0x0098;
			constexpr uintptr_t RichPresenceString = 0x00A0;
		}

		namespace Mutator_Freeplay_TA {
			constexpr uintptr_t PlayerRumbleItems = 0x00B0;
			constexpr uintptr_t LastResetTime = 0x00C0;
			constexpr uintptr_t ResetCooldown = 0x00C4;
			constexpr uintptr_t FreeplayConfig = 0x00C8;
			constexpr uintptr_t GoalResetType = 0x00D0;
			constexpr uintptr_t BoostFillType = 0x00D1;
			constexpr uintptr_t BoostFillDelay = 0x00D4;
			constexpr uintptr_t FreeplaySessionManager = 0x00D8;
		}

		namespace Mutator_GameEvent_TA {
			constexpr uintptr_t StatFactoryArchetype = 0x0078;
			constexpr uintptr_t BotArchetype = 0x0080;
			constexpr uintptr_t EndRoundComponentArchetype = 0x0088;
		}

		namespace Mutator_GameSpeed_TA {
			constexpr uintptr_t GameSpeed = 0x0078;
		}

		namespace Mutator_Gravity_TA {
			constexpr uintptr_t Gravity = 0x0078;
		}

		namespace Mutator_Handicap_TA {
			constexpr uintptr_t AutoBalanceDifference = 0x0078;
		}

		namespace Mutator_Input_TA {
			constexpr uintptr_t InputRestriction = 0x0078;
		}

		namespace Mutator_Loadout_TA {
			constexpr uintptr_t Products = 0x0078;
		}

		namespace Mutator_Match_TA {
			constexpr uintptr_t MatchGames = 0x0078;
			constexpr uintptr_t GameTime = 0x007C;
			constexpr uintptr_t FinishTime = 0x0080;
			constexpr uintptr_t GameScore = 0x0084;
			constexpr uintptr_t SubRules = 0x0088;
			constexpr uintptr_t bUnlimitedTime = 0x0090;
			constexpr uintptr_t ItemGiveRateOverride = 0x0094;
			constexpr uintptr_t OvertimeComponent = 0x0098;
			constexpr uintptr_t MaxTimeComponent = 0x00A0;
		}

		namespace Mutator_RespawnTime_TA {
			constexpr uintptr_t RespawnTime = 0x0078;
			constexpr uintptr_t bDisableGoalDelay = 0x007C;
			constexpr uintptr_t BallRespawnTime = 0x0080;
		}

		namespace Mutator_Robin_TA {
			constexpr uintptr_t StickyForce = 0x0060;
			constexpr uintptr_t AutoFlip = 0x0068;
			constexpr uintptr_t VehicleSim = 0x0070;
			constexpr uintptr_t OverrideCarComponents = 0x0078;
		}

		namespace Mutator_Score_TA {
			constexpr uintptr_t TrackedStatEventScore = 0x0078;
			constexpr uintptr_t GoalStatEventScore = 0x0088;
			constexpr uintptr_t PossessionSeconds = 0x0098;
			constexpr uintptr_t PossessionScore = 0x009C;
			constexpr uintptr_t SoccarEvent = 0x00A0;
		}

		namespace Mutator_TA {
			constexpr uintptr_t bRecordMetrics = 0x0060;
			constexpr uintptr_t ProhitibitedDefaultMatchTypes = 0x0068;
		}

		namespace Mutator_Territory_TA {
			constexpr uintptr_t TrackerWall = 0x0078;
			constexpr uintptr_t TerritoryDemolishComponent = 0x0080;
			constexpr uintptr_t StaleBallMaxTime = 0x0088;
			constexpr uintptr_t StaleBallWarningThreshold = 0x008C;
			constexpr uintptr_t StaleBallNoTeamMaxTime = 0x0090;
			constexpr uintptr_t StaleBallNoTeamWarningThreshold = 0x0094;
			constexpr uintptr_t StaleBallYRespawnOffset = 0x0098;
		}

		namespace NameplateComponentCar_TA {
			constexpr uintptr_t Car = 0x00E0;
		}

		namespace NameplateComponent_TA {
			constexpr uintptr_t PlayerName = 0x00A8;
			constexpr uintptr_t Team = 0x00B8;
			constexpr uintptr_t Bitfields_0x00BC = 0x00BC;  // Multiple: bIsLocalPlayer, bIsReady, bLocalizeName
			constexpr uintptr_t SpectatorShortcut = 0x00C0;
		}

		namespace NameplateMeshComponent_TA {
			constexpr uintptr_t DistanceScaleCurve = 0x0308;
			constexpr uintptr_t FOVScaleCurve = 0x0320;
			constexpr uintptr_t PlayerOptionsScale = 0x0338;
		}

		namespace NameplateRenderTarget_TA {
			constexpr uintptr_t NameplatesMovie = 0x01B8;
		}

		namespace NavigationHandle_TA {
			constexpr uintptr_t OldDriveLocation = 0x01A8;
		}

		namespace NetBucketRecorder_TA {
			constexpr uintptr_t PlayerData = 0x0060;
		}

		namespace NetMetricPlayerDataExport_TA {
			constexpr uintptr_t Player = 0x0060;
			constexpr uintptr_t InRpcs = 0x00A8;
			constexpr uintptr_t InBytes = 0x00C8;
			constexpr uintptr_t InBunches = 0x00E8;
		}

		namespace NetMetricPlayerData_TA {
			constexpr uintptr_t Player = 0x0060;
			constexpr uintptr_t InRpcs = 0x00A8;
			constexpr uintptr_t InBytes = 0x00D8;
			constexpr uintptr_t InBunches = 0x0108;
		}

		namespace NetMetricsConfig_TA {
			constexpr uintptr_t InRpcs = 0x0078;
			constexpr uintptr_t InBytes = 0x0090;
			constexpr uintptr_t InBunches = 0x00A8;
		}

		namespace NetStatGraph_TA {
			constexpr uintptr_t PacketsOut = 0x0090;
			constexpr uintptr_t PacketsIn = 0x0098;
			constexpr uintptr_t LostPacketsOut = 0x00A0;
			constexpr uintptr_t LostPacketsIn = 0x00A8;
			constexpr uintptr_t BytesOut = 0x00B0;
			constexpr uintptr_t BytesIn = 0x00B8;
			constexpr uintptr_t Latency = 0x00C0;
			constexpr uintptr_t ExpectedOutPacketRate = 0x00C8;
			constexpr uintptr_t ExpectedInPacketRate = 0x00CC;
			constexpr uintptr_t MaxBytesRate = 0x00D0;
		}

		namespace NetworkConfig_TA {
			constexpr uintptr_t ReplicationRate = 0x0078;
			constexpr uintptr_t ClientRate = 0x0088;
			constexpr uintptr_t ClientInputRate = 0x0098;
			constexpr uintptr_t MatchFailureSecondsOriginalValue = 0x00A8;
			constexpr uintptr_t MaxClientUploadFrames = 0x00AC;
			constexpr uintptr_t Bitfields_0x00B0 = 0x00B0;  // Multiple: bForceNetPackets, bKickActorOverflow
			constexpr uintptr_t ForcePacketSignificantDistance = 0x00B4;
			constexpr uintptr_t MatchFailureSeconds = 0x00B8;
			constexpr uintptr_t IgnoredActorOverflowVariables = 0x00C0;
		}

		namespace NetworkInputBuffer_CSTS_TA {
			constexpr uintptr_t Config = 0x02C8;
			constexpr uintptr_t LastPacketReceiveTime = 0x02D0;
			constexpr uintptr_t CurrentTimeDilation = 0x02D4;
			constexpr uintptr_t SequentialMissedInputs = 0x02D8;
			constexpr uintptr_t BufferLowWatermark = 0x02DC;
			constexpr uintptr_t BufferLowHistory = 0x02E0;
			constexpr uintptr_t BufferLowHistoryIndex = 0x02F0;
			constexpr uintptr_t ExtraBuffer = 0x02F4;
		}

		namespace NetworkInputBuffer_STS_TA {
			constexpr uintptr_t JitterBuffer = 0x02C8;
			constexpr uintptr_t ExtraSimTimeRemaining = 0x02D0;
			constexpr uintptr_t Debug = 0x02D4;
			constexpr uintptr_t TimeLastSimTimeAdjustment = 0x02DC;
			constexpr uintptr_t TimeClientAckdAdjustSimTime = 0x02E0;
			constexpr uintptr_t ReplicatedInputBufferSize = 0x02E4;
			constexpr uintptr_t bAdjustingSimTime = 0x02E8;
			constexpr uintptr_t BufferSizeLowWatermark = 0x02EC;
			constexpr uintptr_t TimeLastMissedInput = 0x02F0;
			constexpr uintptr_t TimeLastTightenUpBufferCheck = 0x02F4;
		}

		namespace NetworkInputBuffer_ServerConsume_TA {
			constexpr uintptr_t JitterBuffer = 0x02C8;
			constexpr uintptr_t bFillingBuffer = 0x02D0;
		}

		namespace NetworkInputBuffer_TA {
			constexpr uintptr_t PhysicsConfig = 0x0268;
			constexpr uintptr_t JitterSettings = 0x0270;
			constexpr uintptr_t EngineShare = 0x0278;
			constexpr uintptr_t PrimaryClient = 0x0280;
			constexpr uintptr_t Clients = 0x0288;
			constexpr uintptr_t TimeSinceLastMovePacket = 0x0298;
			constexpr uintptr_t MaxInputFramesPerPacket = 0x029C;
			constexpr uintptr_t PingTimestamps = 0x02A0;
			constexpr uintptr_t LastTickTime = 0x02B0;
			constexpr uintptr_t Stats = 0x02B4;
			constexpr uintptr_t PingEvent = 0x02C0;
		}

		namespace NetworkJitterSettings_TA {
			constexpr uintptr_t MinTimeBetweenPackets = 0x0060;
			constexpr uintptr_t MaxTimeBetweenPackets = 0x0064;
			constexpr uintptr_t BufferStdDeviations = 0x0068;
			constexpr uintptr_t MinBufferTime = 0x006C;
			constexpr uintptr_t RollingAverageTime = 0x0070;
			constexpr uintptr_t InputBufferTightenUpSizeFrequency = 0x0074;
			constexpr uintptr_t MaxSingleAdjustmentFrames = 0x0078;
		}

		namespace NetworkSave_TA {
			constexpr uintptr_t Bitfields_0x00C8 = 0x00C8;  // Multiple: bEnableCrossPlatform, bDisableCrossPlay
			constexpr uintptr_t IncomingPacketFrequency = 0x00CC;
			constexpr uintptr_t OutgoingPacketFrequency = 0x00CD;
			constexpr uintptr_t IncomingBandwidth = 0x00CE;
			constexpr uintptr_t NetworkInputBuffer = 0x00CF;
		}

		namespace Note_Linked_TA {
			constexpr uintptr_t NextNote = 0x0278;
			constexpr uintptr_t PrevNote = 0x0280;
		}

		namespace NotificationManager_TA {
			constexpr uintptr_t Notifications = 0x0060;
			constexpr uintptr_t CurrentNotificationID = 0x0070;
		}

		namespace NotificationSave_TA {
			constexpr uintptr_t Notifications = 0x00C8;
			constexpr uintptr_t Bitfields_0x00D8 = 0x00D8;  // Multiple: bShowInGameNotifications, bShowItemShopNotifications, bFirstTimeDefaultShopNotifications, bShopNotificationsDefaultValue
			constexpr uintptr_t EngagementEventNotification = 0x00E0;
		}

		namespace Notification_AchievementProgress_TA {
			constexpr uintptr_t Id = 0x0170;
			constexpr uintptr_t Icon = 0x0178;
			constexpr uintptr_t Progress = 0x0180;
			constexpr uintptr_t MaxProgress = 0x0184;
		}

		namespace Notification_AchievementUnlocked_TA {
			constexpr uintptr_t Id = 0x0170;
			constexpr uintptr_t Points = 0x0174;
			constexpr uintptr_t Icon = 0x0178;
		}

		namespace Notification_TA {
			constexpr uintptr_t NotificationID = 0x0060;
			constexpr uintptr_t Title = 0x0068;
			constexpr uintptr_t Body = 0x0078;
			constexpr uintptr_t Bitfields_0x0088 = 0x0088;  // Multiple: bPopUp, bRemoveAfterDisplayed, bPopUpShown, bPauseWhenModalsActive, bSave
			constexpr uintptr_t PopUpDuration = 0x008C;
			constexpr uintptr_t Expiration = 0x0090;
			constexpr uintptr_t NotificationManager = 0x0098;
			constexpr uintptr_t GFxDataClass = 0x00A0;
			constexpr uintptr_t CrossplayConfig = 0x00A8;
		}

		namespace OnlineDLCProductCache_TA {
			constexpr uintptr_t GeneratedProducts = 0x0060;
			constexpr uintptr_t AllowedAttributes = 0x0070;
			constexpr uintptr_t PreviousGeneratedProducts = 0x0080;
		}

		namespace OnlineFreeplaySettingsSave_TA {
			constexpr uintptr_t Region = 0x0158;
			constexpr uintptr_t Boost = 0x0168;
			constexpr uintptr_t GoalReset = 0x0169;
			constexpr uintptr_t bDefaultValuesAlreadySet = 0x016C;
		}

		namespace OnlineGameDedicatedServer_TA {
			constexpr uintptr_t Tournaments = 0x03E8;
			constexpr uintptr_t LastPlaylistID = 0x03F0;
			constexpr uintptr_t AllRelevantProducts = 0x03F8;
			constexpr uintptr_t ReplayToUpload = 0x0408;
			constexpr uintptr_t FlatbufferSession = 0x0410;
			constexpr uintptr_t VoiceTokenCache = 0x0418;
			constexpr uintptr_t NetMetricsRecorder = 0x0420;
			constexpr uintptr_t ActorChannelMonitor = 0x0428;
			constexpr uintptr_t GameModesConfig = 0x0430;
		}

		namespace OnlineGameJoinGame_TA {
			constexpr uintptr_t AssetCache = 0x0448;
		}

		namespace OnlineGameParty_TA {
			constexpr uintptr_t PartyLoadouts = 0x0468;
			constexpr uintptr_t MaxPartyMessages = 0x0478;
			constexpr uintptr_t PlayerJoinPartyString = 0x0480;
			constexpr uintptr_t PlayerLeavePartyString = 0x0490;
			constexpr uintptr_t LocalPlayerLeavePartyString = 0x04A0;
			constexpr uintptr_t PlayerNewLeaderPartyString = 0x04B0;
			constexpr uintptr_t AssetCache = 0x04C0;
			constexpr uintptr_t ChallengesRequired = 0x04C8;
			constexpr uintptr_t bIsVerifyingProducts = 0x04D8;
			constexpr uintptr_t VoiceManager = 0x04E0;
		}

		namespace OnlineGamePlayerTitles_TA {
			constexpr uintptr_t PlayerTitleCacheTime = 0x00B0;
			constexpr uintptr_t PlayerCache = 0x00B8;
			constexpr uintptr_t TitleConfig = 0x00C8;
		}

		namespace OnlineGameRegions_TA {
			constexpr uintptr_t RegionPingCache = 0x0138;
		}

		namespace OnlineGameReservations_TA {
			constexpr uintptr_t ClubsConfig = 0x01C8;
			constexpr uintptr_t Loadouts = 0x01D0;
		}

		namespace OnlineGameTourMatchmaking_TA {
			constexpr uintptr_t Tournaments = 0x0130;
			constexpr uintptr_t Config = 0x0138;
			constexpr uintptr_t FoundServerString = 0x0140;
			constexpr uintptr_t StartSearchFailString = 0x0150;
			constexpr uintptr_t TourEvent = 0x0160;
			constexpr uintptr_t Error = 0x0168;
			constexpr uintptr_t bPlayerReadyForNextMatch = 0x0170;
			constexpr uintptr_t JoinServerAttemptCounter = 0x0174;
		}

		namespace OnlineGameTourServer_TA {
			constexpr uintptr_t TourSettings = 0x00B0;
			constexpr uintptr_t ReservationsTourSettings = 0x0198;
			constexpr uintptr_t MapSet = 0x0280;
			constexpr uintptr_t GameUpdateDispatcher = 0x0288;
			constexpr uintptr_t TourServerInfo = 0x0290;
			constexpr uintptr_t TeamIDs = 0x0298;
			constexpr uintptr_t TournamentServerConfig = 0x02A8;
		}

		namespace OnlineGameTournaments_TA {
			constexpr uintptr_t Config = 0x00B0;
			constexpr uintptr_t TourEventArchetype = 0x00B8;
			constexpr uintptr_t ServiceArchetype = 0x00C0;
			constexpr uintptr_t Service = 0x00C8;
			constexpr uintptr_t Subscriptions = 0x00D0;
			constexpr uintptr_t Registration = 0x00D8;
			constexpr uintptr_t CheckIn = 0x00E0;
			constexpr uintptr_t CheckInError = 0x00E8;
			constexpr uintptr_t PartyCheckIn = 0x00F0;
			constexpr uintptr_t PartyLeaderLeave = 0x00F8;
			constexpr uintptr_t WindowWatcher = 0x0100;
			constexpr uintptr_t Rewards = 0x0108;
			constexpr uintptr_t Brackets = 0x0110;
			constexpr uintptr_t Credentials = 0x0118;
			constexpr uintptr_t Cache = 0x0120;
			constexpr uintptr_t MatchServerBrowser = 0x0128;
			constexpr uintptr_t Status = 0x0130;
			constexpr uintptr_t AutoTour = 0x0138;
			constexpr uintptr_t TourEvent = 0x0140;
		}

		namespace OnlineGameVersion_TA {
			constexpr uintptr_t UnknownData00 = 0x00B4;
		}

		namespace OnlineGame_TA {
			constexpr uintptr_t Tournaments = 0x02A0;
			constexpr uintptr_t TourMatchmaking = 0x02A8;
			constexpr uintptr_t Personas = 0x02B0;
			constexpr uintptr_t ClubPersonas = 0x02B8;
			constexpr uintptr_t MenuTreeBuilder = 0x02C0;
		}

		namespace OnlinePlayerAuthentication_TA {
			constexpr uintptr_t FreeToPlayConfig = 0x0208;
		}

		namespace OnlinePlayerFriends_TA {
			constexpr uintptr_t PersonasData = 0x03B0;
		}

		namespace OnlinePlayerMTX_TA {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: bEntitlementsDirty, bClaimingEntitlements, bMtxCodeExpired, bAllowEntitlements
		}

		namespace OnlinePlayer_TA {
			constexpr uintptr_t AchievementManagerArchetype = 0x0290;
			constexpr uintptr_t AchievementManager = 0x0298;
			constexpr uintptr_t NotificationManager = 0x02A0;
			constexpr uintptr_t FirstTimeManagerArchetype = 0x02A8;
			constexpr uintptr_t FTEManager = 0x02B0;
			constexpr uintptr_t TriggerManager = 0x02B8;
			constexpr uintptr_t EOSMetricHeartbeat = 0x02C0;
			constexpr uintptr_t CrumbTrailArchetype = 0x02C8;
			constexpr uintptr_t CrumbsMgr = 0x02D0;
			constexpr uintptr_t ChallengeManager = 0x02D8;
			constexpr uintptr_t WalletArchetype = 0x02E0;
			constexpr uintptr_t Wallet = 0x02E8;
			constexpr uintptr_t ShopsManagerArchetype = 0x02F0;
			constexpr uintptr_t ShopsManager = 0x02F8;
			constexpr uintptr_t ChatHistory = 0x0300;
			constexpr uintptr_t MTX = 0x0308;
			constexpr uintptr_t RewardDrops = 0x0310;
			constexpr uintptr_t AccountSettings = 0x0318;
			constexpr uintptr_t StayAsPartyLeaderID = 0x0320;
			constexpr uintptr_t EOSPermissions = 0x0368;
			constexpr uintptr_t bInCabinedMode = 0x0370;
			constexpr uintptr_t Country = 0x0378;
			constexpr uintptr_t EpicConfig = 0x0388;
			constexpr uintptr_t ESportConfig = 0x0390;
			constexpr uintptr_t InvalidDate = 0x0398;
			constexpr uintptr_t InvalidEmail = 0x03A8;
		}

		namespace OnlineProductExpirationHelper_TA {
			constexpr uintptr_t ExpirationProducts = 0x0060;
			constexpr uintptr_t ExpiredProducts = 0x0070;
			constexpr uintptr_t ExpiredProductNotificationQueue = 0x0080;
			constexpr uintptr_t ExpiredProductsSet = 0x0090;
		}

		namespace OnlineProductStoreSet_TA {
			constexpr uintptr_t Player = 0x0160;
			constexpr uintptr_t PlayerID = 0x0168;
		}

		namespace OnlineProductStore_TA {
			constexpr uintptr_t Sets = 0x0070;
			constexpr uintptr_t CurrentTempInstanceID = 0x0080;
		}

		namespace OnlineProduct_TA {
			constexpr uintptr_t ProductID = 0x0060;
			constexpr uintptr_t InstanceID = 0x0068;
			constexpr uintptr_t Attributes = 0x0078;
			constexpr uintptr_t SeriesID = 0x0088;
			constexpr uintptr_t TradeHold = 0x008C;
			constexpr uintptr_t AddedTimestamp = 0x0090;
			constexpr uintptr_t CachedSortLabel = 0x0098;
			constexpr uintptr_t CachedShortSortLabel = 0x00A8;
			constexpr uintptr_t CachedHash = 0x00B8;
			constexpr uintptr_t CachedLocalizedSeries = 0x00C0;
		}

		namespace OnlineSaveRecord_TA {
			constexpr uintptr_t Version = 0x0060;
			constexpr uintptr_t TimeStamp = 0x0068;
			constexpr uintptr_t SaveTick = 0x0070;
			constexpr uintptr_t SaveObjects = 0x0078;
		}

		namespace OnlineSessionManager_TA {
			constexpr uintptr_t GameEvent = 0x0070;
			constexpr uintptr_t OnlineGameParty = 0x0078;
			constexpr uintptr_t OnlineGame = 0x0080;
			constexpr uintptr_t CrossplayConfig = 0x0088;
		}

		namespace OnlineStorageConfig_TA {
			constexpr uintptr_t DisabledClasses = 0x0078;
			constexpr uintptr_t OnlineStorageFileName = 0x0088;
			constexpr uintptr_t MinSecondsBetweenCloudUploads = 0x0098;
			constexpr uintptr_t UploadRetryTime = 0x00A0;
		}

		namespace OnlineStorageSyncManager_TA {
			constexpr uintptr_t Config = 0x0060;
			constexpr uintptr_t ProductsConfig = 0x0068;
			constexpr uintptr_t EOSOnlineStorageSync = 0x0070;
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bDebugSyncManager, bSyncInProgress
		}

		namespace OrbitHitHandler_TA {
			constexpr uintptr_t RotationAxis = 0x0158;
			constexpr uintptr_t CarDistanceBeforeOrbit = 0x0164;
			constexpr uintptr_t StartAffectedRadius = 0x0168;
			constexpr uintptr_t EndAffectedRadius = 0x016C;
			constexpr uintptr_t StartOrbitDistance = 0x0170;
			constexpr uintptr_t EndOrbitDistance = 0x0174;
			constexpr uintptr_t StartOrbitSpeed = 0x0178;
			constexpr uintptr_t EndOrbitSpeed = 0x017C;
			constexpr uintptr_t FarAwayOrbitSpeedMultiplier = 0x0180;
			constexpr uintptr_t MaxDeactivationVelocity = 0x0184;
			constexpr uintptr_t OrbitCenterLocation = 0x0188;
			constexpr uintptr_t OrbitAxisBehavior = 0x0189;
			constexpr uintptr_t AffectedAreaColor = 0x018C;
			constexpr uintptr_t OrbitCenterColor = 0x0190;
			constexpr uintptr_t OrbitLocationColor = 0x0194;
			constexpr uintptr_t OrbitingCars = 0x0198;
			constexpr uintptr_t OrbitCenter = 0x01A8;
			constexpr uintptr_t NormalizedRotationAxis = 0x01B4;
			constexpr uintptr_t AffectedRadiusSquared = 0x01C0;
			constexpr uintptr_t OrbitDistance = 0x01C4;
		}

		namespace OtherPlayerProfile_TA {
			constexpr uintptr_t PlayerBorder = 0x0070;
			constexpr uintptr_t GFxPlayerBorder = 0x0078;
			constexpr uintptr_t PlayerBanner = 0x0080;
			constexpr uintptr_t GFxPlayerBanner = 0x0088;
		}

		namespace OutOfWorldVolume_TA {
			constexpr uintptr_t TouchTypes = 0x02A8;
			constexpr uintptr_t OutOfWorldType = 0x02B8;
		}

		namespace OverrideMaterialsHitHandler_TA {
			constexpr uintptr_t OverrideMaterialMode = 0x0150;
			constexpr uintptr_t MaterialToUse = 0x0158;
			constexpr uintptr_t PaintedMaterialToUse = 0x0160;
			constexpr uintptr_t BallMaterialToUse = 0x0168;
			constexpr uintptr_t CachedSkeletalMeshes = 0x0170;
		}

		namespace OvertimeComponent_TA {
			constexpr uintptr_t TieBreaker = 0x00A8;
			constexpr uintptr_t OvertimeGameTime = 0x00AC;
			constexpr uintptr_t BallHitGroundTimeoutSeconds = 0x00B0;
			constexpr uintptr_t FirstScoreTeamIndex = 0x00B4;
			constexpr uintptr_t RandomWinningTeamIndex = 0x00B8;
		}

		namespace OvertimeSettings_TA {
			constexpr uintptr_t TieBreaker = 0x0060;
			constexpr uintptr_t OvertimeGameTime = 0x0064;
		}

		namespace PRI_KnockOut_TA {
			constexpr uintptr_t GameEvent_KO = 0x0C90;
			constexpr uintptr_t Bitfields_0x0C98 = 0x0C98;  // Multiple: bShowMatchPlacement, bIsEliminated, bIsActiveMVP
			constexpr uintptr_t Knockouts = 0x0C9C;
			constexpr uintptr_t StackedKnockoutCount = 0x0CA0;
			constexpr uintptr_t LastKnockoutTime = 0x0CA4;
			constexpr uintptr_t MaxKnockoutStackTime = 0x0CA8;
			constexpr uintptr_t KnockoutAssists = 0x0CAC;
			constexpr uintptr_t KnockoutDeaths = 0x0CB0;
			constexpr uintptr_t DamageCaused = 0x0CB4;
			constexpr uintptr_t Hits = 0x0CB8;
			constexpr uintptr_t Grabs = 0x0CBC;
			constexpr uintptr_t Blocks = 0x0CC0;
			constexpr uintptr_t EliminationOrder = 0x0CC4;
			constexpr uintptr_t MatchPlacement = 0x0CC8;
			constexpr uintptr_t SpectateDelaySeconds = 0x0CCC;
		}

		namespace PRI_TA {
			constexpr uintptr_t MatchScore = 0x0458;
			constexpr uintptr_t MatchGoals = 0x045C;
			constexpr uintptr_t MatchOwnGoals = 0x0460;
			constexpr uintptr_t MatchAssists = 0x0464;
			constexpr uintptr_t MatchSaves = 0x0468;
			constexpr uintptr_t MatchShots = 0x046C;
			constexpr uintptr_t MatchDemolishes = 0x0470;
			constexpr uintptr_t MatchBonusXP = 0x0474;
			constexpr uintptr_t MatchBreakoutDamage = 0x0478;
			constexpr uintptr_t Bitfields_0x047C = 0x047C;  // Multiple: bMatchMVP, bMatchAdmin, bLoadoutSet, bOnlineLoadoutSet, bLoadoutsSet, bOnlineLoadoutsSet, bServerSetTeamLoadoutLocked, bTeamPaintSet, bReady, bIsDistracted, bUsingSecondaryCamera, bUsingBehindView, bUsingFreecam, bIsInSplitScreen, bStartVoteToForfeitDisabled, bUsingItems, bPlayerHistoryValid, PlayerHistoryValid, bIdleBanned, bStayAsPartyActive, bAbleToStart, bTeamChanged
			constexpr uintptr_t GameEvent = 0x0480;
			constexpr uintptr_t ReplicatedGameEvent = 0x0488;
			constexpr uintptr_t Car = 0x0490;
			constexpr uintptr_t FullLoadouts = 0x0498;
			constexpr uintptr_t FullLoadoutAttributes = 0x0518;
			constexpr uintptr_t FullOnlineLoadout = 0x0538;
			constexpr uintptr_t DataProducts = 0x0558;
			constexpr uintptr_t DataOnlineProducts = 0x0568;
			constexpr uintptr_t MaxDataProducts = 0x0578;
			constexpr uintptr_t ClientLoadout = 0x0580;
			constexpr uintptr_t ClientLoadoutOnline = 0x0590;
			constexpr uintptr_t ClientLoadouts = 0x05A0;
			constexpr uintptr_t ClientLoadoutsOnline = 0x05C0;
			constexpr uintptr_t OnlineProductStats = 0x05E8;
			constexpr uintptr_t TimeLoadoutWasLocked = 0x05F8;
			constexpr uintptr_t TimeLastTeamChangeRequested = 0x05FC;
			constexpr uintptr_t TeamPaint = 0x0600;
			constexpr uintptr_t MatchStats = 0x0610;
			constexpr uintptr_t WaitingStartTime = 0x0620;
			constexpr uintptr_t TotalGameTimePlayed = 0x0624;
			constexpr uintptr_t PersistentCamera = 0x0628;
			constexpr uintptr_t Camera = 0x0630;
			constexpr uintptr_t CameraSettings = 0x0638;
			constexpr uintptr_t CameraPitch = 0x0654;
			constexpr uintptr_t CameraYaw = 0x0655;
			constexpr uintptr_t PawnType = 0x0656;
			constexpr uintptr_t PlayerHistoryKey = 0x0657;
			constexpr uintptr_t ReplicatedWorstNetQualityBeyondLatency = 0x0697;
			constexpr uintptr_t QuitSeverity = 0x0698;
			constexpr uintptr_t ProductStats = 0x06A0;
			constexpr uintptr_t PendingProductStatValues = 0x06B0;
			constexpr uintptr_t PartyLeader = 0x06C0;
			constexpr uintptr_t Title = 0x0708;
			constexpr uintptr_t SkillTier = 0x0710;
			constexpr uintptr_t DodgeInputThreshold = 0x0718;
			constexpr uintptr_t SteeringSensitivity = 0x071C;
			constexpr uintptr_t AirControlSensitivity = 0x0720;
			constexpr uintptr_t StatCooldowns = 0x0728;
			constexpr uintptr_t BoostPickups = 0x0738;
			constexpr uintptr_t SmallBoostsCollected = 0x073C;
			constexpr uintptr_t BigBoostsCollected = 0x0740;
			constexpr uintptr_t MaxDodgeStreak = 0x0744;
			constexpr uintptr_t BallTouches = 0x0748;
			constexpr uintptr_t CarTouches = 0x074C;
			constexpr uintptr_t ReplacingBotPRI = 0x0750;
			constexpr uintptr_t PrimaryTitle = 0x0758;
			constexpr uintptr_t SecondaryTitle = 0x0778;
			constexpr uintptr_t PlayerGoalExplosion = 0x0798;
			constexpr uintptr_t PlayerBanner = 0x07A0;
			constexpr uintptr_t PlayerAvatar = 0x07A8;
			constexpr uintptr_t PlayerBorder = 0x07B0;
			constexpr uintptr_t PlayerMusicStinger = 0x07B8;
			constexpr uintptr_t BotProductName = 0x07C0;
			constexpr uintptr_t BotAvatarProductID = 0x07C8;
			constexpr uintptr_t BotBannerProductID = 0x07CC;
			constexpr uintptr_t ClubID = 0x07D0;
			constexpr uintptr_t LastTeamIndex = 0x07D8;
			constexpr uintptr_t PublicIP = 0x07E0;
			constexpr uintptr_t SpectatorShortcut = 0x07F0;
			constexpr uintptr_t CarDistanceTracker = 0x07F8;
			constexpr uintptr_t CarGrappleTracker = 0x0800;
			constexpr uintptr_t StayAsPartyVoter = 0x0808;
			constexpr uintptr_t StayAsPartyVoteYes = 0x0810;
			constexpr uintptr_t PickupTimer = 0x0818;
			constexpr uintptr_t ViralItemActor = 0x0820;
			constexpr uintptr_t TimeTillItem = 0x0828;
			constexpr uintptr_t MaxTimeTillItem = 0x082C;
			constexpr uintptr_t ProductsConfig = 0x0830;
			constexpr uintptr_t CurrentVoiceRoom = 0x0838;
			constexpr uintptr_t PendingLoadout = 0x0848;
			constexpr uintptr_t PossessionSteals = 0x08A0;
			constexpr uintptr_t PossessionDenials = 0x08A4;
			constexpr uintptr_t PossessionClears = 0x08A8;
			constexpr uintptr_t BallDemolitionSaves = 0x08AC;
			constexpr uintptr_t CarDemolitions = 0x08B0;
			constexpr uintptr_t BallDemolitions = 0x08B4;
			constexpr uintptr_t SelfDemolitions = 0x08B8;
			constexpr uintptr_t ValidationFailedClearedSlots = 0x08C0;
		}

		namespace PSC_Constrained_TA {
			constexpr uintptr_t WorldZ = 0x03E0;
			constexpr uintptr_t bAttachedRotation = 0x03E4;
		}

		namespace PaintDatabase_TA {
			constexpr uintptr_t Paints = 0x0060;
			constexpr uintptr_t PaintNameToPaintID = 0x0070;
			constexpr uintptr_t bClickToRebuild = 0x00C0;
		}

		namespace ParticleSystemComponent_TA {
			constexpr uintptr_t PreviewFakeVelocity = 0x03E0;
			constexpr uintptr_t PodiumFakeVelocity = 0x03EC;
		}

		namespace PartyClubSync_TA {
			constexpr uintptr_t Party = 0x0060;
			constexpr uintptr_t Clubs = 0x0068;
			constexpr uintptr_t PsyNet = 0x0070;
			constexpr uintptr_t PlayerIds = 0x0078;
		}

		namespace PartyInviteNotification_TA {
			constexpr uintptr_t LobbyId = 0x0170;
			constexpr uintptr_t PlayerID = 0x0180;
		}

		namespace PartyJoinRequestNotification_TA {
			constexpr uintptr_t PlayerID = 0x0170;
		}

		namespace PartyLeaderChangedEvent_TA {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t NewLeaderID = 0x00A8;
			constexpr uintptr_t NewFollowerIds = 0x00F0;
			constexpr uintptr_t VoterOwner = 0x0100;
		}

		namespace PartyMemberLoadout_TA {
			constexpr uintptr_t UniqueId = 0x0060;
			constexpr uintptr_t Loadout = 0x00A8;
			constexpr uintptr_t OnlineLoadoutData = 0x00E8;
			constexpr uintptr_t GaragePreviewTeam = 0x00F8;
			constexpr uintptr_t LocalPlayer = 0x0100;
			constexpr uintptr_t ProductSet = 0x0108;
			constexpr uintptr_t SortWeight = 0x0110;
		}

		namespace PartyMessage_ChallengesUpdate_TA {
			constexpr uintptr_t PlayerID = 0x00A8;
			constexpr uintptr_t bCompletedChallenges = 0x00F0;
		}

		namespace PartyMessage_Chat_TA {
			constexpr uintptr_t Text = 0x00A8;
		}

		namespace PartyMessage_ClubChanged_TA {
			constexpr uintptr_t ClubID = 0x00A8;
		}

		namespace PartyMessage_CurrentVoiceRoom_TA {
			constexpr uintptr_t PlayerID = 0x00A8;
			constexpr uintptr_t RoomName = 0x00F0;
		}

		namespace PartyMessage_LevelAndChallengesUpdate_TA {
			constexpr uintptr_t PlayerID = 0x00A8;
			constexpr uintptr_t XpLevel = 0x00F0;
			constexpr uintptr_t bCompletedChallenges = 0x00F4;
		}

		namespace PartyMessage_Loadout_TA {
			constexpr uintptr_t MemberLoadout = 0x00A8;
		}

		namespace PartyMessage_ProfileChange_TA {
			constexpr uintptr_t PlayerID = 0x00A8;
			constexpr uintptr_t ProfileProducts = 0x00F0;
		}

		namespace PartyMessage_TourCheckInError_TA {
			constexpr uintptr_t TourID = 0x00A8;
			constexpr uintptr_t ErrorTypeName = 0x00B0;
		}

		namespace PartyMessage_TourCheckIn_TA {
			constexpr uintptr_t TourSettings = 0x00A8;
			constexpr uintptr_t Team = 0x00B0;
			constexpr uintptr_t Credentials = 0x00F8;
		}

		namespace PartyMessage_TourLeaveTournament_TA {
			constexpr uintptr_t TourID = 0x00A8;
		}

		namespace PartyMessage_TourPreCheckInError_TA {
			constexpr uintptr_t TourID = 0x00A8;
			constexpr uintptr_t ErrorTypeName = 0x00B0;
		}

		namespace PartyMessage_TourPreCheckIn_TA {
			constexpr uintptr_t Settings = 0x00A8;
		}

		namespace PartyMessage_UserVoiceReportingLevel_TA {
			constexpr uintptr_t VoiceReportingLevel = 0x00A8;
		}

		namespace PartyMessage_XPLevelUpdate_TA {
			constexpr uintptr_t PlayerID = 0x00A8;
			constexpr uintptr_t XpLevel = 0x00F0;
		}

		namespace PerfStatGraph_TA {
			constexpr uintptr_t FPS = 0x0090;
			constexpr uintptr_t FrameTime = 0x0098;
			constexpr uintptr_t GameThreadTime = 0x00A0;
			constexpr uintptr_t RenderThreadTime = 0x00A8;
			constexpr uintptr_t GPUFrameTime = 0x00B0;
			constexpr uintptr_t FrameTimeHistories = 0x00B8;
			constexpr uintptr_t MaxFPS = 0x00C8;
			constexpr uintptr_t TargetFPS = 0x00CC;
		}

		namespace PersonaClubData {
			constexpr uintptr_t Persona = 0x0060;
			constexpr uintptr_t ClubTagWithName = 0x0068;
			constexpr uintptr_t ClubID = 0x0078;
		}

		namespace PersonaSave_TA {
			constexpr uintptr_t RecentPlayers = 0x00C8;
			constexpr uintptr_t RecentGameIDs = 0x00D8;
			constexpr uintptr_t ObservedPlayerLoadouts = 0x00E8;
			constexpr uintptr_t PresenceState = 0x00F8;
		}

		namespace Persona_TA {
			constexpr uintptr_t PlayerName = 0x0060;
			constexpr uintptr_t UnSanitizedPlayerName = 0x0070;
			constexpr uintptr_t PlayerID = 0x0080;
			constexpr uintptr_t OnlinePresenceState = 0x00C8;
			constexpr uintptr_t OnlinePresenceState_Platform = 0x00C9;
			constexpr uintptr_t OnlinePresenceState_PsyNet = 0x00CA;
			constexpr uintptr_t OnlinePresenceState_Epic = 0x00CB;
			constexpr uintptr_t Platform = 0x00CC;
			constexpr uintptr_t ClubRole = 0x00CD;
			constexpr uintptr_t SecondaryPlatform = 0x00CE;
			constexpr uintptr_t OnlinePresenceMessage = 0x00D0;
			constexpr uintptr_t Bitfields_0x00E0 = 0x00E0;  // Multiple: bBlockedStatus, bPlatformFriend, bPsyNetFriend, bEpicFriend, bNoEpicAccountIdFound, bIsClubMemberPersonaInGame, bNameSanitized, bCanShowAvatar, bAvatarPermissionDownloaded, bHidden
			constexpr uintptr_t PresenceId = 0x00E4;
			constexpr uintptr_t LastActive = 0x00E8;
			constexpr uintptr_t PlayerNote = 0x00F0;
			constexpr uintptr_t ClubTag = 0x0100;
			constexpr uintptr_t UnsanitizedEpicName = 0x0110;
			constexpr uintptr_t SecondaryPlayerName = 0x0120;
			constexpr uintptr_t UnsanitizedSecondaryPlayerName = 0x0130;
			constexpr uintptr_t EpicAccountId = 0x0140;
		}

		namespace Personas_TA {
			constexpr uintptr_t PersonaMap = 0x0060;
			constexpr uintptr_t bVerbosePresenceSort = 0x00B0;
			constexpr uintptr_t DeletedAccountDisplayName = 0x00B8;
			constexpr uintptr_t EpicIdRequests = 0x00C8;
			constexpr uintptr_t OnlineGame = 0x00D8;
		}

		namespace PhysicalMaterialProperty_TA {
			constexpr uintptr_t AkSwitchValue = 0x0060;
			constexpr uintptr_t Bitfields_0x0068 = 0x0068;  // Multiple: bStickyWheels, bConsiderForGround
			constexpr uintptr_t GroundToleranceZ = 0x006C;
		}

		namespace PhysicsConfig_TA {
			constexpr uintptr_t EnabledFeatures = 0x0078;
			constexpr uintptr_t DisabledFeatures = 0x0088;
			constexpr uintptr_t CarInteractionSettings = 0x0098;
			constexpr uintptr_t SuperSonicSettings = 0x01A0;
			constexpr uintptr_t Bitfields_0x01AC = 0x01AC;  // Multiple: bUseAckermannSteering, bPredictContacts, bQuantizePhysics, bOverrideServerPhysicsState, bBackupVehicleInputs, bUseNEQ, bExtrapolateRendering, bEnableCustomExplosionPhysics, bLegacyDropshotTileCollision, bPodiumDoubleJumpsEnabled
			constexpr uintptr_t JumpLeaveGroundTime = 0x01B0;
			constexpr uintptr_t STS = 0x01B4;
			constexpr uintptr_t CSTS = 0x01B8;
			constexpr uintptr_t PushForceConstantScale = 0x01EC;
		}

		namespace PhysicsMetrics_TA {
			constexpr uintptr_t CorrectionEvents = 0x0080;
		}

		namespace PickupTimer_TA {
			constexpr uintptr_t TimeTillItem = 0x02E0;
			constexpr uintptr_t MaxTimeTillItem = 0x02E4;
		}

		namespace PitchTekDrawingComponent_TA {
			constexpr uintptr_t PreviousOwnerPosition = 0x00A0;
			constexpr uintptr_t DecalType = 0x00AC;
			constexpr uintptr_t WheelContacts = 0x00B0;
			constexpr uintptr_t CarBodyContactData = 0x00C0;
		}

		namespace PlatformMetrics_TA {
			constexpr uintptr_t SoccarGame = 0x0080;
			constexpr uintptr_t Metrics = 0x0088;
		}

		namespace PlayMenuSave_TA {
			constexpr uintptr_t bUsingMultiselect = 0x00C8;
			constexpr uintptr_t LastVisitedPlaylistFolderID = 0x00CC;
			constexpr uintptr_t FocusSave = 0x00D8;
			constexpr uintptr_t FirstTimeClickedPlaylistIDs = 0x00E8;
		}

		namespace PlayerAvatarBorder_TA {
			constexpr uintptr_t Asset = 0x0198;
		}

		namespace PlayerAvatar_TA {
			constexpr uintptr_t Asset = 0x0198;
		}

		namespace PlayerBanner_TA {
			constexpr uintptr_t Asset = 0x0198;
		}

		namespace PlayerControllerBase_TA {
			constexpr uintptr_t SpectatorCameraAccel = 0x0890;
			constexpr uintptr_t SpectatorVelXY = 0x0894;
			constexpr uintptr_t SpectatorVelZ = 0x08A0;
			constexpr uintptr_t PostProcessManagerArchetype = 0x08A8;
			constexpr uintptr_t PostProcessManager = 0x08B0;
			constexpr uintptr_t SpectatorPitchDir = 0x08B8;
			constexpr uintptr_t SwivelPitchDir = 0x08BC;
			constexpr uintptr_t SpectatorVolume = 0x08C0;
			constexpr uintptr_t FullRotationScalar = 0x08C8;
			constexpr uintptr_t FullRotationMax = 0x08CC;
			constexpr uintptr_t VanityMgr = 0x08D0;
			constexpr uintptr_t bVanityInitialized = 0x08D8;
			constexpr uintptr_t PlayerBanner = 0x08E0;
			constexpr uintptr_t PlayerAvatar = 0x08E8;
			constexpr uintptr_t PlayerBorder = 0x08F0;
			constexpr uintptr_t AudioSpectatorMixComponent = 0x08F8;
			constexpr uintptr_t AudioFieldSideComponent = 0x0900;
		}

		namespace PlayerController_Cinematic_TA {
			constexpr uintptr_t PostProcessManagerArchetype = 0x0890;
		}

		namespace PlayerController_Menu_TA {
			constexpr uintptr_t InputSequences = 0x0998;
			constexpr uintptr_t bExecutedKonamiCode = 0x09A8;
		}

		namespace PlayerController_Replay_TA {
			constexpr uintptr_t SplitscreenHUDArchetype = 0x0998;
			constexpr uintptr_t GameEvent = 0x09A0;
		}

		namespace PlayerController_TA {
			constexpr uintptr_t Car = 0x0998;
			constexpr uintptr_t PRI = 0x09A0;
			constexpr uintptr_t VehicleInput = 0x09A8;
			constexpr uintptr_t Bitfields_0x09C8 = 0x09C8;  // Multiple: bReceivedServerShutdownMessage, bFilterNonTacticalQuickChat, bOverrideInput, bJumpPressed, bBoostPressed, bHandbrakePressed, bHasPitchedOrRolled, bAirPitchSafetyEnabled, bAllowAsymmetricalMute, bReportedPlayer, bUsePickupPressed
			constexpr uintptr_t LoginURL = 0x09D0;
			constexpr uintptr_t DeprecatedVoiceFilter = 0x09E0;
			constexpr uintptr_t QuickChatFilter = 0x09E1;
			constexpr uintptr_t MatchChatFilter = 0x09E2;
			constexpr uintptr_t RequestedInputBufferType = 0x09E3;
			constexpr uintptr_t ChatSpam = 0x09E4;
			constexpr uintptr_t ChatSpamHarsh = 0x09FC;
			constexpr uintptr_t LightBar = 0x0A18;
			constexpr uintptr_t MusicComponent = 0x0A20;
			constexpr uintptr_t AudioPriorityComponent = 0x0A28;
			constexpr uintptr_t AudioMixStateComponent = 0x0A30;
			constexpr uintptr_t TeamDemoAudioComponent = 0x0A38;
			constexpr uintptr_t FollowTarget = 0x0A40;
			constexpr uintptr_t SpectatorCameraArchetype = 0x0A48;
			constexpr uintptr_t SpectatorHUDArchetype = 0x0A50;
			constexpr uintptr_t SpectatorInputClass = 0x0A58;
			constexpr uintptr_t EditorCameraArchetype = 0x0A60;
			constexpr uintptr_t EditorHUDArchetype = 0x0A68;
			constexpr uintptr_t EditorInputClass = 0x0A70;
			constexpr uintptr_t MoveActor_Object = 0x0A78;
			constexpr uintptr_t MoveActor_Interface = 0x0A80;
			constexpr uintptr_t MoveActorGrabOffset = 0x0A88;
			constexpr uintptr_t MoveActorGrabIncrement = 0x0A94;
			constexpr uintptr_t MinMoveActorGrabDistance = 0x0A98;
			constexpr uintptr_t MouseIncrementSpeed = 0x0A9C;
			constexpr uintptr_t BallVelocityIncrementAmount = 0x0AA0;
			constexpr uintptr_t BallVelocityIncrementFireCount = 0x0AA4;
			constexpr uintptr_t BallVelocityIncrementFireCountMax = 0x0AA8;
			constexpr uintptr_t BallVelocityIncrementSpeedDefault = 0x0AAC;
			constexpr uintptr_t BallVelocityIncrementSpeedMax = 0x0AB0;
			constexpr uintptr_t CrosshairTraceDistance = 0x0AB4;
			constexpr uintptr_t TracedCrosshairActor = 0x0AB8;
			constexpr uintptr_t CrosshairTraceExtents = 0x0AC0;
			constexpr uintptr_t RotatedActor_Object = 0x0AD0;
			constexpr uintptr_t RotatedActor_Interface = 0x0AD8;
			constexpr uintptr_t RotateActorCameraLocationOffset = 0x0AE0;
			constexpr uintptr_t RotateActorCameraRotationOffset = 0x0AEC;
			constexpr uintptr_t RotateActorCameraSide = 0x0AF8;
			constexpr uintptr_t DesiredCameraSide = 0x0AFC;
			constexpr uintptr_t PawnTypeChangedTime = 0x0B00;
			constexpr uintptr_t SelectedSpawnArchetype = 0x0B04;
			constexpr uintptr_t OverrideInput = 0x0B08;
			constexpr uintptr_t MinClientInputRate = 0x0B28;
			constexpr uintptr_t MedianClientInputRate = 0x0B2C;
			constexpr uintptr_t MaxClientInputRate = 0x0B30;
			constexpr uintptr_t ConfiguredClientInputRate = 0x0B34;
			constexpr uintptr_t TimeSinceLastMovePacket = 0x0B38;
			constexpr uintptr_t TimeLastReplicatedMovePacket = 0x0B3C;
			constexpr uintptr_t PlatformMetrics = 0x0B40;
			constexpr uintptr_t MouseXDeadZone = 0x0B48;
			constexpr uintptr_t MouseYDeadZone = 0x0B4C;
			constexpr uintptr_t MouseXDeadZoneAir = 0x0B50;
			constexpr uintptr_t MouseYDeadZoneAir = 0x0B54;
			constexpr uintptr_t LastInputs = 0x0B58;
			constexpr uintptr_t PendingViewPRI = 0x0B78;
			constexpr uintptr_t ConnectionTracker = 0x0B80;
			constexpr uintptr_t CameraSave = 0x0B88;
			constexpr uintptr_t EngineShare = 0x0B90;
			constexpr uintptr_t InputBuffer = 0x0B98;
			constexpr uintptr_t CrossplayConfig = 0x0BA0;
			constexpr uintptr_t PlayerReportedMessage = 0x0BA8;
			constexpr uintptr_t PlayerReportedPostGameMessage = 0x0BB8;
			constexpr uintptr_t CheckPlayerReportStatusMessage = 0x0BC8;
			constexpr uintptr_t RoomCredentials = 0x0BD8;
			constexpr uintptr_t EOSGameClipsControllerArchetype = 0x0C08;
			constexpr uintptr_t EOSGameClipsController = 0x0C10;
			constexpr uintptr_t Prespawn = 0x0C18;
			constexpr uintptr_t FreeplaySessionManager = 0x0C38;
			constexpr uintptr_t TargettedActor = 0x0C40;
			constexpr uintptr_t PickupButtonPressedSeconds = 0x0C48;
			constexpr uintptr_t PickupActivationBuffer = 0x0C4C;
		}

		namespace PlayerInputSequence_TA {
			constexpr uintptr_t Sequence = 0x00D0;
			constexpr uintptr_t ConsoleCommand = 0x00E0;
			constexpr uintptr_t Timeout = 0x00F0;
			constexpr uintptr_t Bitfields_0x00F4 = 0x00F4;  // Multiple: bOrderMatters, bCheat, bRemoveOnComplete, bRemoveAfterSplashScreen, bCaptureInput, bConfirm, bPrimaryPlayerOnly
			constexpr uintptr_t Message = 0x00F8;
			constexpr uintptr_t CurrentSequence = 0x0108;
		}

		namespace PlayerInput_Menu_TA {
			constexpr uintptr_t AllowedActions = 0x04C8;
		}

		namespace PlayerInput_TA {
			constexpr uintptr_t GamepadLookScale = 0x0478;
			constexpr uintptr_t aTargetSelect = 0x047C;
			constexpr uintptr_t TargetSelectDeadZone = 0x0480;
			constexpr uintptr_t Bitfields_0x0484 = 0x0484;  // Multiple: bTargetSelected, bIsUsingMouseSteer, bIsUsingMouseThrottle, bIsUsingPositiveMouseAirYaw, bIsUsingNegativeMouseAirYaw, bIsUsingPositiveMouseAirPitch, bIsUsingNegativeMouseAirPitch, bIsUsingPositiveMouseAirRoll, bIsUsingNegativeMouseAirRoll
			constexpr uintptr_t aPositiveYaw = 0x0488;
			constexpr uintptr_t aNegativeYaw = 0x048C;
			constexpr uintptr_t aPositivePitch = 0x0490;
			constexpr uintptr_t aNegativePitch = 0x0494;
			constexpr uintptr_t aPositiveRoll = 0x0498;
			constexpr uintptr_t aNegativeRoll = 0x049C;
			constexpr uintptr_t aLookRoll = 0x04A0;
			constexpr uintptr_t bRoll = 0x04A4;
			constexpr uintptr_t bPitch = 0x04A5;
			constexpr uintptr_t aLookDown = 0x04A8;
			constexpr uintptr_t aTurnRight = 0x04AC;
			constexpr uintptr_t aTurnLeft = 0x04B0;
			constexpr uintptr_t aMouseForward = 0x04B4;
			constexpr uintptr_t aMouseStrafe = 0x04B8;
			constexpr uintptr_t aDodgeForward = 0x04BC;
			constexpr uintptr_t Profile = 0x04C0;
		}

		namespace PlayerItemDispenser_TA {
			constexpr uintptr_t ItemGiveRate = 0x0060;
			constexpr uintptr_t PreviewTimeSeconds = 0x0064;
			constexpr uintptr_t ItemPool = 0x0068;
			constexpr uintptr_t Bitfields_0x0070 = 0x0070;  // Multiple: bResetTimerOnDemolish, bWaitingForNextRound, bGiveItemOnRoundStart, bGiveItemOnFirstBallHit, bGiveItemBeforeRoundStart, bHideItemIconByDefault, bGiven
			constexpr uintptr_t NextItemTime = 0x0074;
			constexpr uintptr_t NextItemPreviewTime = 0x0078;
			constexpr uintptr_t PRI = 0x0080;
		}

		namespace PlayerLegacyStatusSave_TA {
			constexpr uintptr_t LegacyStatus = 0x00C8;
			constexpr uintptr_t bOnlineSet = 0x00CC;
			constexpr uintptr_t OnlineProducts = 0x00D0;
		}

		namespace PlayerRemovedEvent_TA {
			constexpr uintptr_t Player = 0x0060;
		}

		namespace PlayerReportComponent_TA {
			constexpr uintptr_t ReportablePlayers = 0x00A0;
			constexpr uintptr_t ReportedPlayers = 0x00B0;
		}

		namespace PlayerReportConfig_TA {
			constexpr uintptr_t Reasons = 0x0078;
		}

		namespace PlayerSpawnConfig_TA {
			constexpr uintptr_t RespawnDelaySeconds = 0x0060;
		}

		namespace PlayerSpawnFeature_TA {
			constexpr uintptr_t RespawnDelaySeconds = 0x0060;
			constexpr uintptr_t GameEvent = 0x0068;
		}

		namespace PlayerSpawnTicket_TA {
			constexpr uintptr_t Controller = 0x0060;
			constexpr uintptr_t PRI = 0x0068;
			constexpr uintptr_t SecondsRemaining = 0x0070;
			constexpr uintptr_t bWantsPrespawn = 0x0074;
			constexpr uintptr_t PrespawnSecondsRemaining = 0x0078;
		}

		namespace PlayerStart_Platform_TA {
			constexpr uintptr_t StaticMeshComponent = 0x0398;
			constexpr uintptr_t HideTime = 0x03A0;
			constexpr uintptr_t bActive = 0x03A4;
		}

		namespace PlayerVanitySave_TA {
			constexpr uintptr_t InstanceID = 0x00C8;
			constexpr uintptr_t ProductID = 0x00D8;
			constexpr uintptr_t SelectedColorValue = 0x00DC;
		}

		namespace PlayerVanity_TA {
			constexpr uintptr_t MovieReference = 0x0070;
			constexpr uintptr_t ToPlayer = 0x0080;
			constexpr uintptr_t PaintableLayer = 0x0088;
			constexpr uintptr_t TintableLayer = 0x0090;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bColorable, bIsDirty
			constexpr uintptr_t ColorID = 0x009C;
			constexpr uintptr_t ColorValue = 0x00A0;
			constexpr uintptr_t DefaultColorValue = 0x00A4;
			constexpr uintptr_t PaintColor = 0x00A8;
			constexpr uintptr_t InstanceID = 0x00B0;
			constexpr uintptr_t ProductID = 0x00C0;
			constexpr uintptr_t HashID = 0x00C4;
			constexpr uintptr_t RawDefaultColorValue = 0x00C8;
			constexpr uintptr_t Attributes = 0x00D0;
			constexpr uintptr_t PlayerName = 0x00E0;
			constexpr uintptr_t PlayerID = 0x00F0;
			constexpr uintptr_t Profile = 0x0138;
			constexpr uintptr_t VanitySaveObject = 0x0140;
			constexpr uintptr_t VanityType = 0x0148;
		}

		namespace PlaylistSettings_TA {
			constexpr uintptr_t MapSkillRequirements = 0x0158;
			constexpr uintptr_t TourServerInfoClass = 0x0168;
			constexpr uintptr_t Bitfields_0x0170 = 0x0170;  // Multiple: bAllowHonorDuelChallenges, bAllowVoiceChat, bAllowViralItems
			constexpr uintptr_t DetailsGroup = 0x0174;
			constexpr uintptr_t BackFillPolicy = 0x0178;
			constexpr uintptr_t TeamColors = 0x0180;
			constexpr uintptr_t BallSuperSonicColor = 0x0190;
			constexpr uintptr_t TeamNames = 0x01A8;
			constexpr uintptr_t LoadoutOverrides = 0x01B8;
		}

		namespace PlaylistSkillDataSave_TA {
			constexpr uintptr_t SkillData = 0x00C8;
		}

		namespace PointInSpace_TA {
			constexpr uintptr_t Sprite = 0x0268;
			constexpr uintptr_t Arrow = 0x0270;
		}

		namespace PostImpactModifier_TA {
			constexpr uintptr_t HitMat = 0x0060;
		}

		namespace PostMatchCelebrationPreviewer_TA {
			constexpr uintptr_t PreviewActor = 0x0070;
			constexpr uintptr_t PreviewAnims = 0x0078;
			constexpr uintptr_t PreviewAnimIdx = 0x0088;
		}

		namespace PostProcessManager_TA {
			constexpr uintptr_t PostProcessAAType = 0x00D0;
			constexpr uintptr_t DOF_DistanceLimit = 0x00D4;
			constexpr uintptr_t DOF_InnerRadiusLimit = 0x00D8;
			constexpr uintptr_t DOF_KernelDefault = 0x00DC;
			constexpr uintptr_t DOF_MaxFarDefault = 0x00E0;
			constexpr uintptr_t DOF_DistanceExtent = 0x00E4;
			constexpr uintptr_t bPostProcessedSettingsCached = 0x00E8;
		}

		namespace PreMatchLobby_TA {
			constexpr uintptr_t SelectedFocus = 0x0060;
			constexpr uintptr_t HighlightedFocus = 0x0068;
			constexpr uintptr_t LastHighlightLocation = 0x0070;
		}

		namespace PremiumGaragePreviewSet_TA {
			constexpr uintptr_t PreviewActorIndices = 0x0060;
			constexpr uintptr_t CarPreviewActors = 0x0068;
			constexpr uintptr_t OnlineParty = 0x0078;
			constexpr uintptr_t CurrentCar = 0x0080;
			constexpr uintptr_t CurrentCarIdx = 0x0088;
			constexpr uintptr_t bFirstSet = 0x008C;
			constexpr uintptr_t QueuedSwapPack = 0x0090;
			constexpr uintptr_t QueuedSwapSubIdx = 0x0098;
		}

		namespace PremiumSkinSet_TA {
			constexpr uintptr_t Body = 0x0060;
			constexpr uintptr_t Skins = 0x0068;
		}

		namespace PremiumSkin_TA {
			constexpr uintptr_t MIC = 0x0060;
			constexpr uintptr_t Quality = 0x0068;
			constexpr uintptr_t SkinType = 0x0069;
			constexpr uintptr_t SkinParameters = 0x0070;
			constexpr uintptr_t Thumbnail = 0x00A0;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bTeamFinishDisabled, bCustomFinishDisabled
			constexpr uintptr_t Attributes = 0x00B0;
			constexpr uintptr_t SkinSets = 0x00C0;
			constexpr uintptr_t AssetTemplate = 0x00D0;
			constexpr uintptr_t ProductTemplate = 0x00D8;
		}

		namespace PrespawnConfig_TA {
			constexpr uintptr_t bPrespawnFeatureEnabled = 0x0078;
			constexpr uintptr_t MinRespawnDelayThreshold = 0x007C;
			constexpr uintptr_t PrespawnStateLength = 0x0080;
		}

		namespace PriAssetCache_TA {
			constexpr uintptr_t PRI = 0x0060;
			constexpr uintptr_t Products = 0x0068;
		}

		namespace PrivacyPolicyConfig_TA {
			constexpr uintptr_t Version = 0x0078;
			constexpr uintptr_t IgnoredHashIds = 0x0080;
		}

		namespace PrivacyPolicySave_TA {
			constexpr uintptr_t AcceptedPrivatePolicies = 0x00C8;
		}

		namespace PrivacyPolicy_TA {
			constexpr uintptr_t Config = 0x0090;
		}

		namespace PrivateMatchSettingsSave_TA {
			constexpr uintptr_t Region = 0x0158;
		}

		namespace ProductAssetCache_TA {
			constexpr uintptr_t bDebug = 0x0070;
			constexpr uintptr_t NewProductIDs = 0x0078;
			constexpr uintptr_t LoadedProductIDs = 0x0088;
			constexpr uintptr_t Assets = 0x0098;
		}

		namespace ProductAssetLoader_TA {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: bDebug, bLoadingAssetAsync, bAssetLoadedThisFrame
			constexpr uintptr_t LoadAssetQueue = 0x0068;
		}

		namespace ProductAssetReferenceBase_TA {
			constexpr uintptr_t ProductAsset = 0x0060;
			constexpr uintptr_t ProductID = 0x0068;
		}

		namespace ProductAssetReferenceBody_TA {
			constexpr uintptr_t BodyAsset = 0x0070;
		}

		namespace ProductAssetReferencePaintFinish_TA {
			constexpr uintptr_t PaintFinishAsset = 0x0070;
		}

		namespace ProductAssetReferenceSkin_TA {
			constexpr uintptr_t SkinAsset = 0x0070;
		}

		namespace ProductAssetReferenceWheel_TA {
			constexpr uintptr_t WheelAsset = 0x0070;
		}

		namespace ProductAssetReference_TA {
			constexpr uintptr_t Asset = 0x0070;
		}

		namespace ProductAsset_Attachment_TA {
			constexpr uintptr_t Attachments = 0x0100;
			constexpr uintptr_t CustomAnimName = 0x0110;
		}

		namespace ProductAsset_Body_TA {
			constexpr uintptr_t Mesh = 0x0100;
			constexpr uintptr_t AnimTreeTemplate = 0x0108;
			constexpr uintptr_t AnimSets = 0x0110;
			constexpr uintptr_t PhysicsAsset = 0x0120;
			constexpr uintptr_t HandlingPreset = 0x0128;
			constexpr uintptr_t HandlingPresetZOffset = 0x0130;
			constexpr uintptr_t HandlingPresetXOffset = 0x0134;
			constexpr uintptr_t FrontAxle = 0x0138;
			constexpr uintptr_t BackAxle = 0x0160;
			constexpr uintptr_t AdditionalAxles = 0x0188;
			constexpr uintptr_t SteerScale = 0x0198;
			constexpr uintptr_t ChassisSpring = 0x019C;
			constexpr uintptr_t ChassisRotationScale = 0x01EC;
			constexpr uintptr_t ChassisTranslationScale = 0x01F0;
			constexpr uintptr_t SuspensionTravelMax = 0x01F4;
			constexpr uintptr_t SuspensionTravelMin = 0x01F8;
			constexpr uintptr_t Bitfields_0x01FC = 0x01FC;  // Multiple: bUseLegacySuspensionOffsets, bOverrideBoostFlapsAngle
			constexpr uintptr_t EngineSound = 0x0200;
			constexpr uintptr_t ExhaustSound = 0x0208;
			constexpr uintptr_t BlowoffSound = 0x0210;
			constexpr uintptr_t EngineAudioProfile = 0x0218;
			constexpr uintptr_t EngineAudioAsset = 0x0220;
			constexpr uintptr_t EngineAudioAssets = 0x0228;
			constexpr uintptr_t EngineAudioProductID = 0x0238;
			constexpr uintptr_t EngineAudioReference = 0x0240;
			constexpr uintptr_t FXActor = 0x0248;
			constexpr uintptr_t SkinMaterialIndex = 0x0250;
			constexpr uintptr_t BrakelightMaterialIndex = 0x0254;
			constexpr uintptr_t ChassisMaterialIndex = 0x0258;
			constexpr uintptr_t BoostMaterialIndex = 0x025C;
			constexpr uintptr_t BoostEmitterSockets = 0x0260;
			constexpr uintptr_t BoostFlapsAngle = 0x0270;
			constexpr uintptr_t ForcedTeamColors = 0x0274;
			constexpr uintptr_t ForcedCustomColor = 0x0294;
			constexpr uintptr_t SupersonicTrailOffset = 0x02A4;
			constexpr uintptr_t AdditionalUnlocks2 = 0x02B0;
			constexpr uintptr_t EquipProfile = 0x02C0;
			constexpr uintptr_t Attachments = 0x02C8;
			constexpr uintptr_t BoostParticleParameters = 0x02D8;
			constexpr uintptr_t SupersonicWheelTemplate = 0x02E8;
			constexpr uintptr_t DemolishFX = 0x02F0;
			constexpr uintptr_t SpawnFX = 0x02F8;
			constexpr uintptr_t ExitFX = 0x0300;
			constexpr uintptr_t WheelPreviewAnimTranslateScale = 0x0308;
			constexpr uintptr_t BoostAttachmentsToModify = 0x0310;
			constexpr uintptr_t SkinParameters = 0x0320;
			constexpr uintptr_t ThumbnailWheelAsset = 0x0350;
			constexpr uintptr_t ThumbnailSkinAsset = 0x0358;
			constexpr uintptr_t ForcedThumbnailColors = 0x0360;
			constexpr uintptr_t LODDistanceInfo = 0x0368;
			constexpr uintptr_t MutatorArchetypes = 0x0378;
		}

		namespace ProductAsset_Boost_TA {
			constexpr uintptr_t FXActor = 0x0100;
			constexpr uintptr_t PaintedFXActor = 0x0108;
			constexpr uintptr_t PreviewFrontWheelSpinSpeed = 0x0110;
			constexpr uintptr_t PreviewBackWheelSpinSpeed = 0x0114;
		}

		namespace ProductAsset_Bot_TA {
			constexpr uintptr_t LoadoutProducts2 = 0x0100;
			constexpr uintptr_t BlueTeamColorID = 0x0110;
			constexpr uintptr_t OrangeTeamColorID = 0x0114;
			constexpr uintptr_t CustomColorID = 0x0118;
		}

		namespace ProductAsset_ESportsTeam_TA {
			constexpr uintptr_t TeamName = 0x0100;
			constexpr uintptr_t TeamLogo = 0x0108;
		}

		namespace ProductAsset_EngineAudio_TA {
			constexpr uintptr_t EngineSound = 0x0100;
			constexpr uintptr_t ExhaustSound = 0x0108;
			constexpr uintptr_t IgnitionSound = 0x0110;
			constexpr uintptr_t BlowoffSound = 0x0118;
			constexpr uintptr_t ThrottleEngageSound = 0x0120;
			constexpr uintptr_t ThrottleReleaseSound = 0x0128;
			constexpr uintptr_t GearChangeSound = 0x0130;
			constexpr uintptr_t Profile = 0x0138;
		}

		namespace ProductAsset_GoalExplosion_TA {
			constexpr uintptr_t GoalExplosionFX = 0x0100;
			constexpr uintptr_t PaintedGoalExplosionFX = 0x0108;
			constexpr uintptr_t ExplosionComponents = 0x0110;
			constexpr uintptr_t bUseOverrideGoalOrientations = 0x0120;
			constexpr uintptr_t IgnoredRotations = 0x0124;
		}

		namespace ProductAsset_Logo_TA {
			constexpr uintptr_t Texture = 0x0100;
			constexpr uintptr_t TeamColor = 0x0108;
			constexpr uintptr_t CustomColor = 0x0118;
			constexpr uintptr_t Bots2 = 0x0128;
		}

		namespace ProductAsset_MusicStingers_TA {
			constexpr uintptr_t GoalScoredStinger = 0x0100;
			constexpr uintptr_t EpicSaveStinger = 0x0108;
			constexpr uintptr_t MVPAnthem = 0x0110;
			constexpr uintptr_t bIsMusic = 0x0118;
		}

		namespace ProductAsset_PaintFinish_TA {
			constexpr uintptr_t LightCurveType = 0x0100;
			constexpr uintptr_t DetailNormal = 0x0108;
			constexpr uintptr_t SpecularTint = 0x0110;
			constexpr uintptr_t RimLightTint = 0x0114;
			constexpr uintptr_t DiffuseDetailNormalStrength = 0x0118;
			constexpr uintptr_t SpecularDetailNormalStrength = 0x011C;
			constexpr uintptr_t SpecularStrength = 0x0120;
			constexpr uintptr_t EnvironmentStrength = 0x0124;
			constexpr uintptr_t SparkleStrength = 0x0128;
			constexpr uintptr_t PearlescentStrength = 0x012C;
			constexpr uintptr_t TextureParameterValues = 0x0130;
			constexpr uintptr_t ScalarParameterValues = 0x0140;
			constexpr uintptr_t VectorParameterValues = 0x0150;
		}

		namespace ProductAsset_PlayerVanity_TA {
			constexpr uintptr_t MovieReference = 0x0100;
			constexpr uintptr_t ToPlayer = 0x0108;
			constexpr uintptr_t PaintableLayer = 0x0110;
			constexpr uintptr_t TintableLayer = 0x0118;
			constexpr uintptr_t DefaultPaintColor = 0x0120;
		}

		namespace ProductAsset_ShopItem_TA {
			constexpr uintptr_t BackgroundImage = 0x0100;
			constexpr uintptr_t ItemLogo = 0x0108;
		}

		namespace ProductAsset_Skin_TA {
			constexpr uintptr_t Skin = 0x0100;
			constexpr uintptr_t BodySettings = 0x0108;
			constexpr uintptr_t BodyChassisOverrides = 0x0118;
			constexpr uintptr_t Attachments = 0x0128;
			constexpr uintptr_t SkinType = 0x0138;
			constexpr uintptr_t ThumbnailTeamColor = 0x013C;
			constexpr uintptr_t ThumbnailCustomColor = 0x014C;
			constexpr uintptr_t Bitfields_0x015C = 0x015C;  // Multiple: bTeamFinishDisabled, bCustomFinishDisabled
			constexpr uintptr_t TeamFinishToApply = 0x0160;
			constexpr uintptr_t CustomFinishToApply = 0x0198;
			constexpr uintptr_t ForcedTeamColors = 0x01D0;
			constexpr uintptr_t ForcedCustomColor = 0x01F0;
		}

		namespace ProductAsset_SupersonicTrail_TA {
			constexpr uintptr_t FXActor = 0x0100;
			constexpr uintptr_t LeftFXActor = 0x0108;
			constexpr uintptr_t RightFXActor = 0x0110;
			constexpr uintptr_t AkEnterSound = 0x0118;
			constexpr uintptr_t AkLoopSound = 0x0120;
		}

		namespace ProductAsset_TA {
			constexpr uintptr_t Product = 0x0060;
			constexpr uintptr_t Thumbnail = 0x0068;
			constexpr uintptr_t ThumbnailRenderer = 0x0070;
			constexpr uintptr_t ThumbnailMaterial = 0x0078;
			constexpr uintptr_t ThumbnailKeyLightBrightnessScale = 0x0080;
			constexpr uintptr_t ThumbnailCameraTranslationOffset = 0x0084;
			constexpr uintptr_t ThumbnailCameraRotationOffset = 0x0090;
			constexpr uintptr_t ThumbnailCameraFOV = 0x009C;
			constexpr uintptr_t ThumbnailProductRotation = 0x00A0;
			constexpr uintptr_t ThumbnailProductTranslationOffset = 0x00AC;
			constexpr uintptr_t ThumbnailProductDrawScale3D = 0x00B8;
			constexpr uintptr_t ParticleWarmupTime = 0x00C4;
			constexpr uintptr_t AnimationWarmupTime = 0x00C8;
			constexpr uintptr_t ParticleFakeVelocity = 0x00CC;
			constexpr uintptr_t SkeletalMeshAnimationOffset = 0x00D8;
			constexpr uintptr_t Bitfields_0x00E4 = 0x00E4;  // Multiple: bForceRebuildThumbnail, bPreviewDynamicThumbnail, bServerSideOnlyWasSetInitially
			constexpr uintptr_t PaintToTest = 0x00E8;
			constexpr uintptr_t Attributes = 0x00F0;
		}

		namespace ProductAsset_Wheel_TA {
			constexpr uintptr_t MeshRadius = 0x0100;
			constexpr uintptr_t MeshWidth = 0x0104;
			constexpr uintptr_t Generator = 0x0108;
			constexpr uintptr_t PrevGenerator = 0x0110;
			constexpr uintptr_t CustomWheelDriveSound = 0x0118;
			constexpr uintptr_t CustomWheelImpactSound = 0x0120;
			constexpr uintptr_t MirrorMode = 0x0128;
			constexpr uintptr_t StaticMesh = 0x0130;
			constexpr uintptr_t RearStaticMesh = 0x0138;
			constexpr uintptr_t SkeletalMesh = 0x0140;
			constexpr uintptr_t RearSkeletalMesh = 0x0148;
			constexpr uintptr_t AnimTree = 0x0150;
			constexpr uintptr_t LeftAnimTree = 0x0158;
			constexpr uintptr_t Behaviors = 0x0160;
			constexpr uintptr_t Attachment = 0x0170;
			constexpr uintptr_t Attachments = 0x01A0;
		}

		namespace ProductAttribute_AnimatedSkinLabel_TA {
			constexpr uintptr_t AnimatedLabel = 0x0080;
		}

		namespace ProductAttribute_BlueprintCost_TA {
			constexpr uintptr_t Cost = 0x0080;
		}

		namespace ProductAttribute_Blueprint_TA {
			constexpr uintptr_t ProductID = 0x0080;
			constexpr uintptr_t CachedBlueprintSeriesID = 0x0084;
		}

		namespace ProductAttribute_BodyCompatibility_TA {
			constexpr uintptr_t CompatibleBodies = 0x0080;
		}

		namespace ProductAttribute_Certified_TA {
			constexpr uintptr_t ValueKeyName = 0x0080;
			constexpr uintptr_t CertifiedStat = 0x0088;
			constexpr uintptr_t StatId = 0x0090;
			constexpr uintptr_t StatValue = 0x0094;
		}

		namespace ProductAttribute_CompatibleProducts_TA {
			constexpr uintptr_t VfTable_IICanEquip_TA = 0x0080;
			constexpr uintptr_t CompatibleProducts = 0x0088;
		}

		namespace ProductAttribute_Container_TA {
			constexpr uintptr_t Bitfields_0x0080 = 0x0080;  // Multiple: bUnlocked, bSkipRoulette, bGiftbox
		}

		namespace ProductAttribute_Currency_TA {
			constexpr uintptr_t CurrencyID = 0x0080;
		}

		namespace ProductAttribute_DisplayLabelSlot_TA {
			constexpr uintptr_t DisplayLabelSlot = 0x0080;
		}

		namespace ProductAttribute_EquippableSlot_TA {
			constexpr uintptr_t Slot = 0x0080;
		}

		namespace ProductAttribute_Expiration_TA {
			constexpr uintptr_t ExpirationTime = 0x0080;
		}

		namespace ProductAttribute_Indestructible_TA {
			constexpr uintptr_t bIndestructible = 0x0080;
		}

		namespace ProductAttribute_InheritCarSetting_TA {
			constexpr uintptr_t Parameters = 0x0080;
		}

		namespace ProductAttribute_Key_TA {
			constexpr uintptr_t bMagicKey = 0x0080;
		}

		namespace ProductAttribute_LevelSettings_TA {
			constexpr uintptr_t Levels = 0x0080;
		}

		namespace ProductAttribute_Level_TA {
			constexpr uintptr_t Level = 0x0080;
		}

		namespace ProductAttribute_LicenseGroup_TA {
			constexpr uintptr_t Group = 0x0080;
			constexpr uintptr_t bRequireSameLicenseGroupOnBody = 0x0084;
		}

		namespace ProductAttribute_Licensed_TA {
			constexpr uintptr_t ReplacementProduct = 0x0080;
		}

		namespace ProductAttribute_MapProductAssetOverride_TA {
			constexpr uintptr_t MapSetsToUseDefaultProduct = 0x0060;
			constexpr uintptr_t GameTypesToUseDefaultProduct = 0x0070;
		}

		namespace ProductAttribute_ModifyTransformationPerBody_TA {
			constexpr uintptr_t LocationToAdd = 0x0080;
			constexpr uintptr_t RotationToAdd = 0x008C;
			constexpr uintptr_t ScaleToAdd = 0x0098;
			constexpr uintptr_t BodiesToApplyTo = 0x00A8;
		}

		namespace ProductAttribute_PaintSettingsUpload_TA {
			constexpr uintptr_t ExcludePaints = 0x0080;
			constexpr uintptr_t ShopExclusivePaints = 0x0090;
		}

		namespace ProductAttribute_PaintSettings_TA {
			constexpr uintptr_t MaterialGroups = 0x0060;
			constexpr uintptr_t Bitfields_0x0080 = 0x0080;  // Multiple: bPaintParticles, bPaintBody, bGammaCorrect
			constexpr uintptr_t PaintParameterName = 0x0084;
			constexpr uintptr_t PaintType = 0x008C;
			constexpr uintptr_t PaintAdditionalParameters = 0x0090;
			constexpr uintptr_t PaintEmissiveMultiplier = 0x00A0;
			constexpr uintptr_t PaintableMaterials = 0x00A8;
			constexpr uintptr_t PaintableMaterialsMetallic = 0x00B8;
			constexpr uintptr_t IncludePaints = 0x00C8;
			constexpr uintptr_t ExcludePaints = 0x00D8;
			constexpr uintptr_t UnsupportedPaints = 0x00E8;
			constexpr uintptr_t ShopExclusivePaints = 0x00F8;
			constexpr uintptr_t PaintsToOverride = 0x0108;
		}

		namespace ProductAttribute_Painted_TA {
			constexpr uintptr_t PaintID = 0x0080;
		}

		namespace ProductAttribute_PlatformExclusive_TA {
			constexpr uintptr_t InclusiveConsoles = 0x0080;
			constexpr uintptr_t ReplacementProduct = 0x0090;
		}

		namespace ProductAttribute_PreviewWheelSpin_TA {
			constexpr uintptr_t PreviewFrontWheelSpinSpeed = 0x0080;
			constexpr uintptr_t PreviewBackWheelSpinSpeed = 0x0084;
		}

		namespace ProductAttribute_ProductLink_TA {
			constexpr uintptr_t ProductID = 0x0080;
		}

		namespace ProductAttribute_QualityProductDBOverride_TA {
			constexpr uintptr_t QualityOverride = 0x0080;
		}

		namespace ProductAttribute_Quality_TA {
			constexpr uintptr_t Quality = 0x0080;
		}

		namespace ProductAttribute_Reactive_TA {
			constexpr uintptr_t ReactiveLabelKey = 0x0080;
			constexpr uintptr_t bHasReactivePreview = 0x0090;
		}

		namespace ProductAttribute_RelatedRequiredProduct_TA {
			constexpr uintptr_t RelatedRequiredProduct = 0x0080;
		}

		namespace ProductAttribute_Rental_TA {
			constexpr uintptr_t RentalLength = 0x0080;
		}

		namespace ProductAttribute_RequiresOwnedProduct_TA {
			constexpr uintptr_t Products = 0x0080;
		}

		namespace ProductAttribute_SetPreviewObjectSpeedShaderParam_TA {
			constexpr uintptr_t PreviewSpeedToUse = 0x0080;
		}

		namespace ProductAttribute_ShopItem_TA {
			constexpr uintptr_t ShopItemReference = 0x0080;
		}

		namespace ProductAttribute_SortingLabel_TA {
			constexpr uintptr_t LocalizationKey = 0x0080;
			constexpr uintptr_t ReplacementKey = 0x0090;
			constexpr uintptr_t ReplacementValue = 0x00A0;
			constexpr uintptr_t SortingLabel = 0x00B0;
			constexpr uintptr_t MaxReplacementSize = 0x00C0;
		}

		namespace ProductAttribute_SpecialEditionLabel_TA {
			constexpr uintptr_t SpecialEdition = 0x0080;
			constexpr uintptr_t CustomLabel = 0x0088;
		}

		namespace ProductAttribute_SpecialEditionSettings_TA {
			constexpr uintptr_t Editions = 0x0080;
			constexpr uintptr_t SupportedEditions = 0x0090;
		}

		namespace ProductAttribute_SpecialEdition_TA {
			constexpr uintptr_t EditionID = 0x0080;
		}

		namespace ProductAttribute_SwapMICParameterValues_TA {
			constexpr uintptr_t Parameters = 0x0080;
		}

		namespace ProductAttribute_TA {
			constexpr uintptr_t Typename = 0x0060;
			constexpr uintptr_t Bitfields_0x0068 = 0x0068;  // Multiple: bReplicated, bRequiresDynamicThumbnail, bDummyAttribute
			constexpr uintptr_t Label = 0x0070;
		}

		namespace ProductAttribute_TeamEditionUpload_TA {
			constexpr uintptr_t SupportedTeamEditions = 0x0080;
		}

		namespace ProductAttribute_TeamEdition_TA {
			constexpr uintptr_t Id = 0x0080;
		}

		namespace ProductAttribute_TeamForcedProduct_TA {
			constexpr uintptr_t Teams = 0x0080;
		}

		namespace ProductAttribute_TeamOverride_TA {
			constexpr uintptr_t Team = 0x0080;
			constexpr uintptr_t AssetName = 0x0084;
		}

		namespace ProductAttribute_TeamParameterOverride_TA {
			constexpr uintptr_t Team = 0x0080;
		}

		namespace ProductAttribute_Tiered_TA {
			constexpr uintptr_t TierIndex = 0x0080;
		}

		namespace ProductAttribute_TitleID_TA {
			constexpr uintptr_t TitleId = 0x0080;
		}

		namespace ProductAttribute_Trademark_TA {
			constexpr uintptr_t Glyph = 0x0080;
		}

		namespace ProductAttribute_UnlockForcedProducts_TA {
			constexpr uintptr_t Bitfields_0x0080 = 0x0080;  // Multiple: bUnlockTeamColor, bUnlockCustomColor
			constexpr uintptr_t SlotsToUnlock = 0x0088;
		}

		namespace ProductAttribute_UnlockMethod_TA {
			constexpr uintptr_t UnlockMethod = 0x0080;
		}

		namespace ProductAttribute_UserColor_TA {
			constexpr uintptr_t ColorValue = 0x0080;
		}

		namespace ProductAttribute_UserColorable_TA {
			constexpr uintptr_t DefaultColor = 0x0080;
		}

		namespace ProductBuilder_TA {
			constexpr uintptr_t ProductIndex = 0x0060;
		}

		namespace ProductDatabase_Builder_TA {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: bPrime, bClickToBuildMarked
		}

		namespace ProductDatabase_TA {
			constexpr uintptr_t Products_New = 0x0060;
			constexpr uintptr_t Products_Pristine = 0x0070;
			constexpr uintptr_t DLCPacks = 0x0080;
			constexpr uintptr_t DLCPacks_Pristine = 0x0090;
			constexpr uintptr_t AlwaysLoadedAssets = 0x00A0;
			constexpr uintptr_t BodyToEngineAudioMap = 0x00B0;
			constexpr uintptr_t BodyToEngineAudioMap_Pristine = 0x00C0;
			constexpr uintptr_t GarageFolderInfo = 0x00D0;
			constexpr uintptr_t ProductNameToProductID = 0x0130;
			constexpr uintptr_t ProductNameToProductID_Pristine = 0x0180;
			constexpr uintptr_t DuplicateToAssetSourceMap = 0x01D0;
			constexpr uintptr_t TemporaryProducts = 0x0220;
			constexpr uintptr_t bUseQualityToCheckForOnlineProduct = 0x0230;
		}

		namespace ProductEquipProfileSlot_Custom_TA {
			constexpr uintptr_t SlotCustomization = 0x0060;
			constexpr uintptr_t WhitelistProducts = 0x0068;
			constexpr uintptr_t BlacklistProducts = 0x0078;
			constexpr uintptr_t bUseWhitelistAsDefault = 0x0088;
		}

		namespace ProductEquipProfileSlot_ForcedProduct_TA {
			constexpr uintptr_t ForcedProduct = 0x0060;
		}

		namespace ProductEquipProfile_TA {
			constexpr uintptr_t Skin = 0x0060;
			constexpr uintptr_t Wheel = 0x0068;
			constexpr uintptr_t Boost = 0x0070;
			constexpr uintptr_t Antenna = 0x0078;
			constexpr uintptr_t Hat = 0x0080;
			constexpr uintptr_t PaintFinish = 0x0088;
			constexpr uintptr_t CustomFinish = 0x0090;
			constexpr uintptr_t EngineAudio = 0x0098;
			constexpr uintptr_t SupersonicTrail = 0x00A0;
			constexpr uintptr_t GoalExplosion = 0x00A8;
			constexpr uintptr_t PostMatchCelebration = 0x00B0;
			constexpr uintptr_t LicenseWhitelist = 0x00B8;
			constexpr uintptr_t LicenseBlacklist = 0x00C8;
			constexpr uintptr_t bWhitelistAll = 0x00D8;
			constexpr uintptr_t AllSlots = 0x00E0;
		}

		namespace ProductExpirationNotification_TA {
			constexpr uintptr_t HashID = 0x0170;
			constexpr uintptr_t ExpiredTitle = 0x0178;
			constexpr uintptr_t ExpiredBody = 0x0188;
			constexpr uintptr_t OnlineProduct = 0x0198;
		}

		namespace ProductLoader_TA {
			constexpr uintptr_t RemainingProducts = 0x0070;
			constexpr uintptr_t Assets = 0x0080;
		}

		namespace ProductOverride_DisableSkelControl_TA {
			constexpr uintptr_t SkelControlToDisable = 0x0060;
		}

		namespace ProductOverride_MaterialParameter_TA {
			constexpr uintptr_t CopyFromMIC = 0x0060;
			constexpr uintptr_t MaterialName = 0x0068;
			constexpr uintptr_t FontParameterValues = 0x0070;
			constexpr uintptr_t ScalarParameterValues = 0x0080;
			constexpr uintptr_t TextureParameterValues = 0x0090;
			constexpr uintptr_t VectorParameterValues = 0x00A0;
		}

		namespace ProductOverride_Materials_TA {
			constexpr uintptr_t Materials = 0x0060;
		}

		namespace ProductOverride_ParticleSystemColorParameter_TA {
			constexpr uintptr_t ParameterOverrides = 0x0060;
			constexpr uintptr_t bUseParentEmissiveMultiplier = 0x0070;
			constexpr uintptr_t PaintEmissiveMultiplier = 0x0074;
		}

		namespace ProductOverride_ParticleSystemComponent_TA {
			constexpr uintptr_t ParticleSystem = 0x0060;
		}

		namespace ProductOverride_ParticleSystemFloatParameter_TA {
			constexpr uintptr_t ParameterOverrides = 0x0060;
			constexpr uintptr_t FloatParameter = 0x0070;
		}

		namespace ProductOverride_ParticleSystemNameParameter_TA {
			constexpr uintptr_t ParameterOverrides = 0x0060;
			constexpr uintptr_t NameParameter = 0x0070;
		}

		namespace ProductOverride_ParticleSystemVectorParameter_TA {
			constexpr uintptr_t ParameterOverrides = 0x0060;
			constexpr uintptr_t VectorParameter = 0x0070;
		}

		namespace ProductOverride_SkeletalMesh_TA {
			constexpr uintptr_t Mesh = 0x0060;
		}

		namespace ProductOverride_SpecificMaterials_TA {
			constexpr uintptr_t MaterialOverrides = 0x0060;
		}

		namespace ProductOverride_StaticMesh_TA {
			constexpr uintptr_t Mesh = 0x0060;
		}

		namespace ProductOverride_StopAttachmentBehaviors_TA {
			constexpr uintptr_t BehaviorsToZeroOut = 0x0060;
		}

		namespace ProductOverride_WheelAttachment_TA {
			constexpr uintptr_t AttachmentsToOverride = 0x0060;
		}

		namespace ProductOverride_WheelOverrides_TA {
			constexpr uintptr_t WheelsToChange = 0x0060;
			constexpr uintptr_t OverridesToApply = 0x0070;
		}

		namespace ProductPaint_TA {
			constexpr uintptr_t Label = 0x0060;
			constexpr uintptr_t Colors = 0x0070;
			constexpr uintptr_t FinishType = 0x0130;
			constexpr uintptr_t EmissiveAmount = 0x0134;
			constexpr uintptr_t EmissiveParameterName = 0x0138;
			constexpr uintptr_t Bitfields_0x0140 = 0x0140;  // Multiple: bVisible, bIncludeByDefault
		}

		namespace ProductSlot_TA {
			constexpr uintptr_t Label = 0x0060;
			constexpr uintptr_t PluralLabel = 0x0070;
			constexpr uintptr_t Description = 0x0080;
			constexpr uintptr_t OnlineLabel = 0x0090;
			constexpr uintptr_t SlotIndex = 0x00A0;
			constexpr uintptr_t DefaultProduct_New = 0x00A8;
			constexpr uintptr_t ProductTemplate = 0x00B0;
			constexpr uintptr_t ProductAssetTemplate = 0x00B8;
			constexpr uintptr_t Icon = 0x00C0;
			constexpr uintptr_t IconLarge = 0x00C8;
			constexpr uintptr_t Bitfields_0x00D0 = 0x00D0;  // Multiple: bReplicated, bAlwaysCooked, bDedicatedServerRelevant, bAlwaysLoaded, bDefaultProductAlwaysLoaded, bAllowLicensedEquip
			constexpr uintptr_t DropWeight = 0x00D4;
		}

		namespace ProductSpecialEdition_TA {
			constexpr uintptr_t Label = 0x0060;
		}

		namespace ProductStat_BoostTime_TA {
			constexpr uintptr_t BoostComponent = 0x00B0;
			constexpr uintptr_t BoostStartTime = 0x00B8;
			constexpr uintptr_t LeftoverTime = 0x00BC;
		}

		namespace ProductStat_DistanceDriven_TA {
			constexpr uintptr_t OldLocation = 0x00B0;
		}

		namespace ProductStat_TA {
			constexpr uintptr_t Label = 0x0060;
			constexpr uintptr_t Description = 0x0070;
			constexpr uintptr_t PRI = 0x0080;
			constexpr uintptr_t ProductID = 0x0088;
			constexpr uintptr_t Car = 0x0090;
			constexpr uintptr_t GameEvent = 0x0098;
			constexpr uintptr_t SoccarGame = 0x00A0;
			constexpr uintptr_t Value = 0x00A8;
			constexpr uintptr_t bOnlyMinorUnitsInMetricDistanceStrings = 0x00AC;
		}

		namespace ProductTemplate_TA {
			constexpr uintptr_t Slot = 0x0060;
			constexpr uintptr_t UnlockMethod = 0x0068;
			constexpr uintptr_t Quality = 0x0069;
			constexpr uintptr_t BaseXEStatus = 0x006A;
			constexpr uintptr_t Folder = 0x0070;
			constexpr uintptr_t DLC = 0x0078;
			constexpr uintptr_t StatClass = 0x0080;
			constexpr uintptr_t RequiredProduct = 0x0088;
			constexpr uintptr_t ProductIP = 0x0090;
			constexpr uintptr_t AllowedList = 0x00A0;
			constexpr uintptr_t Bitfields_0x00B0 = 0x00B0;  // Multiple: bWhitelistAll, bLocalized, bAutoGenerateDLCPack, bLicensed
			constexpr uintptr_t IPWhitelist = 0x00B8;
			constexpr uintptr_t IPBlacklist = 0x00C8;
			constexpr uintptr_t PlatformReplacement = 0x00D8;
			constexpr uintptr_t PlatformExclusive = 0x00F0;
			constexpr uintptr_t TradeRestrictions = 0x0100;
			constexpr uintptr_t Attributes = 0x0110;
			constexpr uintptr_t XELabelKey = 0x0120;
			constexpr uintptr_t SortPriority = 0x0130;
		}

		namespace ProductThumbnailAsset_Blueprint_TA {
			constexpr uintptr_t RevealedThumbnail = 0x0078;
		}

		namespace ProductThumbnailAsset_TA {
			constexpr uintptr_t Thumbnail = 0x0060;
			constexpr uintptr_t ColorMaskBackground = 0x0068;
			constexpr uintptr_t ThumbnailColorMask = 0x0070;
		}

		namespace ProductThumbnailQueue_TA {
			constexpr uintptr_t VfTable_FTickableObject = 0x0060;
			constexpr uintptr_t ThumbnailSizes = 0x0068;
			constexpr uintptr_t RenderDelay = 0x0078;
			constexpr uintptr_t RenderCountMax = 0x007C;
			constexpr uintptr_t Bitfields_0x0080 = 0x0080;  // Multiple: bDebug, bCreatedThumbnailScene
			constexpr uintptr_t SceneQue = 0x0088;
			constexpr uintptr_t Requests = 0x0098;
			constexpr uintptr_t ThumbnailsCreatedSinceLastPurge = 0x00A8;
		}

		namespace ProductThumbnail_TA {
			constexpr uintptr_t Texture = 0x0060;
			constexpr uintptr_t RenderTarget = 0x0068;
			constexpr uintptr_t RenderCount = 0x0070;
			constexpr uintptr_t LastRenderTime = 0x0078;
		}

		namespace ProductTransactions_TA {
			constexpr uintptr_t InventoryProductSet = 0x0070;
			constexpr uintptr_t TransactionProductSet = 0x0078;
		}

		namespace Product_TA {
			constexpr uintptr_t AssetPackageName = 0x0138;
			constexpr uintptr_t AssetPath = 0x0140;
			constexpr uintptr_t Bitfields_0x0150 = 0x0150;  // Multiple: bReplaced, bPack
			constexpr uintptr_t Label = 0x0158;
			constexpr uintptr_t AsciiLabel = 0x0168;
			constexpr uintptr_t LongLabel = 0x0178;
			constexpr uintptr_t ShortAsciiLabel = 0x0188;
		}

		namespace ProductsArchiveSave_TA {
			constexpr uintptr_t ArchivedHashIDs = 0x0110;
		}

		namespace ProductsConfig_TA {
			constexpr uintptr_t ProhibitedProducts = 0x0078;
			constexpr uintptr_t ItemSeries_PreventP2PTrade = 0x0088;
			constexpr uintptr_t ProductTradeHoldOverrides = 0x0098;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bUseSaveDataCacheProducts, bClearSyncTimestampOnMissingProduct
			constexpr uintptr_t MaxSecondsBetweenFullProductSyncs = 0x00AC;
		}

		namespace ProductsFavoriteSave_TA {
			constexpr uintptr_t FavoritedHashes = 0x0110;
		}

		namespace ProductsHashSave_TA {
			constexpr uintptr_t HashIDs = 0x00C8;
			constexpr uintptr_t InstanceIDs = 0x00D8;
			constexpr uintptr_t InstanceIDs128 = 0x00E8;
		}

		namespace ProductsSave_TA {
			constexpr uintptr_t OnlineProductInstanceIds = 0x00C8;
			constexpr uintptr_t NewProductIDs = 0x00D8;
			constexpr uintptr_t UnseenContainerProducts = 0x00E8;
			constexpr uintptr_t LastUnlockDisplayId = 0x00F8;
			constexpr uintptr_t OnlineProductInstanceIDs128 = 0x0100;
			constexpr uintptr_t NewProductIDs128 = 0x0110;
			constexpr uintptr_t UnseenContainerProducts128 = 0x0120;
			constexpr uintptr_t LastUnlockDisplayId128 = 0x0130;
			constexpr uintptr_t PreviousKeyCount = 0x0140;
			constexpr uintptr_t PreviousDecryptorCount = 0x0144;
			constexpr uintptr_t bHasUnseenGiftboxes = 0x0148;
		}

		namespace ProfileCameraSave_TA {
			constexpr uintptr_t AutoCam = 0x00C8;
			constexpr uintptr_t Camera = 0x00F0;
			constexpr uintptr_t Bitfields_0x010C = 0x010C;  // Multiple: bInvertSwivelPitch, bInvertSpectatorPitch, bLockSpectatorBallCam, bFreecam, bPrefersSecondaryCamera, bToggleSecondaryCamera, bToggleRearCamera, bUseBallIndicator, bUseBallCamIndicator, bEnableCameraShake, bDirectorAllowCameraBlending
			constexpr uintptr_t CameraSettingsPreset = 0x0110;
			constexpr uintptr_t DirectorMinChangeTeamFocusTime = 0x0114;
			constexpr uintptr_t DirectorMinSameTeamFocusTime = 0x0118;
			constexpr uintptr_t MaxProximityDistance = 0x011C;
			constexpr uintptr_t PrespawnLerpSpeed = 0x0120;
		}

		namespace ProfileControlsSave_TA {
			constexpr uintptr_t WaveformScalar = 0x00C8;
			constexpr uintptr_t ForceFeedbackType = 0x00CC;
			constexpr uintptr_t ForceFeedbackMode = 0x00CD;
			constexpr uintptr_t TargetCamSwivelMode = 0x00CE;
			constexpr uintptr_t LegacyForceFeedbackScales = 0x00D0;
			constexpr uintptr_t ForceFeedbackScale = 0x00E8;
			constexpr uintptr_t bPushToTalk = 0x00EC;
			constexpr uintptr_t ControlPresetName = 0x00F0;
		}

		namespace ProfileGamepadSave_TA {
			constexpr uintptr_t GamepadBindings = 0x00C8;
			constexpr uintptr_t ControllerDeadzone = 0x00D8;
			constexpr uintptr_t DodgeInputThreshold = 0x00DC;
			constexpr uintptr_t SteeringSensitivity = 0x00E0;
			constexpr uintptr_t AirControlSensitivity = 0x00E4;
		}

		namespace ProfileGameplaySave_TA {
			constexpr uintptr_t Bitfields_0x00C8 = 0x00C8;  // Multiple: bMetric, bTeamColoredBoostMeter, bDisableDivisions, bDisableDivisionsSports
			constexpr uintptr_t HUDMessageThreshold = 0x00CC;
			constexpr uintptr_t RankInfoDisplayType = 0x00CD;
			constexpr uintptr_t NameplateMode = 0x00CE;
		}

		namespace ProfileLoadoutSave_TA {
			constexpr uintptr_t LoadoutSets = 0x00C8;
			constexpr uintptr_t EquippedLoadoutSet = 0x00D8;
			constexpr uintptr_t PlayerTitle = 0x00E0;
			constexpr uintptr_t PreviewTeamIndex = 0x00E8;
			constexpr uintptr_t MusicStingerInstanceID = 0x00F0;
		}

		namespace ProfilePCSave_TA {
			constexpr uintptr_t PCBindings = 0x00C8;
			constexpr uintptr_t MouseSensitivity = 0x00D8;
			constexpr uintptr_t MouseXDeadZone = 0x00DC;
			constexpr uintptr_t MouseYDeadZone = 0x00E0;
			constexpr uintptr_t MouseXDeadZoneAir = 0x00E4;
			constexpr uintptr_t MouseYDeadZoneAir = 0x00E8;
			constexpr uintptr_t KeyboardAxisBlendTime = 0x00EC;
			constexpr uintptr_t bAirPitchSafetyEnabled = 0x00F0;
		}

		namespace ProfileQuickChatSave_TA {
			constexpr uintptr_t QuickChatBindings = 0x00C8;
		}

		namespace ProfileStatsSave_TA {
			constexpr uintptr_t StatValues = 0x00C8;
			constexpr uintptr_t ProductStats = 0x00D8;
		}

		namespace Profile_TA {
			constexpr uintptr_t LocalId = 0x0060;
			constexpr uintptr_t ProfileName = 0x0068;
			constexpr uintptr_t SaveData = 0x0078;
			constexpr uintptr_t ControllerId = 0x0080;
			constexpr uintptr_t bShouldRandomizeLoadoutEachGame = 0x0084;
			constexpr uintptr_t ProfileVersion = 0x0088;
			constexpr uintptr_t EditLoadoutSetIndex = 0x008C;
			constexpr uintptr_t SaveObjectProvider = 0x0090;
			constexpr uintptr_t SaveObjects = 0x0098;
			constexpr uintptr_t LoadoutSave = 0x00A8;
		}

		namespace PsyNetService_AutoTourCompletedResultReceived_TA {
			constexpr uintptr_t EndOfTournamentData = 0x0090;
		}

		namespace PsyNetService_AutoTourFound_TA {
			constexpr uintptr_t Tournament = 0x0090;
			constexpr uintptr_t Team = 0x0098;
		}

		namespace PsyNetService_AutoTourReceiveBan_TA {
			constexpr uintptr_t AutoTournamentBanSeconds = 0x0090;
			constexpr uintptr_t MatchmakingBanSeconds = 0x0094;
		}

		namespace PsyNetService_AutoTourReceiveBannedPartyMembers_TA {
			constexpr uintptr_t BannedTeamMembers = 0x0090;
		}

		namespace PsyNetService_ChallengeDefault_TA {
			constexpr uintptr_t Folders = 0x0090;
			constexpr uintptr_t Challenges = 0x00A0;
			constexpr uintptr_t ChallengeIDsToRemove = 0x00B0;
		}

		namespace PsyNetService_ChallengeProgress_TA {
			constexpr uintptr_t Challenges = 0x0090;
		}

		namespace PsyNetService_ClubsRewardsReceived_TA {
			constexpr uintptr_t Badges = 0x0090;
			constexpr uintptr_t Titles = 0x00A0;
		}

		namespace PsyNetService_ClubsUpdate_TA {
			constexpr uintptr_t ClubDetails = 0x0090;
		}

		namespace PsyNetService_CreateExternalMatch_X {
			constexpr uintptr_t Playlist = 0x00B0;
			constexpr uintptr_t Settings = 0x00B8;
			constexpr uintptr_t MatchInfo = 0x01A0;
		}

		namespace PsyNetService_CreateTournament_X {
			constexpr uintptr_t Playlist = 0x00B0;
			constexpr uintptr_t Settings = 0x00B8;
		}

		namespace PsyNetService_CurrencyAdded_TA {
			constexpr uintptr_t CurrencyID = 0x0090;
			constexpr uintptr_t Amount = 0x0094;
		}

		namespace PsyNetService_FaceItMatchCancelled_TA {
			constexpr uintptr_t MatchID = 0x0090;
		}

		namespace PsyNetService_FaceItMatchComplete_TA {
			constexpr uintptr_t MatchID = 0x0090;
		}

		namespace PsyNetService_FaceItReservationFound_TA {
			constexpr uintptr_t Reservation = 0x0090;
			constexpr uintptr_t MatchInfo = 0x0110;
		}

		namespace PsyNetService_FaceItSearchStarted_TA {
			constexpr uintptr_t PartnerID = 0x0090;
		}

		namespace PsyNetService_RewardDropReceived_TA {
			constexpr uintptr_t RocketPassInfo = 0x0090;
			constexpr uintptr_t ProductData = 0x00A0;
			constexpr uintptr_t RewardDrops = 0x00B0;
			constexpr uintptr_t ChallengeRewards = 0x00C0;
			constexpr uintptr_t CurrencyDrops = 0x00D0;
			constexpr uintptr_t Source = 0x00E0;
			constexpr uintptr_t MatchGUID = 0x00F0;
		}

		namespace PsyNetService_TourKicked_TA {
			constexpr uintptr_t TournamentID = 0x0090;
			constexpr uintptr_t Reason = 0x0098;
		}

		namespace PsyNetService_TourMatchFound_TA {
			constexpr uintptr_t Match = 0x0090;
		}

		namespace PsyNetService_TourReceivedBye_TA {
			constexpr uintptr_t TournamentID = 0x0090;
		}

		namespace PsyNetService_VoiceChatMatchToken_TA {
			constexpr uintptr_t PlayerID = 0x0090;
			constexpr uintptr_t RoomId = 0x00D8;
			constexpr uintptr_t BaseUrl = 0x00E8;
			constexpr uintptr_t Token = 0x00F8;
		}

		namespace Pylon_Soccar_TA {
			constexpr uintptr_t FieldOrientation = 0x04A8;
			constexpr uintptr_t FieldSize = 0x04B4;
			constexpr uintptr_t FieldExtent = 0x04C0;
			constexpr uintptr_t FieldCenter = 0x04CC;
			constexpr uintptr_t Goals = 0x04D8;
			constexpr uintptr_t SpawnPoints = 0x04E8;
			constexpr uintptr_t GroundZ = 0x04F8;
			constexpr uintptr_t PodiumSpotlightOverride = 0x04FC;
			constexpr uintptr_t PodiumSpotlightZ = 0x0508;
			constexpr uintptr_t bRandomBallSpawnPoint = 0x050C;
		}

		namespace QuickChatTracker_TA {
			constexpr uintptr_t GroupMessages = 0x00A0;
		}

		namespace RBActor_TA {
			constexpr uintptr_t VfTable_IITickNotify_TA = 0x0558;
			constexpr uintptr_t MaxLinearSpeed = 0x0560;
			constexpr uintptr_t MaxAngularSpeed = 0x0564;
			constexpr uintptr_t RollingFriction = 0x0568;
			constexpr uintptr_t Bitfields_0x056C = 0x056C;  // Multiple: bDisableSleeping, bReplayActor, bFrozen, bAutoInitFXEffects, bIgnoreSyncing, bPhysInitialized, bSkipNextErrorAccumulation
			constexpr uintptr_t NetworkSyncSettings = 0x0570;
			constexpr uintptr_t OldRBState = 0x0590;
			constexpr uintptr_t RBState = 0x05D0;
			constexpr uintptr_t ReplicatedRBState = 0x0610;
			constexpr uintptr_t ClientCorrectionRBState = 0x0650;
			constexpr uintptr_t WorldContact = 0x0690;
			constexpr uintptr_t SyncErrorLocation = 0x06B8;
			constexpr uintptr_t SyncErrorAngle = 0x06C4;
			constexpr uintptr_t SyncErrorAxis = 0x06C8;
			constexpr uintptr_t Ak = 0x06D8;
			constexpr uintptr_t FXActorArchetype = 0x06E0;
			constexpr uintptr_t FXActor = 0x06E8;
			constexpr uintptr_t ImpactEffectsComponent = 0x06F0;
			constexpr uintptr_t RBCollisions = 0x06F8;
			constexpr uintptr_t RBHistoryClass = 0x0708;
			constexpr uintptr_t RBHistory = 0x0710;
			constexpr uintptr_t LastRBCollisionsFrame = 0x0718;
			constexpr uintptr_t Replay = 0x0720;
			constexpr uintptr_t WeldedInfo = 0x0728;
			constexpr uintptr_t WeldedActor = 0x0750;
			constexpr uintptr_t WeldedTo = 0x0758;
			constexpr uintptr_t PreWeldMass = 0x0760;
			constexpr uintptr_t ReplicatedGravityScale = 0x0764;
			constexpr uintptr_t ReplicatedCollisionScale = 0x0768;
			constexpr uintptr_t Constraint2D = 0x0770;
			constexpr uintptr_t BulletRigidBody = 0x0778;
			constexpr uintptr_t PhysicsConfig = 0x0780;
			constexpr uintptr_t TeleportCounter = 0x0788;
		}

		namespace RBHistory_TA {
			constexpr uintptr_t FrameSnapshots = 0x0070;
			constexpr uintptr_t ServerSnapshots = 0x0080;
			constexpr uintptr_t RBPhysicsSnapshots = 0x0090;
		}

		namespace RBVehicleHistory_TA {
			constexpr uintptr_t InputFadeTime = 0x00A0;
			constexpr uintptr_t RBVehicleSnapshots = 0x00A8;
			constexpr uintptr_t ComponentHistories = 0x00B8;
			constexpr uintptr_t BackupVehicleInputs = 0x00C8;
		}

		namespace RLBot_SessionRecorder_TA {
			constexpr uintptr_t MaxRecordSizeMB = 0x0268;
			constexpr uintptr_t Data = 0x0270;
			constexpr uintptr_t Archive = 0x0280;
			constexpr uintptr_t PlayerActorIDMap = 0x0288;
		}

		namespace RLBot_Util_TA {
			constexpr uintptr_t ControllerURL = 0x0060;
			constexpr uintptr_t OutputFilePath = 0x0070;
			constexpr uintptr_t PacketSendRate = 0x0080;
			constexpr uintptr_t bRecordInput = 0x0084;
		}

		namespace RPC_AdsGet_TA {
			constexpr uintptr_t Language = 0x00E8;
			constexpr uintptr_t Ads = 0x00F8;
		}

		namespace RPC_AutoTour_GetCompletedResult_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t TournamentID = 0x0130;
			constexpr uintptr_t EndOfTournamentData = 0x0138;
		}

		namespace RPC_AutoTour_GetCycleData_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t CycleID = 0x0130;
			constexpr uintptr_t CycleEndTime = 0x0138;
			constexpr uintptr_t WeekID = 0x0140;
			constexpr uintptr_t WeekEndTime = 0x0148;
			constexpr uintptr_t WeeklyCurrencies = 0x0150;
			constexpr uintptr_t Weeks = 0x0160;
			constexpr uintptr_t MaxTierScores = 0x0170;
			constexpr uintptr_t TournamentCurrencyID = 0x0180;
		}

		namespace RPC_AutoTour_GetSchedule_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Region = 0x0130;
			constexpr uintptr_t Schedules = 0x0140;
		}

		namespace RPC_BanSelf_TA {
			constexpr uintptr_t DurationSeconds = 0x00E8;
			constexpr uintptr_t ReasonID = 0x00F0;
			constexpr uintptr_t BanType = 0x0100;
		}

		namespace RPC_BuildBlueprint_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t InstanceID = 0x0130;
			constexpr uintptr_t ExpectedPrice = 0x0140;
			constexpr uintptr_t ProductData = 0x0148;
			constexpr uintptr_t WalletCurrencies = 0x0188;
		}

		namespace RPC_Challenge_AvailableReceived_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Id = 0x0130;
		}

		namespace RPC_Challenge_ClearNewInfo_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t ChallengeIDs = 0x0130;
		}

		namespace RPC_Challenge_CompleteReceived_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Id = 0x0130;
		}

		namespace RPC_Challenge_FTECheckpointComplete_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t GroupName = 0x0130;
			constexpr uintptr_t CheckpointName = 0x0138;
		}

		namespace RPC_Challenge_FTEGroupComplete_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t GroupName = 0x0130;
		}

		namespace RPC_Challenge_RequestReward_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Id = 0x0130;
		}

		namespace RPC_Challenge_ResetAllProgress_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
		}

		namespace RPC_Challenge_ResetChallengeProgress_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t ChallengeID = 0x0130;
		}

		namespace RPC_Challenge_SetProgress_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t ChallengeID = 0x0130;
			constexpr uintptr_t Count = 0x0134;
		}

		namespace RPC_Challenge_TrainingComplete_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t TrainingType = 0x0130;
			constexpr uintptr_t Difficulty = 0x0140;
			constexpr uintptr_t Score = 0x0150;
			constexpr uintptr_t TotalRounds = 0x0154;
		}

		namespace RPC_Challenge_TutorialComplete_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t TutorialType = 0x0130;
		}

		namespace RPC_ChatLog_TA {
			constexpr uintptr_t Messages = 0x00E8;
			constexpr uintptr_t GameID = 0x00F8;
		}

		namespace RPC_DebugAddXP_TA {
			constexpr uintptr_t XPToAdd = 0x00E8;
			constexpr uintptr_t PlayerID = 0x00F0;
			constexpr uintptr_t XPInfoResponse = 0x0138;
		}

		namespace RPC_DebugSetXP_TA {
			constexpr uintptr_t XPToSet = 0x00E8;
			constexpr uintptr_t PlayerID = 0x00F0;
			constexpr uintptr_t XPInfoResponse = 0x0138;
		}

		namespace RPC_DebugUpdateClubStats_TA {
			constexpr uintptr_t ClubID = 0x00E8;
			constexpr uintptr_t Goal = 0x00F0;
			constexpr uintptr_t Save = 0x00F4;
			constexpr uintptr_t Assist = 0x00F8;
		}

		namespace RPC_FaceItFindMatchForPlayer_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
		}

		namespace RPC_FaceItMatchStarted_TA {
			constexpr uintptr_t MatchID = 0x00E8;
			constexpr uintptr_t MatchGUID = 0x00F0;
			constexpr uintptr_t ServerId = 0x0100;
			constexpr uintptr_t SeriesRoundNumber = 0x0110;
			constexpr uintptr_t Players = 0x0118;
		}

		namespace RPC_FaceItPlayerFailedJoin_TA {
			constexpr uintptr_t MatchID = 0x00E8;
			constexpr uintptr_t FailedJoinServerID = 0x00EC;
			constexpr uintptr_t FailReason = 0x00F0;
			constexpr uintptr_t ReservationData = 0x0100;
			constexpr uintptr_t MatchInfo = 0x0170;
			constexpr uintptr_t Expiration = 0x01F0;
		}

		namespace RPC_FaceItUpdateGame_TA {
			constexpr uintptr_t MatchID = 0x00E8;
			constexpr uintptr_t ServerId = 0x00F0;
			constexpr uintptr_t SeriesRoundNumber = 0x0100;
			constexpr uintptr_t GameData = 0x0108;
			constexpr uintptr_t SeriesWinner = 0x0120;
			constexpr uintptr_t PlayersStats = 0x0128;
			constexpr uintptr_t PlayersNoShow = 0x0138;
			constexpr uintptr_t PlayersLeftEarly = 0x0148;
		}

		namespace RPC_GetActivePlaylists_TA {
			constexpr uintptr_t CasualPlaylists = 0x00E8;
			constexpr uintptr_t RankedPlaylists = 0x00F8;
			constexpr uintptr_t XPLevelUnlocked = 0x0108;
			constexpr uintptr_t RankedUnlocked = 0x0110;
		}

		namespace RPC_GetAllShops_TA {
			constexpr uintptr_t Shops = 0x00E8;
		}

		namespace RPC_GetBanStatus_TA {
			constexpr uintptr_t Players = 0x00E8;
			constexpr uintptr_t BanMessages = 0x00F8;
		}

		namespace RPC_GetChallengeDefault_TA {
			constexpr uintptr_t Challenges = 0x00E8;
			constexpr uintptr_t Folders = 0x00F8;
		}

		namespace RPC_GetChallengeProgress_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t ChallengeIDs = 0x0130;
			constexpr uintptr_t ProgressData = 0x0140;
		}

		namespace RPC_GetCrateShop_TA {
			constexpr uintptr_t CrateID = 0x00E8;
			constexpr uintptr_t ShopItems = 0x00F0;
			constexpr uintptr_t ShopID = 0x0100;
		}

		namespace RPC_GetCrossEntitlementProducts_TA {
			constexpr uintptr_t CrossEntitledProductIDs = 0x00E8;
			constexpr uintptr_t LockedProductIDs = 0x00F8;
		}

		namespace RPC_GetItemShopNotifications_TA {
			constexpr uintptr_t ShopNotifications = 0x00E8;
		}

		namespace RPC_GetLegacyStatus_TA {
			constexpr uintptr_t LegacyStatus = 0x00E8;
			constexpr uintptr_t Products = 0x00F0;
			constexpr uintptr_t ProcessedLegacyStatus = 0x0100;
		}

		namespace RPC_GetMatchHistory_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Matches = 0x0130;
		}

		namespace RPC_GetPersonaInfo_TA {
			constexpr uintptr_t PlayerIds = 0x00E8;
			constexpr uintptr_t PlayerData = 0x00F8;
			constexpr uintptr_t FriendsData = 0x0108;
		}

		namespace RPC_GetShopCatalogue_TA {
			constexpr uintptr_t ShopIDs = 0x00E8;
			constexpr uintptr_t Catalogues = 0x00F8;
		}

		namespace RPC_GetSpecialEventCurrencyRewards_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t EventIDs = 0x0130;
			constexpr uintptr_t EventStores = 0x0140;
		}

		namespace RPC_GetSpecialEventCurrency_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t EventID = 0x0130;
			constexpr uintptr_t EventCurrency = 0x0138;
		}

		namespace RPC_GetSpecialEvents_TA {
			constexpr uintptr_t Events = 0x00E8;
		}

		namespace RPC_GetTradeInFilters_TA {
			constexpr uintptr_t TradeInFilters = 0x00E8;
		}

		namespace RPC_GetUploadUrls_TA {
			constexpr uintptr_t Match = 0x00E8;
			constexpr uintptr_t ReplayContentType = 0x00F0;
			constexpr uintptr_t LogContentType = 0x0100;
			constexpr uintptr_t FlatbufferContentType = 0x0110;
			constexpr uintptr_t UploadReplayUrl = 0x0120;
			constexpr uintptr_t UploadLogUrl = 0x0130;
			constexpr uintptr_t UploadFlatbufferUrl = 0x0140;
			constexpr uintptr_t FlatBufferMetaData = 0x0150;
		}

		namespace RPC_GetWallet_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Currencies = 0x0130;
		}

		namespace RPC_MatchComplete_TA {
			constexpr uintptr_t PlaylistId = 0x00E8;
			constexpr uintptr_t MatchGUID = 0x00F0;
			constexpr uintptr_t MatchData = 0x0100;
			constexpr uintptr_t AppSessionID = 0x0110;
			constexpr uintptr_t LevelSessionID = 0x0120;
			constexpr uintptr_t MaxTeamSize = 0x0130;
			constexpr uintptr_t MatchWinner = 0x0134;
			constexpr uintptr_t MapName = 0x0138;
			constexpr uintptr_t MatchType = 0x0148;
			constexpr uintptr_t TeamScores = 0x0150;
			constexpr uintptr_t Drops = 0x0160;
			constexpr uintptr_t StatsToSend = 0x0170;
		}

		namespace RPC_MicroTransactions_ClaimEntitlements_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t AuthCode = 0x0130;
			constexpr uintptr_t Products = 0x0140;
			constexpr uintptr_t Currencies = 0x0150;
			constexpr uintptr_t WalletCurrencies = 0x0160;
		}

		namespace RPC_MicroTransactions_FinalizePurchase_TA {
			constexpr uintptr_t OrderId = 0x00E8;
			constexpr uintptr_t Authorized = 0x00F0;
			constexpr uintptr_t PlayerID = 0x00F8;
			constexpr uintptr_t Products = 0x0140;
			constexpr uintptr_t Currencies = 0x0150;
			constexpr uintptr_t WalletCurrencies = 0x0160;
		}

		namespace RPC_MicroTransactions_GetCatalog_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Category = 0x0130;
			constexpr uintptr_t MTXProducts = 0x0138;
			constexpr uintptr_t Currency = 0x0148;
		}

		namespace RPC_MicroTransactions_GetContainerDropTable_TA {
			constexpr uintptr_t ContainerDrops = 0x00E8;
		}

		namespace RPC_MicroTransactions_StartPurchase_TA {
			constexpr uintptr_t Language = 0x00E8;
			constexpr uintptr_t PlayerID = 0x00F8;
			constexpr uintptr_t CartItems = 0x0140;
		}

		namespace RPC_MicroTransactions_UnlockContainer_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t InstanceIDs = 0x0130;
			constexpr uintptr_t KeyInstanceIDs = 0x0140;
			constexpr uintptr_t Drops = 0x0150;
		}

		namespace RPC_OnlineFreeplayComplete_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t bInParty = 0x0130;
			constexpr uintptr_t Stats = 0x0138;
		}

		namespace RPC_PlatformAuth_TA {
			constexpr uintptr_t NintendoAccountID = 0x00E8;
		}

		namespace RPC_PrivateMatchComplete_TA {
			constexpr uintptr_t MatchID = 0x00E8;
			constexpr uintptr_t PlayerIds = 0x00F8;
			constexpr uintptr_t Mutators = 0x0108;
		}

		namespace RPC_ProductsClearExpired_TA {
			constexpr uintptr_t InstanceIDs = 0x00E8;
		}

		namespace RPC_ProductsDebugAddProduct_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t ProductID = 0x0130;
			constexpr uintptr_t SeriesID = 0x0134;
			constexpr uintptr_t TradeHoldTimestamp = 0x0138;
			constexpr uintptr_t Attributes = 0x0140;
			constexpr uintptr_t Product = 0x0150;
			constexpr uintptr_t OnlineProduct = 0x0190;
		}

		namespace RPC_ProductsDebugAddProducts_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Bitfields_0x0130 = 0x0130;  // Multiple: UsePrimary, bIgnoreMissingProducts
			constexpr uintptr_t Products = 0x0138;
			constexpr uintptr_t AddedProducts = 0x0148;
			constexpr uintptr_t TransactionIDs = 0x0158;
			constexpr uintptr_t AddedOnlineProducts = 0x0168;
		}

		namespace RPC_ProductsDebugAddRandom_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Count = 0x0130;
			constexpr uintptr_t SeriesID = 0x0134;
			constexpr uintptr_t Drops = 0x0138;
			constexpr uintptr_t Products = 0x0148;
		}

		namespace RPC_ProductsDebugSetCertified_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t InstanceID = 0x0130;
			constexpr uintptr_t CertifiedStatID = 0x0140;
			constexpr uintptr_t CertifiedValue = 0x0144;
			constexpr uintptr_t Product = 0x0148;
			constexpr uintptr_t OnlineProduct = 0x0188;
		}

		namespace RPC_ProductsDebugSetEdition_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t InstanceID = 0x0130;
			constexpr uintptr_t EditionID = 0x0140;
			constexpr uintptr_t Product = 0x0148;
			constexpr uintptr_t OnlineProduct = 0x0188;
		}

		namespace RPC_ProductsDebugSetPainted_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t InstanceID = 0x0130;
			constexpr uintptr_t PaintID = 0x0140;
			constexpr uintptr_t Product = 0x0148;
			constexpr uintptr_t OnlineProduct = 0x0188;
		}

		namespace RPC_ProductsLoadoutGet_TA {
			constexpr uintptr_t InstanceToSlotTable = 0x00E8;
			constexpr uintptr_t PlayerID = 0x00F8;
			constexpr uintptr_t Loadout = 0x0140;
			constexpr uintptr_t ProductData = 0x0150;
			constexpr uintptr_t Products = 0x0160;
			constexpr uintptr_t DataProductTeamIndex = 0x0170;
		}

		namespace RPC_ProductsPlayerClear_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
		}

		namespace RPC_ProductsPlayerGet_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t UpdatedTimestamp = 0x0130;
			constexpr uintptr_t ProductData = 0x0138;
		}

		namespace RPC_ProductsTradeIn_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t ProductInstances = 0x0130;
			constexpr uintptr_t Drops = 0x0140;
			constexpr uintptr_t Products = 0x0150;
		}

		namespace RPC_PsyNetGetVanities_TA {
			constexpr uintptr_t VanityTypes = 0x00E8;
			constexpr uintptr_t PlayerIds = 0x00F8;
			constexpr uintptr_t VanityLoadouts = 0x0108;
			constexpr uintptr_t VanityProducts = 0x0118;
		}

		namespace RPC_PsyNetSetVanity_TA {
			constexpr uintptr_t VanityLoadouts = 0x00E8;
		}

		namespace RPC_PurchaseItemFromShop_TA {
			constexpr uintptr_t ShopItemCostID = 0x00E8;
			constexpr uintptr_t ShopID = 0x00EC;
			constexpr uintptr_t ShopDiscountID = 0x00F0;
			constexpr uintptr_t PlayerID = 0x00F8;
			constexpr uintptr_t Count = 0x0140;
			constexpr uintptr_t ExpectedPrice = 0x0148;
			constexpr uintptr_t ExpectedProductCount = 0x0158;
			constexpr uintptr_t ProductData = 0x0160;
			constexpr uintptr_t CurrencyData = 0x0170;
		}

		namespace RPC_PurchaseSpecialEventReward_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t StoreProductID = 0x0130;
			constexpr uintptr_t RocketPassInfo = 0x0134;
			constexpr uintptr_t ProductData = 0x0140;
			constexpr uintptr_t RewardDrops = 0x0150;
			constexpr uintptr_t CurrencyData = 0x0160;
			constexpr uintptr_t WalletCurrencies = 0x0170;
		}

		namespace RPC_RedeemCode_TA {
			constexpr uintptr_t Code = 0x00E8;
			constexpr uintptr_t PlayerID = 0x00F8;
			constexpr uintptr_t Drops = 0x0140;
		}

		namespace RPC_ReportPlayer_TA {
			constexpr uintptr_t Reports = 0x00E8;
			constexpr uintptr_t GameID = 0x00F8;
		}

		namespace RPC_RequestHonorDuel_TA {
			constexpr uintptr_t Challenger = 0x00E8;
			constexpr uintptr_t Defender = 0x0130;
			constexpr uintptr_t Spectators = 0x0178;
			constexpr uintptr_t Region = 0x0188;
			constexpr uintptr_t BuildID = 0x0198;
		}

		namespace RPC_RequestMatchVoiceTokens_TA {
			constexpr uintptr_t RoomTokenRequests = 0x00E8;
			constexpr uintptr_t PlayerData = 0x00F8;
		}

		namespace RPC_RequestPartyVoiceToken_TA {
			constexpr uintptr_t RequestingPlayer = 0x00E8;
			constexpr uintptr_t PlayerID = 0x0130;
			constexpr uintptr_t RoomId = 0x0178;
			constexpr uintptr_t BaseUrl = 0x0188;
			constexpr uintptr_t Token = 0x0198;
			constexpr uintptr_t BanMessage = 0x01A8;
		}

		namespace RPC_RevealBlueprint_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t InstanceID = 0x0130;
			constexpr uintptr_t ProductData = 0x0140;
		}

		namespace RPC_RocketPassGetPlayerInfo_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t RocketPassID = 0x0130;
			constexpr uintptr_t RocketPassInfo = 0x0134;
			constexpr uintptr_t RocketPassStore = 0x0140;
		}

		namespace RPC_RocketPassGetPlayerPrestigeRewards_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t RocketPassID = 0x0130;
			constexpr uintptr_t PrestigeRewards = 0x0138;
		}

		namespace RPC_RocketPassGetRewardContent_TA {
			constexpr uintptr_t RocketPassID = 0x00E8;
			constexpr uintptr_t TierCap = 0x00EC;
			constexpr uintptr_t FreeMaxLevel = 0x00F0;
			constexpr uintptr_t PremiumMaxLevel = 0x00F4;
			constexpr uintptr_t FreeRewards = 0x00F8;
			constexpr uintptr_t PremiumRewards = 0x0108;
		}

		namespace RPC_RocketPassPurchasePremium_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t InstanceIDs = 0x0130;
			constexpr uintptr_t PurchasableID = 0x0140;
			constexpr uintptr_t bOwnsPremium = 0x0144;
			constexpr uintptr_t TierLevel = 0x0148;
			constexpr uintptr_t Unlocks = 0x0150;
			constexpr uintptr_t WalletCurrencies = 0x0160;
		}

		namespace RPC_RocketPassPurchaseTiers_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t InstanceIDs = 0x0130;
			constexpr uintptr_t PurchasableID = 0x0140;
			constexpr uintptr_t TierLevel = 0x0144;
			constexpr uintptr_t Unlocks = 0x0148;
			constexpr uintptr_t WalletCurrencies = 0x0158;
		}

		namespace RPC_SchematicResourcesGet_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t TotalSchematicResources = 0x0130;
		}

		namespace RPC_SchematicsTradeIn_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t CrateID = 0x0130;
			constexpr uintptr_t Schematics = 0x0140;
			constexpr uintptr_t Drops = 0x0150;
			constexpr uintptr_t CrateDrops = 0x0160;
			constexpr uintptr_t ConsumedInstanceIDs = 0x0170;
			constexpr uintptr_t Products = 0x0180;
		}

		namespace RPC_SubmitUserBugReport_TA {
			constexpr uintptr_t AppSessionID = 0x00E8;
			constexpr uintptr_t LevelSessionID = 0x00F8;
			constexpr uintptr_t MatchGUID = 0x0108;
			constexpr uintptr_t MatchSeconds = 0x0118;
			constexpr uintptr_t BugDescription = 0x0120;
			constexpr uintptr_t BugCategories = 0x0130;
			constexpr uintptr_t bDescriptionFiltered = 0x0140;
			constexpr uintptr_t ConfirmationCode = 0x0148;
			constexpr uintptr_t UploadZipURL = 0x0158;
		}

		namespace RPC_SupportACreator_Get_TA {
			constexpr uintptr_t CreatorCode = 0x00E8;
			constexpr uintptr_t ExpirationTime = 0x00F8;
			constexpr uintptr_t SupportType = 0x0100;
		}

		namespace RPC_SupportACreator_Set_TA {
			constexpr uintptr_t CreatorCode = 0x00E8;
			constexpr uintptr_t Success = 0x00F8;
			constexpr uintptr_t ExpirationTime = 0x0100;
			constexpr uintptr_t SupportType = 0x0108;
		}

		namespace RPC_TourCancelCreated_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t TournamentID = 0x0130;
		}

		namespace RPC_TourCheckIn_TA {
			constexpr uintptr_t TournamentID = 0x00E8;
			constexpr uintptr_t PlayerID = 0x00F0;
			constexpr uintptr_t PartyID = 0x0138;
			constexpr uintptr_t Settings = 0x0148;
			constexpr uintptr_t LocalTeamMembers = 0x0168;
			constexpr uintptr_t TeamMembers = 0x0178;
			constexpr uintptr_t TeamID = 0x0188;
			constexpr uintptr_t TeamName = 0x0190;
		}

		namespace RPC_TourCreate_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Settings = 0x0130;
			constexpr uintptr_t Tournament = 0x0168;
		}

		namespace RPC_TourFindPrivate_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Credentials = 0x0130;
			constexpr uintptr_t Tournament = 0x0150;
		}

		namespace RPC_TourGetBracket_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t TournamentID = 0x0130;
			constexpr uintptr_t Bracket = 0x0138;
		}

		namespace RPC_TourGetMatchDetails_TA {
			constexpr uintptr_t TournamentID = 0x00E8;
			constexpr uintptr_t MatchID = 0x00F0;
			constexpr uintptr_t TeamStats = 0x00F8;
		}

		namespace RPC_TourGetMatchReservations_TA {
			constexpr uintptr_t ServerId = 0x00E8;
			constexpr uintptr_t Settings = 0x00F8;
		}

		namespace RPC_TourGetMatchServer_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t TournamentID = 0x0130;
			constexpr uintptr_t MatchID = 0x0138;
		}

		namespace RPC_TourGetMatch_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t TournamentID = 0x0130;
			constexpr uintptr_t Match = 0x0138;
		}

		namespace RPC_TourGetPublic_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Search = 0x0130;
			constexpr uintptr_t TeamMembers = 0x0190;
			constexpr uintptr_t Tournaments = 0x01A0;
		}

		namespace RPC_TourGetRewards_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t TournamentID = 0x0130;
			constexpr uintptr_t Rewards = 0x0138;
		}

		namespace RPC_TourGetScheduleRegion_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t ScheduleRegion = 0x0130;
		}

		namespace RPC_TourGetSubscriptions_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t Tournaments = 0x0130;
			constexpr uintptr_t CreatorOf = 0x0140;
			constexpr uintptr_t AdminOf = 0x0150;
			constexpr uintptr_t Registered = 0x0160;
			constexpr uintptr_t ActiveTournamentID = 0x0170;
			constexpr uintptr_t ActiveTeam = 0x0178;
			constexpr uintptr_t Results = 0x01C0;
		}

		namespace RPC_TourRegister_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t TournamentID = 0x0130;
			constexpr uintptr_t Credentials = 0x0138;
			constexpr uintptr_t Tournament = 0x0158;
		}

		namespace RPC_TourSetScheduleRegion_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t ScheduleRegion = 0x0130;
		}

		namespace RPC_TourStartMatchmaking_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
		}

		namespace RPC_TourUnsubscribe_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t TournamentID = 0x0130;
			constexpr uintptr_t bUnsubscribeAnyRegisteredTournament = 0x0138;
			constexpr uintptr_t TeamMembers = 0x0140;
		}

		namespace RPC_TourUpdateGame_TA {
			constexpr uintptr_t MatchGUID = 0x00E8;
			constexpr uintptr_t ServerId = 0x00F8;
			constexpr uintptr_t TournamentID = 0x0108;
			constexpr uintptr_t MatchID = 0x0110;
			constexpr uintptr_t Game = 0x0114;
			constexpr uintptr_t GameData = 0x0118;
			constexpr uintptr_t Winner = 0x0130;
			constexpr uintptr_t PlayersNoShow = 0x0138;
			constexpr uintptr_t PlayersLeftEarly = 0x0148;
			constexpr uintptr_t PlayersIdle = 0x0158;
			constexpr uintptr_t bHasNetworkIssues = 0x0168;
			constexpr uintptr_t PlayersStats = 0x0170;
			constexpr uintptr_t Teams = 0x0180;
		}

		namespace RPC_TrainingEditor_AddTrainingData_TA {
			constexpr uintptr_t TrainingData = 0x00E8;
			constexpr uintptr_t Code = 0x00F0;
		}

		namespace RPC_TrainingEditor_BrowseTrainingData_TA {
			constexpr uintptr_t bFeaturedOnly = 0x00E8;
			constexpr uintptr_t TrainingData = 0x00F0;
		}

		namespace RPC_TrainingEditor_DeleteTrainingData_TA {
			constexpr uintptr_t Code = 0x00E8;
		}

		namespace RPC_TrainingEditor_GetTrainingData_TA {
			constexpr uintptr_t Code = 0x00E8;
			constexpr uintptr_t TrainingData = 0x00F8;
		}

		namespace RPC_TrainingEditor_GetTrainingMetadata_TA {
			constexpr uintptr_t Codes = 0x00E8;
			constexpr uintptr_t TrainingData = 0x00F8;
		}

		namespace RPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA {
			constexpr uintptr_t Codes = 0x00E8;
			constexpr uintptr_t TrainingData = 0x00F8;
		}

		namespace RPC_TrainingEditor_ListPlayerTrainingData_TA {
			constexpr uintptr_t Codes = 0x00E8;
		}

		namespace RPC_TrainingEditor_UpdateTrainingData_TA {
			constexpr uintptr_t TrainingData = 0x00E8;
		}

		namespace RPC_UpdateTwoFactorStatus_TA {
			constexpr uintptr_t EpicAuthTicket = 0x00E8;
		}

		namespace RPC_UploadXP_TA {
			constexpr uintptr_t PlayerID = 0x00E8;
			constexpr uintptr_t XPTotal = 0x0130;
			constexpr uintptr_t XpLevel = 0x0134;
		}

		namespace RPC_XPRequest_TA {
			constexpr uintptr_t XPInfoResponse = 0x00E8;
			constexpr uintptr_t PlayerID = 0x0108;
		}

		namespace RankedReconnectSave_TA {
			constexpr uintptr_t Reservation = 0x00C8;
			constexpr uintptr_t EpochTime = 0x0138;
		}

		namespace RecentPlayersMet_TA {
			constexpr uintptr_t PendingPresence = 0x0060;
			constexpr uintptr_t PendingRecentPlayers = 0x0070;
			constexpr uintptr_t PendingRecentPlayerKeys = 0x0080;
			constexpr uintptr_t WaitingForPermissionsCount = 0x0090;
		}

		namespace RecentPlayers_TA {
			constexpr uintptr_t RecentList = 0x0070;
			constexpr uintptr_t RecentGameIDs = 0x0080;
			constexpr uintptr_t ObservedLoadouts = 0x0090;
			constexpr uintptr_t PersonaSave = 0x00A0;
			constexpr uintptr_t MaxRecentPlayerCount = 0x00A8;
		}

		namespace RegionPingCache_TA {
			constexpr uintptr_t CachedRegionPings = 0x0060;
			constexpr uintptr_t OnlineGameRegionsRef = 0x0070;
		}

		namespace ReplayCompatibilityActor_TA {
			constexpr uintptr_t RenamedActors = 0x0268;
		}

		namespace ReplayComponent_TA {
			constexpr uintptr_t Bitfields_0x00A0 = 0x00A0;  // Multiple: bRecording, bPlaying
		}

		namespace ReplayDirector_TA {
			constexpr uintptr_t SlomoPreScoreTime = 0x0268;
			constexpr uintptr_t SlomoPostScoreTime = 0x026C;
			constexpr uintptr_t SlomoDefendTime = 0x0270;
			constexpr uintptr_t SlomoDefendDistance = 0x0274;
			constexpr uintptr_t SlomoTimeDilation = 0x0278;
			constexpr uintptr_t MinReplayTime = 0x027C;
			constexpr uintptr_t MaxReplayTime = 0x0280;
			constexpr uintptr_t ReplayPadding = 0x0284;
			constexpr uintptr_t ReplayStartSound = 0x0288;
			constexpr uintptr_t SlomoStartSound = 0x0290;
			constexpr uintptr_t SlomoStopSound = 0x0298;
			constexpr uintptr_t LiveReplayStateGroup = 0x02A0;
			constexpr uintptr_t LiveReplay_PreScore = 0x02A8;
			constexpr uintptr_t LiveReplay_Slomo = 0x02B0;
			constexpr uintptr_t LiveReplay_PostGoal = 0x02B8;
			constexpr uintptr_t LiveReplay_None = 0x02C0;
			constexpr uintptr_t HighlightReplayDuration = 0x02C8;
			constexpr uintptr_t TimeBeforeHighlightReplay = 0x02CC;
			constexpr uintptr_t LastScoredGoalTime = 0x02D0;
			constexpr uintptr_t Replay = 0x02D8;
			constexpr uintptr_t FocusCar = 0x02E0;
			constexpr uintptr_t FocusCarChangeTime = 0x02E8;
			constexpr uintptr_t FocusBall = 0x02F0;
			constexpr uintptr_t BallTouches = 0x02F8;
			constexpr uintptr_t BallName = 0x0308;
			constexpr uintptr_t ScoreTime = 0x0310;
			constexpr uintptr_t ScoreHitIndex = 0x0314;
			constexpr uintptr_t GoalActorName = 0x0318;
			constexpr uintptr_t ScoredGoal = 0x0320;
			constexpr uintptr_t Bitfields_0x0328 = 0x0328;  // Multiple: bSlomo, bReplicatedSlomo, bSlomoForDefender, bAutoSave
			constexpr uintptr_t FocusHitIndex = 0x032C;
			constexpr uintptr_t FocusCars = 0x0330;
			constexpr uintptr_t FocusCarIdx = 0x0340;
			constexpr uintptr_t ReplayStartGameTime = 0x0344;
			constexpr uintptr_t BallSpawnTime = 0x0348;
			constexpr uintptr_t SoccarGame = 0x0350;
			constexpr uintptr_t ScoredOnTeam = 0x0358;
			constexpr uintptr_t ScoreData = 0x0360;
			constexpr uintptr_t PreviousScores = 0x0380;
			constexpr uintptr_t ForceCutToFocusActors = 0x0388;
			constexpr uintptr_t CameraConfig = 0x0390;
		}

		namespace ReplayManager_TA {
			constexpr uintptr_t ReplaysPath = 0x0060;
			constexpr uintptr_t EpicReplaysPath = 0x0070;
			constexpr uintptr_t ExportTasks = 0x0080;
			constexpr uintptr_t ClassTasks = 0x0090;
			constexpr uintptr_t ImportTasks = 0x00A0;
			constexpr uintptr_t HeadersCountTask = 0x00B0;
			constexpr uintptr_t HeaderLoadTasks = 0x00B8;
			constexpr uintptr_t ExportCallbacks = 0x00C8;
			constexpr uintptr_t ImportCallbacks = 0x00D8;
			constexpr uintptr_t ReplayDataByMatchIDMap = 0x00E8;
			constexpr uintptr_t ReplayDataMapUpdateTasks = 0x0138;
			constexpr uintptr_t bDataMapUpdated = 0x0148;
		}

		namespace ReplayPackageMap_TA {
			constexpr uintptr_t UnknownData00 = 0x0120;
			constexpr uintptr_t Replay = 0x0128;
			constexpr uintptr_t UnknownData01 = 0x0130;
			constexpr uintptr_t ObjectTable = 0x0150;
			constexpr uintptr_t UnknownData02 = 0x0160;
		}

		namespace Replay_Soccar_TA {
			constexpr uintptr_t TeamSize = 0x02F8;
			constexpr uintptr_t UnfairTeamSize = 0x02FC;
			constexpr uintptr_t Bitfields_0x0300 = 0x0300;  // Multiple: bUnfairBots, bNoContest, bForfeit, bLocalPlayerAbandoned
			constexpr uintptr_t PrimaryPlayerTeam = 0x0304;
			constexpr uintptr_t Team0Score = 0x0308;
			constexpr uintptr_t Team1Score = 0x030C;
			constexpr uintptr_t TotalSecondsPlayed = 0x0310;
			constexpr uintptr_t MatchStartEpoch = 0x0318;
			constexpr uintptr_t WinningTeam = 0x0320;
			constexpr uintptr_t Goals = 0x0328;
			constexpr uintptr_t HighLights = 0x0338;
			constexpr uintptr_t PlayerStats = 0x0348;
		}

		namespace Replay_TA {
			constexpr uintptr_t ReplayName = 0x0060;
			constexpr uintptr_t EngineVersion = 0x0070;
			constexpr uintptr_t LicenseeVersion = 0x0074;
			constexpr uintptr_t NetVersion = 0x0078;
			constexpr uintptr_t ReplayVersion = 0x007C;
			constexpr uintptr_t ReplayLastSaveVersion = 0x0080;
			constexpr uintptr_t GameVersion = 0x0084;
			constexpr uintptr_t BuildID = 0x0088;
			constexpr uintptr_t Changelist = 0x008C;
			constexpr uintptr_t BuildVersion = 0x0090;
			constexpr uintptr_t ReserveMegabytes = 0x00A0;
			constexpr uintptr_t RecordFPS = 0x00A4;
			constexpr uintptr_t KeyframeDelay = 0x00A8;
			constexpr uintptr_t MaxChannels = 0x00AC;
			constexpr uintptr_t MaxReplaySizeMB = 0x00B0;
			constexpr uintptr_t PlaybackClasses = 0x00B8;
			constexpr uintptr_t IgnoreClasses = 0x00C8;
			constexpr uintptr_t FilePath = 0x00D8;
			constexpr uintptr_t Id = 0x00E8;
			constexpr uintptr_t MatchGUID = 0x00F8;
			constexpr uintptr_t Bitfields_0x0108 = 0x0108;  // Multiple: bIsUnfinishedMatchReplay, bFileCorrupted, bForceKeyframe, bLoadedNetPackages, bDebug
			constexpr uintptr_t MapName = 0x010C;
			constexpr uintptr_t Date = 0x0118;
			constexpr uintptr_t NumFrames = 0x0128;
			constexpr uintptr_t MatchType = 0x012C;
			constexpr uintptr_t PlayerName = 0x0138;
			constexpr uintptr_t Data = 0x0148;
			constexpr uintptr_t KeyFrames = 0x0158;
			constexpr uintptr_t ReplayState = 0x0168;
			constexpr uintptr_t CurrentFrame = 0x016C;
			constexpr uintptr_t NextKeyframe = 0x0170;
			constexpr uintptr_t CurrentTime = 0x0174;
			constexpr uintptr_t Channels = 0x0178;
			constexpr uintptr_t ChannelsMap = 0x0188;
			constexpr uintptr_t PackageMap = 0x01D8;
			constexpr uintptr_t Levels = 0x01E0;
			constexpr uintptr_t FreeChannels = 0x01F0;
			constexpr uintptr_t AccumulatedDeltaTime = 0x0200;
			constexpr uintptr_t TimeToSkipTo = 0x0204;
			constexpr uintptr_t FrameToSkipTo = 0x0208;
			constexpr uintptr_t PlayersOnlyTicks = 0x020C;
			constexpr uintptr_t TimePrevToSkip = 0x0210;
			constexpr uintptr_t WriterAr = 0x0218;
			constexpr uintptr_t ReaderAr = 0x0220;
			constexpr uintptr_t Logs = 0x0228;
			constexpr uintptr_t TimelineKeyframes = 0x0238;
			constexpr uintptr_t CameraTrack = 0x0248;
		}

		namespace ReplicatedRespawnTicket_TA {
			constexpr uintptr_t SecondsRemaining = 0x0268;
			constexpr uintptr_t DisplaySeconds = 0x026C;
		}

		namespace RewardDropGroup_TA {
			constexpr uintptr_t Rewards = 0x00C0;
			constexpr uintptr_t Thresholds = 0x00D0;
		}

		namespace RewardDrop_TA {
			constexpr uintptr_t RewardName = 0x0060;
		}

		namespace RewardDrop_XPMultiplier_TA {
			constexpr uintptr_t Total = 0x0068;
		}

		namespace RewardDrop_XP_TA {
			constexpr uintptr_t Total = 0x0068;
			constexpr uintptr_t Base = 0x006C;
			constexpr uintptr_t BaseLevel = 0x0070;
			constexpr uintptr_t Level = 0x0074;
			constexpr uintptr_t LevelThresholds = 0x0078;
			constexpr uintptr_t Modifiers = 0x0088;
			constexpr uintptr_t PremiumModifierNames = 0x0098;
			constexpr uintptr_t PenaltyModifierNames = 0x00A8;
			constexpr uintptr_t PromoModifierNames = 0x00B8;
			constexpr uintptr_t WeeklyCapReached = 0x00C8;
			constexpr uintptr_t RewardModifiers_SectionName = 0x00D0;
			constexpr uintptr_t RewardModifiers_PackageName = 0x00E0;
			constexpr uintptr_t WeeklyCap = 0x00F0;
			constexpr uintptr_t RestXP = 0x00F8;
		}

		namespace RimSpinner_TA {
			constexpr uintptr_t AccelRate = 0x0078;
			constexpr uintptr_t DecelRate = 0x007C;
			constexpr uintptr_t MaxSpeed = 0x0080;
			constexpr uintptr_t BoneControlName = 0x0084;
			constexpr uintptr_t SpinScale = 0x008C;
			constexpr uintptr_t WheelIndex = 0x0090;
			constexpr uintptr_t CurrentSpeed = 0x0094;
			constexpr uintptr_t CurrentRotation = 0x0098;
			constexpr uintptr_t SkelMeshComponent = 0x00A0;
			constexpr uintptr_t SpinBoneController = 0x00A8;
			constexpr uintptr_t WheelBoneController = 0x00B0;
			constexpr uintptr_t Wheel = 0x00B8;
			constexpr uintptr_t bIsMainMenu = 0x00C0;
		}

		namespace RocketPassBundleContainer_TA {
			constexpr uintptr_t RocketPassMenuName = 0x0070;
			constexpr uintptr_t ChallengeMenuName = 0x0078;
			constexpr uintptr_t Premium = 0x0080;
			constexpr uintptr_t Tier = 0x0090;
		}

		namespace RocketPassConfig_TA {
			constexpr uintptr_t RocketPassID = 0x0078;
			constexpr uintptr_t StartTime = 0x0080;
			constexpr uintptr_t EndTime = 0x0088;
			constexpr uintptr_t StartRangeSeconds = 0x0090;
			constexpr uintptr_t FinalStartTime = 0x0098;
			constexpr uintptr_t Bitfields_0x00A0 = 0x00A0;  // Multiple: bIsActive, bHideMainMenuButton
		}

		namespace RocketPassErrors_TA {
			constexpr uintptr_t InvalidRocketPass = 0x0080;
			constexpr uintptr_t RocketPassNotActive = 0x0088;
			constexpr uintptr_t InvalidKey = 0x0090;
			constexpr uintptr_t PlayerAlreadyPremium = 0x0098;
			constexpr uintptr_t DoesNotOwnPremium = 0x00A0;
			constexpr uintptr_t PurchasableNotFound = 0x00A8;
		}

		namespace RocketPass_TA {
			constexpr uintptr_t FreeRewards = 0x0060;
			constexpr uintptr_t PremiumRewards = 0x0070;
			constexpr uintptr_t PrestigeRewards = 0x0080;
			constexpr uintptr_t TierCap = 0x0090;
			constexpr uintptr_t PrestigeTierCap = 0x0094;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bIsPassActive, bOwnsPremium, bPrestigeItemsDirtied
			constexpr uintptr_t XPMultiplier = 0x009C;
			constexpr uintptr_t TierLevel = 0x00A0;
			constexpr uintptr_t SecondsRemaining = 0x00A4;
			constexpr uintptr_t Bundles = 0x00A8;
			constexpr uintptr_t SyncAllInfoTask = 0x00B0;
			constexpr uintptr_t PendingPlayerInfoTask = 0x00B8;
			constexpr uintptr_t PendingRewardsTask = 0x00C0;
			constexpr uintptr_t PendingPrestigeRewardsTask = 0x00C8;
			constexpr uintptr_t PurchasePremiumTask = 0x00D0;
			constexpr uintptr_t PurchaseTiersTask = 0x00D8;
			constexpr uintptr_t CodeRedemptionPurchasableID = 0x00E0;
			constexpr uintptr_t RocketPassConfig = 0x00E8;
			constexpr uintptr_t OnlineGame = 0x00F0;
			constexpr uintptr_t Wallet = 0x00F8;
		}

		namespace RotateComponent_TA {
			constexpr uintptr_t Momentum = 0x00A8;
			constexpr uintptr_t LastMomentum = 0x00AC;
			constexpr uintptr_t RotationSpeed = 0x00B0;
			constexpr uintptr_t CurrentRotation = 0x00B4;
			constexpr uintptr_t TurntableDirection = 0x00C0;
			constexpr uintptr_t SFX_Rotating = 0x00C8;
			constexpr uintptr_t SFX_Reversing = 0x00D0;
			constexpr uintptr_t FallOffCurve = 0x00D8;
			constexpr uintptr_t YawSpeedCurveMouse = 0x00F0;
			constexpr uintptr_t YawSpeedCurveGamepad = 0x0108;
			constexpr uintptr_t Bitfields_0x0120 = 0x0120;  // Multiple: bGrabbed, bDeterminedSnapRotation, bUsingGamepad
			constexpr uintptr_t SnapRotation = 0x0124;
			constexpr uintptr_t SnapAngle = 0x0130;
			constexpr uintptr_t TotalSnaps = 0x0134;
			constexpr uintptr_t SnapStartRotation = 0x0138;
			constexpr uintptr_t MinStopMomentum = 0x0144;
			constexpr uintptr_t SnapBlendSpeed = 0x0148;
			constexpr uintptr_t Input = 0x014C;
		}

		namespace RumblePickups_TA {
			constexpr uintptr_t PickupInfo = 0x0268;
			constexpr uintptr_t AttachedPickup = 0x0288;
			constexpr uintptr_t ConcurrentItemCount = 0x0290;
			constexpr uintptr_t SelectedIndex = 0x0294;
			constexpr uintptr_t PreviewTimeSeconds = 0x0298;
		}

		namespace SampleHistory_TA {
			constexpr uintptr_t RecordSettings = 0x0070;
			constexpr uintptr_t Title = 0x0078;
			constexpr uintptr_t Summaries = 0x0088;
			constexpr uintptr_t YMin = 0x0098;
			constexpr uintptr_t YMax = 0x009C;
			constexpr uintptr_t GoodValue = 0x00A0;
			constexpr uintptr_t BadValue = 0x00A4;
			constexpr uintptr_t BaseValue = 0x00A8;
			constexpr uintptr_t Samples = 0x00B0;
			constexpr uintptr_t SampleIndex = 0x00C0;
			constexpr uintptr_t AccumTime = 0x00C4;
			constexpr uintptr_t PendingSample = 0x00C8;
			constexpr uintptr_t bHasPendingSample = 0x00D0;
			constexpr uintptr_t Drawer = 0x00D8;
		}

		namespace SampleRecordSettings_TA {
			constexpr uintptr_t MaxSampleAge = 0x0070;
			constexpr uintptr_t RecordRate = 0x0074;
		}

		namespace SaveData_GameEditor_TA {
			constexpr uintptr_t UnknownData00 = 0x009C;
		}

		namespace SaveData_GameEditor_Training_TA {
			constexpr uintptr_t LoadedSaveName = 0x00A0;
			constexpr uintptr_t TrainingData = 0x00B0;
			constexpr uintptr_t PlayerTeamNumber = 0x00B8;
			constexpr uintptr_t Bitfields_0x00BC = 0x00BC;  // Multiple: bUnowned, bPerfectCompleted
			constexpr uintptr_t ShotsCompleted = 0x00C0;
			constexpr uintptr_t FavoritesFolderPath = 0x00C8;
			constexpr uintptr_t MyTrainingFolderPath = 0x00D8;
			constexpr uintptr_t DownloadedFolderPath = 0x00E8;
		}

		namespace SaveData_TA {
			constexpr uintptr_t SaveManager = 0x0060;
			constexpr uintptr_t Bitfields_0x0068 = 0x0068;  // Multiple: bFromPreviousSave, bClearSyncTimestampOnMissingProduct, bEnableOnlineData, bUnloaded
			constexpr uintptr_t OnlineProducts = 0x0070;
			constexpr uintptr_t OnlineProductSet = 0x0080;
			constexpr uintptr_t MostRecentProductUpdatedTimestamp = 0x0088;
			constexpr uintptr_t LastFullProductSyncTimestamp = 0x0090;
			constexpr uintptr_t PsyNetEnvironment = 0x0098;
			constexpr uintptr_t ProductsConfig = 0x00A0;
			constexpr uintptr_t ProductTransactions = 0x00A8;
			constexpr uintptr_t Profiles = 0x00B0;
			constexpr uintptr_t XPGainPercentage = 0x00C0;
			constexpr uintptr_t CurrentLevel = 0x00D0;
			constexpr uintptr_t SchematicResources = 0x00D4;
			constexpr uintptr_t SaveDataVersion = 0x00D8;
			constexpr uintptr_t SaveObjectProvider = 0x00E0;
			constexpr uintptr_t SaveObjects = 0x00E8;
			constexpr uintptr_t SaveTick = 0x00F8;
			constexpr uintptr_t SyncOnlineStorageTask = 0x0100;
			constexpr uintptr_t StorageSyncManager = 0x0108;
			constexpr uintptr_t EOSStorageUploader = 0x0110;
			constexpr uintptr_t ExpirationHelper = 0x0118;
			constexpr uintptr_t CachedUnlockedProducts = 0x0120;
			constexpr uintptr_t OnlineDLCProductCache = 0x0128;
			constexpr uintptr_t DataProductCache = 0x0130;
			constexpr uintptr_t NewProductNotificationQueue = 0x0138;
			constexpr uintptr_t UploadDelayedTime = 0x0148;
			constexpr uintptr_t RPRewardForCurrentSeason = 0x0150;
			constexpr uintptr_t RPRewardForOldSeasons = 0x0160;
			constexpr uintptr_t CreditRefundForCurrentSeason = 0x0170;
			constexpr uintptr_t CreditRefundForOldSeasons = 0x0180;
		}

		namespace SaveGameManager_TA {
			constexpr uintptr_t SaveObjectManager = 0x0060;
			constexpr uintptr_t SaveDataID = 0x0068;
			constexpr uintptr_t Player = 0x0078;
			constexpr uintptr_t SaveData = 0x0080;
			constexpr uintptr_t SaveObjectProvider = 0x0088;
			constexpr uintptr_t MinTimeBetweenSaves = 0x0090;
			constexpr uintptr_t LastSaveTime = 0x0094;
			constexpr uintptr_t DataLoadError = 0x0098;
			constexpr uintptr_t DataSaveError = 0x00A0;
			constexpr uintptr_t Bitfields_0x00A8 = 0x00A8;  // Multiple: bDataLoaded, bUserIgnoredLoadFailure, bEnableSaving, bDisableSaveOSS, bDirty
			constexpr uintptr_t SaveFolderPath = 0x00B0;
			constexpr uintptr_t EpicSaveFolderPath = 0x00C0;
		}

		namespace SaveObjectManager_TA {
			constexpr uintptr_t VfTable_FTickableObject = 0x0060;
			constexpr uintptr_t ImportTasks = 0x0068;
			constexpr uintptr_t ExportTasks = 0x0088;
			constexpr uintptr_t ListFilesTasks = 0x0098;
			constexpr uintptr_t DeleteTasks = 0x00A8;
			constexpr uintptr_t KeepNewestSaveFileCount = 0x00C8;
			constexpr uintptr_t SaveData = 0x00D0;
			constexpr uintptr_t SavePath = 0x00D8;
			constexpr uintptr_t ControllerId = 0x00E8;
			constexpr uintptr_t Bitfields_0x00EC = 0x00EC;  // Multiple: bSaving, bPlayerSaveData
			constexpr uintptr_t InitializeTasks = 0x00F0;
		}

		namespace SaveObjectSerializer_TA {
			constexpr uintptr_t Version = 0x0060;
			constexpr uintptr_t Result = 0x0064;
		}

		namespace SaveObject_TA {
			constexpr uintptr_t Version = 0x0060;
		}

		namespace Save_TA {
			constexpr uintptr_t SaveObjectManager = 0x0060;
			constexpr uintptr_t DirectoryPath = 0x0068;
			constexpr uintptr_t SaveType = 0x0078;
			constexpr uintptr_t SaveExt = 0x0088;
			constexpr uintptr_t bExactFileMatch = 0x0098;
		}

		namespace ScreenDisplayActor_TA {
			constexpr uintptr_t PC = 0x02C8;
			constexpr uintptr_t StartLocationOffset = 0x02D0;
			constexpr uintptr_t LocationOffset = 0x02DC;
			constexpr uintptr_t CurrentRotation = 0x02E8;
			constexpr uintptr_t RotationSpeed = 0x02F4;
			constexpr uintptr_t StartRotationOffset = 0x02F8;
			constexpr uintptr_t BlendInSpeed = 0x02FC;
			constexpr uintptr_t BlendInAmount = 0x0300;
			constexpr uintptr_t CameraShakeDuration = 0x0304;
			constexpr uintptr_t CameraShakeAmplitude = 0x0308;
			constexpr uintptr_t CameraShakeFrequency = 0x030C;
			constexpr uintptr_t ParticleFX = 0x0310;
			constexpr uintptr_t ParticleComponent = 0x0318;
			constexpr uintptr_t FXOffset = 0x0320;
		}

		namespace ScriptedTextureComponent_TA {
			constexpr uintptr_t Resolution = 0x00A8;
			constexpr uintptr_t Height = 0x00B4;
			constexpr uintptr_t bFaceCamera = 0x00B8;
			constexpr uintptr_t Mesh = 0x00C0;
			constexpr uintptr_t TextureTarget = 0x00C8;
			constexpr uintptr_t Viewer = 0x00D0;
		}

		namespace SeasonSave_TA {
			constexpr uintptr_t Seasons = 0x00C8;
		}

		namespace Season_TA {
			constexpr uintptr_t NumTeams = 0x0060;
			constexpr uintptr_t TeamSize = 0x0064;
			constexpr uintptr_t Difficulty = 0x0068;
			constexpr uintptr_t NumRegularWeeks = 0x006C;
			constexpr uintptr_t NumPlayoffsWeeks = 0x0070;
			constexpr uintptr_t NumPlayoffsTeams = 0x0074;
			constexpr uintptr_t Teams = 0x0078;
			constexpr uintptr_t Players = 0x0088;
			constexpr uintptr_t PlayerStats = 0x0098;
			constexpr uintptr_t Year = 0x00A8;
			constexpr uintptr_t CurrentWeek = 0x00AC;
			constexpr uintptr_t Matches = 0x00B0;
		}

		namespace SeqAct_AddGameBall_TA {
			constexpr uintptr_t SpawnedBall = 0x0160;
			constexpr uintptr_t Instigator = 0x0168;
			constexpr uintptr_t SpawnTransform = 0x0170;
			constexpr uintptr_t PlacedBall = 0x0178;
			constexpr uintptr_t bWake = 0x0180;
			constexpr uintptr_t BallArchetype = 0x0188;
		}

		namespace SeqAct_AnalyzeMusicFromCsv_TA {
			constexpr uintptr_t VfTable_FTickableObject = 0x0160;
			constexpr uintptr_t CsvFileName = 0x0168;
			constexpr uintptr_t StartOverrideTime = 0x0178;
			constexpr uintptr_t OverrideTime = 0x017C;
			constexpr uintptr_t bTickable = 0x0180;
		}

		namespace SeqAct_ApplyCarProducts_TA {
			constexpr uintptr_t Assets = 0x0160;
			constexpr uintptr_t TeamColor = 0x0170;
			constexpr uintptr_t AccentColor = 0x0180;
			constexpr uintptr_t TeamFinish = 0x0190;
			constexpr uintptr_t CustomFinish = 0x0198;
			constexpr uintptr_t CarPreviewActor = 0x01A0;
		}

		namespace SeqAct_AttachAssetToCar_TA {
			constexpr uintptr_t StaticMeshToAttach = 0x0160;
			constexpr uintptr_t SkeletalMeshToAttach = 0x0168;
			constexpr uintptr_t ParticleSystemToAttach = 0x0170;
			constexpr uintptr_t BoneToAttachTo = 0x0178;
		}

		namespace SeqAct_AttachFX_TA {
			constexpr uintptr_t PSC = 0x0160;
		}

		namespace SeqAct_CarMatinee_TA {
			constexpr uintptr_t CinematicCarArchPath = 0x0288;
			constexpr uintptr_t Bitfields_0x0298 = 0x0298;  // Multiple: bHideAfterPause, bHideAfterCompleted
			constexpr uintptr_t ClassesToNotShow = 0x02A0;
		}

		namespace SeqAct_CheckRotationAngle_TA {
			constexpr uintptr_t Actor = 0x0178;
			constexpr uintptr_t CheckActor = 0x0180;
			constexpr uintptr_t RotationAngle = 0x0188;
			constexpr uintptr_t LastRotation = 0x018C;
			constexpr uintptr_t LastDirection = 0x0198;
			constexpr uintptr_t CheckAxis = 0x019C;
			constexpr uintptr_t TurnAxis = 0x01A8;
			constexpr uintptr_t MaxRotationAngle = 0x01B4;
			constexpr uintptr_t bResetOnDirectionChange = 0x01B8;
			constexpr uintptr_t AxisDirection = 0x01BC;
		}

		namespace SeqAct_CinematicIntroStartNextSeq_TA {
			constexpr uintptr_t CurrentSequenceIndex = 0x0160;
		}

		namespace SeqAct_CompleteFTECheckpoint_TA {
			constexpr uintptr_t CheckpointName = 0x0160;
		}

		namespace SeqAct_ConcatenateStrings_TA {
			constexpr uintptr_t ValueA = 0x0160;
			constexpr uintptr_t ValueB = 0x0170;
			constexpr uintptr_t ConcatenateWithSpace = 0x0180;
			constexpr uintptr_t StringResult = 0x0188;
		}

		namespace SeqAct_ControlCarMovement_TA {
			constexpr uintptr_t Instigator = 0x0160;
		}

		namespace SeqAct_Counter_TA {
			constexpr uintptr_t MaxCount = 0x0160;
		}

		namespace SeqAct_CreateAttachComponent_TA {
			constexpr uintptr_t AttachTo = 0x0160;
			constexpr uintptr_t AttachingComponent = 0x0168;
		}

		namespace SeqAct_DisableForceInFXActor_TA {
			constexpr uintptr_t InFXActor = 0x0160;
		}

		namespace SeqAct_DisplayMessage_TA {
			constexpr uintptr_t Instigator = 0x0160;
			constexpr uintptr_t Title = 0x0168;
			constexpr uintptr_t Body = 0x0178;
			constexpr uintptr_t Bitfields_0x0188 = 0x0188;  // Multiple: bShowButtonOne, bShowButtonTwo
			constexpr uintptr_t ButtonOneTitle = 0x0190;
			constexpr uintptr_t ButtonTwoTitle = 0x01A0;
		}

		namespace SeqAct_DriveSpline_TA {
			constexpr uintptr_t ForwardOffset = 0x0178;
			constexpr uintptr_t Spline = 0x0180;
			constexpr uintptr_t Throttle = 0x0188;
			constexpr uintptr_t bDebug = 0x018C;
			constexpr uintptr_t Cars = 0x0190;
		}

		namespace SeqAct_DynamicMapEvents_TA {
			constexpr uintptr_t EventID = 0x0160;
		}

		namespace SeqAct_EndTutorial_TA {
			constexpr uintptr_t Instigator = 0x0160;
		}

		namespace SeqAct_GameURLHasOption_TA {
			constexpr uintptr_t Option = 0x0160;
		}

		namespace SeqAct_GetFTEState_TA {
			constexpr uintptr_t CheckpointName = 0x0160;
			constexpr uintptr_t bIsActive = 0x0170;
		}

		namespace SeqAct_GetGameBall_TA {
			constexpr uintptr_t Ball = 0x0160;
		}

		namespace SeqAct_GetPlayerCar_TA {
			constexpr uintptr_t PlayerName = 0x0160;
			constexpr uintptr_t FoundActor = 0x0170;
		}

		namespace SeqAct_GetRarityColor_TA {
			constexpr uintptr_t RarityColorsPrime = 0x0160;
			constexpr uintptr_t bRandomize = 0x0170;
			constexpr uintptr_t MinimumRandomQuality = 0x0174;
			constexpr uintptr_t ColorIdx = 0x0178;
			constexpr uintptr_t OutColor = 0x017C;
			constexpr uintptr_t LastRandomIdx = 0x0188;
		}

		namespace SeqAct_GetSaveData_TA {
			constexpr uintptr_t SaveData = 0x0160;
		}

		namespace SeqAct_GetTeamScore_TA {
			constexpr uintptr_t TeamIndex = 0x0160;
			constexpr uintptr_t TeamScore = 0x0164;
		}

		namespace SeqAct_GiveBoost_TA {
			constexpr uintptr_t Instigator = 0x0160;
			constexpr uintptr_t BoostAmount = 0x0168;
		}

		namespace SeqAct_HideDuplicateCar_TA {
			constexpr uintptr_t ActorNameToHide = 0x0160;
			constexpr uintptr_t Bitfields_0x0170 = 0x0170;  // Multiple: bKeepAllInstancesHidden, bFoundDemoedCar
		}

		namespace SeqAct_InstanceMaterial_TA {
			constexpr uintptr_t MaterialInstance = 0x0160;
			constexpr uintptr_t SK = 0x0168;
			constexpr uintptr_t SM = 0x0170;
			constexpr uintptr_t InstancedMaterial = 0x0178;
			constexpr uintptr_t MatIndex = 0x0180;
		}

		namespace SeqAct_IsActionPressed_TA {
			constexpr uintptr_t Instigator = 0x0160;
			constexpr uintptr_t ActionName = 0x0168;
		}

		namespace SeqAct_IsHumanPlayer_TA {
			constexpr uintptr_t Instigator = 0x0160;
			constexpr uintptr_t Target = 0x0168;
		}

		namespace SeqAct_IsTargetInPlayerCameraView {
			constexpr uintptr_t Instigator = 0x0178;
			constexpr uintptr_t Target = 0x0180;
			constexpr uintptr_t MaxConeAngle = 0x0188;
		}

		namespace SeqAct_LoadMap_TA {
			constexpr uintptr_t Map = 0x0160;
		}

		namespace SeqAct_LookAtActor_TA {
			constexpr uintptr_t Actor = 0x0178;
			constexpr uintptr_t ActorToLookAt = 0x0180;
			constexpr uintptr_t InterpSpeed = 0x0188;
			constexpr uintptr_t Bitfields_0x018C = 0x018C;  // Multiple: bConstantInterpSpeed, bUpdating
		}

		namespace SeqAct_MatchCountdown_TA {
			constexpr uintptr_t CountdownTime = 0x0160;
		}

		namespace SeqAct_MoveActor_TA {
			constexpr uintptr_t Actor = 0x0178;
			constexpr uintptr_t MoveTransform = 0x0180;
			constexpr uintptr_t InterpSpeed = 0x0188;
			constexpr uintptr_t Bitfields_0x018C = 0x018C;  // Multiple: bConstantInterpSpeed, bMove
		}

		namespace SeqAct_NotifyEventOnTutorial_TA {
			constexpr uintptr_t EventName = 0x0160;
			constexpr uintptr_t Instigator = 0x0170;
		}

		namespace SeqAct_RegisterMapDragon_TA {
			constexpr uintptr_t PlacedActor = 0x0160;
			constexpr uintptr_t TeamIndex = 0x0168;
			constexpr uintptr_t bActivated = 0x016C;
		}

		namespace SeqAct_ReinitPhys_TA {
			constexpr uintptr_t RBObj = 0x0160;
		}

		namespace SeqAct_RotateActor_TA {
			constexpr uintptr_t Actor = 0x0178;
			constexpr uintptr_t RotateTransform = 0x0180;
			constexpr uintptr_t InterpSpeed = 0x0188;
			constexpr uintptr_t Bitfields_0x018C = 0x018C;  // Multiple: bConstantInterpSpeed, bUpdating
			constexpr uintptr_t RotateTolerance = 0x0190;
		}

		namespace SeqAct_ScreenFade {
			constexpr uintptr_t Instigator = 0x0160;
			constexpr uintptr_t FadeColor = 0x0168;
			constexpr uintptr_t FadeTime = 0x016C;
			constexpr uintptr_t bFadeAudio = 0x0170;
		}

		namespace SeqAct_ScreenFade_TA {
			constexpr uintptr_t Instigator = 0x0160;
			constexpr uintptr_t FadeColor = 0x0168;
			constexpr uintptr_t FadeTime = 0x016C;
			constexpr uintptr_t bFadeAudio = 0x0170;
		}

		namespace SeqAct_SetBallCamTarget_TA {
			constexpr uintptr_t Target = 0x0160;
			constexpr uintptr_t Instigator = 0x0168;
			constexpr uintptr_t bForceBallCamTarget = 0x0170;
		}

		namespace SeqAct_SetBallMaterial_TA {
			constexpr uintptr_t Ball = 0x0160;
			constexpr uintptr_t Material = 0x0168;
			constexpr uintptr_t MaterialID = 0x0170;
		}

		namespace SeqAct_SetBreakoutBallCharge_TA {
			constexpr uintptr_t BallObj = 0x0160;
			constexpr uintptr_t Charge = 0x0168;
			constexpr uintptr_t Team = 0x016C;
		}

		namespace SeqAct_SetBreakoutTileDamage_TA {
			constexpr uintptr_t PlatformObj = 0x0160;
			constexpr uintptr_t Damage = 0x0168;
		}

		namespace SeqAct_SetCarTransform_TA {
			constexpr uintptr_t Instigator = 0x0160;
			constexpr uintptr_t Transform = 0x0168;
		}

		namespace SeqAct_SetGreenScreen_TA {
			constexpr uintptr_t ColorToUse = 0x0160;
		}

		namespace SeqAct_SetLoadout_TA {
			constexpr uintptr_t Products = 0x0160;
			constexpr uintptr_t ProductsWithPaint = 0x0170;
			constexpr uintptr_t TeamFinish = 0x0180;
			constexpr uintptr_t AccentFinish = 0x0188;
			constexpr uintptr_t Bitfields_0x0190 = 0x0190;  // Multiple: bUseInGameColors, bOverwriteCurrent, bUseDefaultLoadout, bApplyToAllCars
			constexpr uintptr_t TeamColor = 0x0194;
			constexpr uintptr_t AccentColor = 0x01A4;
			constexpr uintptr_t ForcedTeamOverride = 0x01B4;
			constexpr uintptr_t BodyPaint = 0x01B8;
			constexpr uintptr_t SkinPaint = 0x01C0;
			constexpr uintptr_t WheelPaint = 0x01C8;
			constexpr uintptr_t BoostPaint = 0x01D0;
			constexpr uintptr_t SSTrailPaint = 0x01D8;
			constexpr uintptr_t AntennaPaint = 0x01E0;
			constexpr uintptr_t HatPaint = 0x01E8;
			constexpr uintptr_t GoalExplosionPaint = 0x01F0;
			constexpr uintptr_t ParentCar = 0x01F8;
			constexpr uintptr_t CarsToUpdateOnRespawn = 0x0200;
		}

		namespace SeqAct_SetMatInstParam_Vector {
			constexpr uintptr_t ParamName = 0x0160;
			constexpr uintptr_t MatInstActor = 0x0168;
			constexpr uintptr_t VectorValue = 0x0170;
		}

		namespace SeqAct_SetMatInstVectorParam_TA {
			constexpr uintptr_t MatInst = 0x0160;
			constexpr uintptr_t ParamName = 0x0168;
			constexpr uintptr_t VectorValue = 0x0170;
		}

		namespace SeqAct_SetMeshMaterialScalarParameter_TA {
			constexpr uintptr_t MeshList = 0x0160;
			constexpr uintptr_t ParamName = 0x0170;
			constexpr uintptr_t ScalarValue = 0x0180;
		}

		namespace SeqAct_SetNameplate_TA {
			constexpr uintptr_t Instigator = 0x0160;
			constexpr uintptr_t LocalizedPlayerName = 0x0168;
		}

		namespace SeqAct_SetPostProcess_TA {
			constexpr uintptr_t Chains = 0x0160;
			constexpr uintptr_t bReplaceCurrentChain = 0x0170;
		}

		namespace SeqAct_SetReplayCamera_TA {
			constexpr uintptr_t FocusActor = 0x0160;
			constexpr uintptr_t LocationOffset = 0x0170;
			constexpr uintptr_t Rotation = 0x017C;
			constexpr uintptr_t FOV = 0x0188;
		}

		namespace SeqAct_SetReplayFX_TA {
			constexpr uintptr_t FocusDistance = 0x0160;
			constexpr uintptr_t FocusBlur = 0x0164;
			constexpr uintptr_t FocusStrength = 0x0168;
			constexpr uintptr_t Bitfields_0x016C = 0x016C;  // Multiple: bUseGreenScreen, bUseVignetteOverlay
			constexpr uintptr_t GreenScreenColor = 0x0170;
			constexpr uintptr_t ImageFilterIndex = 0x0180;
			constexpr uintptr_t ImageFilterIntensity = 0x0184;
			constexpr uintptr_t Vignette = 0x0188;
		}

		namespace SeqAct_SetSkelMATLoadout_TA {
			constexpr uintptr_t ActorMAT = 0x0160;
			constexpr uintptr_t ControllerOrPawn = 0x0168;
			constexpr uintptr_t LoadoutIndex = 0x0170;
		}

		namespace SeqAct_SetStadiumTeamColors_TA {
			constexpr uintptr_t bSwapTeamColors = 0x0160;
			constexpr uintptr_t BlueColors = 0x0168;
			constexpr uintptr_t OrangeColors = 0x0178;
		}

		namespace SeqAct_SetTimeDilation_TA {
			constexpr uintptr_t VfTable_FTickableObject = 0x0160;
			constexpr uintptr_t Bitfields_0x0168 = 0x0168;  // Multiple: bUseCurve, bActivated
			constexpr uintptr_t CurrentTime = 0x016C;
			constexpr uintptr_t EndTime = 0x0170;
			constexpr uintptr_t SlomoValue = 0x0174;
			constexpr uintptr_t SlomoCurve = 0x0178;
		}

		namespace SeqAct_SetTutorialGameEvent_TA {
			constexpr uintptr_t TutorialType = 0x0160;
		}

		namespace SeqAct_SetTutorialTip_TA {
			constexpr uintptr_t Tip = 0x0160;
			constexpr uintptr_t ActionNames = 0x0170;
		}

		namespace SeqAct_SetVehicleInput_TA {
			constexpr uintptr_t Input = 0x0160;
		}

		namespace SeqAct_SpawnActor_TA {
			constexpr uintptr_t ActorArchetype = 0x0160;
			constexpr uintptr_t Transform = 0x0168;
			constexpr uintptr_t SpawnedActor = 0x0170;
		}

		namespace SeqAct_SpawnBot_TA {
			constexpr uintptr_t SpawnedBot = 0x0160;
			constexpr uintptr_t SpawnTransform = 0x0168;
			constexpr uintptr_t SkillLevel = 0x0170;
			constexpr uintptr_t Bitfields_0x0174 = 0x0174;  // Multiple: bDisableAllLogic, bCollideWithBall, bCollideWithVehicle
			constexpr uintptr_t TeamIndex = 0x0178;
		}

		namespace SeqAct_SpawnCarColors_TA {
			constexpr uintptr_t AccentColors = 0x0160;
			constexpr uintptr_t AccentTeamColor = 0x0170;
			constexpr uintptr_t BlueTeamColors = 0x0180;
			constexpr uintptr_t OrangeTeamColors = 0x0190;
			constexpr uintptr_t TeamAccentColor = 0x01A0;
			constexpr uintptr_t Body = 0x01B0;
			constexpr uintptr_t Skin = 0x01B8;
			constexpr uintptr_t CarYaw = 0x01C0;
			constexpr uintptr_t CarOffsetX = 0x01C4;
			constexpr uintptr_t CarOffsetY = 0x01C8;
			constexpr uintptr_t SetOffsetY = 0x01CC;
			constexpr uintptr_t BaseOffsetY = 0x01D0;
		}

		namespace SeqAct_SpawnFXActor_TA {
			constexpr uintptr_t VfTable_FTickableObject = 0x0160;
			constexpr uintptr_t FXActor = 0x0168;
			constexpr uintptr_t Product = 0x0170;
			constexpr uintptr_t Transform = 0x0178;
			constexpr uintptr_t Location = 0x0180;
			constexpr uintptr_t Rotation = 0x018C;
			constexpr uintptr_t ActorToSpawnOn = 0x0198;
			constexpr uintptr_t SpawnedFXActor = 0x01A0;
			constexpr uintptr_t Paint = 0x01A8;
			constexpr uintptr_t PaintParameterNames = 0x01B0;
			constexpr uintptr_t bTickable = 0x01B8;
			constexpr uintptr_t BallLocMic = 0x01C0;
		}

		namespace SeqAct_StartTutorial_TA {
			constexpr uintptr_t Instigator = 0x0160;
			constexpr uintptr_t TutorialName = 0x0168;
		}

		namespace SeqAct_TermPhys_TA {
			constexpr uintptr_t RBObj = 0x0160;
		}

		namespace SeqAct_ToggleUIOverlay_TA {
			constexpr uintptr_t UIOverlayName = 0x0160;
		}

		namespace SeqAct_UpdateAd_TA {
			constexpr uintptr_t MeshActor = 0x0160;
		}

		namespace SeqCond_CompareString_TA {
			constexpr uintptr_t bIgnoreCase = 0x0140;
			constexpr uintptr_t StringA = 0x0148;
			constexpr uintptr_t StringB = 0x0158;
		}

		namespace SeqEvent_BallInRange_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_CarSelectStart_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_CarSpawned_TA {
			constexpr uintptr_t PlayerName = 0x0180;
		}

		namespace SeqEvent_CarTouchBall_TA {
			constexpr uintptr_t bOneTouchOnly = 0x0180;
		}

		namespace SeqEvent_CinematicIntroSeqFinished_TA {
			constexpr uintptr_t SequenceIndex = 0x0180;
		}

		namespace SeqEvent_CountDownCompleted_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_CountDownStart_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_DynamicMapEvents_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_GameEventStateChanged_TA {
			constexpr uintptr_t StateName = 0x0180;
		}

		namespace SeqEvent_GameTimeChanged_TA {
			constexpr uintptr_t CallTimePercent = 0x0180;
			constexpr uintptr_t bHasBeenCalled = 0x0184;
		}

		namespace SeqEvent_GoalScored_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_InputSequence_TA {
			constexpr uintptr_t SequenceName = 0x0180;
		}

		namespace SeqEvent_IntroMenu_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_LiveReplay_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_MTXGarageBlueprintPreview_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_MTXGarageReveal_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_MainMenuSwitched_TA {
			constexpr uintptr_t PrevBackground = 0x0180;
		}

		namespace SeqEvent_PodiumStart_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_PreviewGoalExplosion_TA {
			constexpr uintptr_t FXInstance = 0x0180;
		}

		namespace SeqEvent_PreviewMusicStingerVisualizer_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_PreviewPostMatchCelebration_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_ReplayTime_TA {
			constexpr uintptr_t TimeSeconds = 0x0180;
		}

		namespace SeqEvent_RoundStart_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_ScoreChanged_TA {
			constexpr uintptr_t BlueScore = 0x0180;
			constexpr uintptr_t RedScore = 0x0184;
		}

		namespace SeqEvent_StadiumTeamColorsChanged_TA {
			constexpr uintptr_t Team = 0x0180;
			constexpr uintptr_t Primary = 0x0184;
			constexpr uintptr_t Secondary = 0x0190;
		}

		namespace SeqEvent_StartHighlightReel_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_TutorialHelper_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_TutorialStarted_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace SeqEvent_UIStateChange_TA {
			constexpr uintptr_t UIState = 0x0180;
		}

		namespace SeqEvent_UserSettingChanged_TA {
			constexpr uintptr_t SettingName = 0x0180;
		}

		namespace SeqEvent_WeatherToggled_TA {
			constexpr uintptr_t UnknownData00 = 0x017C;
		}

		namespace ServerFormPartyEvent_TA {
			constexpr uintptr_t ConfirmedMerge = 0x0060;
		}

		namespace ServerMergeErrorEvent_TA {
			constexpr uintptr_t Vote = 0x0060;
			constexpr uintptr_t Invitees = 0x0068;
			constexpr uintptr_t Leader = 0x0078;
			constexpr uintptr_t Reason = 0x00C0;
		}

		namespace ServerPerformanceConfig_TA {
			constexpr uintptr_t InternalLowFPS = 0x0078;
			constexpr uintptr_t InternalLowFPSTimeThreshold = 0x007C;
			constexpr uintptr_t PublicBadFPS = 0x0080;
			constexpr uintptr_t PublicMediocreFPS = 0x0084;
			constexpr uintptr_t FpsRollingAverageTime = 0x0088;
		}

		namespace ServerPerformanceTracker_TA {
			constexpr uintptr_t ServerPerformanceConfig = 0x00A8;
			constexpr uintptr_t ConnectionQualityConfig = 0x00B0;
			constexpr uintptr_t RollingFpsAverage = 0x00B8;
			constexpr uintptr_t InternalLowFpsTime = 0x00BC;
			constexpr uintptr_t ServerPerformanceLastUpdateTime = 0x00C0;
			constexpr uintptr_t bReportedServerForPoorPerformance = 0x00C4;
		}

		namespace ServerStartVoteEvent_TA {
			constexpr uintptr_t Parties = 0x0060;
			constexpr uintptr_t VoteOwner = 0x0070;
		}

		namespace ServerVoteStartedEvent_TA {
			constexpr uintptr_t Voters = 0x0060;
		}

		namespace SettingsMenuConfig_TA {
			constexpr uintptr_t bShowTrainingTab = 0x0078;
		}

		namespace ShopAdsConfig_TA {
			constexpr uintptr_t Ads = 0x0078;
		}

		namespace ShopAutoLoadHelper_TA {
			constexpr uintptr_t SyncRequestRange = 0x0060;
			constexpr uintptr_t AutoLoadDelayer = 0x0068;
			constexpr uintptr_t AutoLoadAsyncTask = 0x0070;
			constexpr uintptr_t AutoLoadedItems = 0x0078;
			constexpr uintptr_t AutoLoadExpirationHelper = 0x0088;
			constexpr uintptr_t MinEndDateOffset = 0x0090;
			constexpr uintptr_t MaxEndDateOffset = 0x0098;
			constexpr uintptr_t RandomEndDateOffset = 0x00A0;
			constexpr uintptr_t LastRequestStartTime = 0x00A8;
		}

		namespace ShopCatalogueCacheSave_TA {
			constexpr uintptr_t ViewedShopIDs = 0x00C8;
			constexpr uintptr_t ShopContentCache = 0x00D8;
		}

		namespace ShopErrors_TA {
			constexpr uintptr_t ShopItemBadData = 0x0080;
			constexpr uintptr_t ShopItemDiscountBadData = 0x0088;
			constexpr uintptr_t ShopSyncedBadData = 0x0090;
			constexpr uintptr_t ShopNotEnoughCurrency = 0x0098;
		}

		namespace ShopItemExpirationHelper_TA {
			constexpr uintptr_t ShopItemExpirations = 0x0060;
		}

		namespace ShopMetrics_TA {
			constexpr uintptr_t CurrentShopTabMetrics = 0x0080;
			constexpr uintptr_t CurrentBrowseSourceID = 0x0090;
			constexpr uintptr_t ShopNotificationsManager = 0x0098;
			constexpr uintptr_t CurrentShopNotificationIDs = 0x00A0;
			constexpr uintptr_t PastShopNotificationIDs = 0x00B0;
		}

		namespace ShopNotificationsManager_TA {
			constexpr uintptr_t ItemShopNotificationsConfig = 0x0060;
			constexpr uintptr_t Community = 0x0068;
			constexpr uintptr_t ShopNotificationsTask = 0x0070;
			constexpr uintptr_t PendingShopNotifications = 0x0078;
			constexpr uintptr_t CurrentNotification = 0x0088;
			constexpr uintptr_t ShownShopNotificationIDs = 0x0090;
			constexpr uintptr_t ValidMenus = 0x00A0;
			constexpr uintptr_t DynamicThumbnailDisabledClasses = 0x00B0;
		}

		namespace ShopTabsConfig_TA {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bUseLegacyTabSorting, bDisableItemsInCatalogCheck, bDebugShowIds, bDebugVerboseDebugging
			constexpr uintptr_t EsportsShopValidRegions = 0x0080;
			constexpr uintptr_t ShopType_Esports = 0x0090;
			constexpr uintptr_t ShopType_EsportsTeam = 0x00A0;
			constexpr uintptr_t ShopType_MTX = 0x00B0;
			constexpr uintptr_t DisabledTypes = 0x00C0;
			constexpr uintptr_t Time_Object = 0x00D0;
			constexpr uintptr_t Time_Interface = 0x00D8;
		}

		namespace ShopTabs_TA {
			constexpr uintptr_t Config = 0x0070;
			constexpr uintptr_t LoadedMtx = 0x0078;
			constexpr uintptr_t EsportsLabel = 0x0080;
		}

		namespace ShopsConfig_TA {
			constexpr uintptr_t DebugShopID = 0x0078;
			constexpr uintptr_t Bitfields_0x007C = 0x007C;  // Multiple: bEnableShopMetrics, bHideMainMenuButton, bHidePurchaseEsportToken
			constexpr uintptr_t ShopTypesForOwnedTracking = 0x0080;
		}

		namespace ShopsManager_TA {
			constexpr uintptr_t ServiceArchetype = 0x0060;
			constexpr uintptr_t Service = 0x0068;
			constexpr uintptr_t ActiveShopID = 0x0070;
			constexpr uintptr_t ActiveCatalogID = 0x0074;
		}

		namespace SimilarSeasonLogos_TA {
			constexpr uintptr_t LogoGroups = 0x0060;
		}

		namespace SimpleSpringComponent_TA {
			constexpr uintptr_t Spring = 0x0070;
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: bEnabled, bInitialized
			constexpr uintptr_t Displacement = 0x00C4;
			constexpr uintptr_t MassLocation = 0x00D0;
			constexpr uintptr_t MassVelocity = 0x00DC;
		}

		namespace SkelControlRotationSpring_TA {
			constexpr uintptr_t RotationMin = 0x0130;
			constexpr uintptr_t RotationMax = 0x013C;
			constexpr uintptr_t SpringToPitch = 0x0148;
			constexpr uintptr_t SpringToYaw = 0x0154;
			constexpr uintptr_t SpringToRoll = 0x0160;
			constexpr uintptr_t SpringComponent = 0x0170;
			constexpr uintptr_t TestSpringForce = 0x0178;
			constexpr uintptr_t TestSpringDelay = 0x0184;
			constexpr uintptr_t LastTestSpringTime = 0x0188;
		}

		namespace SkelControlSingleBoneCopy_TA {
			constexpr uintptr_t ControlToCopyName = 0x0130;
			constexpr uintptr_t TranslationX = 0x0138;
			constexpr uintptr_t TranslationY = 0x0144;
			constexpr uintptr_t TranslationZ = 0x0150;
			constexpr uintptr_t RotationPitch = 0x015C;
			constexpr uintptr_t RotationYaw = 0x0168;
			constexpr uintptr_t RotationRoll = 0x0174;
			constexpr uintptr_t TranslationScale = 0x0180;
			constexpr uintptr_t RotationScale = 0x018C;
			constexpr uintptr_t bConvertedScales = 0x0198;
			constexpr uintptr_t ControlToCopy = 0x01A0;
		}

		namespace SkelControlSingleBoneParameterized_TA {
			constexpr uintptr_t Pitch = 0x0130;
			constexpr uintptr_t Yaw = 0x0158;
			constexpr uintptr_t Roll = 0x0180;
			constexpr uintptr_t PitchSpeed = 0x01A8;
			constexpr uintptr_t YawSpeed = 0x01D0;
			constexpr uintptr_t RollSpeed = 0x01F8;
		}

		namespace SkelControlTether_TA {
			constexpr uintptr_t AnchorBoneName = 0x0100;
			constexpr uintptr_t DistanceMin = 0x0108;
			constexpr uintptr_t DistanceMax = 0x010C;
		}

		namespace SkeletalMeshActorMAT_IntroCar_TA {
			constexpr uintptr_t ViewIndex = 0x03E8;
			constexpr uintptr_t AngleOffset = 0x03EC;
			constexpr uintptr_t IntroCarsTemplates = 0x03F8;
		}

		namespace SkeletalMeshActorMAT_Products_TA {
			constexpr uintptr_t BodyAsset = 0x02E0;
			constexpr uintptr_t SkinAsset = 0x02E8;
			constexpr uintptr_t TeamFinishAsset = 0x02F0;
			constexpr uintptr_t CustomFinishAsset = 0x02F8;
			constexpr uintptr_t WheelAsset = 0x0300;
			constexpr uintptr_t BoostAsset = 0x0308;
			constexpr uintptr_t AntennaAsset = 0x0310;
			constexpr uintptr_t HatAsset = 0x0318;
			constexpr uintptr_t BodyPaint = 0x0320;
			constexpr uintptr_t SkinPaint = 0x0328;
			constexpr uintptr_t WheelPaint = 0x0330;
			constexpr uintptr_t Bitfields_0x0338 = 0x0338;  // Multiple: bInitBoostFX, bUseInGameColors
			constexpr uintptr_t TeamColor = 0x033C;
			constexpr uintptr_t CustomColor = 0x034C;
			constexpr uintptr_t FakeBoostVelocity = 0x035C;
			constexpr uintptr_t DeactivateBoostVelocity = 0x0360;
			constexpr uintptr_t CarMeshComp = 0x0368;
			constexpr uintptr_t FLWheelSKComponent = 0x0370;
			constexpr uintptr_t FRWheelSKComponent = 0x0378;
			constexpr uintptr_t BLWheelSKComponent = 0x0380;
			constexpr uintptr_t BRWheelSKComponent = 0x0388;
			constexpr uintptr_t FLWheelSMComponent = 0x0390;
			constexpr uintptr_t FRWheelSMComponent = 0x0398;
			constexpr uintptr_t BLWheelSMComponent = 0x03A0;
			constexpr uintptr_t BRWheelSMComponent = 0x03A8;
			constexpr uintptr_t WheelMeshComponents = 0x03B0;
			constexpr uintptr_t PreviewMesh = 0x03C0;
			constexpr uintptr_t AdditionalWheels = 0x03C8;
			constexpr uintptr_t NameplateComponent = 0x03D8;
			constexpr uintptr_t ProductLoader = 0x03E0;
		}

		namespace SkeletalMeshActor_NoSlomo_TA {
			constexpr uintptr_t UnknownData00 = 0x02CC;
		}

		namespace SkeletalMeshComponent_SplitBody_TA {
			constexpr uintptr_t CurrentAnim = 0x07B8;
			constexpr uintptr_t AnimToSyncWith = 0x07C0;
			constexpr uintptr_t SplitAttachBone = 0x07C8;
			constexpr uintptr_t SplitPrimarySuffix = 0x07D0;
			constexpr uintptr_t SplitSecondarySuffix = 0x07E0;
		}

		namespace SkeletalMeshComponent_TA {
			constexpr uintptr_t FOVOverride = 0x07B0;
			constexpr uintptr_t bIgnoreScriptAttach = 0x07B4;
		}

		namespace SkippableProperty {
			constexpr uintptr_t UnknownData00 = 0x0070;
		}

		namespace SkyLightVolumeComponent_TA {
			constexpr uintptr_t BlendDistance = 0x01D0;
			constexpr uintptr_t LightToOverride = 0x01D8;
			constexpr uintptr_t BrushComponent = 0x01E0;
			constexpr uintptr_t UnknownData00 = 0x01E8;
			constexpr uintptr_t CachedParentToWorld = 0x01F0;
		}

		namespace SkyLightVolume_TA {
			constexpr uintptr_t SkyLight = 0x02A8;
			constexpr uintptr_t UpperPaintTeam = 0x02B0;
			constexpr uintptr_t LowerPaintTeam = 0x02B1;
		}

		namespace SoundSettingsControllerSave_TA {
			constexpr uintptr_t Volume = 0x00C8;
			constexpr uintptr_t SoundMode = 0x00CC;
		}

		namespace SoundSettingsManager_TA {
			constexpr uintptr_t SoundSave = 0x0060;
			constexpr uintptr_t SoundSaveController = 0x0068;
			constexpr uintptr_t PrimaryPlayer = 0x0070;
		}

		namespace SoundSettingsSave_TA {
			constexpr uintptr_t MasterVolume = 0x00C8;
			constexpr uintptr_t SoundVolume = 0x00CC;
			constexpr uintptr_t MusicVolume = 0x00D0;
			constexpr uintptr_t GameplayMusicVolume = 0x00D4;
			constexpr uintptr_t AmbientVolume = 0x00D8;
			constexpr uintptr_t CrowdVolume = 0x00DC;
			constexpr uintptr_t VoiceVolume = 0x00E0;
			constexpr uintptr_t Bitfields_0x00E4 = 0x00E4;  // Multiple: bMuteOnFocusLost, bStreamerSafeAudioEnabled, bIsFinishedLoadingSaveSettings
			constexpr uintptr_t OutputType = 0x00E8;
			constexpr uintptr_t DynamicRangeType = 0x00E9;
			constexpr uintptr_t MusicStingersSetting = 0x00EA;
		}

		namespace SpawnDelayConfig_TA {
			constexpr uintptr_t bCanDelaySplitscreenPlayerRestart = 0x0078;
		}

		namespace SpawnPointCluster_TA {
			constexpr uintptr_t SpawnTeams = 0x0060;
		}

		namespace SpawnPointGroup_TA {
			constexpr uintptr_t SpawnOffset = 0x0060;
			constexpr uintptr_t SpawnFacing = 0x0070;
			constexpr uintptr_t SpawnPoints = 0x0080;
			constexpr uintptr_t SpotPRI = 0x0090;
			constexpr uintptr_t MaxSpots = 0x00A0;
		}

		namespace SpecialAttachment_TA {
			constexpr uintptr_t Offset = 0x07A8;
			constexpr uintptr_t StaticMesh = 0x07B8;
			constexpr uintptr_t BallHitMultiplier = 0x07C0;
			constexpr uintptr_t CarHitMultiplier = 0x07C4;
			constexpr uintptr_t CarHitVerticalMultiplier = 0x07C8;
			constexpr uintptr_t CarHitTorque = 0x07CC;
			constexpr uintptr_t Bitfields_0x07D0 = 0x07D0;  // Multiple: bUseCarsBump, bDemolishOnHit, bDemolishTeam
			constexpr uintptr_t AttachedCar = 0x07D8;
		}

		namespace SpecialEditionDatabase_TA {
			constexpr uintptr_t SpecialEditions = 0x0060;
			constexpr uintptr_t EditionNameToEditionID = 0x0070;
			constexpr uintptr_t bClickToRebuild = 0x00C0;
		}

		namespace SpecialEventConfig_TA {
			constexpr uintptr_t StoreConfigs = 0x0078;
			constexpr uintptr_t DebugMicroEventPlaylistIDs = 0x0088;
			constexpr uintptr_t CurrencyID = 0x0098;
			constexpr uintptr_t ShopID = 0x009C;
			constexpr uintptr_t Title = 0x00A0;
			constexpr uintptr_t Subtitle = 0x00B0;
			constexpr uintptr_t RedemptionTitle = 0x00C0;
			constexpr uintptr_t Description = 0x00D0;
			constexpr uintptr_t RedemptionDescription = 0x00E0;
			constexpr uintptr_t CurrencyName = 0x00F0;
			constexpr uintptr_t CurrencyImageURL = 0x0100;
			constexpr uintptr_t CurrencyImageLargeURL = 0x0110;
			constexpr uintptr_t BackgroundLogoURL = 0x0120;
			constexpr uintptr_t BackgroundImageURL = 0x0130;
			constexpr uintptr_t LogoImageURL = 0x0140;
			constexpr uintptr_t CurrencyColor = 0x0150;
			constexpr uintptr_t BackgroundColor = 0x0154;
			constexpr uintptr_t StartTime = 0x0158;
			constexpr uintptr_t StartTimeString = 0x0160;
			constexpr uintptr_t EndTime = 0x0170;
			constexpr uintptr_t EndTimeString = 0x0178;
			constexpr uintptr_t RedemptionEndTime = 0x0188;
			constexpr uintptr_t RedemptionEndTimeString = 0x0190;
			constexpr uintptr_t EventFolderName = 0x01A0;
			constexpr uintptr_t BackgroundLogo = 0x01B0;
			constexpr uintptr_t BackgroundImage = 0x01B8;
			constexpr uintptr_t CurrencyImage = 0x01C0;
			constexpr uintptr_t CurrencyImageLarge = 0x01C8;
			constexpr uintptr_t LogoImage = 0x01D0;
			constexpr uintptr_t bApplied = 0x01D8;
		}

		namespace SpecialEventErrors_TA {
			constexpr uintptr_t EventNotFound = 0x0080;
			constexpr uintptr_t EventStoreCurrencyExpired = 0x0088;
			constexpr uintptr_t EventStorePurchaseError = 0x0090;
			constexpr uintptr_t EventStoreNotEnoughCurrency = 0x0098;
			constexpr uintptr_t EventStoreLimitReached = 0x00A0;
			constexpr uintptr_t EventStoreDisabled = 0x00A8;
		}

		namespace SpecialPickup_Attachment_TA {
			constexpr uintptr_t AttachmentArchetype = 0x0388;
			constexpr uintptr_t Attachment = 0x0390;
		}

		namespace SpecialPickup_BallCarSpring_TA {
			constexpr uintptr_t SpringMeshDistanceParam = 0x0568;
		}

		namespace SpecialPickup_BallFreeze_TA {
			constexpr uintptr_t FreezeBreakFXArchetype = 0x03C0;
			constexpr uintptr_t FreezeFXArchetype = 0x03C8;
			constexpr uintptr_t FreezeMIC = 0x03D0;
			constexpr uintptr_t FreezeMaterialParam = 0x03D8;
			constexpr uintptr_t FreezeInterpTime = 0x03E0;
			constexpr uintptr_t Bitfields_0x03F8 = 0x03F8;  // Multiple: bMaintainMomentum, bTouched
			constexpr uintptr_t TimeToStop = 0x03FC;
			constexpr uintptr_t StopMomentumPercentage = 0x0400;
			constexpr uintptr_t FreezeSFX = 0x0408;
			constexpr uintptr_t BreakSFX = 0x0410;
			constexpr uintptr_t CopiedBallMesh = 0x0418;
			constexpr uintptr_t Ball = 0x0420;
			constexpr uintptr_t OrigLinearVelocity = 0x0428;
			constexpr uintptr_t OrigAngularVelocity = 0x0434;
			constexpr uintptr_t OrigSpeed = 0x0440;
			constexpr uintptr_t RepOrigSpeed = 0x0444;
			constexpr uintptr_t FreezeMat = 0x0448;
			constexpr uintptr_t FreezeFX = 0x0450;
		}

		namespace SpecialPickup_BallGravity_TA {
			constexpr uintptr_t BallGravity = 0x0388;
			constexpr uintptr_t Range = 0x038C;
			constexpr uintptr_t Offset = 0x0390;
			constexpr uintptr_t bDeactivateOnTouch = 0x039C;
			constexpr uintptr_t BeamPSArchetype = 0x03A0;
			constexpr uintptr_t BeamPSParam = 0x03A8;
			constexpr uintptr_t RecordBallHitRate = 0x03B0;
			constexpr uintptr_t BallMIC = 0x03B8;
			constexpr uintptr_t BallMICParam = 0x03C0;
			constexpr uintptr_t BallFXArchetype = 0x03C8;
			constexpr uintptr_t BallMICCurve = 0x03D0;
			constexpr uintptr_t BallSFX = 0x03E8;
			constexpr uintptr_t LastRecordedBallHitTime = 0x03F0;
			constexpr uintptr_t BeamPSC = 0x03F8;
			constexpr uintptr_t BallFX = 0x0400;
			constexpr uintptr_t CopiedBallMesh = 0x0408;
			constexpr uintptr_t BMIC = 0x0410;
			constexpr uintptr_t PrevBall = 0x0418;
		}

		namespace SpecialPickup_BallLasso_TA {
			constexpr uintptr_t SpringMeshSlackParam = 0x0568;
		}

		namespace SpecialPickup_BallVelcro_TA {
			constexpr uintptr_t BallOffset = 0x0388;
			constexpr uintptr_t Bitfields_0x0394 = 0x0394;  // Multiple: bUseRealOffset, bHit, bBroken
			constexpr uintptr_t AfterHitDuration = 0x0398;
			constexpr uintptr_t Mesh = 0x03A0;
			constexpr uintptr_t MeshScaleCurve = 0x03A8;
			constexpr uintptr_t HitMeshScaleCurve = 0x03C0;
			constexpr uintptr_t BrokenScaleCurve = 0x03D8;
			constexpr uintptr_t PostBreakDuration = 0x03F0;
			constexpr uintptr_t BallHitSFX = 0x03F8;
			constexpr uintptr_t MinBreakForce = 0x0400;
			constexpr uintptr_t MinBreakTime = 0x0404;
			constexpr uintptr_t CheckLastTouchRate = 0x0408;
			constexpr uintptr_t SMC = 0x0410;
			constexpr uintptr_t WeldedBall = 0x0418;
			constexpr uintptr_t OldBallMass = 0x0420;
			constexpr uintptr_t AttachTime = 0x0424;
			constexpr uintptr_t LastTouchCheckTime = 0x0428;
			constexpr uintptr_t BreakTime = 0x042C;
		}

		namespace SpecialPickup_Batarang_TA {
			constexpr uintptr_t SpinSpeed = 0x0570;
			constexpr uintptr_t CurRotation = 0x0574;
		}

		namespace SpecialPickup_BoostMod_TA {
			constexpr uintptr_t bUnlimitedBoost = 0x0388;
			constexpr uintptr_t BoostStrength = 0x038C;
			constexpr uintptr_t OldBoostStrength = 0x0390;
		}

		namespace SpecialPickup_BoostOverride_TA {
			constexpr uintptr_t OtherCarFXArchetype = 0x03C0;
			constexpr uintptr_t BoostSFX = 0x03C8;
			constexpr uintptr_t BeamPS = 0x03D0;
			constexpr uintptr_t AddVelocityZ = 0x03D8;
			constexpr uintptr_t BeamPSC = 0x03E0;
			constexpr uintptr_t OtherCarFX = 0x03E8;
			constexpr uintptr_t OtherCar = 0x03F0;
		}

		namespace SpecialPickup_CarFreeze_TA {
			constexpr uintptr_t OtherCarFXArchetype = 0x03C0;
			constexpr uintptr_t TireFrictionScale = 0x03C8;
			constexpr uintptr_t AddAngularVelocity = 0x03CC;
			constexpr uintptr_t OtherCarFX = 0x03D0;
			constexpr uintptr_t OtherCar = 0x03D8;
		}

		namespace SpecialPickup_CarGravity_TA {
			constexpr uintptr_t GravityScale = 0x0388;
			constexpr uintptr_t AddedForce = 0x038C;
			constexpr uintptr_t OrigGravityScale = 0x0398;
		}

		namespace SpecialPickup_CarLaunch_TA {
			constexpr uintptr_t LaunchVelocity = 0x0388;
		}

		namespace SpecialPickup_CarSpeed_TA {
			constexpr uintptr_t SpeedMultiplier = 0x0388;
			constexpr uintptr_t MaxLinearSpeedMultiplier = 0x038C;
			constexpr uintptr_t DriveTorqueCurve = 0x0390;
			constexpr uintptr_t OriginalTorque = 0x03A8;
			constexpr uintptr_t OriginalMaxLinearSpeed = 0x03AC;
			constexpr uintptr_t OriginalDriveTorqueCurve = 0x03B0;
		}

		namespace SpecialPickup_Demolish_TA {
			constexpr uintptr_t DemolishTarget = 0x0388;
			constexpr uintptr_t DemolishSpeed = 0x0389;
			constexpr uintptr_t OldTarget = 0x038A;
			constexpr uintptr_t OldSpeed = 0x038B;
		}

		namespace SpecialPickup_Football_TA {
			constexpr uintptr_t BallHitSFX = 0x0388;
			constexpr uintptr_t DeactivateSFX = 0x0390;
			constexpr uintptr_t AttachTime = 0x0398;
			constexpr uintptr_t DetachTime = 0x039C;
			constexpr uintptr_t ThrowSettings = 0x03A0;
			constexpr uintptr_t AttachOffset = 0x03B0;
			constexpr uintptr_t CarFumbleForce = 0x03BC;
			constexpr uintptr_t DoubleJumpUpForce = 0x03C0;
			constexpr uintptr_t DemolishUpForce = 0x03C4;
			constexpr uintptr_t MinBreakTime = 0x03C8;
			constexpr uintptr_t MinAttachTime = 0x03CC;
			constexpr uintptr_t CheckLastTouchRate = 0x03D0;
			constexpr uintptr_t OutOfBoundsZ = 0x03D4;
			constexpr uintptr_t WeldedBall = 0x03D8;
			constexpr uintptr_t LastTouchCheckTime = 0x03E0;
			constexpr uintptr_t PendingBall = 0x03E8;
			constexpr uintptr_t PendingBallDodge = 0x03F0;
		}

		namespace SpecialPickup_GrapplingHook_TA {
			constexpr uintptr_t Impulse = 0x03C0;
			constexpr uintptr_t Force = 0x03C4;
			constexpr uintptr_t MaxRopeLength = 0x03C8;
			constexpr uintptr_t PredictionSpeed = 0x03CC;
			constexpr uintptr_t Bitfields_0x03D0 = 0x03D0;  // Multiple: bDeactivateOnTouch, bInstant, bBlocked, bAttachedToBall
			constexpr uintptr_t RopeLengthCurve = 0x03D8;
			constexpr uintptr_t RopeMesh = 0x03F0;
			constexpr uintptr_t RopeMeshScale = 0x03F8;
			constexpr uintptr_t RopeMeshInitialSize = 0x0404;
			constexpr uintptr_t RopeRotationOffset = 0x0408;
			constexpr uintptr_t RopeMeshSlackParam = 0x0414;
			constexpr uintptr_t RopeMeshGravityParam = 0x041C;
			constexpr uintptr_t HookMesh = 0x0428;
			constexpr uintptr_t HookMeshScale = 0x0430;
			constexpr uintptr_t HookMeshOffset = 0x043C;
			constexpr uintptr_t HookRotationOffset = 0x0448;
			constexpr uintptr_t HitDistanceOffset = 0x0454;
			constexpr uintptr_t AfterAttachDuration = 0x0458;
			constexpr uintptr_t HookAnimSet = 0x0460;
			constexpr uintptr_t HookClosedAnim = 0x0468;
			constexpr uintptr_t HookOpenAnim = 0x0470;
			constexpr uintptr_t BlockedRequiredMoveDistance = 0x0478;
			constexpr uintptr_t BlockedRequiredMoveTime = 0x047C;
			constexpr uintptr_t BlockedStartTime = 0x0480;
			constexpr uintptr_t BlockedStartPos = 0x0484;
			constexpr uintptr_t RMC = 0x0490;
			constexpr uintptr_t RMI = 0x0498;
			constexpr uintptr_t HMC = 0x04A0;
			constexpr uintptr_t Ball = 0x04A8;
			constexpr uintptr_t RopeOrigin = 0x04B0;
			constexpr uintptr_t RopeToTime = 0x04BC;
			constexpr uintptr_t CurrentRopeLength = 0x04C0;
			constexpr uintptr_t AttachTime = 0x04C4;
		}

		namespace SpecialPickup_HandbrakeOverride_TA {
			constexpr uintptr_t OtherCar = 0x03C0;
		}

		namespace SpecialPickup_HauntedBallBeam_TA {
			constexpr uintptr_t Bitfields_0x0420 = 0x0420;  // Multiple: bIsPhasingBall, bIsInRange, bSFxLoopIsPlaying
			constexpr uintptr_t PrevHauntedBall = 0x0428;
			constexpr uintptr_t MaxSimulatedClients = 0x0430;
			constexpr uintptr_t ArrivalDistance = 0x0434;
			constexpr uintptr_t CarAvoidenceOffset = 0x0438;
			constexpr uintptr_t BeamEndSFX = 0x0448;
			constexpr uintptr_t ConnectedBeamLoopSFX = 0x0450;
			constexpr uintptr_t BeamLoopSFX = 0x0458;
		}

		namespace SpecialPickup_HitForce_TA {
			constexpr uintptr_t Bitfields_0x0388 = 0x0388;  // Multiple: bBallForce, bCarForce, bDemolishCars
			constexpr uintptr_t BallHitForce = 0x038C;
			constexpr uintptr_t CarHitForce = 0x0390;
			constexpr uintptr_t BallHitFXArchetype = 0x0398;
			constexpr uintptr_t CarHitFXArchetype = 0x03A0;
			constexpr uintptr_t HitSFX = 0x03A8;
			constexpr uintptr_t MinFXTime = 0x03B0;
			constexpr uintptr_t OrigBallHitForce = 0x03B4;
			constexpr uintptr_t OrigCarHitForce = 0x03B8;
			constexpr uintptr_t LastFXTime = 0x03BC;
		}

		namespace SpecialPickup_Inflate_TA {
			constexpr uintptr_t ScaleMultiplier = 0x03C0;
			constexpr uintptr_t GravityMultiplier = 0x03C4;
			constexpr uintptr_t OtherCar = 0x03C8;
		}

		namespace SpecialPickup_Rugby_TA {
			constexpr uintptr_t Mesh = 0x0388;
			constexpr uintptr_t BallHitSFX = 0x0390;
			constexpr uintptr_t DeactivateSFX = 0x0398;
			constexpr uintptr_t AttachTime = 0x03A0;
			constexpr uintptr_t MinDetachTime = 0x03A4;
			constexpr uintptr_t MinBreakTime = 0x03A8;
			constexpr uintptr_t MinBreakForce = 0x03AC;
			constexpr uintptr_t CheckLastTouchRate = 0x03B0;
			constexpr uintptr_t KickOffActivationDelay = 0x03B4;
			constexpr uintptr_t BallReleaseForce = 0x03B8;
			constexpr uintptr_t BallReleaseLift = 0x03BC;
			constexpr uintptr_t Bitfields_0x03C0 = 0x03C0;  // Multiple: bUseForwardReleaseDirection, bBallWelded
			constexpr uintptr_t MaterialInstanceOverride = 0x03C8;
			constexpr uintptr_t Team0Color = 0x03D0;
			constexpr uintptr_t Team1Color = 0x03E0;
			constexpr uintptr_t LightColorName = 0x03F0;
			constexpr uintptr_t InstantDemoSFX = 0x03F8;
			constexpr uintptr_t DodgeSFX = 0x0400;
			constexpr uintptr_t SMC = 0x0408;
			constexpr uintptr_t WeldedBall = 0x0410;
			constexpr uintptr_t LastTouchCheckTime = 0x0418;
		}

		namespace SpecialPickup_Spring_TA {
			constexpr uintptr_t Force = 0x03C0;
			constexpr uintptr_t VerticalForce = 0x03C4;
			constexpr uintptr_t Torque = 0x03C8;
			constexpr uintptr_t Bitfields_0x03D4 = 0x03D4;  // Multiple: bApplyRelativeForce, bApplyConstantForce, bBreakConstantForceWithHit, bApplyRelativeConstantForce, bInstant, bFollowAfterHit, bSpringed
			constexpr uintptr_t RelativeForceCurve = 0x03D8;
			constexpr uintptr_t RelativeForceNormalDirection = 0x03F0;
			constexpr uintptr_t MaxSpringLength = 0x03F4;
			constexpr uintptr_t ConstantForce = 0x03F8;
			constexpr uintptr_t RelativeConstantForceCurve = 0x0400;
			constexpr uintptr_t SpringLengthCurve = 0x0418;
			constexpr uintptr_t FromOffset = 0x0430;
			constexpr uintptr_t SpringMesh = 0x0440;
			constexpr uintptr_t SpringMeshScale = 0x0448;
			constexpr uintptr_t SpringMeshInitialSize = 0x0454;
			constexpr uintptr_t SpringRotationOffset = 0x0458;
			constexpr uintptr_t HittingMesh = 0x0468;
			constexpr uintptr_t HittingMeshScale = 0x0470;
			constexpr uintptr_t HittingMeshOffset = 0x047C;
			constexpr uintptr_t HittingRotationOffset = 0x0488;
			constexpr uintptr_t HitDistanceOffset = 0x0494;
			constexpr uintptr_t AfterSpringDuration = 0x0498;
			constexpr uintptr_t BallHitType = 0x049C;
			constexpr uintptr_t AfterHitLengthCurve = 0x04A0;
			constexpr uintptr_t HitFXArchetype = 0x04B8;
			constexpr uintptr_t ShootFXArchetype = 0x04C0;
			constexpr uintptr_t HitSFX = 0x04C8;
			constexpr uintptr_t FadeOutParam = 0x04D0;
			constexpr uintptr_t FadeOutCurve = 0x04D8;
			constexpr uintptr_t MinSpringLength = 0x04F0;
			constexpr uintptr_t WeldedForceScalar = 0x04F4;
			constexpr uintptr_t WeldedVerticalForce = 0x04F8;
			constexpr uintptr_t CurrentSpringLength = 0x04FC;
			constexpr uintptr_t SpringedTime = 0x0500;
			constexpr uintptr_t SMC = 0x0508;
			constexpr uintptr_t SMI = 0x0510;
			constexpr uintptr_t HMC = 0x0518;
			constexpr uintptr_t HMI = 0x0520;
			constexpr uintptr_t AfterSpringTime = 0x0530;
			constexpr uintptr_t SpringToTime = 0x0534;
			constexpr uintptr_t SpringOrigin = 0x0538;
			constexpr uintptr_t SpringedLocation = 0x0544;
			constexpr uintptr_t SpringedNormal = 0x0550;
			constexpr uintptr_t SpringedLength = 0x055C;
			constexpr uintptr_t ShootFX = 0x0560;
		}

		namespace SpecialPickup_Swapper_TA {
			constexpr uintptr_t OwnCarFX = 0x03C0;
			constexpr uintptr_t OtherCarFX = 0x03C8;
			constexpr uintptr_t AddVelocityZ = 0x03D0;
			constexpr uintptr_t OtherFX = 0x03D8;
			constexpr uintptr_t OtherCar = 0x03E0;
		}

		namespace SpecialPickup_TA {
			constexpr uintptr_t PickupName = 0x02E0;
			constexpr uintptr_t Bitfields_0x02F0 = 0x02F0;  // Multiple: bHudIgnoreUseTime, bHasActivated, bIsActive
			constexpr uintptr_t ActiveIcon = 0x02F8;
			constexpr uintptr_t InactiveIcon = 0x0300;
			constexpr uintptr_t ActivationDuration = 0x0308;
			constexpr uintptr_t PickupFXArchetype = 0x0310;
			constexpr uintptr_t BodyReplacements = 0x0318;
			constexpr uintptr_t ShakeComponentArchetype = 0x0328;
			constexpr uintptr_t ActivateSFX = 0x0330;
			constexpr uintptr_t LocalActivateSFX = 0x0338;
			constexpr uintptr_t PickupFX = 0x0340;
			constexpr uintptr_t ShakeComp = 0x0348;
			constexpr uintptr_t PickupSlot = 0x0350;
			constexpr uintptr_t CooldownSeconds = 0x0354;
		}

		namespace SpecialPickup_Targeted_TA {
			constexpr uintptr_t Bitfields_0x0388 = 0x0388;  // Multiple: bCanTargetBall, bCanTargetCars, bCanTargetEnemyCars, bCanTargetTeamCars, bUseDirectionalTargeting, bRequireTrace
			constexpr uintptr_t Range = 0x038C;
			constexpr uintptr_t DirectionalTargetingAccuracy = 0x0390;
			constexpr uintptr_t ClientTarget = 0x0398;
			constexpr uintptr_t Targeted = 0x03A0;
		}

		namespace SpecialPickup_TimeBomb_TA {
			constexpr uintptr_t Radius = 0x0388;
			constexpr uintptr_t AlmostReadyDuration = 0x038C;
			constexpr uintptr_t StartMatSpeed = 0x0390;
			constexpr uintptr_t AlmostReadyMatSpeed = 0x0394;
			constexpr uintptr_t ImpulseForce = 0x0398;
			constexpr uintptr_t CarVerticalForce = 0x039C;
			constexpr uintptr_t CarTorque = 0x03A0;
			constexpr uintptr_t Bitfields_0x03A4 = 0x03A4;  // Multiple: bDemolish, bImpulse
		}

		namespace SpecialPickup_Tornado_TA {
			constexpr uintptr_t Height = 0x0388;
			constexpr uintptr_t Radius = 0x038C;
			constexpr uintptr_t Offset = 0x0390;
			constexpr uintptr_t VerticalForceCurve = 0x03A0;
			constexpr uintptr_t RotationalForce = 0x03B8;
			constexpr uintptr_t CentripetalForceCurve = 0x03C0;
			constexpr uintptr_t CarDirectionForceCurve = 0x03D8;
			constexpr uintptr_t Torque = 0x03F0;
			constexpr uintptr_t FXScale = 0x03F4;
			constexpr uintptr_t FXOffset = 0x0400;
			constexpr uintptr_t TornadoMesh = 0x0410;
			constexpr uintptr_t MeshOffset = 0x0418;
			constexpr uintptr_t MeshScale = 0x0424;
			constexpr uintptr_t TornadoMIC0 = 0x0430;
			constexpr uintptr_t TornadoMIC1 = 0x0438;
			constexpr uintptr_t TornadoMIC2 = 0x0440;
			constexpr uintptr_t TornadoMIC3 = 0x0448;
			constexpr uintptr_t TornadoMIC4 = 0x0450;
			constexpr uintptr_t TornadoMIC5 = 0x0458;
			constexpr uintptr_t OpacityCurve = 0x0460;
			constexpr uintptr_t MaxVelocityOffset = 0x0478;
			constexpr uintptr_t BallMultiplier = 0x047C;
			constexpr uintptr_t bDebugVis = 0x0480;
			constexpr uintptr_t VelocityEase = 0x0484;
			constexpr uintptr_t BallSFX = 0x0488;
			constexpr uintptr_t CarSFX = 0x0490;
			constexpr uintptr_t SMC = 0x0498;
			constexpr uintptr_t MIC0 = 0x04A0;
			constexpr uintptr_t MIC1 = 0x04A8;
			constexpr uintptr_t MIC2 = 0x04B0;
			constexpr uintptr_t MIC3 = 0x04B8;
			constexpr uintptr_t MIC4 = 0x04C0;
			constexpr uintptr_t MIC5 = 0x04C8;
			constexpr uintptr_t Vel = 0x04D0;
			constexpr uintptr_t Affecting = 0x04E0;
		}

		namespace SpectatorVolume_TA {
			constexpr uintptr_t UnknownData00 = 0x02A4;
		}

		namespace SplineFocusTarget_TA {
			constexpr uintptr_t Spline = 0x0268;
			constexpr uintptr_t DistanceAhead = 0x0270;
		}

		namespace StasisExplosionHandler_TA {
			constexpr uintptr_t VelocityToApply = 0x0150;
			constexpr uintptr_t SlowDownTime = 0x015C;
		}

		namespace StatCategory_TA {
			constexpr uintptr_t Titles = 0x0060;
			constexpr uintptr_t Multiplier = 0x0070;
		}

		namespace StatEvent_TA {
			constexpr uintptr_t Points = 0x0060;
			constexpr uintptr_t CooldownSeconds = 0x0064;
			constexpr uintptr_t Bitfields_0x0068 = 0x0068;  // Multiple: bAddToScore, bIsLeaderboardStat, bNotifyTicker, bShowOnHUD, bPrimaryStat, bSkipReplication, bCanMute, bCountMultiplied
			constexpr uintptr_t Group = 0x0070;
			constexpr uintptr_t Texture = 0x0078;
			constexpr uintptr_t UISound = 0x0080;
			constexpr uintptr_t DisplayProductStatClass = 0x0088;
			constexpr uintptr_t Label = 0x0090;
			constexpr uintptr_t PluralLabel = 0x00A0;
			constexpr uintptr_t Description = 0x00B0;
		}

		namespace StatFactoryBase_TA {
			constexpr uintptr_t AllStatEvents = 0x0268;
		}

		namespace StatFactory_Basketball_TA {
			constexpr uintptr_t HoopsSwishGoal = 0x04F0;
			constexpr uintptr_t RedZoneHeightScale = 0x04F8;
		}

		namespace StatFactory_Breakout_TA {
			constexpr uintptr_t BreakoutDamage = 0x04F0;
			constexpr uintptr_t BreakoutDamageLarge = 0x04F8;
			constexpr uintptr_t BreakoutSaveDamageThreshold = 0x0500;
			constexpr uintptr_t BreakoutDamageLargeThreshold = 0x0504;
			constexpr uintptr_t ShotGoalTimestep = 0x0508;
			constexpr uintptr_t BreakoutEvent = 0x0510;
			constexpr uintptr_t FieldCenter = 0x0518;
		}

		namespace StatFactory_HauntedBall_TA {
			constexpr uintptr_t EpicSaveTime = 0x04F0;
		}

		namespace StatFactory_KnockOut_TA {
			constexpr uintptr_t Events_KO = 0x04F0;
			constexpr uintptr_t KnockOutGame = 0x0588;
			constexpr uintptr_t AerialHitFloorDistance = 0x0590;
		}

		namespace StatFactory_TA {
			constexpr uintptr_t Events = 0x0278;
			constexpr uintptr_t BallCache = 0x0460;
			constexpr uintptr_t GoalSizeFudge = 0x0470;
			constexpr uintptr_t ShotMaxTime = 0x0474;
			constexpr uintptr_t ShotArriveTime = 0x0478;
			constexpr uintptr_t ShotMaxDistance = 0x047C;
			constexpr uintptr_t RedZoneDistance = 0x0480;
			constexpr uintptr_t JuggleMinSpeed = 0x0484;
			constexpr uintptr_t BulletHitSpeed = 0x0488;
			constexpr uintptr_t AerialHitHeight = 0x048C;
			constexpr uintptr_t AerialHitMinRelSpeed = 0x0490;
			constexpr uintptr_t BicycleSpinSpeed = 0x0494;
			constexpr uintptr_t LongGoalDistance = 0x0498;
			constexpr uintptr_t HatTrickThreshold = 0x049C;
			constexpr uintptr_t PlaymakerThreshold = 0x04A0;
			constexpr uintptr_t SaviorThreshold = 0x04A4;
			constexpr uintptr_t DemolitionThreshold = 0x04A8;
			constexpr uintptr_t bGaveFirstTouch = 0x04AC;
			constexpr uintptr_t SoccarGame = 0x04B0;
			constexpr uintptr_t ScoringPRI = 0x04B8;
			constexpr uintptr_t CarsIssuedAnyFiveHit = 0x04C0;
			constexpr uintptr_t MinPossessionTimeForSteal = 0x04D0;
			constexpr uintptr_t CrossbarHitsCooldown = 0x04D4;
		}

		namespace StatGraphDrawer_TA {
			constexpr uintptr_t History = 0x0060;
			constexpr uintptr_t MaxSampleAge = 0x0068;
			constexpr uintptr_t Scale = 0x006C;
			constexpr uintptr_t PixelsPerSample = 0x0070;
			constexpr uintptr_t ValueStartX = 0x0074;
			constexpr uintptr_t MaxCharHeight = 0x0078;
			constexpr uintptr_t SpaceWidth = 0x007C;
			constexpr uintptr_t LabelMaxWidth = 0x0080;
			constexpr uintptr_t ValueMaxWidth = 0x0084;
			constexpr uintptr_t GridCellWidth = 0x0088;
			constexpr uintptr_t GridCellHeight = 0x008C;
			constexpr uintptr_t GraphWidth = 0x0090;
			constexpr uintptr_t GraphHeight = 0x0094;
			constexpr uintptr_t GraphStartX = 0x0098;
			constexpr uintptr_t GraphEndX = 0x009C;
			constexpr uintptr_t X = 0x00A0;
			constexpr uintptr_t Y = 0x00A4;
			constexpr uintptr_t Canvas = 0x00A8;
			constexpr uintptr_t SummaryLabels = 0x00B0;
			constexpr uintptr_t GridLines = 0x00C0;
			constexpr uintptr_t SampleLines = 0x00D0;
			constexpr uintptr_t SampleLineIndex = 0x00E0;
		}

		namespace StatGraphSystem_TA {
			constexpr uintptr_t GraphSampleTime = 0x0070;
			constexpr uintptr_t GraphLevel = 0x0074;
			constexpr uintptr_t PerfStatGraph = 0x0078;
			constexpr uintptr_t NetStatGraph = 0x0080;
			constexpr uintptr_t InputBufferGraph = 0x0088;
			constexpr uintptr_t StatGraphs = 0x0090;
			constexpr uintptr_t VisibleStatGraphs = 0x00A0;
			constexpr uintptr_t PreallocGraphLines = 0x00B0;
		}

		namespace StatGraph_TA {
			constexpr uintptr_t RecordSettings = 0x0070;
			constexpr uintptr_t LastTickTime = 0x0078;
			constexpr uintptr_t SampleHistories = 0x0080;
		}

		namespace StatTitle_TA {
			constexpr uintptr_t PrimaryTitle = 0x0060;
			constexpr uintptr_t SecondaryTitle = 0x0070;
			constexpr uintptr_t Points = 0x0080;
			constexpr uintptr_t MinStatValueRequired = 0x0084;
			constexpr uintptr_t MaxStatValueAllowed = 0x0088;
			constexpr uintptr_t Stat = 0x0090;
			constexpr uintptr_t Bitfields_0x0098 = 0x0098;  // Multiple: bPerStat, bInverseStat, bClampStatToOne
			constexpr uintptr_t StatUnitType = 0x009C;
		}

		namespace StaticMeshActor_TA {
			constexpr uintptr_t StaticMeshComponent = 0x0268;
		}

		namespace StaticMeshComponent_TA {
			constexpr uintptr_t bIgnoreScriptAttach = 0x0300;
		}

		namespace StatusObserver_FTE_TA {
			constexpr uintptr_t LastGroupCompleted = 0x00A0;
			constexpr uintptr_t FTEManager = 0x00A8;
		}

		namespace StatusObserver_MenuStack_TA {
			constexpr uintptr_t LastMenuVisited = 0x00A0;
			constexpr uintptr_t LastButtonTriggered = 0x00A8;
			constexpr uintptr_t LastCrumbTrailCompleted = 0x00B0;
			constexpr uintptr_t LastMenuTreeButtonClicked = 0x00B8;
			constexpr uintptr_t CrumbManager = 0x00C0;
			constexpr uintptr_t CrumbSave = 0x00C8;
		}

		namespace StatusObserver_OnlineMatchEnded_TA {
			constexpr uintptr_t bOnlineMatchEnded = 0x00A0;
		}

		namespace StatusObserver_Products_TA {
			constexpr uintptr_t LastEquippedProducts = 0x00A0;
			constexpr uintptr_t LastOwnedProducts = 0x00B0;
			constexpr uintptr_t LastTeamIndex = 0x00C0;
			constexpr uintptr_t SaveData = 0x00C8;
			constexpr uintptr_t ProductsSave = 0x00D0;
			constexpr uintptr_t ProfileLoadoutSave = 0x00D8;
			constexpr uintptr_t PendingChangedProductSlots = 0x00E0;
		}

		namespace StatusObserver_XPLevel_TA {
			constexpr uintptr_t LastGivenXp = 0x00A0;
			constexpr uintptr_t LastGivenLevel = 0x00A4;
		}

		namespace StatusTriggerManager_TA {
			constexpr uintptr_t Observers = 0x0060;
			constexpr uintptr_t Conditions = 0x0070;
		}

		namespace StatusTrigger_FTEGroupComplete_TA {
			constexpr uintptr_t ConditionalValue = 0x0080;
		}

		namespace StatusTrigger_Named_TA {
			constexpr uintptr_t ConditionalValue = 0x0080;
		}

		namespace StatusTrigger_Numerical_TA {
			constexpr uintptr_t TCNType = 0x0080;
			constexpr uintptr_t ConditionalValue = 0x0084;
		}

		namespace StatusTrigger_Product_TA {
			constexpr uintptr_t ConditionalValue = 0x0080;
		}

		namespace StayAsPartyLeader_TA {
			constexpr uintptr_t LeaderID = 0x0060;
		}

		namespace StayAsPartyVoteYes_TA {
			constexpr uintptr_t Voter = 0x0268;
		}

		namespace StayAsPartyVote_TA {
			constexpr uintptr_t Voters = 0x0060;
			constexpr uintptr_t VotedYes = 0x0070;
			constexpr uintptr_t PendingMerges = 0x0080;
			constexpr uintptr_t MergeRecord = 0x0090;
			constexpr uintptr_t MergeErrors = 0x00A0;
		}

		namespace StayAsPartyVoter_TA {
			constexpr uintptr_t PlayerID = 0x0268;
			constexpr uintptr_t Followers = 0x02B0;
			constexpr uintptr_t YesVote = 0x02C0;
			constexpr uintptr_t bSentPartyInvites = 0x02C8;
			constexpr uintptr_t PRI = 0x02D0;
		}

		namespace StoredChatData_TA {
			constexpr uintptr_t ChatChannel = 0x0060;
			constexpr uintptr_t SenderId = 0x0068;
			constexpr uintptr_t LastChatUpdate = 0x00B0;
			constexpr uintptr_t Messages = 0x00B8;
			constexpr uintptr_t bIsActive = 0x00C8;
		}

		namespace StreamerSafeConfig_TA {
			constexpr uintptr_t StreamerSafeSoundCueNames = 0x0078;
			constexpr uintptr_t FallbackStreamerSafeTitleTracks = 0x0088;
			constexpr uintptr_t bPlayerSettingEnabled = 0x0098;
		}

		namespace Stunlock_TA {
			constexpr uintptr_t Car = 0x0268;
			constexpr uintptr_t ButtonMashReduceTime = 0x0270;
			constexpr uintptr_t MinTimeBetweenMashes = 0x0274;
			constexpr uintptr_t LastMashTime = 0x0278;
			constexpr uintptr_t MaxStunTime = 0x027C;
			constexpr uintptr_t StunTimeRemaining = 0x0280;
			constexpr uintptr_t MashTime = 0x0284;
			constexpr uintptr_t bMashed = 0x0288;
		}

		namespace SupportACreatorErrors_TA {
			constexpr uintptr_t InvalidSupportACreatorCode = 0x0080;
		}

		namespace SystemSettingsManager_TA {
			constexpr uintptr_t NumPlayers = 0x0060;
		}

		namespace TAsyncResult__PrivilegeCheck_X {
			constexpr uintptr_t Result = 0x00D0;
		}

		namespace TAsyncResult__UserBugReportUploadResult_TA {
			constexpr uintptr_t Result = 0x00D0;
		}

		namespace TargetIndicator_TA {
			constexpr uintptr_t MinTranslationX = 0x0308;
			constexpr uintptr_t MaxTranslationX = 0x030C;
			constexpr uintptr_t MinDistance = 0x0310;
			constexpr uintptr_t MaxDistance = 0x0314;
			constexpr uintptr_t ZTranslationOffset = 0x0318;
			constexpr uintptr_t MaxDisplayDistance = 0x031C;
			constexpr uintptr_t DistanceScaleMultiplier = 0x0320;
			constexpr uintptr_t TargetActor = 0x0328;
		}

		namespace Target_Knockout_TA {
			constexpr uintptr_t UnknownData00 = 0x00C4;
		}

		namespace Target_TA {
			constexpr uintptr_t LocalTranslation = 0x00A8;
			constexpr uintptr_t WorldTranslation = 0x00B4;
			constexpr uintptr_t Priority = 0x00C0;
		}

		namespace Target_World_TA {
			constexpr uintptr_t UnknownData00 = 0x00C4;
		}

		namespace TeamColorPreferences_TA {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: bColorBlind, bForceDefaultColors
		}

		namespace TeamColorScriptedTexture_TA {
			constexpr uintptr_t PixelColorList = 0x01B8;
			constexpr uintptr_t bMaxBrightness = 0x01C8;
		}

		namespace TeamNameComponent_TA {
			constexpr uintptr_t SanitizedTeamName = 0x0070;
			constexpr uintptr_t bHasCustomColor = 0x0080;
			constexpr uintptr_t TeamIndex = 0x0084;
		}

		namespace Team_Soccar_TA {
			constexpr uintptr_t GameScore = 0x0480;
			constexpr uintptr_t PrimaryStarts = 0x0488;
			constexpr uintptr_t SecondaryStarts = 0x0498;
		}

		namespace Team_TA {
			constexpr uintptr_t CarColorSet = 0x0290;
			constexpr uintptr_t CarColorSet_v1 = 0x0298;
			constexpr uintptr_t CarColorSet_v2 = 0x02A0;
			constexpr uintptr_t FontColor = 0x02A8;
			constexpr uintptr_t ColorBlindFontColor = 0x02B8;
			constexpr uintptr_t Crossplay = 0x02C8;
			constexpr uintptr_t TeamControllerColor = 0x02D0;
			constexpr uintptr_t TeamScoreStrobeColor = 0x02D4;
			constexpr uintptr_t TeamScriptedTexture = 0x02D8;
			constexpr uintptr_t DefaultColorList = 0x02E0;
			constexpr uintptr_t ColorBlindColorList = 0x02F0;
			constexpr uintptr_t CurrentColorList = 0x0300;
			constexpr uintptr_t GameEvent = 0x0310;
			constexpr uintptr_t Members = 0x0318;
			constexpr uintptr_t FormerMembers = 0x0328;
			constexpr uintptr_t CustomTeamName = 0x0338;
			constexpr uintptr_t TeamNameComponent = 0x0348;
			constexpr uintptr_t ClubID = 0x0350;
			constexpr uintptr_t Logo = 0x0358;
			constexpr uintptr_t LogoData = 0x0360;
			constexpr uintptr_t ClubColors = 0x0368;
			constexpr uintptr_t ForfeitVoteArchetype = 0x0370;
			constexpr uintptr_t ForfeitVote = 0x0378;
			constexpr uintptr_t PartyUpVote = 0x0380;
			constexpr uintptr_t bForfeit = 0x0388;
			constexpr uintptr_t TemporarySpawnSpots = 0x0390;
			constexpr uintptr_t Difficulty = 0x03A0;
		}

		namespace ThankYouMessageConfig_TA {
			constexpr uintptr_t bThankYouMessageEnabled = 0x0078;
		}

		namespace ThrottleShakeComponent_TA {
			constexpr uintptr_t ThrottleRiseSpeed = 0x01B8;
			constexpr uintptr_t ThrottleFallSpeed = 0x01BC;
			constexpr uintptr_t Throttle = 0x01C0;
		}

		namespace ThrottleStateComponent_TA {
			constexpr uintptr_t EngageSound = 0x00A8;
			constexpr uintptr_t ReleaseSound = 0x00B0;
			constexpr uintptr_t Car = 0x00B8;
			constexpr uintptr_t PrevThrottle = 0x00C0;
			constexpr uintptr_t Bitfields_0x00C4 = 0x00C4;  // Multiple: bPrevCarAccelerating, bPrevCarIdling, bCanThrottleEngage
		}

		namespace ThumbnailRenderer_TA {
			constexpr uintptr_t CameraRotation = 0x0060;
			constexpr uintptr_t CameraTranslation = 0x006C;
			constexpr uintptr_t CameraFOV = 0x0078;
			constexpr uintptr_t Bitfields_0x007C = 0x007C;  // Multiple: bAutoZoomCamera, bDisableLightEnvironment, CompressionNone, bSkipBackground, bSkipScene
			constexpr uintptr_t ProductRotation = 0x0080;
			constexpr uintptr_t ProductTranslation = 0x008C;
			constexpr uintptr_t ScenePrefab = 0x0098;
			constexpr uintptr_t ScenePostProcessChain = 0x00A0;
			constexpr uintptr_t ScenePostProcessSettings = 0x00A8;
			constexpr uintptr_t BackgroundColor = 0x0210;
			constexpr uintptr_t RenderWidth = 0x0220;
			constexpr uintptr_t RenderHeight = 0x0224;
			constexpr uintptr_t TextureWidth = 0x0228;
			constexpr uintptr_t TextureHeight = 0x022C;
			constexpr uintptr_t MipGenSettings = 0x0230;
			constexpr uintptr_t LODBias = 0x0234;
		}

		namespace ThumbnailScene_TA {
			constexpr uintptr_t SceneComponents = 0x0060;
			constexpr uintptr_t ViewTranslation = 0x0070;
			constexpr uintptr_t ViewRotation = 0x007C;
			constexpr uintptr_t bForceAllUsedMipsResident = 0x0088;
			constexpr uintptr_t Background = 0x0090;
			constexpr uintptr_t RenderScene = 0x0098;
			constexpr uintptr_t CameraFOV = 0x00A0;
			constexpr uintptr_t TeamID = 0x00A4;
		}

		namespace TickNotifyDelegate_TA {
			constexpr uintptr_t VfTable_IITickNotify_TA = 0x0060;
		}

		namespace TourBracketCache_TA {
			constexpr uintptr_t Tournaments = 0x0060;
			constexpr uintptr_t Config = 0x0068;
			constexpr uintptr_t Brackets = 0x0070;
			constexpr uintptr_t Requests = 0x0080;
		}

		namespace TourBracketSync_TA {
			constexpr uintptr_t Tournaments = 0x0060;
			constexpr uintptr_t PollIntervalSeconds = 0x0068;
			constexpr uintptr_t PlayerID = 0x0070;
			constexpr uintptr_t Settings = 0x00B8;
			constexpr uintptr_t GetBracketTask = 0x00C0;
		}

		namespace TourCheckInError_TA {
			constexpr uintptr_t Tournaments = 0x0060;
			constexpr uintptr_t Party = 0x0068;
			constexpr uintptr_t PlayerID = 0x0070;
			constexpr uintptr_t MemberPreCheckInError = 0x00B8;
			constexpr uintptr_t Settings = 0x00C8;
			constexpr uintptr_t PartyError = 0x00D0;
			constexpr uintptr_t PartyErrorType = 0x00E0;
			constexpr uintptr_t Error = 0x00E8;
			constexpr uintptr_t ErrorType = 0x00F8;
			constexpr uintptr_t CrossPlatformNotEnabled = 0x0100;
			constexpr uintptr_t TournamentRequirementTitle = 0x0110;
		}

		namespace TourCheckInWindowWatcher_TA {
			constexpr uintptr_t Config = 0x0060;
			constexpr uintptr_t NextTournament = 0x0068;
			constexpr uintptr_t CheckInWindowSeconds = 0x0070;
			constexpr uintptr_t ActivityWindowSeconds = 0x0078;
		}

		namespace TourCheckIn_TA {
			constexpr uintptr_t Tournaments = 0x0060;
			constexpr uintptr_t CheckInTask = 0x0068;
		}

		namespace TourConfig_TA {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bEnableUI, bNextMatchPushNotificationsEnabled, bEnableRewards, bHideBetaUI, bAllowTeamMemberCheckIns
			constexpr uintptr_t CheckInWindowMinutes = 0x007C;
			constexpr uintptr_t CreateFutureMinutes = 0x0080;
			constexpr uintptr_t ActivityWindowMinutes = 0x0084;
			constexpr uintptr_t NextMatchPollIntervalSeconds = 0x0088;
			constexpr uintptr_t NextMatchPollIntervalSecondsPushEnabled = 0x008C;
			constexpr uintptr_t FirstMatchRequestOffsetMin = 0x0090;
			constexpr uintptr_t FirstMatchRequestOffsetMax = 0x0094;
			constexpr uintptr_t PausedRpcDelaySeconds = 0x0098;
			constexpr uintptr_t CreateFutureMaxDays = 0x009C;
			constexpr uintptr_t BracketCacheSeconds = 0x00A0;
			constexpr uintptr_t AllowedTeamSizes = 0x00A8;
			constexpr uintptr_t AllowedTeamSizesCSV = 0x00B8;
			constexpr uintptr_t MaxBracketSize = 0x00C8;
			constexpr uintptr_t TeamSizeToPlaylistMap = 0x00D0;
			constexpr uintptr_t GameModeToPlaylistMap = 0x00E0;
			constexpr uintptr_t MaxJoinServerAttempts = 0x00F0;
			constexpr uintptr_t JoinServerAttemptsMessagingLimit = 0x00F1;
			constexpr uintptr_t MatchmakingDelay = 0x00F4;
			constexpr uintptr_t MinCheckInDelaySeconds = 0x00F8;
			constexpr uintptr_t MaxCheckInDelaySeconds = 0x00FC;
			constexpr uintptr_t CheckInDelaySeconds = 0x0100;
			constexpr uintptr_t PlaylistsWithDynamicMapsets = 0x0108;
		}

		namespace TourCredentials_TA {
			constexpr uintptr_t CredentialsMap = 0x0060;
		}

		namespace TourDetailsSync_TA {
			constexpr uintptr_t Tournaments = 0x0060;
			constexpr uintptr_t PollIntervalSeconds = 0x0068;
			constexpr uintptr_t PlayerID = 0x0070;
			constexpr uintptr_t Settings = 0x00B8;
			constexpr uintptr_t GetBracketTask = 0x00C0;
		}

		namespace TourErrors_TA {
			constexpr uintptr_t TournamentFull = 0x0080;
			constexpr uintptr_t TournamentPaused = 0x0088;
			constexpr uintptr_t TournamentsDisabled = 0x0090;
			constexpr uintptr_t InActiveTournament = 0x0098;
			constexpr uintptr_t SplitScreenIsInActiveTournament = 0x00A0;
			constexpr uintptr_t NoMatchFound = 0x00A8;
			constexpr uintptr_t TeamEliminated = 0x00B0;
			constexpr uintptr_t AlreadyRegistered = 0x00B8;
			constexpr uintptr_t NotAdmin = 0x00C0;
			constexpr uintptr_t NotEligible = 0x00C8;
			constexpr uintptr_t AlreadyStarted = 0x00D0;
			constexpr uintptr_t InvalidTournamentState = 0x00D8;
			constexpr uintptr_t InvalidCredentials = 0x00E0;
			constexpr uintptr_t TournamentNotFound = 0x00E8;
			constexpr uintptr_t TournamentHasConcluded = 0x00F0;
			constexpr uintptr_t CheckInRankIneligible = 0x00F8;
			constexpr uintptr_t CheckInNotOpen = 0x0100;
			constexpr uintptr_t CheckInRequiresPartyLeader = 0x0108;
			constexpr uintptr_t TooManyPlayersCheckingIn = 0x0110;
			constexpr uintptr_t CannotMatchmakeIfRegistered = 0x0118;
			constexpr uintptr_t CannotCheckInWhileOnline = 0x0120;
			constexpr uintptr_t CannotCancelAfterRegistration = 0x0128;
			constexpr uintptr_t TournamentHasBeenCancelled = 0x0130;
			constexpr uintptr_t TeamSizeTooLarge = 0x0138;
			constexpr uintptr_t TeamSizeTooSmall = 0x0140;
			constexpr uintptr_t PlayerNotRegistered = 0x0148;
			constexpr uintptr_t TeamNameNotAllowed = 0x0150;
			constexpr uintptr_t TournamentNameNotAllowed = 0x0158;
			constexpr uintptr_t TournamentCreateLimitReached = 0x0160;
			constexpr uintptr_t AutoTournamentNoTeamFound = 0x0168;
			constexpr uintptr_t AutoTournamentRequiresCrossplatform = 0x0170;
			constexpr uintptr_t AutoTourmamentRequiresCrossplatformNotLeader = 0x0178;
			constexpr uintptr_t AutoTournamentBanned = 0x0180;
			constexpr uintptr_t AutoTournamentResultsRevoked = 0x0188;
			constexpr uintptr_t IneligibleForLateTournament = 0x0190;
			constexpr uintptr_t PlayerNotInTourTeam = 0x0198;
			constexpr uintptr_t PartyMembersNotInTourTeam = 0x01A0;
			constexpr uintptr_t KickedNotInPartyTour = 0x01A8;
			constexpr uintptr_t KickedPartyIsCheckingIn = 0x01B0;
			constexpr uintptr_t NoSplitscreenDuringCheckin = 0x01B8;
			constexpr uintptr_t NoInvitesWhileCheckingIn = 0x01C0;
			constexpr uintptr_t NoJoiningWhileCheckingIn = 0x01C8;
			constexpr uintptr_t SkillRequirementsNotMet = 0x01D0;
			constexpr uintptr_t PartySkillRequirementsNotMet = 0x01D8;
			constexpr uintptr_t ScheduleRegionIsLocked = 0x01E0;
			constexpr uintptr_t ScheduleRegionIsInvalid = 0x01E8;
			constexpr uintptr_t ScheduleRegionNotSet = 0x01F0;
			constexpr uintptr_t TourCreateCrossplatformDisabled = 0x01F8;
			constexpr uintptr_t CustomTourmamentRequiresCrossplatform = 0x0200;
			constexpr uintptr_t CannotSpectateWhileInParty = 0x0208;
			constexpr uintptr_t TourRankDisparity = 0x0210;
			constexpr uintptr_t TourTroubleConnectingToServer = 0x0218;
		}

		namespace TourEventMatchComplete_TA {
			constexpr uintptr_t GameEvent = 0x0060;
		}

		namespace TourEventMatch_TA {
			constexpr uintptr_t Tournaments = 0x0060;
			constexpr uintptr_t Config = 0x0068;
			constexpr uintptr_t TourMatchmaking = 0x0070;
			constexpr uintptr_t PsyNet = 0x0078;
			constexpr uintptr_t PlayerID = 0x0080;
			constexpr uintptr_t TournamentID = 0x00C8;
			constexpr uintptr_t TeamID = 0x00D0;
			constexpr uintptr_t DependentMatch = 0x00D8;
			constexpr uintptr_t NextMatch = 0x0108;
			constexpr uintptr_t PrevMatchID = 0x0138;
			constexpr uintptr_t Error = 0x0140;
			constexpr uintptr_t GetMatchTask = 0x0148;
			constexpr uintptr_t ReceivedByeTitle = 0x0150;
			constexpr uintptr_t ReceivedByeBody = 0x0160;
		}

		namespace TourEvent_TA {
			constexpr uintptr_t Tournaments = 0x0060;
			constexpr uintptr_t TourMatchmaking = 0x0068;
			constexpr uintptr_t PlayerID = 0x0070;
			constexpr uintptr_t ActiveTour = 0x00B8;
			constexpr uintptr_t Team = 0x00C0;
			constexpr uintptr_t EventMatch = 0x0108;
			constexpr uintptr_t MatchComplete = 0x0110;
		}

		namespace TourGameUpdateDispatcher_TA {
			constexpr uintptr_t MatchSeries = 0x0060;
			constexpr uintptr_t Reservations = 0x0068;
			constexpr uintptr_t MatchGUID = 0x0070;
			constexpr uintptr_t GameServerID = 0x0080;
			constexpr uintptr_t TournamentID = 0x0090;
			constexpr uintptr_t MatchID = 0x0098;
			constexpr uintptr_t GameNum = 0x009C;
			constexpr uintptr_t TeamIDs = 0x00A0;
			constexpr uintptr_t GameData = 0x00B0;
			constexpr uintptr_t ReservedPlayerIDs = 0x00C8;
			constexpr uintptr_t SeriesWinningTeamID = 0x00D8;
			constexpr uintptr_t PsyNetTeamIdOrder = 0x00E0;
			constexpr uintptr_t GameUpdate = 0x00F0;
			constexpr uintptr_t InactiveGameTimeValue = 0x00F8;
		}

		namespace TourGameUpdate_FaceIt_TA {
			constexpr uintptr_t UnknownData00 = 0x0084;
		}

		namespace TourGameUpdate_TA {
			constexpr uintptr_t JoinedPlayers = 0x0060;
			constexpr uintptr_t IdlePlayers = 0x0070;
			constexpr uintptr_t bHasNetworkIssues = 0x0080;
		}

		namespace TourList_TA {
			constexpr uintptr_t Tournaments = 0x0070;
			constexpr uintptr_t Results = 0x0080;
		}

		namespace TourMatchInfoMessage_TA {
			constexpr uintptr_t TourSettings = 0x0070;
			constexpr uintptr_t Playlist = 0x0158;
			constexpr uintptr_t ReservationID = 0x0160;
			constexpr uintptr_t JoinName = 0x0170;
			constexpr uintptr_t JoinPassword = 0x0180;
		}

		namespace TourMatchServerBrowser_TA {
			constexpr uintptr_t GetMatchTask = 0x0060;
		}

		namespace TourPartyCheckInTransaction_TA {
			constexpr uintptr_t Tournaments = 0x0060;
			constexpr uintptr_t Party = 0x0068;
			constexpr uintptr_t CheckInError = 0x0070;
			constexpr uintptr_t Settings = 0x0078;
			constexpr uintptr_t bDisposed = 0x0080;
		}

		namespace TourPartyCheckIn_TA {
			constexpr uintptr_t TourConfig = 0x0060;
			constexpr uintptr_t MemberCheckInError = 0x0068;
			constexpr uintptr_t Tournaments = 0x0078;
			constexpr uintptr_t Party = 0x0080;
		}

		namespace TourPartyLeaderLeave_TA {
			constexpr uintptr_t Tournaments = 0x0060;
			constexpr uintptr_t Party = 0x0068;
		}

		namespace TourRegistration_TA {
			constexpr uintptr_t Tournaments = 0x0060;
			constexpr uintptr_t Subscriptions = 0x0068;
			constexpr uintptr_t RegistrationTask = 0x0070;
		}

		namespace TourRewards_TA {
			constexpr uintptr_t Results = 0x0060;
			constexpr uintptr_t Requests = 0x0070;
		}

		namespace TourServerConfig_TA {
			constexpr uintptr_t bBotTeamsEnabled = 0x0078;
			constexpr uintptr_t MidSeriesConnectionTimeout = 0x007C;
		}

		namespace TourServerInfo_FaceIt_TA {
			constexpr uintptr_t ReservationMatchInfo = 0x0078;
		}

		namespace TourServerInfo_TA {
			constexpr uintptr_t InfoName = 0x0060;
			constexpr uintptr_t NumAllowedSpectators = 0x0068;
			constexpr uintptr_t Bitfields_0x006C = 0x006C;  // Multiple: bUsesTieBreakerRules, bRestoreInterruptedMatches
			constexpr uintptr_t GameUpdateClass = 0x0070;
		}

		namespace TourSettingsCache_TA {
			constexpr uintptr_t TourLists = 0x0060;
		}

		namespace TourSettings_TA {
			constexpr uintptr_t Id = 0x0060;
			constexpr uintptr_t ScheduleID = 0x0068;
			constexpr uintptr_t Title = 0x0070;
			constexpr uintptr_t CreatorName = 0x0080;
			constexpr uintptr_t CreatorPlayerID = 0x0090;
			constexpr uintptr_t StartTime = 0x00D8;
			constexpr uintptr_t GenerateBracketTime = 0x00E0;
			constexpr uintptr_t MaxBracketSize = 0x00E8;
			constexpr uintptr_t TeamsRegistered = 0x00EC;
			constexpr uintptr_t RankMin = 0x00F0;
			constexpr uintptr_t RankMax = 0x00F4;
			constexpr uintptr_t Region = 0x00F8;
			constexpr uintptr_t RegionName = 0x0108;
			constexpr uintptr_t GameTags = 0x0118;
			constexpr uintptr_t GameMode = 0x0128;
			constexpr uintptr_t TieBreaker = 0x0129;
			constexpr uintptr_t SeedingType = 0x012A;
			constexpr uintptr_t GameModes = 0x0130;
			constexpr uintptr_t TeamSize = 0x0140;
			constexpr uintptr_t DisabledMaps = 0x0148;
			constexpr uintptr_t SeriesRoundLengths = 0x0158;
			constexpr uintptr_t SeriesLength = 0x0168;
			constexpr uintptr_t FinalSeriesLength = 0x016C;
			constexpr uintptr_t Bitfields_0x0170 = 0x0170;  // Multiple: bPublic, bIsMultiGameMode
			constexpr uintptr_t MinPlayersPerTeam = 0x0174;
			constexpr uintptr_t MatchExpireTimestamp = 0x0178;
			constexpr uintptr_t Platforms = 0x0180;
		}

		namespace TourStatus_TA {
			constexpr uintptr_t Statuses = 0x0060;
			constexpr uintptr_t Tournaments = 0x0070;
		}

		namespace TourSubscriptions_TA {
			constexpr uintptr_t TourList = 0x0060;
			constexpr uintptr_t GFxTourList = 0x0068;
			constexpr uintptr_t Created = 0x0070;
			constexpr uintptr_t AdminOf = 0x0080;
			constexpr uintptr_t RegisteredTo = 0x0090;
			constexpr uintptr_t WindowWatcher = 0x00A0;
			constexpr uintptr_t GetSubscriptionsRPC = 0x00A8;
			constexpr uintptr_t bSynced = 0x00B0;
			constexpr uintptr_t SyncError = 0x00B8;
			constexpr uintptr_t LastEarlyLeaveTournamentID = 0x00C0;
			constexpr uintptr_t LastSpectatedTourID = 0x00C8;
		}

		namespace TournamentCompletedEvent_TA {
			constexpr uintptr_t TourID = 0x0060;
			constexpr uintptr_t ScheduleID = 0x0068;
			constexpr uintptr_t bEliminatedFirstRound = 0x0070;
		}

		namespace TournamentSettingsSave_TA {
			constexpr uintptr_t TourCreateSettings = 0x00C8;
			constexpr uintptr_t TourSearchSettings = 0x0100;
			constexpr uintptr_t GameTags = 0x0160;
			constexpr uintptr_t CheckInTeamName = 0x0168;
		}

		namespace TraceableSpawnPoint_TA {
			constexpr uintptr_t CylinderComp = 0x0268;
		}

		namespace TradeConfig_TA {
			constexpr uintptr_t MinimumLevelToTrade = 0x0078;
		}

		namespace TradeErrors_TA {
			constexpr uintptr_t AttemptedCurrencyGifting = 0x0080;
			constexpr uintptr_t AttemptedCurrencyExchange = 0x0088;
			constexpr uintptr_t UserTradeBanned = 0x0090;
			constexpr uintptr_t TradeNotAllowed = 0x0098;
			constexpr uintptr_t OtherPlayerTradeNotAllowed = 0x00A0;
			constexpr uintptr_t OtherPlayerBanned = 0x00A8;
			constexpr uintptr_t TradeMinLevelNotReached = 0x00B0;
			constexpr uintptr_t TradeMinPlayTimeNotReached = 0x00B8;
			constexpr uintptr_t TradeDailyLimitReached = 0x00C0;
			constexpr uintptr_t TradeExceedCurrencyLimit = 0x00C8;
			constexpr uintptr_t TradePlayerNotInParty = 0x00D0;
		}

		namespace TrainingConfig_TA {
			constexpr uintptr_t MaxHistoryItems = 0x0078;
			constexpr uintptr_t Bitfields_0x007C = 0x007C;  // Multiple: bCanShowHistoryTab, bCanShowProgressV2, bEnableTrainingUIV2
		}

		namespace TrainingEditorData_TA {
			constexpr uintptr_t TM_Guid = 0x0060;
			constexpr uintptr_t Code = 0x0070;
			constexpr uintptr_t TM_Name = 0x0080;
			constexpr uintptr_t Type = 0x0090;
			constexpr uintptr_t Difficulty = 0x0091;
			constexpr uintptr_t CreatorName = 0x0098;
			constexpr uintptr_t Description = 0x00A8;
			constexpr uintptr_t Tags = 0x00B8;
			constexpr uintptr_t MapName = 0x00C8;
			constexpr uintptr_t NumRounds = 0x00D0;
			constexpr uintptr_t CreatedAt = 0x00D8;
			constexpr uintptr_t UpdatedAt = 0x00E0;
			constexpr uintptr_t CreatorPlayerID = 0x00E8;
			constexpr uintptr_t Rounds = 0x0130;
		}

		namespace TrainingEditorManipulationConfig_TA {
			constexpr uintptr_t bEnableMirroring = 0x0078;
		}

		namespace TrainingEditorMetrics_TA {
			constexpr uintptr_t TrainingMetricsConfig = 0x0080;
			constexpr uintptr_t NavigationCommands = 0x0088;
			constexpr uintptr_t ManipulationCommands = 0x0098;
			constexpr uintptr_t BatchThreshold = 0x00A8;
		}

		namespace TrainingEditorMirror_TA {
			constexpr uintptr_t TrainingEditor = 0x0060;
			constexpr uintptr_t CurrentRoundNumber = 0x0068;
			constexpr uintptr_t MirrorPoint = 0x006C;
			constexpr uintptr_t MirrorLocationNormal = 0x0078;
			constexpr uintptr_t MirrorRotationAngle = 0x0084;
			constexpr uintptr_t Pylon = 0x0090;
			constexpr uintptr_t MirrorOverride = 0x0098;
			constexpr uintptr_t bMirrorShot = 0x00A0;
		}

		namespace TrainingEditorNavigationConfig_TA {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bEnablePlaylistOverride, bEnableShuffling
		}

		namespace TrainingEditorNavigation_TA {
			constexpr uintptr_t TrainingNavigationConfig = 0x0060;
			constexpr uintptr_t RoundStarter_Object = 0x0068;
			constexpr uintptr_t RoundStarter_Interface = 0x0070;
			constexpr uintptr_t RoundNumberGetter_Object = 0x0078;
			constexpr uintptr_t RoundNumberGetter_Interface = 0x0080;
			constexpr uintptr_t ShotAttemptGetter_Object = 0x0088;
			constexpr uintptr_t ShotAttemptGetter_Interface = 0x0090;
			constexpr uintptr_t UnshuffledPlaylist = 0x0098;
			constexpr uintptr_t ActivePlaylist = 0x00A8;
			constexpr uintptr_t CurrentActivePlaylistIndex = 0x00B8;
			constexpr uintptr_t CurrentUnshuffledPlaylistIndex = 0x00BC;
			constexpr uintptr_t Bitfields_0x00C0 = 0x00C0;  // Multiple: bShufflePlay, bPlaytestStarted
		}

		namespace TrainingMetricsConfig_TA {
			constexpr uintptr_t BatchThreshold = 0x0078;
		}

		namespace TrainingPackProgress_TA {
			constexpr uintptr_t PackCode = 0x0060;
			constexpr uintptr_t Progress = 0x0070;
			constexpr uintptr_t TimeLastPlayed = 0x0080;
		}

		namespace TrainingProgressFactory_TA {
			constexpr uintptr_t ProgressSave = 0x0060;
		}

		namespace TrainingProgressSave_TA {
			constexpr uintptr_t AllPacksProgress = 0x00C8;
		}

		namespace TrainingProgressTracker_TA {
			constexpr uintptr_t TrainingEditor = 0x0060;
			constexpr uintptr_t CurrentProgress = 0x0068;
			constexpr uintptr_t ProgressFactory = 0x0070;
		}

		namespace TravelManager_TA {
			constexpr uintptr_t MapName = 0x0060;
			constexpr uintptr_t bWorkshopMap = 0x0070;
			constexpr uintptr_t GameInfoClass = 0x0078;
			constexpr uintptr_t GameTags = 0x0088;
			constexpr uintptr_t Options = 0x0098;
		}

		namespace TriggerClump_TA {
			constexpr uintptr_t Triggers = 0x0060;
		}

		namespace TriggerCondition_TA {
			constexpr uintptr_t Clumps = 0x0060;
			constexpr uintptr_t bRepeatable = 0x0088;
		}

		namespace TurnTableActor_TA {
			constexpr uintptr_t RotateComponent = 0x02D0;
			constexpr uintptr_t Bitfields_0x02D8 = 0x02D8;  // Multiple: bIsSwapping, bInReveal, bCarLocked, bMultiDrop
			constexpr uintptr_t SwapCarName = 0x02DC;
			constexpr uintptr_t LiftItemName = 0x02E4;
			constexpr uintptr_t LockCarName = 0x02EC;
			constexpr uintptr_t TriggerRevealCompleteName = 0x02F4;
			constexpr uintptr_t DelayedPreviewSlot = 0x02FC;
			constexpr uintptr_t TurntableRiseDelay = 0x0300;
			constexpr uintptr_t RevealProduct = 0x0308;
		}

		namespace TutorialSave_TA {
			constexpr uintptr_t TrainingEventsPlayed = 0x00C8;
			constexpr uintptr_t TrainingEventsPerfected = 0x00D8;
			constexpr uintptr_t DetailsGroupsSeen = 0x00E8;
		}

		namespace Tutorial_Dodge_TA {
			constexpr uintptr_t Bitfields_0x0248 = 0x0248;  // Multiple: bDidDodge, bBallHitGoal, bCheckFailOnLand
			constexpr uintptr_t Dodges = 0x024C;
			constexpr uintptr_t MaxDodges = 0x0250;
		}

		namespace Tutorial_HandBrake_TA {
			constexpr uintptr_t Bitfields_0x0248 = 0x0248;  // Multiple: bCheckHandbrakeDir, bTriggerTouched
			constexpr uintptr_t HandbrakeStartDir = 0x024C;
			constexpr uintptr_t MinHandbrakeDotAngleForStart = 0x0258;
			constexpr uintptr_t MinHandbrakeDotAngleForComplete = 0x025C;
		}

		namespace Tutorial_TA {
			constexpr uintptr_t KNode_Owner = 0x0090;
			constexpr uintptr_t PC = 0x0098;
			constexpr uintptr_t GameEvent = 0x00A0;
			constexpr uintptr_t ModalSectionName = 0x00A8;
			constexpr uintptr_t MessageModal = 0x00B8;
			constexpr uintptr_t Messages = 0x00C0;
			constexpr uintptr_t MessageIndex = 0x00D0;
			constexpr uintptr_t DisplayMessageStartTime = 0x00D4;
			constexpr uintptr_t Bitfields_0x00D8 = 0x00D8;  // Multiple: bEndTutorialOnFinalMessage, bCompleteTutorialOnFinalMessage, bInitialMessagesFinished, bFadeAudio, bSkipFadeIn, bFadeTransitionComplete, bTutorialStarted, bActionNameToDetectPressed, bCarTouched, bCompleteOnBallTouch, bFailTutorialOnOtherCarHitBall, bDestroyBallsOnFadeIn, bDestroyBotsOnFadeIn, bHasBot, bFoundBot, bStartWithSecondaryCamActive, bStartWithBoostMeterDisabled, bBotCanPlay, bStartBotOnAllMessagesDisplayed, bBallCanHitPlayersGoal, bCompleteOnLastBallTouched, bCompleteOnHitGoal, bFailOnHitGoal, bFreezeCarOnSpawn, bCanEverDodge, bCanEverDoubleJump, bTutorialFinished, bPauseDuringMessages, bCanResetTutorial, bCanSkipTutorial, bShowGameFinishMessage, bSkipped
			constexpr uintptr_t Bitfields_0x00DC = 0x00DC;  // Multiple: bQuit, bReset, bTLog
			constexpr uintptr_t CorrectAnswer = 0x00E0;
			constexpr uintptr_t IncorrectAnswer = 0x0120;
			constexpr uintptr_t StartFadeDisplayTime = 0x0160;
			constexpr uintptr_t FadeColor = 0x0164;
			constexpr uintptr_t FadeTime = 0x0168;
			constexpr uintptr_t Shell = 0x0170;
			constexpr uintptr_t ActionNameToDetect = 0x0178;
			constexpr uintptr_t FailTimeAfterBallTouch = 0x0180;
			constexpr uintptr_t CountdownTime = 0x0184;
			constexpr uintptr_t BotTeam = 0x0188;
			constexpr uintptr_t TutorialFailTime = 0x018C;
			constexpr uintptr_t TutorialCompleteTime = 0x0190;
			constexpr uintptr_t BallDestroyTimeOnTouch = 0x0194;
			constexpr uintptr_t AllMessagesDisplayedTime = 0x0198;
			constexpr uintptr_t WaitTimeBeforeCheckCompleteAction = 0x019C;
			constexpr uintptr_t TutorialStatus = 0x01A0;
			constexpr uintptr_t StartTime = 0x01A4;
			constexpr uintptr_t StartTimeString = 0x01A8;
			constexpr uintptr_t UseActions = 0x01B8;
			constexpr uintptr_t IgnoreActionPressList = 0x01C8;
			constexpr uintptr_t FailedActionPressList = 0x01D8;
			constexpr uintptr_t StartActionPressList = 0x01E8;
			constexpr uintptr_t CompleteActionPressList = 0x01F8;
			constexpr uintptr_t CompleteActionIgnorePressList = 0x0208;
		}

		namespace UIConfig_TA {
			constexpr uintptr_t Bitfields_0x0078 = 0x0078;  // Multiple: bReportServerButton, bTournamentTeamColorSection, bShowCurrencyRechargeButton, bCrateRouletteEnabled, bPsyNetFriendListEnabled, bShowStatGraphOptions, bUseCoherentBrowser, bRankedSportsEnabled, bShowStarterBundles, bPurchaseProTier, bUse1LVLIcon, bShowAnthems
			constexpr uintptr_t ClubInvitationLimit = 0x007C;
			constexpr uintptr_t MainMenuBG = 0x0080;
			constexpr uintptr_t MainMenuTeamColors = 0x0088;
			constexpr uintptr_t XPDataRanges = 0x0098;
			constexpr uintptr_t TradeConfirmationLockoutSeconds = 0x00A8;
			constexpr uintptr_t SupportURL = 0x00B0;
			constexpr uintptr_t CurrentActiveSeason = 0x00C0;
		}

		namespace UISavedValues_TA {
			constexpr uintptr_t Values = 0x00C8;
		}

		namespace UIStrings_TA {
			constexpr uintptr_t Continue = 0x0060;
			constexpr uintptr_t ExitGame = 0x0070;
			constexpr uintptr_t Retry = 0x0080;
			constexpr uintptr_t OK = 0x0090;
			constexpr uintptr_t Cancel = 0x00A0;
			constexpr uintptr_t Yes = 0x00B0;
			constexpr uintptr_t No = 0x00C0;
			constexpr uintptr_t SignIn = 0x00D0;
			constexpr uintptr_t ViewTerms = 0x00E0;
			constexpr uintptr_t Days = 0x00F0;
			constexpr uintptr_t Hours = 0x0100;
			constexpr uintptr_t Minutes = 0x0110;
			constexpr uintptr_t Seconds = 0x0120;
			constexpr uintptr_t Meters = 0x0130;
			constexpr uintptr_t Kilometers = 0x0140;
			constexpr uintptr_t Feet = 0x0150;
			constexpr uintptr_t Miles = 0x0160;
			constexpr uintptr_t MetersUnit = 0x0170;
			constexpr uintptr_t FeetUnit = 0x0180;
			constexpr uintptr_t MetersPerSecondUnit = 0x0190;
			constexpr uintptr_t FeetPerSecondUnit = 0x01A0;
			constexpr uintptr_t Error = 0x01B0;
			constexpr uintptr_t Warning = 0x01C0;
			constexpr uintptr_t Close = 0x01D0;
			constexpr uintptr_t Savage = 0x01E0;
		}

		namespace UpdateDistanceDrivenTimer_TA {
			constexpr uintptr_t KMDriven = 0x0060;
		}

		namespace UserBugReportBulkData_TA {
			constexpr uintptr_t VideoSettings = 0x0060;
			constexpr uintptr_t Data = 0x0070;
		}

		namespace UserBugReportComponent_TA {
			constexpr uintptr_t BulkData = 0x0060;
			constexpr uintptr_t UserData = 0x0068;
		}

		namespace UserBugReportConfig_TA {
			constexpr uintptr_t bEnabled = 0x0078;
			constexpr uintptr_t Categories = 0x0080;
			constexpr uintptr_t OnlineCategories = 0x0090;
			constexpr uintptr_t MemoryDumpIgnoreClassNames = 0x00A0;
			constexpr uintptr_t MaxPropertyStringLength = 0x00B0;
			constexpr uintptr_t MaxDataSizeKilobytes = 0x00B4;
		}

		namespace UserBugReportErrors_TA {
			constexpr uintptr_t ReportTooSoon = 0x0080;
		}

		namespace UserBugReportGeneratedData_TA {
			constexpr uintptr_t MetaData = 0x0060;
			constexpr uintptr_t BulkData = 0x0068;
		}

		namespace UserBugReportMetaData_TA {
			constexpr uintptr_t AppSessionID = 0x0060;
			constexpr uintptr_t LevelSessionID = 0x0070;
			constexpr uintptr_t MatchGUID = 0x0080;
			constexpr uintptr_t MatchSeconds = 0x0090;
		}

		namespace UserBugReportSubmissionData_TA {
			constexpr uintptr_t Categories = 0x0060;
			constexpr uintptr_t UserMessage = 0x0070;
		}

		namespace UserBugReportUploadResult_TA {
			constexpr uintptr_t ConfirmationCode = 0x0060;
		}

		namespace UserBugReportUploader_TA {
			constexpr uintptr_t Connection = 0x0060;
			constexpr uintptr_t BulkData = 0x0068;
			constexpr uintptr_t SubmitTask = 0x0070;
			constexpr uintptr_t SubmitReportRPC = 0x0078;
			constexpr uintptr_t Result = 0x0080;
			constexpr uintptr_t UploadReportWebRequest = 0x0088;
		}

		namespace UserSettingObserverEventCache_TA {
			constexpr uintptr_t CacheTimeout = 0x0070;
			constexpr uintptr_t Events = 0x0078;
		}

		namespace UserSettingObserver_TA {
			constexpr uintptr_t Cache = 0x0070;
			constexpr uintptr_t Metrics = 0x0078;
		}

		namespace VanityQuery_TA {
			constexpr uintptr_t MaxNumberQueriesAllowed = 0x0070;
			constexpr uintptr_t ActiveQueries = 0x0078;
			constexpr uintptr_t QueuedRequests = 0x0088;
		}

		namespace VanitySetManager_TA {
			constexpr uintptr_t OnlineGame = 0x0060;
			constexpr uintptr_t VanityMap = 0x0068;
			constexpr uintptr_t VanityQuery = 0x00B8;
		}

		namespace VanitySet_TA {
			constexpr uintptr_t Avatar = 0x0060;
			constexpr uintptr_t Banner = 0x0068;
			constexpr uintptr_t Border = 0x0070;
		}

		namespace VehiclePartStaticMeshComponent_TA {
			constexpr uintptr_t BodySetupOverride = 0x0300;
		}

		namespace VehiclePickup_Boost_TA {
			constexpr uintptr_t BoostAmount = 0x02F0;
			constexpr uintptr_t LocalPickupSound = 0x02F8;
			constexpr uintptr_t BoostType = 0x0300;
		}

		namespace VehiclePickup_Item_TA {
			constexpr uintptr_t ItemArchetypes = 0x02F0;
			constexpr uintptr_t ReplicatedFXActorArchetype = 0x0300;
		}

		namespace VehiclePickup_TA {
			constexpr uintptr_t RespawnDelay = 0x0268;
			constexpr uintptr_t FXActorArchetype = 0x0270;
			constexpr uintptr_t FXActor = 0x0278;
			constexpr uintptr_t PickedUpEvent = 0x0280;
			constexpr uintptr_t LocalPickedUpEvent = 0x0288;
			constexpr uintptr_t CylinderComponent = 0x0290;
			constexpr uintptr_t ReplicatedPickupData = 0x0298;
			constexpr uintptr_t NewReplicatedPickupData = 0x02A8;
			constexpr uintptr_t Bitfields_0x02B8 = 0x02B8;  // Multiple: bNetRelevant, bNoPickup
		}

		namespace VehicleSim_TA {
			constexpr uintptr_t Wheels = 0x00A0;
			constexpr uintptr_t SteerAngleCurve = 0x00B0;
			constexpr uintptr_t DriveTorque = 0x00C8;
			constexpr uintptr_t DriveTorqueCurve = 0x00D0;
			constexpr uintptr_t BrakeTorque = 0x00E8;
			constexpr uintptr_t HandbrakeSteerAngleCurve = 0x00F0;
			constexpr uintptr_t HandbrakeRate = 0x0108;
			constexpr uintptr_t StopThreshold = 0x0110;
			constexpr uintptr_t IdleBrakeFactor = 0x0114;
			constexpr uintptr_t OppositeBrakeFactor = 0x0118;
			constexpr uintptr_t Bitfields_0x011C = 0x011C;  // Multiple: bUseAckermannSteering, bWasAttached
			constexpr uintptr_t OutputThrottle = 0x0120;
			constexpr uintptr_t OutputSteer = 0x0124;
			constexpr uintptr_t OutputBrake = 0x0128;
			constexpr uintptr_t OutputHandbrake = 0x012C;
			constexpr uintptr_t Vehicle = 0x0130;
			constexpr uintptr_t Car = 0x0138;
			constexpr uintptr_t BulletVehicle = 0x0140;
			constexpr uintptr_t SteeringSensitivity = 0x0148;
			constexpr uintptr_t TireFrictionScales = 0x0150;
			constexpr uintptr_t TireFrictionScale = 0x0160;
		}

		namespace Vehicle_TA {
			constexpr uintptr_t CarMesh = 0x07A8;
			constexpr uintptr_t VehicleSim = 0x07B0;
			constexpr uintptr_t StickyForce = 0x07B8;
			constexpr uintptr_t AutoFlip = 0x07C0;
			constexpr uintptr_t Bitfields_0x07C8 = 0x07C8;  // Multiple: bDriving, bReplicatedHandbrake, bJumped, bDoubleJumped, bOnGround, bSuperSonic, bPodiumMode, bHasPostMatchCelebration
			constexpr uintptr_t Input = 0x07CC;
			constexpr uintptr_t ReplicatedThrottle = 0x07EC;
			constexpr uintptr_t ReplicatedSteer = 0x07ED;
			constexpr uintptr_t InputRestriction = 0x07EE;
			constexpr uintptr_t AIController = 0x07F0;
			constexpr uintptr_t PlayerController = 0x07F8;
			constexpr uintptr_t PRI = 0x0800;
			constexpr uintptr_t VehicleUpdateTag = 0x0808;
			constexpr uintptr_t CarInteraction = 0x0810;
			constexpr uintptr_t LocalCollisionOffset = 0x0820;
			constexpr uintptr_t LocalCollisionExtent = 0x082C;
			constexpr uintptr_t LastBallTouchFrame = 0x0838;
			constexpr uintptr_t LastBallImpactFrame = 0x083C;
			constexpr uintptr_t BoostComponent = 0x0840;
			constexpr uintptr_t DodgeComponent = 0x0848;
			constexpr uintptr_t AirControlComponent = 0x0850;
			constexpr uintptr_t JumpComponent = 0x0858;
			constexpr uintptr_t DoubleJumpComponent = 0x0860;
			constexpr uintptr_t PodiumSpot = 0x0868;
			constexpr uintptr_t PMCAnimIdx = 0x086C;
			constexpr uintptr_t PitchTekComponent = 0x0870;
			constexpr uintptr_t LocalPlayerAudioParamsComponent = 0x0878;
			constexpr uintptr_t TimeBelowSupersonicSpeed = 0x0880;
			constexpr uintptr_t NetworkConfig = 0x0888;
		}

		namespace VideoSettingsSaveConsole_TA {
			constexpr uintptr_t VideoQualityMode = 0x00E0;
		}

		namespace VideoSettingsSavePC_TA {
			constexpr uintptr_t WindowMode = 0x00E0;
			constexpr uintptr_t VideoOptions = 0x00E8;
			constexpr uintptr_t Resolution = 0x00F8;
			constexpr uintptr_t MaxFPS = 0x0108;
		}

		namespace VideoSettingsSave_TA {
			constexpr uintptr_t Bitfields_0x00C8 = 0x00C8;  // Multiple: bVsync, bShowWeatherFX, bShowLightShafts, bShowLensFlares, bEnableHDRSideBySideVisualizer, bUncappedFramerate
			constexpr uintptr_t HDRBrightnessScale = 0x00CC;
			constexpr uintptr_t HDRPaperWhiteScale = 0x00D0;
			constexpr uintptr_t HDRGammaScale = 0x00D4;
			constexpr uintptr_t CustomFPS = 0x00D8;
		}

		namespace ViewMetricsConfig_TA {
			constexpr uintptr_t DisabledViews = 0x0078;
		}

		namespace ViewMetrics_TA {
			constexpr uintptr_t Metrics = 0x0080;
			constexpr uintptr_t SourceID = 0x0090;
			constexpr uintptr_t Descriptor = 0x0094;
		}

		namespace ViralItemActor_TA {
			constexpr uintptr_t InfectedStatus = 0x0268;
			constexpr uintptr_t ClientFXInfectedType = 0x0269;
			constexpr uintptr_t InfectedTypeToGive = 0x026A;
			constexpr uintptr_t CachedGameEvent = 0x0270;
			constexpr uintptr_t OwnerCar = 0x0278;
			constexpr uintptr_t OwnerPRI = 0x0280;
			constexpr uintptr_t ViralItemConfig = 0x0288;
		}

		namespace ViralItemConfig_TA {
			constexpr uintptr_t ViralPostGoalTime = 0x0078;
			constexpr uintptr_t ViralSeriesGroups = 0x0080;
		}

		namespace ViralItemFXComponent_TA {
			constexpr uintptr_t AuraFXDataList = 0x00A8;
			constexpr uintptr_t TransmissionFXDataList = 0x00B8;
			constexpr uintptr_t AuraFXGameStateVisibility = 0x00C8;
			constexpr uintptr_t InfectedAuraFX = 0x00D8;
			constexpr uintptr_t TransmissionFX = 0x00E0;
			constexpr uintptr_t CurrentAuraSFX = 0x00E8;
			constexpr uintptr_t InfectedStatus = 0x00F0;
			constexpr uintptr_t CachedPRI = 0x00F8;
			constexpr uintptr_t CachedGameEvent = 0x0100;
			constexpr uintptr_t AuraBrightnessParamName = 0x0108;
			constexpr uintptr_t GoldTintParamName = 0x0110;
		}

		namespace VoteActor_TA {
			constexpr uintptr_t Subject = 0x0268;
			constexpr uintptr_t TimeRemaining = 0x026C;
			constexpr uintptr_t Bitfields_0x0270 = 0x0270;  // Multiple: bUnanimousVote, bAllowSplitscreenVoters, bFilterIdleBannedPlayers, bFinished
			constexpr uintptr_t Voters = 0x0278;
			constexpr uintptr_t ReplicatedVoters = 0x0288;
		}

		namespace Wallet_TA {
			constexpr uintptr_t Currencies = 0x0060;
			constexpr uintptr_t CurrencyProductSet = 0x0070;
			constexpr uintptr_t RocketBucksCurrencyID = 0x0078;
			constexpr uintptr_t AutoTourTokensName = 0x007C;
			constexpr uintptr_t SpecialEvent = 0x0088;
			constexpr uintptr_t AutoTour = 0x0090;
		}

		namespace WebBrowser_TA {
			constexpr uintptr_t bBrowserLoading = 0x0060;
		}

		namespace WheelAssetGenerator_1Wheel_TA {
			constexpr uintptr_t MirrorMode = 0x0088;
			constexpr uintptr_t ParticleMirrorMode = 0x0089;
			constexpr uintptr_t FrontRight = 0x0090;
		}

		namespace WheelAssetGenerator_4Wheels_TA {
			constexpr uintptr_t FrontLeft = 0x0088;
			constexpr uintptr_t FrontRight = 0x0090;
			constexpr uintptr_t BackLeft = 0x0098;
			constexpr uintptr_t BackRight = 0x00A0;
		}

		namespace WheelAssetGenerator_FrontWheels_TA {
			constexpr uintptr_t FrontRight = 0x0088;
			constexpr uintptr_t FrontLeft = 0x0090;
		}

		namespace WheelAssetGenerator_RightWheels_TA {
			constexpr uintptr_t MirrorMode = 0x0088;
			constexpr uintptr_t ParticleMirrorMode = 0x0089;
			constexpr uintptr_t FrontRight = 0x0090;
			constexpr uintptr_t BackRight = 0x0098;
		}

		namespace WheelAssetGenerator_TA {
			constexpr uintptr_t Wheels = 0x0070;
			constexpr uintptr_t AdditionalAxleWheel = 0x0080;
		}

		namespace WheelAssetSettings_TA {
			constexpr uintptr_t StaticMesh = 0x0070;
			constexpr uintptr_t SkeletalMesh = 0x0078;
			constexpr uintptr_t AnimTree = 0x0080;
			constexpr uintptr_t Behaviors = 0x0088;
			constexpr uintptr_t Attachments = 0x0098;
			constexpr uintptr_t Scale3D = 0x00A8;
			constexpr uintptr_t Rotation = 0x00B4;
		}

		namespace WheelShimmy_TA {
			constexpr uintptr_t AccumDistance = 0x0078;
			constexpr uintptr_t Wave1Freq = 0x007C;
			constexpr uintptr_t Wave2Freq = 0x0080;
			constexpr uintptr_t OnOffBias = 0x0084;
			constexpr uintptr_t HighFreq = 0x0088;
			constexpr uintptr_t ShimmyMag = 0x008C;
			constexpr uintptr_t AffectedWheels = 0x0090;
			constexpr uintptr_t SkelMeshComponent = 0x00A0;
			constexpr uintptr_t Wheel = 0x00A8;
			constexpr uintptr_t RollControl = 0x00B0;
		}

		namespace WheelSpeedComponent_TA {
			constexpr uintptr_t Car = 0x00A8;
			constexpr uintptr_t WheelForwardSpeedInterpRate = 0x00B0;
			constexpr uintptr_t WheelSideSpeedInterpRate = 0x00B4;
			constexpr uintptr_t MaxWheelSpeed = 0x00B8;
			constexpr uintptr_t AvgWheelForwardSpeed = 0x00BC;
			constexpr uintptr_t AvgWheelSideSpeed = 0x00C0;
			constexpr uintptr_t AvgWheelSpinSpeed = 0x00C4;
			constexpr uintptr_t OldWheelRotation = 0x00C8;
			constexpr uintptr_t WheelTurnSpeed = 0x00CC;
		}

		namespace Wheel_TA {
			constexpr uintptr_t SteerFactor = 0x0070;
			constexpr uintptr_t WheelRadius = 0x0074;
			constexpr uintptr_t SuspensionStiffness = 0x0078;
			constexpr uintptr_t SuspensionDampingCompression = 0x007C;
			constexpr uintptr_t SuspensionDampingRelaxation = 0x0080;
			constexpr uintptr_t SuspensionTravel = 0x0084;
			constexpr uintptr_t SuspensionMaxRaise = 0x0088;
			constexpr uintptr_t ContactForceDistance = 0x008C;
			constexpr uintptr_t PushForceConstant = 0x0090;
			constexpr uintptr_t SpinSpeedDecayRate = 0x0094;
			constexpr uintptr_t LatFrictionCurve = 0x0098;
			constexpr uintptr_t LongFrictionCurve = 0x00B0;
			constexpr uintptr_t HandbrakeLatFrictionCurve = 0x00C8;
			constexpr uintptr_t HandbrakeLongFrictionCurve = 0x00E0;
			constexpr uintptr_t WallFrictionCurve = 0x00F8;
			constexpr uintptr_t BoneName = 0x0110;
			constexpr uintptr_t PhysicsBoneName = 0x0118;
			constexpr uintptr_t BoneOffset = 0x0120;
			constexpr uintptr_t PresetRestPosition = 0x012C;
			constexpr uintptr_t LocalSuspensionRayStart = 0x0138;
			constexpr uintptr_t LocalRestPosition = 0x0144;
			constexpr uintptr_t VehicleSim = 0x0150;
			constexpr uintptr_t WheelIndex = 0x0158;
			constexpr uintptr_t Contact = 0x0160;
			constexpr uintptr_t Bitfields_0x01B0 = 0x01B0;  // Multiple: bDrawDebug, bHadContact
			constexpr uintptr_t FrictionCurveInput = 0x01B4;
			constexpr uintptr_t AerialThrottleToVelocityFactor = 0x01B8;
			constexpr uintptr_t AerialAccelerationFactor = 0x01BC;
			constexpr uintptr_t SpinSpeed = 0x01C0;
		}

		namespace XPManager_TA {
			constexpr uintptr_t MultiplierCapLevel = 0x0060;
			constexpr uintptr_t XPPerLevelMultiplier = 0x0064;
			constexpr uintptr_t XPPerLevelCap = 0x0068;
			constexpr uintptr_t Titles = 0x0070;
		}

		namespace _TourTypes_TA {
			constexpr uintptr_t DisabledMutatorCategories = 0x0060;
			constexpr uintptr_t DisabledMutatorSettings = 0x0070;
		}

		namespace __AchievementManager_TA__HandleTradeInComplete_0x1 {
			constexpr uintptr_t PrevQuality = 0x0060;
		}

		namespace __AchievementManager_TA__HasItemQualityEquipped_0x1 {
			constexpr uintptr_t Quality = 0x0060;
		}

		namespace __AchievementManager_TA__IsPlayingWithClubmates_0x1 {
			constexpr uintptr_t PRI = 0x0060;
		}

		namespace __ArenaSoundConfig_TA__GetNextEvent_0x1 {
			constexpr uintptr_t MapName = 0x0060;
			constexpr uintptr_t CurrentTime = 0x0068;
		}

		namespace __ArenaSoundManager_TA__HandleMatchEnded_0x1 {
			constexpr uintptr_t InGameEvent = 0x0060;
		}

		namespace __AutoTour_TA__OnReceivedBracket_0x2 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __AutoTour_TA__UpdateIneligibleTournament_0x2 {
			constexpr uintptr_t LastAutoTournament = 0x0060;
		}

		namespace __BallPossessionComponent_TA__GetLastTouchWithTeamNum_0x1 {
			constexpr uintptr_t InTeamNum = 0x0060;
		}

		namespace __Ball_TA__Explode_0x1 {
			constexpr uintptr_t ExplosionGoal = 0x0060;
			constexpr uintptr_t Scorer = 0x0068;
		}

		namespace __BanSync_TA__GetBanMessageTypes_0x1 {
			constexpr uintptr_t BanType = 0x0060;
		}

		namespace __BanSync_TA__GetBanMessage_0x1 {
			constexpr uintptr_t BanType = 0x0060;
			constexpr uintptr_t PlayerID = 0x0068;
		}

		namespace __BanSync_TA__GetPlayerBanMessages_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __BinaryUploader_TA__Upload_0x1 {
			constexpr uintptr_t Request = 0x0060;
		}

		namespace __BotConfig_TA__RefreshIDs_0x1 {
			constexpr uintptr_t ProductID = 0x0060;
		}

		namespace __CameraState_PodiumSpotlight_Knockout_TA__GetFocusCenter_0x1 {
			constexpr uintptr_t FocusCenter = 0x0060;
		}

		namespace __CameraState_PodiumSpotlight_TA__GetFocusCenter_0x1 {
			constexpr uintptr_t FocusCenter = 0x0060;
			constexpr uintptr_t FieldCenter = 0x006C;
		}

		namespace __CarComponent_Boost_TA__SetUnlimitedBoostDelayed_0x1 {
			constexpr uintptr_t Enabled = 0x0060;
		}

		namespace __CarMeshComponentBase_TA__AddVisualAsset_0x2 {
			constexpr uintptr_t Asset = 0x0060;
		}

		namespace __CarMeshComponentBase_TA__ApplyPaintSettings_0x1 {
			constexpr uintptr_t AdditionalParams = 0x0060;
		}

		namespace __CarMeshComponentBase_TA__ApplyPaintToObject_0x1 {
			constexpr uintptr_t ProductPaint = 0x0060;
			constexpr uintptr_t PaintSettings = 0x0068;
			constexpr uintptr_t ObjectToPaint = 0x0070;
			constexpr uintptr_t Product = 0x0078;
		}

		namespace __CarMeshComponentBase_TA__AttachOrnament_0x1 {
			constexpr uintptr_t AprilConfig = 0x0060;
		}

		namespace __CarMeshComponentBase_TA__CreateWheelAttachment_0x1 {
			constexpr uintptr_t Asset = 0x0060;
			constexpr uintptr_t PrimComp = 0x0068;
		}

		namespace __CarMeshComponentBase_TA__CreateWheelMesh_0x1 {
			constexpr uintptr_t Asset = 0x0060;
			constexpr uintptr_t WheelMesh = 0x0068;
		}

		namespace __CarMeshComponentBase_TA__RemoveProductAttributeFromProduct_0x1 {
			constexpr uintptr_t AttributeClassToRemove = 0x0060;
		}

		namespace __CarPreviewActor_TA__UpdateTranslations_0x1 {
			constexpr uintptr_t BodyAsset = 0x0060;
		}

		namespace __Car_KnockOut_TA__AllowCarComponentActivate_0x1 {
			constexpr uintptr_t CarComponent = 0x0060;
		}

		namespace __Car_KnockOut_TA__DeactivateAttackComponents_0x1 {
			constexpr uintptr_t IgnoreComponents = 0x0060;
		}

		namespace __Car_KnockOut_TA__TookHitFrom_0x1 {
			constexpr uintptr_t Car = 0x0060;
		}

		namespace __Car_KnockOut_TA__UpdatePendingHits_0x1 {
			constexpr uintptr_t Target = 0x0060;
		}

		namespace __Car_TA__HandleTargetRemoved_0x1 {
			constexpr uintptr_t Target = 0x0060;
		}

		namespace __Car_TA__QueueDemolish_0x1 {
			constexpr uintptr_t Data = 0x0060;
			constexpr uintptr_t GoalExplosionDemoFxArchetype = 0x00A8;
		}

		namespace __Car_TA__QueueDemolish_CustomFX_0x1 {
			constexpr uintptr_t Data = 0x0060;
			constexpr uintptr_t CustomDemoFX = 0x00A8;
		}

		namespace __ChallengeDefault_TA__RequestImage_0x1 {
			constexpr uintptr_t ImageURL = 0x0060;
		}

		namespace __ChallengeManager_TA__AreChallengesComplete_0x1 {
			constexpr uintptr_t GroupIDs = 0x0060;
		}

		namespace __ChallengeManager_TA__BroadcastChallengeChanges_0x7 {
			constexpr uintptr_t NotificationTitle = 0x0060;
			constexpr uintptr_t NotificationBody = 0x0070;
		}

		namespace __ChallengeManager_TA__FindChallengeIndex_0x1 {
			constexpr uintptr_t Id = 0x0060;
		}

		namespace __ChallengeReward_TA__Init_0x1 {
			constexpr uintptr_t ListenObj = 0x0060;
		}

		namespace __Challenge_TA__UpdateUnlockChallengesRewards_0x1 {
			constexpr uintptr_t Index = 0x0060;
		}

		namespace __ChatFilterManager_TA__HandleLocalPlayerJoin_0x1 {
			constexpr uintptr_t JoiningPlayer = 0x0060;
		}

		namespace __CinematicIntroSequence_TA__GetActionBinding_0x1 {
			constexpr uintptr_t ActionName = 0x0060;
		}

		namespace __CinematicIntroSequence_TA__SetTrackedBindings_0x1 {
			constexpr uintptr_t ActionName = 0x0060;
		}

		namespace __ClubPersonas_TA__NotifyPRIClubIDChanged_0x1 {
			constexpr uintptr_t Persona = 0x0060;
		}

		namespace __ClubPersonas_TA__QueueRefresh_0x1 {
			constexpr uintptr_t Persona = 0x0060;
		}

		namespace __ClubPersonas_TA__RefreshPersona_0x1 {
			constexpr uintptr_t Persona = 0x0060;
			constexpr uintptr_t PClub = 0x0068;
			constexpr uintptr_t Club = 0x0070;
		}

		namespace __ConsecutiveMatchTracker_TA__HandleGameEnded_0x1 {
			constexpr uintptr_t GameEvent = 0x0060;
		}

		namespace __CrowdActorManager_TA__OverrideCrowdActorSounds_0x1 {
			constexpr uintptr_t NewSounds = 0x0060;
		}

		namespace __CrumbTrails_TA__GetActiveCrumbs_0x1 {
			constexpr uintptr_t Crumbs = 0x0060;
		}

		namespace __CrumbTrails_TA__HandleTrailComplete_0x1 {
			constexpr uintptr_t Index = 0x0060;
		}

		namespace __CrumbTrails_TA__SetupActivationCondition_0x1 {
			constexpr uintptr_t Index = 0x0060;
		}

		namespace __CrumbTrails_TA__SetupCompletionCondition_0x1 {
			constexpr uintptr_t Index = 0x0060;
		}

		namespace __CrumbTrails_TA__SetupTrails_0x1 {
			constexpr uintptr_t Index = 0x0060;
		}

		namespace __CurrencyProductSet_TA__GetCurrencyIndexFromHashID_0x1 {
			constexpr uintptr_t CurrencyHashID = 0x0060;
		}

		namespace __EOSGameClipsMetrics_TA__RecordClipInfo_0x1 {
			constexpr uintptr_t InClipInfoMetric = 0x0060;
		}

		namespace __EOSVoiceManager_TA__ClearRoomCredentialsForPlayer_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __EOSVoiceManager_TA__GetPlayerPermissionError_0x1 {
			constexpr uintptr_t OnlinePlayer = 0x0060;
			constexpr uintptr_t VoiceChatFilter = 0x0068;
		}

		namespace __EOSVoiceManager_TA__GetPlayerVoiceRoomByEpicId_0x1 {
			constexpr uintptr_t EpicAccountId = 0x0060;
		}

		namespace __EOSVoiceManager_TA__GetPlayerVoiceRoom_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __EOSVoiceManager_TA__GetVoiceRoomByName_0x1 {
			constexpr uintptr_t RoomName = 0x0060;
		}

		namespace __EOSVoiceManager_TA__HandlePlayerMatchRoomChanged_0x1 {
			constexpr uintptr_t PRI = 0x0060;
		}

		namespace __EOSVoiceManager_TA__HandleRemotePlayerJoinedVoiceRoom_0x1 {
			constexpr uintptr_t EpicAccountId = 0x0060;
			constexpr uintptr_t RoomName = 0x0070;
		}

		namespace __EOSVoiceManager_TA__HandleRequestedLinkedAccounts_0x1 {
			constexpr uintptr_t EpicAccountId = 0x0060;
			constexpr uintptr_t RoomName = 0x0070;
		}

		namespace __EOSVoiceSettingsSave_TA__GetPreferredInputDevice_0x1 {
			constexpr uintptr_t CurrentPlatform = 0x0060;
		}

		namespace __EOSVoiceSettingsSave_TA__GetPreferredOutputDevice_0x1 {
			constexpr uintptr_t CurrentPlatform = 0x0060;
		}

		namespace __EOSVoiceTokenCache_TA__ClearPlayerCachedVoiceCredentials_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t RoomId = 0x00A8;
		}

		namespace __EOSVoiceTokenCache_TA__RequestVoiceRoomToken_0x1 {
			constexpr uintptr_t RoomId = 0x0060;
			constexpr uintptr_t PlayerID = 0x0070;
		}

		namespace __ESportConfig_TA__DownloadEventImage_0x1 {
			constexpr uintptr_t URL = 0x0060;
		}

		namespace __ESportConfig_TA__GetNextEventTime_0x1 {
			constexpr uintptr_t CurrentTime = 0x0060;
		}

		namespace __EngagementEventsConfig_TA__GetNextEventTime_0x1 {
			constexpr uintptr_t CurrentTime = 0x0060;
		}

		namespace __EpicAccountSave_TA__GetConvertPlatformFriends_0x1 {
			constexpr uintptr_t OSS = 0x0060;
		}

		namespace __EpicAccountSave_TA__GetHasPromptedForFriendConversion_0x1 {
			constexpr uintptr_t OSS = 0x0060;
		}

		namespace __EpicAccountSave_TA__Reconcile_0x1 {
			constexpr uintptr_t Platform = 0x0060;
		}

		namespace __EpicAccountSave_TA__SetConvertPlatformFriends_0x1 {
			constexpr uintptr_t OSS = 0x0060;
		}

		namespace __EpicFriendsConverterSystem_TA__SetupEpicFriendsConverter_0x1 {
			constexpr uintptr_t Converter = 0x0060;
		}

		namespace __Eula_TA__RequiresAcceptance_0x1 {
			constexpr uintptr_t PlayerPlatform = 0x0060;
		}

		namespace __FXActor_Boost_TA__DuplicateAttachment_0x1 {
			constexpr uintptr_t ComponentsToUse = 0x0060;
			constexpr uintptr_t AttachmentIdx = 0x0070;
		}

		namespace __FXActor_SafeZone_Knockout_TA__GetActiveSafeZoneIndex_0x1 {
			constexpr uintptr_t MatchTimeActive = 0x0060;
		}

		namespace __FXActor_TA__ApplyPaintToAttachment_0x1 {
			constexpr uintptr_t PaintSettings = 0x0060;
			constexpr uintptr_t Paint = 0x0068;
		}

		namespace __FXActor_TA__ApplyPaint_0x1 {
			constexpr uintptr_t PaintSettings = 0x0060;
			constexpr uintptr_t Paint = 0x0068;
		}

		namespace __FirstTimeExperienceManager_TA__DebugSetCheckpoint_0x1 {
			constexpr uintptr_t GroupName = 0x0060;
		}

		namespace __FirstTimeExperienceManager_TA__NotifyWhenGroupComplete_0x1 {
			constexpr uintptr_t GroupName = 0x0078;
		}

		namespace __FirstTimeExperienceManager_TA__SetupTrigger_0x1 {
			constexpr uintptr_t Condition = 0x0060;
			constexpr uintptr_t Group = 0x0068;
		}

		namespace __FirstTimeExperienceSave_TA__GetGroupIndex_0x1 {
			constexpr uintptr_t GroupName = 0x0060;
		}

		namespace __FreeplayCommands_TA__GetDefendShotBreakout_0x1 {
			constexpr uintptr_t CarLocation = 0x0060;
		}

		namespace __GFxData_AutoTour_TourCard_TA__HandleSubscriptionChanged_0x1 {
			constexpr uintptr_t TournamentID = 0x0060;
		}

		namespace __GFxData_CarRumble_TA__HandlePawnSet_0x1 {
			constexpr uintptr_t NewCar = 0x0060;
		}

		namespace __GFxData_Chat_TA__AddChatMessage_0x1 {
			constexpr uintptr_t NewMessage = 0x0060;
		}

		namespace __GFxData_Chat_TA__AddPresetMessage_0x1 {
			constexpr uintptr_t NewMessage = 0x0060;
		}

		namespace __GFxData_Chat_TA__GetMatchChatLog_0x1 {
			constexpr uintptr_t PersonaId = 0x0060;
		}

		namespace __GFxData_ClubDetails_TA__UpdateClubMembers_0x1 {
			constexpr uintptr_t Member = 0x0060;
		}

		namespace __GFxData_Clubs_TA__AcceptClubInvite_0x1 {
			constexpr uintptr_t Notification = 0x0060;
		}

		namespace __GFxData_Clubs_TA__CreateClub_0x1 {
			constexpr uintptr_t Settings = 0x0060;
		}

		namespace __GFxData_Clubs_TA__CreateLeaveClubAction_0x1 {
			constexpr uintptr_t Notification = 0x0060;
		}

		namespace __GFxData_Clubs_TA__EquipClubTitle_0x1 {
			constexpr uintptr_t TitleId = 0x0060;
		}

		namespace __GFxData_Clubs_TA__HandleAcceptedClubInviteConfirmation_0x1 {
			constexpr uintptr_t Notification = 0x0060;
		}

		namespace __GFxData_Clubs_TA__HandleGetClubStatsCompleted_0x5 {
			constexpr uintptr_t CompletedRPC = 0x0060;
			constexpr uintptr_t MilestoneIndex = 0x0068;
		}

		namespace __GFxData_Clubs_TA__HandleRemoveEpicFriend_0x1 {
			constexpr uintptr_t TargetPlayerID = 0x0060;
		}

		namespace __GFxData_Clubs_TA__HandleRemovePlayerFromClub_0x1 {
			constexpr uintptr_t TargetPlayerID = 0x0060;
		}

		namespace __GFxData_Clubs_TA__InviteToClub_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __GFxData_Clubs_TA__OnLeaveClubActionComplete_0x1 {
			constexpr uintptr_t Notification = 0x0060;
		}

		namespace __GFxData_Clubs_TA__RejectClubInviteByClubID_0x1 {
			constexpr uintptr_t ClubID = 0x0060;
			constexpr uintptr_t ClubInvite = 0x0068;
		}

		namespace __GFxData_Clubs_TA__RejectClubInvite_0x1 {
			constexpr uintptr_t Notification = 0x0060;
		}

		namespace __GFxData_Clubs_TA__RemoveFromClub_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __GFxData_Clubs_TA__SetClubInvites_0x1 {
			constexpr uintptr_t Invites = 0x0060;
		}

		namespace __GFxData_Clubs_TA__SetClubOwner_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __GFxData_Clubs_TA__SetNewRole_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t OriginalClubRole = 0x00A8;
			constexpr uintptr_t NewClubRole = 0x00A9;
		}

		namespace __GFxData_Clubs_TA__SyncClubDetails_0x1 {
			constexpr uintptr_t ClubID = 0x0060;
		}

		namespace __GFxData_Clubs_TA__UpdateClubColors_0x1 {
			constexpr uintptr_t PrimaryColor = 0x0060;
			constexpr uintptr_t AccentColor = 0x0064;
		}

		namespace __GFxData_Clubs_TA__UpdateClubName_0x1 {
			constexpr uintptr_t ClubName = 0x0060;
			constexpr uintptr_t ClubTag = 0x0070;
		}

		namespace __GFxData_Clubs_TA__UpdateGFxClubDetails_0x1 {
			constexpr uintptr_t ClubDetails = 0x0060;
		}

		namespace __GFxData_Clubs_TA__UpdateLocalClubMembers_0x1 {
			constexpr uintptr_t ClubDetails = 0x0060;
		}

		namespace __GFxData_Community_TA__HandleBlogChanged_0x1 {
			constexpr uintptr_t DateNow = 0x0060;
		}

		namespace __GFxData_ContainerDrops_TA__GetMatchingProductSeries_0x1 {
			constexpr uintptr_t SeriesID = 0x0060;
			constexpr uintptr_t SeriesProducts = 0x0068;
		}

		namespace __GFxData_Controls_TA__ClearBinding_0x1 {
			constexpr uintptr_t Action = 0x0060;
		}

		namespace __GFxData_Controls_TA__SetCurrentBinding_0x1 {
			constexpr uintptr_t Key = 0x0060;
			constexpr uintptr_t bGamepad = 0x0068;
			constexpr uintptr_t AxisSign = 0x006C;
		}

		namespace __GFxData_DLC_TA__HandleEntitlementsError_0x1 {
			constexpr uintptr_t Error = 0x0060;
		}

		namespace __GFxData_EOSVoiceManager_TA__HandleFriendsListChanged_0x1 {
			constexpr uintptr_t CurrentRoomName = 0x0060;
		}

		namespace __GFxData_EOSVoiceManager_TA__HandleUserChatPermissionsChanged_0x1 {
			constexpr uintptr_t ChangedEvent = 0x0060;
		}

		namespace __GFxData_EOSVoiceManager_TA__HandleVoiceChatSettingChanged_0x1 {
			constexpr uintptr_t CurrentRoomName = 0x0060;
		}

		namespace __GFxData_EOSVoiceRoom_TA__CanSendChatNotification_0x1 {
			constexpr uintptr_t EpicAccountId = 0x0060;
		}

		namespace __GFxData_EOSVoiceRoom_TA__GetMemberByEpicId_0x1 {
			constexpr uintptr_t EpicAccountId = 0x0060;
		}

		namespace __GFxData_EOSVoiceRoom_TA__GetMemberByPlayerId_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __GFxData_EOSVoiceRoom_TA__HandleBlockStatusChanged_0x1 {
			constexpr uintptr_t Persona = 0x0060;
		}

		namespace __GFxData_EpicLogin_TA__RequestAccountAuthorization_0x1 {
			constexpr uintptr_t EpicLogin = 0x0060;
		}

		namespace __GFxData_ErrorModals_TA__AlertError_0x1 {
			constexpr uintptr_t Error = 0x0060;
		}

		namespace __GFxData_ErrorModals_TA__RemoveErrorType_0x1 {
			constexpr uintptr_t InErrorType = 0x0060;
		}

		namespace __GFxData_FaceIt_TA__HandleError_0x1 {
			constexpr uintptr_t InError = 0x0060;
		}

		namespace __GFxData_Friends_TA__CreateConvertPlatformFriendsPrompt_0x2 {
			constexpr uintptr_t Converter = 0x0060;
		}

		namespace __GFxData_Friends_TA__CreateEpicFriendAcceptedNotification_0x1 {
			constexpr uintptr_t InPersona = 0x0060;
		}

		namespace __GFxData_Friends_TA__CreateEpicFriendInviteNotification_0x1 {
			constexpr uintptr_t InPersona = 0x0060;
			constexpr uintptr_t bSuppressPopup = 0x0068;
		}

		namespace __GFxData_Friends_TA__DeleteFriendGroup_0x1 {
			constexpr uintptr_t TargetPresenceId = 0x0060;
		}

		namespace __GFxData_Friends_TA__HandleMatchGUIDChanged_0x1 {
			constexpr uintptr_t Persona = 0x0060;
		}

		namespace __GFxData_Friends_TA__HandlePartiesChanged_0x1 {
			constexpr uintptr_t PrimaryPlayerId = 0x0060;
			constexpr uintptr_t PartyObjectTA = 0x00A8;
		}

		namespace __GFxData_Friends_TA__HandlePlayerAddedToMatch_0x1 {
			constexpr uintptr_t PRI = 0x0060;
		}

		namespace __GFxData_Friends_TA__HandlePlayerBlocked_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __GFxData_Friends_TA__IsFriendInParty_0x1 {
			constexpr uintptr_t PlatformId = 0x0060;
		}

		namespace __GFxData_Friends_TA__UnblockPlayer_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __GFxData_Garage_TA__SetPreviewProduct_0x1 {
			constexpr uintptr_t SlotIndex = 0x0060;
			constexpr uintptr_t HashID = 0x0064;
		}

		namespace __GFxData_Leaderboards_TA__PrefetchAvatars_0x1 {
			constexpr uintptr_t OurPlatform = 0x0060;
		}

		namespace __GFxData_LocalPlayer_TA__HandleXPLoaded_0x1 {
			constexpr uintptr_t XPSave = 0x0060;
		}

		namespace __GFxData_MTXGarage_TA__HandleGetCatalogResponse_0x1 {
			constexpr uintptr_t BundleInfo = 0x0060;
		}

		namespace __GFxData_MTXGarage_TA__HandleUnlockContainersResponse_0x1 {
			constexpr uintptr_t PCSaveData = 0x0060;
		}

		namespace __GFxData_MTXGarage_TA__RevealContainerUnlocks_0x1 {
			constexpr uintptr_t OnlineProducts = 0x0060;
			constexpr uintptr_t ProductsSave = 0x0070;
			constexpr uintptr_t PCSaveData = 0x0078;
		}

		namespace __GFxData_MatchHistoryManager_TA__GetMatchHistoryEntryFromMatchGUID_0x1 {
			constexpr uintptr_t MatchGUID = 0x0060;
		}

		namespace __GFxData_MatchHistoryManager_TA__GetMatchHistoryEntryFromReplayURL_0x1 {
			constexpr uintptr_t URL = 0x0060;
		}

		namespace __GFxData_MenuTree_TA__EnterTreeAtRoot_0x1 {
			constexpr uintptr_t InRootID = 0x0060;
		}

		namespace __GFxData_MenuTree_TA__GetFocusedChildNodeIndex_0x2 {
			constexpr uintptr_t PlayMenuSave = 0x0060;
			constexpr uintptr_t FocusNodeMappingIndex = 0x0068;
		}

		namespace __GFxData_MenuTree_TA__GetLastPlaylistFolderTitle_0x1 {
			constexpr uintptr_t PlayMenuSave = 0x0060;
		}

		namespace __GFxData_MenuTree_TA__JumpToBranch_0x1 {
			constexpr uintptr_t InBranchID = 0x0060;
		}

		namespace __GFxData_MenuTree_TA__JumpToParentBranch_0x1 {
			constexpr uintptr_t InChildID = 0x0060;
		}

		namespace __GFxData_MultiItemDrops_TA__DropItemGroup_0x1 {
			constexpr uintptr_t DropGroup = 0x0060;
		}

		namespace __GFxData_MultiItemDrops_TA__DropRewardGroup_0x1 {
			constexpr uintptr_t DropGroup = 0x0060;
		}

		namespace __GFxData_MultiItemDrops_TA__GetDropsByType_0x1 {
			constexpr uintptr_t DropType = 0x0060;
		}

		namespace __GFxData_MultiItemDrops_TA__HandleChallengeRewardCollected_0x1 {
			constexpr uintptr_t Currency = 0x0060;
		}

		namespace __GFxData_MultiItemDrops_TA__HandleGroupSeen_0x1 {
			constexpr uintptr_t SaveData = 0x0060;
		}

		namespace __GFxData_MultiItemDrops_TA__HandleNewOnlineItem_0x1 {
			constexpr uintptr_t InSaveData = 0x0060;
			constexpr uintptr_t OnlineProduct = 0x0068;
		}

		namespace __GFxData_MultiItemDrops_TA__IsProductInGroup_0x1 {
			constexpr uintptr_t InstanceID = 0x0060;
		}

		namespace __GFxData_MusicPlayer_TA__GetTitleTrackBuilder_0x1 {
			constexpr uintptr_t PreviousBuilder_Object = 0x0060;
			constexpr uintptr_t PreviousBuilder_Interface = 0x0068;
		}

		namespace __GFxData_MusicPlayer_TA__MergePlaylists_0x1 {
			constexpr uintptr_t NewPlaylists = 0x0060;
		}

		namespace __GFxData_Mutators_TA__GetMutatorsByGroupID_0x1 {
			constexpr uintptr_t GroupId = 0x0060;
		}

		namespace __GFxData_Mutators_TA__InitCustomGameSettings_0x1 {
			constexpr uintptr_t DisabledCategories = 0x0060;
		}

		namespace __GFxData_Mutators_TA__SetGameModeMutatorPresets_0x2 {
			constexpr uintptr_t Bitfields_0x0060 = 0x0060;  // Multiple: bOverwritePlayerTags, bSettingsChanged
		}

		namespace __GFxData_Mutators_TA__UpdateNumSelectedMutaors_0x1 {
			constexpr uintptr_t Tag = 0x0060;
		}

		namespace __GFxData_NotificationManager_TA__HandleNotificationHidden_0x1 {
			constexpr uintptr_t Notification = 0x0060;
		}

		namespace __GFxData_NotificationManager_TA__HandleNotificationRemoved_0x1 {
			constexpr uintptr_t Notification = 0x0060;
		}

		namespace __GFxData_NotificationManager_TA__OnNotificationHidden_0x1 {
			constexpr uintptr_t NotificationID = 0x0060;
		}

		namespace __GFxData_PRI_TA__HandleOwnerChanged_0x1 {
			constexpr uintptr_t LoadoutSave = 0x0060;
		}

		namespace __GFxData_PartyInvite_TA__HandlePlayerInvitePending_0x1 {
			constexpr uintptr_t InLobby = 0x0060;
			constexpr uintptr_t Persona = 0x0070;
		}

		namespace __GFxData_PartyInvite_TA__InviteToPartyInternal_0x1 {
			constexpr uintptr_t ToPlayer = 0x0060;
		}

		namespace __GFxData_PartyInvite_TA__InviteToPartySilent_0x1 {
			constexpr uintptr_t PsyNetInterface = 0x0060;
		}

		namespace __GFxData_PartyJoinRequest_TA__HandleJoinRequestReceived_0x1 {
			constexpr uintptr_t FromUserId = 0x0060;
			constexpr uintptr_t Persona = 0x00A8;
		}

		namespace __GFxData_PartyJoinRequest_TA__HandleNotificationAccepted_0x1 {
			constexpr uintptr_t FromUserId = 0x0060;
		}

		namespace __GFxData_Party_TA__ActivatePartyUp_0x3 {
			constexpr uintptr_t PartyVoter = 0x0060;
		}

		namespace __GFxData_Party_TA__HandleAcceptInviteToTrade_0x1 {
			constexpr uintptr_t Modal = 0x0060;
			constexpr uintptr_t Inviter = 0x0068;
		}

		namespace __GFxData_Party_TA__HandleInviteToTrade_0x1 {
			constexpr uintptr_t Inviter = 0x0060;
		}

		namespace __GFxData_Party_TA__HandlePartyError_0x1 {
			constexpr uintptr_t Error = 0x0060;
		}

		namespace __GFxData_Party_TA__InvitePlayerToTrade_0x1 {
			constexpr uintptr_t Index = 0x0060;
		}

		namespace __GFxData_Party_TA__OnPlayerInvited_0x1 {
			constexpr uintptr_t Party = 0x0060;
			constexpr uintptr_t PartyID = 0x0068;
			constexpr uintptr_t InviterId = 0x0078;
		}

		namespace __GFxData_Party_TA__ProcessInvitationResponse_0x1 {
			constexpr uintptr_t PartyID = 0x0078;
		}

		namespace __GFxData_Party_TA__SendAllowTradeRPC_0x1 {
			constexpr uintptr_t OtherPlayerNetId = 0x0078;
		}

		namespace __GFxData_PlayerAvatarBorderPreview_TA__CreatePlayerAvatarBorderPreview_0x1 {
			constexpr uintptr_t AvatarBorderPreview = 0x0060;
			constexpr uintptr_t OnlineProduct = 0x0068;
			constexpr uintptr_t InColorID = 0x0070;
		}

		namespace __GFxData_PlayerAvatarPreview_TA__CreatePlayerAvatarPreview_0x1 {
			constexpr uintptr_t AvatarPreview = 0x0060;
			constexpr uintptr_t OnlineProduct = 0x0068;
			constexpr uintptr_t InColorID = 0x0070;
		}

		namespace __GFxData_PlayerBanners_TA__CreatePlayerBannerPreview_0x1 {
			constexpr uintptr_t OnlineProduct = 0x0060;
			constexpr uintptr_t InColorID = 0x0068;
			constexpr uintptr_t HashID = 0x006C;
		}

		namespace __GFxData_PlayerBanners_TA__CreatePlayerBanner_0x1 {
			constexpr uintptr_t Banner = 0x0060;
			constexpr uintptr_t ProductSource = 0x0068;
			constexpr uintptr_t InColorID = 0x0088;
		}

		namespace __GFxData_Playlist_TA__SetPlayerCount_0x1 {
			constexpr uintptr_t Count = 0x0060;
		}

		namespace __GFxData_PossibleTradeIn_TA__GetNumHashInFilteredIDs_0x1 {
			constexpr uintptr_t HashID = 0x0060;
		}

		namespace __GFxData_ProductFilter_TA__GetProductAttributeFilters_0x1 {
			constexpr uintptr_t FilterType = 0x0060;
		}

		namespace __GFxData_ProductFilter_TA__GetProductSortingFilters_0x1 {
			constexpr uintptr_t FilterType = 0x0060;
		}

		namespace __GFxData_ProductFilter_TA__InitProductAttributes_0x1 {
			constexpr uintptr_t ExcludedAttributes = 0x0060;
		}

		namespace __GFxData_ProductFilter_TA__SetProhibitedAttributeTypeSelected_0x1 {
			constexpr uintptr_t Typename = 0x0060;
		}

		namespace __GFxData_ProductFilter_TA__UpdateProductSlotNewItems_0x1 {
			constexpr uintptr_t SlotIdx = 0x0060;
			constexpr uintptr_t Loadout = 0x0068;
		}

		namespace __GFxData_ProductTradeIn_TA__IsTradeInAllowed_0x1 {
			constexpr uintptr_t SeriesID = 0x0060;
		}

		namespace __GFxData_ProductTradeIn_TA__UpdateTradeInQuantity_0x1 {
			constexpr uintptr_t HashID = 0x0060;
		}

		namespace __GFxData_Products_TA__HandlePaintedProductLoaded_0x1 {
			constexpr uintptr_t LoadingProduct = 0x0060;
		}

		namespace __GFxData_Products_TA__HandleProductThumbnailRendered_0x1 {
			constexpr uintptr_t LoadingProduct = 0x0060;
		}

		namespace __GFxData_Products_TA__InstanceAttributes_0x3 {
			constexpr uintptr_t AttributeProvider_Object = 0x0060;
			constexpr uintptr_t AttributeProvider_Interface = 0x0068;
		}

		namespace __GFxData_Products_TA__IsThumbnailReferenced_0x1 {
			constexpr uintptr_t Asset = 0x0060;
			constexpr uintptr_t OnlineProduct = 0x0068;
			constexpr uintptr_t ThumbnailSize = 0x0070;
		}

		namespace __GFxData_Products_TA__LoadAdditionalProductReferences_0x1 {
			constexpr uintptr_t LoadingProduct = 0x0060;
		}

		namespace __GFxData_Products_TA__LoadProduct_0x1 {
			constexpr uintptr_t InHashID = 0x0060;
			constexpr uintptr_t ThumbnailSize = 0x0064;
		}

		namespace __GFxData_Products_TA__RenderProductThumbnail_0x1 {
			constexpr uintptr_t ProductData = 0x0060;
		}

		namespace __GFxData_Products_TA__SlotContainsNewProducts_0x1 {
			constexpr uintptr_t SlotIndex = 0x0060;
		}

		namespace __GFxData_Products_TA__StartLoadingProduct_0x1 {
			constexpr uintptr_t ProductToLoad = 0x0060;
		}

		namespace __GFxData_Products_TA__UpdateProductData_0x1 {
			constexpr uintptr_t ProductData = 0x0060;
			constexpr uintptr_t Product = 0x0068;
		}

		namespace __GFxData_ReplayManager_TA__DownloadReplay_0x1 {
			constexpr uintptr_t Request = 0x0060;
		}

		namespace __GFxData_ReplayManager_TA__HandleDownload_0x1 {
			constexpr uintptr_t Request = 0x0060;
		}

		namespace __GFxData_ReplayManager_TA__HandleMatchHistoryReplayDownloaded_0x1 {
			constexpr uintptr_t URL = 0x0060;
		}

		namespace __GFxData_ReplayManager_TA__SimulateDownloadReplay_0x1 {
			constexpr uintptr_t URL = 0x0060;
		}

		namespace __GFxData_Settings_TA__CrossplayPartyValidation_0x1 {
			constexpr uintptr_t UserSetting = 0x0060;
		}

		namespace __GFxData_Settings_TA__SetDefaults_0x1 {
			constexpr uintptr_t Group = 0x0060;
		}

		namespace __GFxData_Settings_TA__SetTourScheduleRegion_0x1 {
			constexpr uintptr_t AutoTour = 0x0060;
			constexpr uintptr_t Value = 0x0068;
		}

		namespace __GFxData_ShopCatalogue_TA__GetOnlineProductsByCostID_0x1 {
			constexpr uintptr_t CostID = 0x0060;
		}

		namespace __GFxData_ShopCatalogue_TA__GetShopItemByCostID_0x1 {
			constexpr uintptr_t CostID = 0x0060;
		}

		namespace __GFxData_ShopCatalogue_TA__LoadCatalogueInternal_0x1 {
			constexpr uintptr_t RequestStartTime = 0x0060;
		}

		namespace __GFxData_ShopCatalogue_TA__SetOwnedDeliverableProducts_0x3 {
			constexpr uintptr_t ShopItemID = 0x0060;
			constexpr uintptr_t DeliverableProducts = 0x0068;
		}

		namespace __GFxData_ShopCatalogue_TA__SyncItemImages_0x1 {
			constexpr uintptr_t ShopItemID = 0x0060;
		}

		namespace __GFxData_Shops_TA__GetCrateShop_0x1 {
			constexpr uintptr_t CrateID = 0x0060;
		}

		namespace __GFxData_Shops_TA__HandlePurchaseSuccess_0x1 {
			constexpr uintptr_t CostID = 0x0060;
		}

		namespace __GFxData_Shops_TA__LoadAllShopCatalogues_0x1 {
			constexpr uintptr_t RequestIDs = 0x0060;
			constexpr uintptr_t RequestStartTime = 0x0070;
		}

		namespace __GFxData_Shops_TA__LoadCataloguesByIndex_0x1 {
			constexpr uintptr_t RequestIDs = 0x0060;
			constexpr uintptr_t RequestStartTime = 0x0070;
		}

		namespace __GFxData_Shops_TA__OnPurchase_0x1 {
			constexpr uintptr_t CostID = 0x0060;
			constexpr uintptr_t ShopID = 0x0064;
			constexpr uintptr_t InDiscountID = 0x0068;
			constexpr uintptr_t Count = 0x006C;
		}

		namespace __GFxData_SpecialEvents_TA__HandlePurchaseRewardFromStoreSuccess_0x1 {
			constexpr uintptr_t RPC = 0x0060;
		}

		namespace __GFxData_SpecialEvents_TA__PurchaseRewardFromStore_0x1 {
			constexpr uintptr_t SaveData = 0x0060;
			constexpr uintptr_t WalletReference = 0x0068;
		}

		namespace __GFxData_StartMenu_TA__HandleSyncOnlinePlayerStorageStarted_0x2 {
			constexpr uintptr_t OnlineStorageSyncManager = 0x0060;
		}

		namespace __GFxData_Stats_TA__SetupStatData_0x1 {
			constexpr uintptr_t EventStat = 0x0060;
		}

		namespace __GFxData_System_TA__OnShellSet_0x1 {
			constexpr uintptr_t EngineShare = 0x0060;
		}

		namespace __GFxData_TourBracketMatchDetails_TA__HandleGetMatchDetails_0x1 {
			constexpr uintptr_t Details = 0x0060;
		}

		namespace __GFxData_TourBracket_TA__InitTeams_0x1 {
			constexpr uintptr_t Team = 0x0060;
		}

		namespace __GFxData_TourCheckIn_TA__HandleCheckInError_0x1 {
			constexpr uintptr_t TournamentID = 0x0060;
		}

		namespace __GFxData_TourCheckIn_TA__PerformCheckIn_0x1 {
			constexpr uintptr_t Settings = 0x0060;
			constexpr uintptr_t bPromptUnsubscribeOnFailure = 0x0068;
		}

		namespace __GFxData_TourCheckIn_TA__Register_0x1 {
			constexpr uintptr_t Settings = 0x0060;
			constexpr uintptr_t Credentials = 0x0068;
		}

		namespace __GFxData_TourCreate_TA__CreateTournament_0x1 {
			constexpr uintptr_t FinalTourSettings = 0x0060;
		}

		namespace __GFxData_TourCreate_TA__GetDefaultDisabledMaps_0x3 {
			constexpr uintptr_t DefaultMapNames = 0x0060;
		}

		namespace __GFxData_TourDependentMatch_TA__UpdateDependentMatch_0x1 {
			constexpr uintptr_t Match = 0x0060;
		}

		namespace __GFxData_TourEvent_TA__HandleBracketRetrieved_0x1 {
			constexpr uintptr_t OpponentTeamId = 0x0060;
		}

		namespace __GFxData_TourPlatforms_TA__InitPlatformGroups_0x1 {
			constexpr uintptr_t PlayerPlatform = 0x0060;
		}

		namespace __GFxData_TourRegistration_TA__Register_0x2 {
			constexpr uintptr_t TournamentID = 0x0060;
		}

		namespace __GFxData_TourSearch_TA__FindPrivate_0x1 {
			constexpr uintptr_t Credentials = 0x0060;
		}

		namespace __GFxData_TourSubscriptions_TA__Unsubscribe_0x2 {
			constexpr uintptr_t Party = 0x0060;
		}

		namespace __GFxData_TradeInFilter_TA__GetPossibleTradeInData_0x1 {
			constexpr uintptr_t Quality = 0x0060;
		}

		namespace __GFxData_TradeInFilter_TA__UpdatePossibleTradeInQuantities_0x1 {
			constexpr uintptr_t OnlineProducts = 0x0060;
		}

		namespace __GFxData_Training_TA__HandlePrimaryGameplaySettingsSave_0x1 {
			constexpr uintptr_t Settings = 0x0060;
		}

		namespace __GFxData_Training_TA__SetTrainingEditorGameEvent_0x2 {
			constexpr uintptr_t TrainingNavigator = 0x0060;
		}

		namespace __GFxData_Wallet_TA__GetCurrencyRow_0x1 {
			constexpr uintptr_t InCurrencyID = 0x0060;
		}

		namespace __GFxEngine_TA__InitOnlineSub_0x1 {
			constexpr uintptr_t OnlineX = 0x0060;
		}

		namespace __GFxHUD_TA__GetVoteBySubject_0x1 {
			constexpr uintptr_t VoteSubject = 0x0060;
		}

		namespace __GFxHUD_TA__HandlePlayerAdded_0x1 {
			constexpr uintptr_t InPRI = 0x0060;
		}

		namespace __GFxHUD_TA__HandlePlayerNameChanged_0x1 {
			constexpr uintptr_t InPRI = 0x0060;
		}

		namespace __GFxHUD_TA__HandleVoteFinished_0x1 {
			constexpr uintptr_t VoteActor = 0x0060;
		}

		namespace __GFxModal_Processing_TA__CreateAndBindNoCancel_0x1 {
			constexpr uintptr_t Modal = 0x0060;
		}

		namespace __GFxModal_Processing_TA__CreateAndBind_0x1 {
			constexpr uintptr_t Task = 0x0060;
		}

		namespace __GFxNameplatesManager_TA__HandleCameraStateChanged_0x1 {
			constexpr uintptr_t CameraTargetOwner = 0x0060;
		}

		namespace __GFxProductAttributeMap_TA__MapAttribute_0x1 {
			constexpr uintptr_t AttributeClass = 0x0060;
		}

		namespace __GFxShell_TA__SetInputActionEnabled_0x1 {
			constexpr uintptr_t ActionName = 0x0060;
			constexpr uintptr_t bEnabled = 0x0068;
		}

		namespace __GFxShell_TA__ShowRankedReconnectModal_0x1 {
			constexpr uintptr_t Reservation = 0x0060;
		}

		namespace __GFxTourList_TA__HandleTournamentsChanged_0x1 {
			constexpr uintptr_t InTourList = 0x0060;
		}

		namespace __GameData_TA__GetCurrentMapData_0x1 {
			constexpr uintptr_t CurrentMap = 0x0060;
		}

		namespace __GameEventProductAssetCache_TA__HandleCarAssetsLoaded_0x1 {
			constexpr uintptr_t Loader = 0x0060;
		}

		namespace __GameEventProductAssetCache_TA__HandlePlayerAdded_0x1 {
			constexpr uintptr_t PRI = 0x0060;
		}

		namespace __GameEventProductAssetCache_TA__HandlePlayerRemoved_0x1 {
			constexpr uintptr_t PRI = 0x0060;
		}

		namespace __GameEvent_KnockOut_TA__AddPRI_0x1 {
			constexpr uintptr_t PRI = 0x0060;
		}

		namespace __GameEvent_Soccar_TA__AddPRI_0x1 {
			constexpr uintptr_t PRI = 0x0060;
		}

		namespace __GameEvent_Soccar_TA__ChallengePlayerToHonorDuel_0x1 {
			constexpr uintptr_t Challenger = 0x0060;
			constexpr uintptr_t Defender = 0x00A8;
		}

		namespace __GameEvent_Soccar_TA__CommitPlayerMatchData_0x1 {
			constexpr uintptr_t PRI = 0x0060;
		}

		namespace __GameEvent_Soccar_TA__FillClubRecordStatsRPC_0x1 {
			constexpr uintptr_t RPC = 0x0060;
		}

		namespace __GameEvent_Soccar_TA__GetClosestVehicle_0x1 {
			constexpr uintptr_t TeamNum = 0x0060;
		}

		namespace __GameEvent_Soccar_TA__GetClubIDsRecordingCandidates_0x1 {
			constexpr uintptr_t MinClubMembersForStats = 0x0060;
		}

		namespace __GameEvent_Soccar_TA__GetGoalByTeamIndex_0x1 {
			constexpr uintptr_t TeamIndex = 0x0060;
		}

		namespace __GameEvent_Soccar_TA__GetShouldStart_0x1 {
			constexpr uintptr_t PlayersAbleToStart = 0x0060;
		}

		namespace __GameEvent_Soccar_TA__HandlePlayerSkillUpdated_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t Rating = 0x00A8;
		}

		namespace __GameEvent_Soccar_TA__InitClubMatch_0x2 {
			constexpr uintptr_t Cache = 0x0060;
		}

		namespace __GameEvent_Soccar_TA__ReportFps_0x1 {
			constexpr uintptr_t TotalGameTime = 0x0060;
			constexpr uintptr_t TotalFrames = 0x0064;
		}

		namespace __GameEvent_Soccar_TA__SetGoalsEnabled_0x1 {
			constexpr uintptr_t bEnabled = 0x0060;
		}

		namespace __GameEvent_Soccar_TA__ShouldAutoReadyUp_0x1 {
			constexpr uintptr_t PrimaryID = 0x0060;
		}

		namespace __GameEvent_TA__FindPlayerPRI_0x1 {
			constexpr uintptr_t UniqueId = 0x0060;
		}

		namespace __GameEvent_TA__GetGeneratedBotName_0x1 {
			constexpr uintptr_t BotName = 0x0060;
		}

		namespace __GameEvent_TA__HasMutatorNamed_0x1 {
			constexpr uintptr_t MutatorName = 0x0060;
		}

		namespace __GameEvent_TA__HasMutatorType_0x1 {
			constexpr uintptr_t MutatorClass = 0x0060;
		}

		namespace __GameEvent_TA__HasPlayerNamed_0x1 {
			constexpr uintptr_t PlayerName = 0x0060;
		}

		namespace __GameEvent_TA__SetBotSkillByTeam_0x1 {
			constexpr uintptr_t Team = 0x0060;
			constexpr uintptr_t NewSkill = 0x0064;
			constexpr uintptr_t BoostThreshold = 0x0068;
		}

		namespace __GameEvent_TrainingEditor_TA__HandlePrimaryGameplaySettingsSave_0x1 {
			constexpr uintptr_t Settings = 0x0060;
		}

		namespace __GameEvent_Tutorial_FreePlay_TA__HandleHitGoal_0x1 {
			constexpr uintptr_t Goal = 0x0060;
		}

		namespace __GameInfo_GFxMenu_TA__Destroyed_0x1 {
			constexpr uintptr_t GFxEngine = 0x0060;
		}

		namespace __GameInfo_Soccar_TA__QueueShutdown_0x1 {
			constexpr uintptr_t DedicatedServer = 0x0060;
		}

		namespace __GameInfo_TA__RegisterCelebration_0x1 {
			constexpr uintptr_t InCelebrationName = 0x0060;
		}

		namespace __GameInfo_TA__RollCelebrationAnim_0x1 {
			constexpr uintptr_t InCelebrationName = 0x0060;
		}

		namespace __GameObserver_TA__GetCarDataForPRI_0x1 {
			constexpr uintptr_t PRI = 0x0060;
		}

		namespace __GameTags_TA__ConvertToGameTags_0x1 {
			constexpr uintptr_t InOuter = 0x0060;
		}

		namespace __GameViewportClient_TA__AllowTournamentSplitscreen_0x1 {
			constexpr uintptr_t PlayerIDCompare = 0x0060;
		}

		namespace __InMapDragonManager_TA__IsGoalFirstByTeam_0x1 {
			constexpr uintptr_t ScoredOnTeam = 0x0060;
		}

		namespace __InMapDragonManager_TA__PlayAnimOnAll_0x1 {
			constexpr uintptr_t AnimName = 0x0060;
			constexpr uintptr_t bForce = 0x0068;
		}

		namespace __InMapDragonManager_TA__SetAllHidden_0x1 {
			constexpr uintptr_t bHidden = 0x0060;
		}

		namespace __InMapDragonManager_TA__UnregisterDragon_0x1 {
			constexpr uintptr_t InDragon = 0x0060;
		}

		namespace __LoadoutValidation_TA__CorrectDLCOwnership_0x1 {
			constexpr uintptr_t InPRI = 0x0060;
		}

		namespace __Loadout_TA__ApplyCompatibleAttributeProducts_0x1 {
			constexpr uintptr_t EquippedBodyID = 0x0060;
		}

		namespace __Loadout_TA__ValidateForcedProducts_0x1 {
			constexpr uintptr_t TeamForcedProducts = 0x0060;
			constexpr uintptr_t TeamIndex = 0x0068;
		}

		namespace __MapSet_TA__GetMap_0x1 {
			constexpr uintptr_t MapName = 0x0060;
		}

		namespace __MapsConfig_TA__GetMapFrequencyForSet_0x1 {
			constexpr uintptr_t MapName = 0x0060;
		}

		namespace __MapsConfig_TA__GetMapSetByName_0x1 {
			constexpr uintptr_t SetName = 0x0060;
		}

		namespace __MatchSeries_TA__GetSeriesWinnerFromData_0x1 {
			constexpr uintptr_t HalfMatchGames = 0x0060;
		}

		namespace __MatchType_Public_TA__CanSkipPreMatchLobby_0x1 {
			constexpr uintptr_t MaxTeamSize = 0x0060;
		}

		namespace __MatchType_Tournament_TA__CanSkipPreMatchLobby_0x2 {
			constexpr uintptr_t MaxTeamSize = 0x0060;
		}

		namespace __MatchmakingViewFilter_MenuTree_TA__GetAccessiblePlaylists_0x1 {
			constexpr uintptr_t LastVisitedPlaylistFolderID = 0x0060;
		}

		namespace __MenuSequencer_TA__GetSequence_0x1 {
			constexpr uintptr_t SequenceName = 0x0060;
		}

		namespace __MenuTreeBranch_TA__OnChildNodeClicked_0x1 {
			constexpr uintptr_t ChildID = 0x0060;
		}

		namespace __MenuTreeBuilder_TA__BuildTree_0x1 {
			constexpr uintptr_t ChildID = 0x0060;
		}

		namespace __MenuTreePlaylistManager_TA__HandlePlaylistRPCComplete_0x1 {
			constexpr uintptr_t CurrentTime = 0x0060;
			constexpr uintptr_t PlaylistNode = 0x0068;
		}

		namespace __MtxConfig_TA__CreateModalForError_0x1 {
			constexpr uintptr_t Error = 0x0060;
		}

		namespace __Mutator_Freeplay_Base_TA__HandleTeams_0x1 {
			constexpr uintptr_t SpawnSpots = 0x0060;
		}

		namespace __Mutator_Freeplay_TA__HandlePrimaryGameplaySettingsSave_0x1 {
			constexpr uintptr_t Settings = 0x0060;
		}

		namespace __Mutator_Freeplay_TA__MutateObject_0x1 {
			constexpr uintptr_t Car = 0x0060;
		}

		namespace __Mutator_Robin_TA__Construct_0x1 {
			constexpr uintptr_t Override = 0x0060;
		}

		namespace __OnlineDLCProductCache_TA__GetOldGeneratedOnlineProduct_0x1 {
			constexpr uintptr_t InstanceID = 0x0060;
		}

		namespace __OnlineGameDLC_TA__GetDlcIdFromName_0x1 {
			constexpr uintptr_t DLCName = 0x0060;
		}

		namespace __OnlineGameDedicatedServer_TA__GetNextRandomMapName_0x1 {
			constexpr uintptr_t BannedMapSet = 0x0060;
			constexpr uintptr_t ContentConfig = 0x0068;
		}

		namespace __OnlineGameDedicatedServer_TA__HandleVoiceTokenCacheError_0x1 {
			constexpr uintptr_t RequestedPlayers = 0x0060;
		}

		namespace __OnlineGameDedicatedServer_TA__HandleVoiceTokenCacheResponse_0x1 {
			constexpr uintptr_t RequestedPlayers = 0x0060;
			constexpr uintptr_t PlayerID = 0x0070;
		}

		namespace __OnlineGameDedicatedServer_TA__InitFlatbufferUpload_0x1 {
			constexpr uintptr_t RPC = 0x0060;
			constexpr uintptr_t Session = 0x0068;
		}

		namespace __OnlineGameDedicatedServer_TA__InitMatchLogUpload_0x1 {
			constexpr uintptr_t Log = 0x0060;
			constexpr uintptr_t RPC = 0x0068;
		}

		namespace __OnlineGameDedicatedServer_TA__InitReplayUpload_0x1 {
			constexpr uintptr_t RPC = 0x0060;
			constexpr uintptr_t Uploader = 0x0068;
		}

		namespace __OnlineGameParty_TA__AddPlayerPartyServiceLobbyMessage_0x1 {
			constexpr uintptr_t Message = 0x0060;
		}

		namespace __OnlineGameParty_TA__GetPartyMessageError_0x3 {
			constexpr uintptr_t OnlinePlayer = 0x0060;
		}

		namespace __OnlineGameParty_TA__GetProfileProducts_0x1 {
			constexpr uintptr_t ProfileProductData = 0x0060;
			constexpr uintptr_t SlotIndex = 0x0070;
		}

		namespace __OnlineGameParty_TA__HandleCrossplayEnabledChanged_0x1 {
			constexpr uintptr_t AccountSettings = 0x0060;
		}

		namespace __OnlineGameParty_TA__HandleProfileSet_0x2 {
			constexpr uintptr_t P = 0x0060;
		}

		namespace __OnlineGameParty_TA__HandleTradingEnabledChanged_0x1 {
			constexpr uintptr_t GameplaySettings = 0x0060;
		}

		namespace __OnlineGameParty_TA__HandleVoiceSettingsChanged_0x1 {
			constexpr uintptr_t VoiceSettings = 0x0060;
		}

		namespace __OnlineGameParty_TA__IsPrimaryMemberForPlayer_0x1 {
			constexpr uintptr_t UserId = 0x0060;
		}

		namespace __OnlineGameParty_TA__IsProductValidAfterVerify_0x1 {
			constexpr uintptr_t OPD = 0x0060;
		}

		namespace __OnlineGameParty_TA__RestoreArchivedAndFavoritedPendingProductOffers_0x1 {
			constexpr uintptr_t ProductsFavoriteSave = 0x0060;
			constexpr uintptr_t SaveData = 0x0068;
			constexpr uintptr_t ArchiveSave = 0x0070;
		}

		namespace __OnlineGameParty_TA__SendTradeToBackEnd_0x1 {
			constexpr uintptr_t LocalProductOffers = 0x0060;
		}

		namespace __OnlineGameTourServer_TA__AllPlayersInGame_0x2 {
			constexpr uintptr_t AllPlayers = 0x0060;
		}

		namespace __OnlineGameTourServer_TA__FilterMapData_0x1 {
			constexpr uintptr_t FilterMaps = 0x0060;
		}

		namespace __OnlineGameTourServer_TA__GetTeamScore_0x1 {
			constexpr uintptr_t TeamIndex = 0x0060;
		}

		namespace __OnlineGameTourServer_TA__IsBotOnlyTeam_0x1 {
			constexpr uintptr_t Team = 0x0060;
		}

		namespace __OnlinePlayerMTX_TA__HandleClaimSuccess_0x1 {
			constexpr uintptr_t SaveData = 0x0060;
			constexpr uintptr_t RPC = 0x0068;
		}

		namespace __OnlineProductExpirationHelper_TA__HandleNotificationSaveAdded_0x1 {
			constexpr uintptr_t OnlineProduct = 0x0060;
		}

		namespace __OnlineProductStore_TA__FindProductsFromHash_0x1 {
			constexpr uintptr_t HashID = 0x0060;
		}

		namespace __OnlineProduct_TA__RemoveAttributes_0x1 {
			constexpr uintptr_t AttributeClass = 0x0060;
		}

		namespace __OnlineProduct_TA__SortOnlineProductsByQuality_0x1 {
			constexpr uintptr_t I = 0x0060;
		}

		namespace __OnlineSessionManager_TA__GetRemoteSessionPlayerIds_0x2 {
			constexpr uintptr_t PlayerIds = 0x0060;
		}

		namespace __OnlineStorageSyncManager_TA__SyncCloudData_0x1 {
			constexpr uintptr_t ProductsPlayerGet = 0x0060;
		}

		namespace __OutOfWorldVolume_TA__Touch_0x1 {
			constexpr uintptr_t Other = 0x0060;
		}

		namespace __OutOfWorldVolume_TA__UnTouch_0x1 {
			constexpr uintptr_t Other = 0x0060;
		}

		namespace __PerfStatGraph_TA__UpdateGraphRanges_0x1 {
			constexpr uintptr_t TargetMS = 0x0060;
		}

		namespace __PhysicsMetrics_TA__AddCorrection_0x1 {
			constexpr uintptr_t InGameStateName = 0x0060;
		}

		namespace __PlatformMetrics_TA__DispatchAndRemove_0x1 {
			constexpr uintptr_t InPC = 0x0060;
		}

		namespace __PlatformMetrics_TA__SetType_0x1 {
			constexpr uintptr_t InPC = 0x0060;
		}

		namespace __PlayerControllerBase_TA__InitFromProfile_0x1 {
			constexpr uintptr_t Profile = 0x0060;
		}

		namespace __PlayerControllerBase_TA__Say_TA_0x3 {
			constexpr uintptr_t OnlinePlayer = 0x0060;
			constexpr uintptr_t OnlineGame = 0x0068;
			constexpr uintptr_t OnlineGameParty = 0x0070;
			constexpr uintptr_t AllowedPlayers = 0x0078;
		}

		namespace __PlayerController_TA__ClientNotifyChallengedToHonorDuel_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
		}

		namespace __PlayerController_TA__ClientNotifyHonorDuelWithPlayers_0x1 {
			constexpr uintptr_t Challenger = 0x0060;
			constexpr uintptr_t Defender = 0x00A8;
		}

		namespace __PlayerController_TA__HandleProfileGamepadSave_0x1 {
			constexpr uintptr_t GamepadSave = 0x0060;
		}

		namespace __PlayerController_TA__InitNetworkSave_0x1 {
			constexpr uintptr_t NetworkSave = 0x0060;
		}

		namespace __PlayerInput_TA__RemoveBindingsForKey_0x1 {
			constexpr uintptr_t KeyName = 0x0060;
		}

		namespace __PlayerSpawnSystem_TA__CreateSpawnTicket_0x1 {
			constexpr uintptr_t GameEvent = 0x0060;
		}

		namespace __PlayerVanity_TA__EquipProduct_0x1 {
			constexpr uintptr_t ProductSource = 0x0060;
		}

		namespace __PlaylistSkillDataSave_TA__Reconcile_0x1 {
			constexpr uintptr_t Other = 0x0060;
		}

		namespace __PrivacyPolicySave_TA__FindPolicyIndex_0x1 {
			constexpr uintptr_t InTextHash = 0x0060;
			constexpr uintptr_t InVersion = 0x0064;
		}

		namespace __ProductAsset_Attachment_TA__ModifyThumbnailScene_0x1 {
			constexpr uintptr_t AttachSKC = 0x0060;
		}

		namespace __ProductAsset_Skin_TA__AttemptApplyChassisOverride_0x1 {
			constexpr uintptr_t ForBodyID = 0x0060;
		}

		namespace __ProductAsset_Skin_TA__GetSkinBodySettings_0x1 {
			constexpr uintptr_t ForBodyID = 0x0060;
		}

		namespace __ProductAsset_Skin_TA__GetSkinParameters_0x1 {
			constexpr uintptr_t ForBodyID = 0x0060;
		}

		namespace __ProductAttribute_MapProductAssetOverride_TA__ShouldUseDefaultProductasset_0x1 {
			constexpr uintptr_t WorldName = 0x0060;
		}

		namespace __ProductAttribute_ModifyTransformationPerBody_TA__ApplyToObject_0x1 {
			constexpr uintptr_t BodyID = 0x0060;
		}

		namespace __ProductAttribute_Painted_TA__ApplyPaintOverridesToObject_0x1 {
			constexpr uintptr_t Paint = 0x0060;
			constexpr uintptr_t Target = 0x0068;
			constexpr uintptr_t CarMesh = 0x0070;
			constexpr uintptr_t SkinMaterial = 0x0078;
		}

		namespace __ProductAttribute_Painted_TA__ApplyToSetParameter_0x2 {
			constexpr uintptr_t Target_Object = 0x0060;
			constexpr uintptr_t Target_Interface = 0x0068;
			constexpr uintptr_t PaintSettings = 0x0070;
			constexpr uintptr_t Paint = 0x0078;
		}

		namespace __ProductAttribute_UnlockForcedProducts_TA__ContainsSlotToUnlock_0x1 {
			constexpr uintptr_t SlotToFind = 0x0060;
		}

		namespace __ProductLoader_TA__GetAssetByID_0x1 {
			constexpr uintptr_t ProductID = 0x0060;
		}

		namespace __ProductLoader_TA__GetAssetBySlot_0x1 {
			constexpr uintptr_t Slot = 0x0060;
		}

		namespace __ProductOverride_MaterialParameter_TA__ForceApplyOverrideToMIC_0x1 {
			constexpr uintptr_t MIC = 0x0060;
		}

		namespace __ProductOverride_ParticleSystemColorParameter_TA__ApplyToObject_0x1 {
			constexpr uintptr_t ParamTarget_Object = 0x0060;
			constexpr uintptr_t ParamTarget_Interface = 0x0068;
			constexpr uintptr_t PaintSetting = 0x0070;
		}

		namespace __ProductOverride_TA__ApplyOverrides_0x1 {
			constexpr uintptr_t Target = 0x0060;
		}

		namespace __ProductTransactions_TA__GetEquippedProducts_0x2 {
			constexpr uintptr_t AllEquippedInstanceIDs = 0x0060;
		}

		namespace __ProductTransactions_TA__GetUnequippedProducts_0x2 {
			constexpr uintptr_t AllEquippedInstanceIDs = 0x0060;
		}

		namespace __ProductsHashSave_TA__UpdateInstanceIDs_0x2 {
			constexpr uintptr_t Instances = 0x0060;
		}

		namespace __Profile_TA__ValidateLoadoutsWithProduct_0x1 {
			constexpr uintptr_t OnlineID = 0x0060;
		}

		namespace __RPC_GetTradeInFilters_TA__OnSuccess_0x1 {
			constexpr uintptr_t Index = 0x0060;
		}

		namespace __RecentPlayersMet_TA__RecordRecentPlayers_0x2 {
			constexpr uintptr_t PlayerIds = 0x0060;
			constexpr uintptr_t Keys = 0x0070;
			constexpr uintptr_t Online = 0x0080;
			constexpr uintptr_t Presence = 0x0088;
		}

		namespace __RecentPlayers_TA__AddMatchMate_0x1 {
			constexpr uintptr_t Persona = 0x0060;
		}

		namespace __RecentPlayers_TA__AddPlayerInternal_0x1 {
			constexpr uintptr_t Persona = 0x0060;
		}

		namespace __RecentPlayers_TA__FilterFriends_0x1 {
			constexpr uintptr_t PersonasData = 0x0060;
		}

		namespace __ReplayManager_TA__PlayReplayFile_0x1 {
			constexpr uintptr_t Map = 0x0060;
			constexpr uintptr_t URL = 0x0070;
		}

		namespace __SaveData_TA__FilterEquippedOnlineProducts_0x1 {
			constexpr uintptr_t EquippedInstanceIDs = 0x0060;
		}

		namespace __SaveData_TA__GetOnlineProductQuantity_0x2 {
			constexpr uintptr_t EquippedOnlineProducts = 0x0060;
			constexpr uintptr_t EquippedProfileProducts = 0x0070;
		}

		namespace __SaveData_TA__HandleOnlineProductsReceived_0x1 {
			constexpr uintptr_t ProductsSave = 0x0060;
		}

		namespace __SaveData_TA__ValidateLoadoutsWithProduct_0x1 {
			constexpr uintptr_t OnlineID = 0x0060;
		}

		namespace __SeqAct_SetLoadout_TA__ApplyNewChangesToProductAssets_0x1 {
			constexpr uintptr_t Mesh = 0x0060;
			constexpr uintptr_t Paint = 0x0068;
			constexpr uintptr_t TeamEdition = 0x0070;
			constexpr uintptr_t TeamID = 0x0078;
		}

		namespace __ShopAdsConfig_TA__Apply_0x1 {
			constexpr uintptr_t Data = 0x0060;
		}

		namespace __ShopCatalogueCacheSave_TA__HasNewContent_0x1 {
			constexpr uintptr_t CacheItemToCompare = 0x0060;
		}

		namespace __ShopNotificationsManager_TA__HandleAssetLoaded_0x1 {
			constexpr uintptr_t ShopNotificationData = 0x0078;
		}

		namespace __ShopNotificationsManager_TA__HandleGetItemShopNotifications_0x1 {
			constexpr uintptr_t ShopNotifications = 0x0060;
			constexpr uintptr_t NotificationManager = 0x0070;
		}

		namespace __ShopNotificationsManager_TA__LoadNotificationIcon_0x1 {
			constexpr uintptr_t ShopNotificationData = 0x0078;
		}

		namespace __SpecialEventConfig_TA__SyncImageForIndex_0x1 {
			constexpr uintptr_t I = 0x0060;
		}

		namespace __StatFactory_TA__OnGoalScored_0x1 {
			constexpr uintptr_t Hit = 0x0060;
			constexpr uintptr_t Ball = 0x0170;
			constexpr uintptr_t ScoreIndex = 0x0178;
		}

		namespace __StatusObserver_Products_TA__UpdateTriggersBySlot_0x1 {
			constexpr uintptr_t InSlotIndex = 0x0060;
		}

		namespace __StatusTriggerManager_TA__AddTriggerCondition_0x1 {
			constexpr uintptr_t InCondition = 0x0060;
		}

		namespace __StatusTriggerManager_TA__Init_0x2 {
			constexpr uintptr_t LP = 0x0060;
			constexpr uintptr_t TriggerCondition = 0x0068;
		}

		namespace __StatusTriggerManager_TA__RegisterTriggers_0x1 {
			constexpr uintptr_t InCondition = 0x0060;
			constexpr uintptr_t InTriggers = 0x0068;
		}

		namespace __StatusTriggerManager_TA__RemoveTriggers_0x1 {
			constexpr uintptr_t Clump = 0x0060;
		}

		namespace __StayAsPartySystem_TA__CreateVoteStartEvent_0x1 {
			constexpr uintptr_t StartEvent = 0x0060;
			constexpr uintptr_t Team = 0x0068;
		}

		namespace __StayAsPartySystem_TA__FindHumanTeammatesOfID_0x1 {
			constexpr uintptr_t PRIs = 0x0060;
			constexpr uintptr_t PlayerIndex = 0x0070;
		}

		namespace __StayAsPartySystem_TA__GFxLeaderActive_0x1 {
			constexpr uintptr_t Voter = 0x0060;
			constexpr uintptr_t PrimaryGroup = 0x0068;
		}

		namespace __StayAsPartySystem_TA__GFxPlayerJoinedParty_0x1 {
			constexpr uintptr_t LeaderChanged = 0x0060;
		}

		namespace __StayAsPartySystem_TA__HandlePartyChanged_0x1 {
			constexpr uintptr_t PartyEvent = 0x0060;
		}

		namespace __StayAsPartySystem_TA__IsOneParty_0x1 {
			constexpr uintptr_t PRIs = 0x0060;
		}

		namespace __StayAsPartySystem_TA__MergeEventConfirmFollower_0x1 {
			constexpr uintptr_t MergeEvent = 0x0060;
		}

		namespace __StayAsPartySystem_TA__ProcessVote_0x2 {
			constexpr uintptr_t VoterIter = 0x0060;
		}

		namespace __StayAsPartySystem_TA__SetVoteActive_0x1 {
			constexpr uintptr_t bActive = 0x0060;
		}

		namespace __StayAsPartyVote_TA__AddFollowerToLeader_0x1 {
			constexpr uintptr_t LeaderID = 0x0060;
		}

		namespace __StayAsPartyVote_TA__RemoveFollower_0x1 {
			constexpr uintptr_t FollowerID = 0x0060;
		}

		namespace __TAsyncResult__PrivilegeCheck_X__Copy_0x1 {
			constexpr uintptr_t Instance = 0x0060;
		}

		namespace __TAsyncResult__UserBugReportUploadResult_TA__Copy_0x1 {
			constexpr uintptr_t Instance = 0x0060;
		}

		namespace __TeamDemoAudioComponent_TA__HandlePreparingDemoFX_0x1 {
			constexpr uintptr_t InDemoData = 0x0060;
		}

		namespace __Team_TA__GetPartyFollowerIds_0x1 {
			constexpr uintptr_t PRI = 0x0060;
		}

		namespace __Team_TA__OnPlayerMarkedAsIdleBanned_0x1 {
			constexpr uintptr_t IdlePlayer = 0x0060;
		}

		namespace __TourBracketCache_TA__RequestCached_0x2 {
			constexpr uintptr_t BracketIndex = 0x0060;
		}

		namespace __TourBracketCache_TA__Request_0x1 {
			constexpr uintptr_t TournamentID = 0x0060;
		}

		namespace __TourBracketSimulator_TA__RoundStep_0x1 {
			constexpr uintptr_t BracketRound = 0x0060;
		}

		namespace __TourCheckInError_TA__AlertSignupError_0x1 {
			constexpr uintptr_t Shell = 0x0060;
			constexpr uintptr_t TournamentID = 0x0068;
		}

		namespace __TourCheckIn_TA__CheckIn_0x1 {
			constexpr uintptr_t LocalTeamMemberIDs = 0x0060;
			constexpr uintptr_t Party = 0x0070;
			constexpr uintptr_t Settings = 0x0078;
			constexpr uintptr_t PlayerID = 0x0080;
			constexpr uintptr_t AllTeamMemberIDs = 0x00C8;
		}

		namespace __TourGameUpdateDispatcher_TA__HandleUpdateGameSuccess_0x1 {
			constexpr uintptr_t TourServer = 0x0060;
		}

		namespace __TourGameUpdateDispatcher_TA__Init_0x3 {
			constexpr uintptr_t Settings = 0x0060;
		}

		namespace __TourList_TA__AddUnique_0x1 {
			constexpr uintptr_t Tournament = 0x0060;
		}

		namespace __TourList_TA__GetTournamentResult_0x1 {
			constexpr uintptr_t TournamentID = 0x0060;
		}

		namespace __TourPartyCheckIn_TA__HandleLeaderCheckIn_0x2 {
			constexpr uintptr_t Message = 0x0060;
			constexpr uintptr_t Transaction = 0x0068;
		}

		namespace __TourService_PsyNet_TA__CheckIn_0x1 {
			constexpr uintptr_t TourSettings = 0x0078;
			constexpr uintptr_t Settings = 0x0080;
			constexpr uintptr_t AllTeamMemberIDs = 0x00A0;
		}

		namespace __TourStatus_TA__GetStatus_0x1 {
			constexpr uintptr_t TournamentID = 0x0060;
		}

		namespace __TourSubscriptions_TA__GetTournament_0x1 {
			constexpr uintptr_t TourID = 0x0060;
		}

		namespace __TourUtils_TA__CalcTeamWins_0x1 {
			constexpr uintptr_t TeamID = 0x0060;
		}

		namespace __TriggerCondition_TA__AddTriggers_0x1 {
			constexpr uintptr_t Clump = 0x0060;
		}

		namespace __UIConfig_TA__FindXPTier_0x1 {
			constexpr uintptr_t XPAmount = 0x0060;
		}

		namespace __UserBugReportConfig_TA__GetCategories_0x1 {
			constexpr uintptr_t ParentCategory = 0x0060;
		}

		namespace __UserBugReportConfig_TA__GetCategory_0x1 {
			constexpr uintptr_t CategoryID = 0x0060;
		}

		namespace __UserSettingObserverEventCache_TA__RecordSetting_0x1 {
			constexpr uintptr_t PlayerID = 0x0060;
			constexpr uintptr_t Id = 0x00A8;
		}

		namespace __VanityQuery_TA__CompleteRequests_0x1 {
			constexpr uintptr_t I = 0x0060;
		}

		namespace __VanitySetManager_TA__RequestAvatars_0x1 {
			constexpr uintptr_t EmptyID = 0x0060;
		}

		namespace __VanitySetManager_TA__RequestBanners_0x1 {
			constexpr uintptr_t EmptyID = 0x0060;
		}

		namespace __VanitySetManager_TA__RequestsBorders_0x1 {
			constexpr uintptr_t EmptyID = 0x0060;
		}

		namespace __ViralItemConfig_TA__GetSeriesInfectedType_0x1 {
			constexpr uintptr_t SeriesID = 0x0060;
		}

		namespace __ViralItemConfig_TA__SetSeriesInfected_0x1 {
			constexpr uintptr_t InInfectedType = 0x0060;
		}

		namespace __ViralItemFXComponent_TA__ShouldShowAura_0x1 {
			constexpr uintptr_t GameEventStateName = 0x0060;
		}

		namespace __VoteActor_TA__GetVotes_0x1 {
			constexpr uintptr_t VoteStatus = 0x0060;
			constexpr uintptr_t bExcludeIdleBannedPlayers = 0x0064;
		}

		namespace __Wallet_TA__GetCurrency_0x1 {
			constexpr uintptr_t InCurrencyID = 0x0060;
		}

		namespace __Wallet_TA__GiveCurrencyDrops_0x1 {
			constexpr uintptr_t bIsCrewRefund = 0x0060;
			constexpr uintptr_t Message = 0x0068;
		}

		namespace ____ConsecutiveMatchTracker_TA__HandleGameEnded_0x1____ConsecutiveMatchTracker_TA__HandleGameEnded_0x1_0x1 {
			constexpr uintptr_t Player = 0x0060;
		}

		namespace ____GFxData_Clubs_TA__SetClubInvites_0x1____GFxData_Clubs_TA__SetClubInvites_0x1_0x1 {
			constexpr uintptr_t ClubInvite = 0x0060;
		}

		namespace ____GFxData_Mutators_TA__SetGameModeMutatorPresets_0x2____GFxData_Mutators_TA__SetGameModeMutatorPresets_0x2_0x1 {
			constexpr uintptr_t P = 0x0060;
		}

		namespace ____SaveData_TA__GetOnlineProductQuantity_0x2____SaveData_TA__GetOnlineProductQuantity_0x3_0x1 {
			constexpr uintptr_t Op = 0x0060;
		}

		namespace ____ShopNotificationsManager_TA__HandleGetItemShopNotifications_0x1____ShopNotificationsManager_TA__HandleGetItemShopNotifications_0x3_0x1 {
			constexpr uintptr_t ShopNotificationData = 0x0060;
		}

	}

	// ===== WINDRV MODULE =====
	namespace WinDrv {

		namespace FacebookWindows {
			constexpr uintptr_t VfTable_FTickableObject = 0x00E8;
			constexpr uintptr_t ChildProcHandle = 0x00F0;
		}

		namespace HttpRequestWindows {
			constexpr uintptr_t Request = 0x0078;
			constexpr uintptr_t RequestVerb = 0x0080;
			constexpr uintptr_t RequestURL = 0x0090;
			constexpr uintptr_t Payload = 0x0098;
		}

		namespace HttpRequestWindowsMcp {
			constexpr uintptr_t AppID = 0x00A8;
			constexpr uintptr_t AppSecret = 0x00B8;
		}

		namespace HttpResponseWindows {
			constexpr uintptr_t Response = 0x0060;
			constexpr uintptr_t Payload = 0x0068;
		}

		namespace WindowsClient {
			constexpr uintptr_t UnknownData00 = 0x0078;
			constexpr uintptr_t AudioDeviceClass = 0x0278;
			constexpr uintptr_t UnknownData01 = 0x0280;
			constexpr uintptr_t AllowJoystickInput = 0x02B8;
			constexpr uintptr_t UnknownData02 = 0x02BC;
		}

		namespace XnaForceFeedbackManager {
			constexpr uintptr_t UnknownData00 = 0x0098;
		}

	}

	// ===== XAUDIO2 MODULE =====
	namespace XAudio2 {

		namespace XAudio2Device {
			constexpr uintptr_t UnknownData00 = 0x03A4;
		}

	}

} // namespace Offsets

// Summary: 3968 classes with 19956 members across 11 modules
